[{"/home/faizan/jd-works/customer-web-app/src/index.js":"1","/home/faizan/jd-works/customer-web-app/src/App.js":"2","/home/faizan/jd-works/customer-web-app/src/serviceWorker.js":"3","/home/faizan/jd-works/customer-web-app/src/configs/AppConfig.js":"4","/home/faizan/jd-works/customer-web-app/src/CountryContext.js":"5","/home/faizan/jd-works/customer-web-app/src/views/index.js":"6","/home/faizan/jd-works/customer-web-app/src/redux/store/index.js":"7","/home/faizan/jd-works/customer-web-app/src/constants/ApiConstant.js":"8","/home/faizan/jd-works/customer-web-app/src/configs/EnvironmentConfig.js":"9","/home/faizan/jd-works/customer-web-app/src/constants/ThemeConstant.js":"10","/home/faizan/jd-works/customer-web-app/src/redux/reducers/index.js":"11","/home/faizan/jd-works/customer-web-app/src/redux/sagas/index.js":"12","/home/faizan/jd-works/customer-web-app/src/hooks/useBodyClass.js":"13","/home/faizan/jd-works/customer-web-app/src/redux/reducers/Theme.js":"14","/home/faizan/jd-works/customer-web-app/src/redux/reducers/Auth.js":"15","/home/faizan/jd-works/customer-web-app/src/redux/sagas/Auth.js":"16","/home/faizan/jd-works/customer-web-app/src/lang/index.js":"17","/home/faizan/jd-works/customer-web-app/src/layouts/app-layout/index.js":"18","/home/faizan/jd-works/customer-web-app/src/layouts/auth-layout/index.js":"19","/home/faizan/jd-works/customer-web-app/src/redux/constants/Auth.js":"20","/home/faizan/jd-works/customer-web-app/src/redux/constants/Theme.js":"21","/home/faizan/jd-works/customer-web-app/src/redux/actions/Auth.js":"22","/home/faizan/jd-works/customer-web-app/src/lang/entries/fr_FR.js":"23","/home/faizan/jd-works/customer-web-app/src/lang/entries/ja_JP.js":"24","/home/faizan/jd-works/customer-web-app/src/lang/entries/en_US.js":"25","/home/faizan/jd-works/customer-web-app/src/lang/entries/zh_CN.js":"26","/home/faizan/jd-works/customer-web-app/src/services/FirebaseService.js":"27","/home/faizan/jd-works/customer-web-app/src/utils/index.js":"28","/home/faizan/jd-works/customer-web-app/src/views/auth-views/index.js":"29","/home/faizan/jd-works/customer-web-app/src/auth/FirebaseAuth.js":"30","/home/faizan/jd-works/customer-web-app/src/views/auth-views/errors/error-page-2/index.js":"31","/home/faizan/jd-works/customer-web-app/src/views/auth-views/errors/error-page-1/index.js":"32","/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/forgot-password/index.js":"33","/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/login/index.js":"34","/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/register-2/index.js":"35","/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/login-1/index.js":"36","/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/login-2/index.js":"37","/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/register-1/index.js":"38","/home/faizan/jd-works/customer-web-app/src/views/auth-views/components/LoginForm.js":"39","/home/faizan/jd-works/customer-web-app/src/views/auth-views/components/RegisterForm.js":"40","/home/faizan/jd-works/customer-web-app/src/components/shared-components/Loading/index.js":"41","/home/faizan/jd-works/customer-web-app/src/auth/FirebaseOtp.js":"42","/home/faizan/jd-works/customer-web-app/src/utils/PhoneCode.js":"43","/home/faizan/jd-works/customer-web-app/src/assets/svg/icon.js":"44","/home/faizan/jd-works/customer-web-app/src/components/shared-components/Flex/index.js":"45","/home/faizan/jd-works/customer-web-app/src/services/JwtAuthService.js":"46","/home/faizan/jd-works/customer-web-app/src/constants/phoneCodeConstant.js":"47","/home/faizan/jd-works/customer-web-app/src/configs/FirebaseConfig.js":"48","/home/faizan/jd-works/customer-web-app/src/components/util-components/CustomIcon/index.js":"49","/home/faizan/jd-works/customer-web-app/src/auth/FetchInterceptor.js":"50","/home/faizan/jd-works/customer-web-app/src/history.js":"51","/home/faizan/jd-works/customer-web-app/src/configs/NavigationConfig.js":"52","/home/faizan/jd-works/customer-web-app/src/components/layout-components/Footer.js":"53","/home/faizan/jd-works/customer-web-app/src/components/layout-components/HeaderNav.js":"54","/home/faizan/jd-works/customer-web-app/src/components/layout-components/PageHeader.js":"55","/home/faizan/jd-works/customer-web-app/src/components/layout-components/MobileNav.js":"56","/home/faizan/jd-works/customer-web-app/src/components/layout-components/TopNav.js":"57","/home/faizan/jd-works/customer-web-app/src/components/layout-components/SideNav.js":"58","/home/faizan/jd-works/customer-web-app/src/views/app-views/index.js":"59","/home/faizan/jd-works/customer-web-app/src/components/layout-components/NavPanel.js":"60","/home/faizan/jd-works/customer-web-app/src/components/layout-components/Logo.js":"61","/home/faizan/jd-works/customer-web-app/src/components/layout-components/MenuContent.js":"62","/home/faizan/jd-works/customer-web-app/src/redux/actions/Theme.js":"63","/home/faizan/jd-works/customer-web-app/src/components/layout-components/AppBreadcrumb.js":"64","/home/faizan/jd-works/customer-web-app/src/views/app-views/free-user/FreeUser.js":"65","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/add-new-sensor/edit.js":"66","/home/faizan/jd-works/customer-web-app/src/components/layout-components/NavSearch/index.js":"67","/home/faizan/jd-works/customer-web-app/src/components/util-components/IntlMessage/index.js":"68","/home/faizan/jd-works/customer-web-app/src/components/layout-components/ThemeConfigurator.js":"69","/home/faizan/jd-works/customer-web-app/src/views/app-views/Reports/Index.js":"70","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/graphType.js":"71","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/add-new/index.js":"72","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/add-new-sensor/index.js":"73","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/view-reports/Index.js":"74","/home/faizan/jd-works/customer-web-app/src/views/app-views/jobsites/Jobsite.js":"75","/home/faizan/jd-works/customer-web-app/src/views/app-views/jobsites/AddNew/AddNew.js":"76","/home/faizan/jd-works/customer-web-app/src/views/app-views/operational-areas/add-new/index.js":"77","/home/faizan/jd-works/customer-web-app/src/views/app-views/operational-areas/operational-area.js":"78","/home/faizan/jd-works/customer-web-app/src/views/app-views/technician-management/AddNew/AddNew.js":"79","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryManagement.js":"80","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/InquiryDetails.js":"81","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/AddInquiry/AddInquiry.js":"82","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/index.js":"83","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/view-quotation/index.js":"84","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/schedule-order/index.js":"85","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/AddOrder/AddOrder.js":"86","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/order-detail/index.js":"87","/home/faizan/jd-works/customer-web-app/src/views/app-views/user-management/index.js":"88","/home/faizan/jd-works/customer-web-app/src/views/app-views/dashboard/index.js":"89","/home/faizan/jd-works/customer-web-app/src/views/app-views/user-management/add-new/index.js":"90","/home/faizan/jd-works/customer-web-app/src/views/app-views/user-management/view-details/index.js":"91","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/index.js":"92","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/index.js":"93","/home/faizan/jd-works/customer-web-app/src/components/layout-components/NavSearch/SearchInput.js":"94","/home/faizan/jd-works/customer-web-app/src/utils/role.js":"95","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/view-sensor/index.js":"96","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/view-past-event/index.js":"97","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/misc-files/index.js":"98","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/misc-files/add-new/index.js":"99","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/index.js":"100","/home/faizan/jd-works/customer-web-app/src/components/util-components/Icon/index.js":"101","/home/faizan/jd-works/customer-web-app/src/views/app-views/technician-management/index.js":"102","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TravelerRemarks.js":"103","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TravelerRemarksLabel.js":"104","/home/faizan/jd-works/customer-web-app/src/utils/Upload.js":"105","/home/faizan/jd-works/customer-web-app/src/components/shared-components/Filter.js":"106","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/MachineSensorComponent.js":"107","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/Progress.js":"108","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/Card/CardMachine.js":"109","/home/faizan/jd-works/customer-web-app/src/views/app-views/dashboard/CardInfo/CardInfo.js":"110","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/marker_images.js":"111","/home/faizan/jd-works/customer-web-app/src/components/shared-components/ConfirmModal.js":"112","/home/faizan/jd-works/customer-web-app/src/utils/CountrySelector.js":"113","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Upload-Photos/UploadPhotos.js":"114","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Vibration-Tests/VibrationTests.js":"115","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Vibration-Tests/EditVibrationTests.js":"116","/home/faizan/jd-works/customer-web-app/src/components/shared-components/ChartWidget/FrequencySpectrumChart.js":"117","/home/faizan/jd-works/customer-web-app/src/components/shared-components/ChartWidget/Top3LineChat.js":"118","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Winding-Electrical-Tests/StatorWindingElectricalTests.js":"119","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Auxiliaries-Checks/AuxiliariesChecks.js":"120","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/MiscellenousReport/MiscelleneousReport.js":"121","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Free-Volume-Check/FreeVolumeCheck.js":"122","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Flame-Path-Dimension/FlamePathDimension.js":"123","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotator-Shaft-Runout/RotatorShaftRunout.js":"124","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Mechanical_Inspection/MechanicalInspection.js":"125","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Free-Load-Test/EditFreeLoadTest.js":"126","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Free-Load-Test/FreeLoadTest.js":"127","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Insulation/Stator_winding_electrical_tests/EditStatorResistance.js":"128","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Insulation/Stator_winding_electrical_tests/EditStatorInsulation.js":"129","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/AuxiliaryCheckEdits/EditBrake.js":"130","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/AuxiliaryCheckEdits/EditPT_100.js":"131","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/AuxiliaryCheckEdits/EditOthers.js":"132","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TraverlerRemarksReplyContainer.js":"133","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TravelerRemarksReplyLabel.js":"134","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TravelerRemarksReply.js":"135","/home/faizan/jd-works/customer-web-app/src/components/shared-components/BarChart/BarChart.js":"136","/home/faizan/jd-works/customer-web-app/src/components/shared-components/Map/googleMap.js":"137","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Insulation/SIUpload.js":"138","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Insulation/EditSIModal.js":"139","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/SRUpload.js":"140","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/AuxiliaryCheckEdits/EditThermistor.js":"141","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/EditModal.js":"142","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Surge-Compression/EditSCModal.js":"143","/home/faizan/jd-works/customer-web-app/src/components/shared-components/lineChart/LineChart.js":"144","/home/faizan/jd-works/customer-web-app/src/components/shared-components/pieChartWidget/PieChartWidget.js":"145","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Polarization-Index/EditPolarizationIndexModal.js":"146","/home/faizan/jd-works/customer-web-app/src/components/shared-components/ChartWidget/LineChart.js":"147","/home/faizan/jd-works/customer-web-app/src/components/shared-components/ChartWidget/BarChart.js":"148","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotor-Insulation/EditRIModal.js":"149","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotor-Resistance/EditRRModal.js":"150","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotor-Resistance/RRUpload.js":"151","/home/faizan/jd-works/customer-web-app/src/utils/Csv.js":"152","/home/faizan/jd-works/customer-web-app/src/constants/Headers.js":"153","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/Card/CardOrder.js":"154","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/Card/CardOrder.js":"155","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/Card/Gauge.js":"156","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Flame-Path-Dimension/EditFlamePathDimension.js":"157","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Auxiliaries-Checks/EditAuxiliariesChecks.js":"158","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Free-Volume-Check/EditFreeVolumeCheck.js":"159","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Winding-Electrical-Tests/EditStatorWindingElectricalTests.js":"160","/home/faizan/jd-works/customer-web-app/src/components/layout-components/NavLanguage.js":"161","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Mechanical_Inspection/EditMechanicalInspection.js":"162","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotator-Shaft-Runout/EditRotatorShaftRunout.js":"163","/home/faizan/jd-works/customer-web-app/src/components/shared-components/ColorPicker/index.js":"164","/home/faizan/jd-works/customer-web-app/src/hooks/usePostalCodeLookup.js":"165","/home/faizan/jd-works/customer-web-app/src/utils/OneMapService.js":"166","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/sensor-analysis/index.js":"167","/home/faizan/jd-works/customer-web-app/src/utils/permissionUtils.js":"168","/home/faizan/jd-works/customer-web-app/src/contexts/PermissionsContext.js":"169"},{"size":464,"mtime":1752643978957,"results":"170","hashOfConfig":"171"},{"size":2077,"mtime":1756448426051,"results":"172","hashOfConfig":"171"},{"size":5086,"mtime":1752643978974,"results":"173","hashOfConfig":"171"},{"size":545,"mtime":1752643978949,"results":"174","hashOfConfig":"171"},{"size":1091,"mtime":1752643978799,"results":"175","hashOfConfig":"171"},{"size":1488,"mtime":1752643979097,"results":"176","hashOfConfig":"171"},{"size":844,"mtime":1752643978973,"results":"177","hashOfConfig":"171"},{"size":62,"mtime":1752643978951,"results":"178","hashOfConfig":"171"},{"size":440,"mtime":1752643978949,"results":"179","hashOfConfig":"171"},{"size":340,"mtime":1752643978954,"results":"180","hashOfConfig":"171"},{"size":204,"mtime":1752643978971,"results":"181","hashOfConfig":"171"},{"size":158,"mtime":1752643978972,"results":"182","hashOfConfig":"171"},{"size":553,"mtime":1752643978956,"results":"183","hashOfConfig":"171"},{"size":1502,"mtime":1752643978970,"results":"184","hashOfConfig":"171"},{"size":1460,"mtime":1752643978970,"results":"185","hashOfConfig":"171"},{"size":2930,"mtime":1752643978972,"results":"186","hashOfConfig":"171"},{"size":276,"mtime":1752643978960,"results":"187","hashOfConfig":"171"},{"size":2972,"mtime":1756448501150,"results":"188","hashOfConfig":"171"},{"size":325,"mtime":1752643978964,"results":"189","hashOfConfig":"171"},{"size":725,"mtime":1752643978968,"results":"190","hashOfConfig":"171"},{"size":501,"mtime":1752643978969,"results":"191","hashOfConfig":"171"},{"size":1649,"mtime":1752643978967,"results":"192","hashOfConfig":"171"},{"size":212,"mtime":1752643978958,"results":"193","hashOfConfig":"171"},{"size":212,"mtime":1752643978959,"results":"194","hashOfConfig":"171"},{"size":212,"mtime":1752643978958,"results":"195","hashOfConfig":"171"},{"size":209,"mtime":1752643978959,"results":"196","hashOfConfig":"171"},{"size":996,"mtime":1756368565311,"results":"197","hashOfConfig":"171"},{"size":6332,"mtime":1752643978978,"results":"198","hashOfConfig":"171"},{"size":1432,"mtime":1752643979096,"results":"199","hashOfConfig":"171"},{"size":797,"mtime":1756368541181,"results":"200","hashOfConfig":"171"},{"size":1528,"mtime":1752643979096,"results":"201","hashOfConfig":"171"},{"size":1876,"mtime":1752643979095,"results":"202","hashOfConfig":"171"},{"size":2120,"mtime":1752643979087,"results":"203","hashOfConfig":"171"},{"size":166,"mtime":1752643979091,"results":"204","hashOfConfig":"171"},{"size":2130,"mtime":1752643979093,"results":"205","hashOfConfig":"171"},{"size":26795,"mtime":1759026006632,"results":"206","hashOfConfig":"171"},{"size":2120,"mtime":1752643979090,"results":"207","hashOfConfig":"171"},{"size":1156,"mtime":1752643979092,"results":"208","hashOfConfig":"171"},{"size":3593,"mtime":1752643979093,"results":"209","hashOfConfig":"171"},{"size":4620,"mtime":1756229960744,"results":"210","hashOfConfig":"171"},{"size":570,"mtime":1752643978935,"results":"211","hashOfConfig":"171"},{"size":445,"mtime":1752643978908,"results":"212","hashOfConfig":"171"},{"size":725,"mtime":1752643978977,"results":"213","hashOfConfig":"171"},{"size":182481,"mtime":1752643978903,"results":"214","hashOfConfig":"171"},{"size":813,"mtime":1752643978933,"results":"215","hashOfConfig":"171"},{"size":1072,"mtime":1756229968756,"results":"216","hashOfConfig":"171"},{"size":18679,"mtime":1752643978954,"results":"217","hashOfConfig":"171"},{"size":381,"mtime":1752643978950,"results":"218","hashOfConfig":"171"},{"size":207,"mtime":1752643978942,"results":"219","hashOfConfig":"171"},{"size":1769,"mtime":1752643978907,"results":"220","hashOfConfig":"171"},{"size":85,"mtime":1752643978955,"results":"221","hashOfConfig":"171"},{"size":4473,"mtime":1756448681779,"results":"222","hashOfConfig":"171"},{"size":327,"mtime":1752643978910,"results":"223","hashOfConfig":"171"},{"size":3088,"mtime":1752646444395,"results":"224","hashOfConfig":"171"},{"size":473,"mtime":1752643978918,"results":"225","hashOfConfig":"171"},{"size":1658,"mtime":1752643978914,"results":"226","hashOfConfig":"171"},{"size":722,"mtime":1752643978921,"results":"227","hashOfConfig":"171"},{"size":1036,"mtime":1752643978920,"results":"228","hashOfConfig":"171"},{"size":8827,"mtime":1756325374040,"results":"229","hashOfConfig":"171"},{"size":1227,"mtime":1752643978915,"results":"230","hashOfConfig":"171"},{"size":1711,"mtime":1752643978912,"results":"231","hashOfConfig":"171"},{"size":8342,"mtime":1756448478119,"results":"232","hashOfConfig":"171"},{"size":1307,"mtime":1752643978967,"results":"233","hashOfConfig":"171"},{"size":1321,"mtime":1752643978910,"results":"234","hashOfConfig":"171"},{"size":5868,"mtime":1752643978993,"results":"235","hashOfConfig":"171"},{"size":14024,"mtime":1752643979006,"results":"236","hashOfConfig":"171"},{"size":857,"mtime":1752643978918,"results":"237","hashOfConfig":"171"},{"size":216,"mtime":1752643978947,"results":"238","hashOfConfig":"171"},{"size":5793,"mtime":1752643978920,"results":"239","hashOfConfig":"171"},{"size":7265,"mtime":1756145725837,"results":"240","hashOfConfig":"171"},{"size":4151,"mtime":1752643979050,"results":"241","hashOfConfig":"171"},{"size":19557,"mtime":1752643979009,"results":"242","hashOfConfig":"171"},{"size":12012,"mtime":1752643979007,"results":"243","hashOfConfig":"171"},{"size":9641,"mtime":1752643979056,"results":"244","hashOfConfig":"171"},{"size":14740,"mtime":1756970154879,"results":"245","hashOfConfig":"171"},{"size":27986,"mtime":1756227995905,"results":"246","hashOfConfig":"171"},{"size":4278,"mtime":1752643979071,"results":"247","hashOfConfig":"171"},{"size":11804,"mtime":1756444555847,"results":"248","hashOfConfig":"171"},{"size":41016,"mtime":1756225023497,"results":"249","hashOfConfig":"171"},{"size":6724,"mtime":1756444316718,"results":"250","hashOfConfig":"171"},{"size":19321,"mtime":1759027573709,"results":"251","hashOfConfig":"171"},{"size":16304,"mtime":1756222396892,"results":"252","hashOfConfig":"171"},{"size":10493,"mtime":1756444283701,"results":"253","hashOfConfig":"171"},{"size":6087,"mtime":1752643979080,"results":"254","hashOfConfig":"171"},{"size":18325,"mtime":1752643979079,"results":"255","hashOfConfig":"171"},{"size":23175,"mtime":1752643979075,"results":"256","hashOfConfig":"171"},{"size":23054,"mtime":1752643979077,"results":"257","hashOfConfig":"171"},{"size":12471,"mtime":1756442811300,"results":"258","hashOfConfig":"171"},{"size":15952,"mtime":1756230072216,"results":"259","hashOfConfig":"171"},{"size":75301,"mtime":1756448761108,"results":"260","hashOfConfig":"171"},{"size":65248,"mtime":1756448770993,"results":"261","hashOfConfig":"171"},{"size":8708,"mtime":1756444447779,"results":"262","hashOfConfig":"171"},{"size":101726,"mtime":1756455925345,"results":"263","hashOfConfig":"171"},{"size":2774,"mtime":1752643978917,"results":"264","hashOfConfig":"171"},{"size":1044,"mtime":1752643978979,"results":"265","hashOfConfig":"171"},{"size":12436,"mtime":1752643979065,"results":"266","hashOfConfig":"171"},{"size":5465,"mtime":1756438934897,"results":"267","hashOfConfig":"171"},{"size":3743,"mtime":1752643979053,"results":"268","hashOfConfig":"171"},{"size":8892,"mtime":1752643979053,"results":"269","hashOfConfig":"171"},{"size":387090,"mtime":1756439802605,"results":"270","hashOfConfig":"171"},{"size":250,"mtime":1752643978946,"results":"271","hashOfConfig":"171"},{"size":11120,"mtime":1752643979082,"results":"272","hashOfConfig":"171"},{"size":2891,"mtime":1752643978997,"results":"273","hashOfConfig":"171"},{"size":6465,"mtime":1752643978998,"results":"274","hashOfConfig":"171"},{"size":548,"mtime":1752643978978,"results":"275","hashOfConfig":"171"},{"size":281,"mtime":1752643978932,"results":"276","hashOfConfig":"171"},{"size":9535,"mtime":1756324091422,"results":"277","hashOfConfig":"171"},{"size":1578,"mtime":1752643979013,"results":"278","hashOfConfig":"171"},{"size":4452,"mtime":1756325693027,"results":"279","hashOfConfig":"171"},{"size":2303,"mtime":1756229904736,"results":"280","hashOfConfig":"171"},{"size":31496,"mtime":1752643979049,"results":"281","hashOfConfig":"171"},{"size":1413,"mtime":1752643978928,"results":"282","hashOfConfig":"171"},{"size":821,"mtime":1752643978976,"results":"283","hashOfConfig":"171"},{"size":12714,"mtime":1752643979045,"results":"284","hashOfConfig":"171"},{"size":18157,"mtime":1752643979046,"results":"285","hashOfConfig":"171"},{"size":19522,"mtime":1752643979046,"results":"286","hashOfConfig":"171"},{"size":7408,"mtime":1752643978924,"results":"287","hashOfConfig":"171"},{"size":5893,"mtime":1752643978926,"results":"288","hashOfConfig":"171"},{"size":13694,"mtime":1752643979043,"results":"289","hashOfConfig":"171"},{"size":16025,"mtime":1752643979014,"results":"290","hashOfConfig":"171"},{"size":9520,"mtime":1752643979025,"results":"291","hashOfConfig":"171"},{"size":12974,"mtime":1752643979022,"results":"292","hashOfConfig":"171"},{"size":21835,"mtime":1752643979018,"results":"293","hashOfConfig":"171"},{"size":12531,"mtime":1752643979028,"results":"294","hashOfConfig":"171"},{"size":12486,"mtime":1752643979023,"results":"295","hashOfConfig":"171"},{"size":9679,"mtime":1752643979019,"results":"296","hashOfConfig":"171"},{"size":21705,"mtime":1752643979020,"results":"297","hashOfConfig":"171"},{"size":13015,"mtime":1752643979040,"results":"298","hashOfConfig":"171"},{"size":17440,"mtime":1752643979040,"results":"299","hashOfConfig":"171"},{"size":11640,"mtime":1752643979032,"results":"300","hashOfConfig":"171"},{"size":6684,"mtime":1752643979034,"results":"301","hashOfConfig":"171"},{"size":4703,"mtime":1752643979033,"results":"302","hashOfConfig":"171"},{"size":3730,"mtime":1752643979000,"results":"303","hashOfConfig":"171"},{"size":1095,"mtime":1752643978999,"results":"304","hashOfConfig":"171"},{"size":840,"mtime":1752643978999,"results":"305","hashOfConfig":"171"},{"size":1903,"mtime":1752643978923,"results":"306","hashOfConfig":"171"},{"size":1126,"mtime":1752643978935,"results":"307","hashOfConfig":"171"},{"size":6404,"mtime":1752643979038,"results":"308","hashOfConfig":"171"},{"size":12023,"mtime":1752643979038,"results":"309","hashOfConfig":"171"},{"size":6404,"mtime":1752643979036,"results":"310","hashOfConfig":"171"},{"size":6073,"mtime":1752643979035,"results":"311","hashOfConfig":"171"},{"size":23776,"mtime":1752643979036,"results":"312","hashOfConfig":"171"},{"size":9617,"mtime":1752643979044,"results":"313","hashOfConfig":"171"},{"size":1718,"mtime":1752643978939,"results":"314","hashOfConfig":"171"},{"size":1919,"mtime":1752643978940,"results":"315","hashOfConfig":"171"},{"size":10469,"mtime":1752643979026,"results":"316","hashOfConfig":"171"},{"size":10356,"mtime":1756324065195,"results":"317","hashOfConfig":"171"},{"size":2517,"mtime":1752643978924,"results":"318","hashOfConfig":"171"},{"size":12043,"mtime":1752643979029,"results":"319","hashOfConfig":"171"},{"size":9392,"mtime":1752643979030,"results":"320","hashOfConfig":"171"},{"size":6406,"mtime":1752643979031,"results":"321","hashOfConfig":"171"},{"size":602,"mtime":1752643978977,"results":"322","hashOfConfig":"171"},{"size":4184,"mtime":1752643978953,"results":"323","hashOfConfig":"171"},{"size":8869,"mtime":1752643979076,"results":"324","hashOfConfig":"171"},{"size":5166,"mtime":1759027561878,"results":"325","hashOfConfig":"171"},{"size":1565,"mtime":1752643979005,"results":"326","hashOfConfig":"171"},{"size":10033,"mtime":1752643979016,"results":"327","hashOfConfig":"171"},{"size":25623,"mtime":1752643979015,"results":"328","hashOfConfig":"171"},{"size":63330,"mtime":1752643979021,"results":"329","hashOfConfig":"171"},{"size":13858,"mtime":1752643979042,"results":"330","hashOfConfig":"171"},{"size":2271,"mtime":1752643978914,"results":"331","hashOfConfig":"171"},{"size":20251,"mtime":1752643979023,"results":"332","hashOfConfig":"171"},{"size":28306,"mtime":1752643979027,"results":"333","hashOfConfig":"171"},{"size":1270,"mtime":1752643978928,"results":"334","hashOfConfig":"171"},{"size":2438,"mtime":1756222202929,"results":"335","hashOfConfig":"171"},{"size":2439,"mtime":1756222170058,"results":"336","hashOfConfig":"171"},{"size":63612,"mtime":1756448816407,"results":"337","hashOfConfig":"171"},{"size":12409,"mtime":1756449640950,"results":"338","hashOfConfig":"171"},{"size":1407,"mtime":1756448403902,"results":"339","hashOfConfig":"171"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},"1cywhtd",{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"342"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"342"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"342"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"342"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"342"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"342"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"342"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"342"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"342"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"342"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"342"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"342"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"342"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"342"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"342"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"342"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"342"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"342"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"342"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"342"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"523","messages":"524","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"342"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"342"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"342"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"342"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"342"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"342"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"342"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"342"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"342"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"342"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":60,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"342"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"342"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"342"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"342"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"342"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"342"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":114,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577","usedDeprecatedRules":"342"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582","usedDeprecatedRules":"342"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"342"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"342"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"342"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"342"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"342"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"342"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"342"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"342"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"342"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"342"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"629","usedDeprecatedRules":"342"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"342"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"342"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"342"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"342"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"342"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"342"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"342"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"342"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"342"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661","usedDeprecatedRules":"342"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664","usedDeprecatedRules":"342"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"342"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"342"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673","usedDeprecatedRules":"342"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"342"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"342"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"688","usedDeprecatedRules":"342"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"342"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"342"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"342"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"342"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"719","usedDeprecatedRules":"342"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"722","messages":"723","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"342"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"342"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"342"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"342"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736","usedDeprecatedRules":"342"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"342"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"342"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"751","usedDeprecatedRules":"342"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754","usedDeprecatedRules":"342"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},"/home/faizan/jd-works/customer-web-app/src/index.js",[],["759","760"],"/home/faizan/jd-works/customer-web-app/src/App.js",[],"/home/faizan/jd-works/customer-web-app/src/serviceWorker.js",[],"/home/faizan/jd-works/customer-web-app/src/configs/AppConfig.js",[],"/home/faizan/jd-works/customer-web-app/src/CountryContext.js",["761","762","763"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { axiosInstance } from 'App';\r\n\r\n// Create the Context\r\nconst CountryContext = createContext();\r\n\r\n// Create a provider component\r\nconst CountryProvider = ({ children }) => {\r\n  const [countryList, setCountryList] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch data on component mount\r\n  useEffect(() => {\r\n    const fetchCountryData = async () => {\r\n      try {\r\n        const response = await axiosInstance.get('/api/web/country/list'); // Adjust your base URL if necessary\r\n        setCountryList(response.data.items); // Assuming the data is in response.data\r\n      } catch (err) {\r\n        // setError(err.message);\r\n      }\r\n      \r\n    };\r\n\r\n    if(localStorage.getItem('token')) {\r\n      fetchCountryData();\r\n  }\r\n  }, []);\r\n\r\n  return (\r\n    <CountryContext.Provider value={{ countryList}}>\r\n      {children}\r\n    </CountryContext.Provider>\r\n  );\r\n};\r\n\r\nexport { CountryProvider, CountryContext };\r\n","/home/faizan/jd-works/customer-web-app/src/views/index.js",[],"/home/faizan/jd-works/customer-web-app/src/redux/store/index.js",[],"/home/faizan/jd-works/customer-web-app/src/constants/ApiConstant.js",[],"/home/faizan/jd-works/customer-web-app/src/configs/EnvironmentConfig.js",[],"/home/faizan/jd-works/customer-web-app/src/constants/ThemeConstant.js",[],"/home/faizan/jd-works/customer-web-app/src/redux/reducers/index.js",[],"/home/faizan/jd-works/customer-web-app/src/redux/sagas/index.js",[],"/home/faizan/jd-works/customer-web-app/src/hooks/useBodyClass.js",[],"/home/faizan/jd-works/customer-web-app/src/redux/reducers/Theme.js",[],"/home/faizan/jd-works/customer-web-app/src/redux/reducers/Auth.js",[],"/home/faizan/jd-works/customer-web-app/src/redux/sagas/Auth.js",[],"/home/faizan/jd-works/customer-web-app/src/lang/index.js",[],"/home/faizan/jd-works/customer-web-app/src/layouts/app-layout/index.js",[],"/home/faizan/jd-works/customer-web-app/src/layouts/auth-layout/index.js",[],"/home/faizan/jd-works/customer-web-app/src/redux/constants/Auth.js",[],"/home/faizan/jd-works/customer-web-app/src/redux/constants/Theme.js",[],"/home/faizan/jd-works/customer-web-app/src/redux/actions/Auth.js",[],"/home/faizan/jd-works/customer-web-app/src/lang/entries/fr_FR.js",[],"/home/faizan/jd-works/customer-web-app/src/lang/entries/ja_JP.js",[],"/home/faizan/jd-works/customer-web-app/src/lang/entries/en_US.js",[],"/home/faizan/jd-works/customer-web-app/src/lang/entries/zh_CN.js",[],"/home/faizan/jd-works/customer-web-app/src/services/FirebaseService.js",[],"/home/faizan/jd-works/customer-web-app/src/utils/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/index.js",[],"/home/faizan/jd-works/customer-web-app/src/auth/FirebaseAuth.js",[],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/errors/error-page-2/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/errors/error-page-1/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/forgot-password/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/login/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/register-2/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/login-1/index.js",["764","765","766","767","768","769","770","771","772","773","774","775","776","777","778"],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/login-2/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/authentication/register-1/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/auth-views/components/LoginForm.js",["779","780","781"],"import React, { useEffect } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Form, Input, Divider, Alert } from \"antd\";\r\nimport { MailOutlined, LockOutlined } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types';\r\nimport { GoogleSVG, FacebookSVG } from 'assets/svg/icon';\r\nimport CustomIcon from 'components/util-components/CustomIcon'\r\nimport {  \r\n\tshowLoading, \r\n\tshowAuthMessage, \r\n\thideAuthMessage,\r\n\tauthenticated\r\n} from 'redux/actions/Auth';\r\nimport JwtAuthService from 'services/JwtAuthService'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\"\r\n\r\nexport const LoginForm = (props) => {\r\n\tlet history = useHistory();\r\n\r\n\tconst { \r\n\t\totherSignIn, \r\n\t\tshowForgetPassword, \r\n\t\thideAuthMessage,\r\n\t\tonForgetPasswordClick,\r\n\t\tshowLoading,\r\n\t\textra,\r\n\t\tloading,\r\n\t\tshowMessage,\r\n\t\tmessage,\r\n\t\tauthenticated,\r\n\t\tshowAuthMessage,\r\n\t\ttoken,\r\n\t\tredirect,\r\n\t\tallowRedirect\r\n\t} = props\r\n\r\n\tconst onLogin = values => {\r\n\t\tshowLoading()\r\n\t\tconst fakeToken = 'fakeToken'\r\n\t\tJwtAuthService.login(values).then(resp => {\r\n\t\t\tauthenticated(fakeToken)\r\n\t\t}).then(e => {\r\n\t\t\tshowAuthMessage(e)\r\n\t\t})\r\n\t};\r\n\r\n\tconst onGoogleLogin = () => {\r\n\t\tshowLoading()\r\n\t}\r\n\r\n\tconst onFacebookLogin = () => {\r\n\t\tshowLoading()\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (token !== null && allowRedirect) {\r\n\t\t\thistory.push(redirect)\r\n\t\t}\r\n\t\tif(showMessage) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\thideAuthMessage();\r\n\t\t}, 3000);\r\n\t\t}\r\n\t});\r\n\t\r\n\tconst renderOtherSignIn = (\r\n\t\t<div>\r\n\t\t\t<Divider>\r\n\t\t\t\t<span className=\"text-muted font-size-base font-weight-normal\">or connect with</span>\r\n\t\t\t</Divider>\r\n\t\t\t<div className=\"d-flex justify-content-center\">\r\n\t\t\t\t<Button \r\n\t\t\t\t\tonClick={() => onGoogleLogin()} \r\n\t\t\t\t\tclassName=\"mr-2\" \r\n\t\t\t\t\tdisabled={loading} \r\n\t\t\t\t\ticon={<CustomIcon svg={GoogleSVG}/>}\r\n\t\t\t\t>\r\n\t\t\t\t\tGoogle\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button \r\n\t\t\t\t\tonClick={() => onFacebookLogin()} \r\n\t\t\t\t\ticon={<CustomIcon svg={FacebookSVG}/>}\r\n\t\t\t\t\tdisabled={loading} \r\n\t\t\t\t>\r\n\t\t\t\t\tFacebook\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<motion.div \r\n\t\t\t\tinitial={{ opacity: 0, marginBottom: 0 }} \r\n\t\t\t\tanimate={{ \r\n\t\t\t\t\topacity: showMessage ? 1 : 0,\r\n\t\t\t\t\tmarginBottom: showMessage ? 20 : 0 \r\n\t\t\t\t}}> \r\n\t\t\t\t<Alert type=\"error\" showIcon message={message}></Alert>\r\n\t\t\t</motion.div>\r\n\t\t\t<Form \r\n\t\t\t\tlayout=\"vertical\" \r\n\t\t\t\tname=\"login-form\"\r\n\t\t\t\tonFinish={onLogin}\r\n\t\t\t>\r\n\t\t\t\t<Form.Item \r\n\t\t\t\t\tname=\"email\" \r\n\t\t\t\t\tlabel=\"Email\" \r\n\t\t\t\t\trules={[\r\n\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\t\tmessage: 'Please input your email',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\ttype: 'email',\r\n\t\t\t\t\t\t\tmessage: 'Please enter a validate email!'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]}>\r\n\t\t\t\t\t<Input prefix={<MailOutlined className=\"text-primary\" />}/>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item>\r\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\" block loading={loading}>\r\n\t\t\t\t\t\tSign In\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t{\r\n\t\t\t\t\totherSignIn ? renderOtherSignIn : null\r\n\t\t\t\t}\r\n\t\t\t\t{ extra }\r\n\t\t\t</Form>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nLoginForm.propTypes = {\r\n\totherSignIn: PropTypes.bool,\r\n\tshowForgetPassword: PropTypes.bool,\r\n\textra: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.element\r\n\t]),\r\n};\r\n\r\nLoginForm.defaultProps = {\r\n\totherSignIn: true,\r\n\tshowForgetPassword: false\r\n};\r\n\r\nconst mapStateToProps = ({auth}) => {\r\n\tconst {loading, message, showMessage, token, redirect} = auth;\r\n  \treturn {loading, message, showMessage, token, redirect}\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\tshowAuthMessage,\r\n\tshowLoading,\r\n\thideAuthMessage,\r\n\tauthenticated\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm)\r\n","/home/faizan/jd-works/customer-web-app/src/views/auth-views/components/RegisterForm.js",[],"/home/faizan/jd-works/customer-web-app/src/components/shared-components/Loading/index.js",[],"/home/faizan/jd-works/customer-web-app/src/auth/FirebaseOtp.js",["782"],"// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport firebaseConfig from \"configs/FirebaseConfig\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n// const app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app);\r\n// const analytics = getAnalytics(app);","/home/faizan/jd-works/customer-web-app/src/utils/PhoneCode.js",[],"/home/faizan/jd-works/customer-web-app/src/assets/svg/icon.js",[],"/home/faizan/jd-works/customer-web-app/src/components/shared-components/Flex/index.js",[],"/home/faizan/jd-works/customer-web-app/src/services/JwtAuthService.js",[],"/home/faizan/jd-works/customer-web-app/src/constants/phoneCodeConstant.js",[],"/home/faizan/jd-works/customer-web-app/src/configs/FirebaseConfig.js",[],"/home/faizan/jd-works/customer-web-app/src/components/util-components/CustomIcon/index.js",[],"/home/faizan/jd-works/customer-web-app/src/auth/FetchInterceptor.js",[],"/home/faizan/jd-works/customer-web-app/src/history.js",[],"/home/faizan/jd-works/customer-web-app/src/configs/NavigationConfig.js",["783","784","785","786","787","788","789","790"],"import { \r\n  BellOutlined,\r\n  DashboardOutlined,\r\n  EnvironmentOutlined,\r\n  FileOutlined,\r\n  LaptopOutlined,\r\n  QuestionCircleOutlined,\r\n  SettingOutlined,\r\n  TeamOutlined,\r\n  ToolOutlined,\r\n  UserOutlined,\r\n  UserSwitchOutlined\r\n} from '@ant-design/icons';\r\nimport { Masters, StaffManage } from 'assets/svg/icon';\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\r\nimport { hasSectionAccess, hasPermission } from 'utils/permissionUtils';\r\n\r\nif(localStorage.getItem(\"dashboardType\")==\"workshop\"){\r\n  var dashBoardNavTree =[\r\n    {\r\n      key: \"d\",\r\n      // path: `${APP_PREFIX_PATH}/dashboard`,\r\n      path: \"\",\r\n      title: \" \",\r\n      icon: \"\",\r\n      breadcrumb: false,\r\n      submenu: [{\r\n   \r\n  \r\n    key: 'machine-and-sensors',\r\n    path: `${APP_PREFIX_PATH}/machine-and-sensors`,\r\n    title: 'Machine & Sensors',\r\n    icon: ToolOutlined,\r\n    breadcrumb: false,\r\n    submenu: []\r\n  },\r\n \r\n  {\r\n    key: 'reports',\r\n    path: `${APP_PREFIX_PATH}/reports`,\r\n    title: 'Reports',\r\n    icon: FileOutlined,\r\n    breadcrumb: false,\r\n    submenu: []\r\n  },\r\n  // {\r\n  //   key: 'notifications',\r\n  //   path: `${APP_PREFIX_PATH}/notifications`,\r\n  //   title: 'Notifications',\r\n  //   icon: BellOutlined,\r\n  //   breadcrumb: false,\r\n  //   submenu: []\r\n  // }\r\n  ],}]\r\n}\r\nelse{\r\n  var dashBoardNavTree =[\r\n    {\r\n      key: \"d\",\r\n      // path: `${APP_PREFIX_PATH}/dashboard`,\r\n      path: \"\",\r\n      title: \" \",\r\n      icon: \"\",\r\n      breadcrumb: false,\r\n      submenu: [{\r\n    key: 'dashboard',\r\n    path: `${APP_PREFIX_PATH}/dashboard`,\r\n    title: 'Dashboard',\r\n    icon: DashboardOutlined,\r\n    breadcrumb: false,\r\n    submenu: []\r\n  },\r\n  ...(localStorage.getItem(\"parent_id\") === \"null\" ? [] : \r\n      hasSectionAccess('user_management') ? [\r\n    {\r\n      key: \"user-management\",\r\n      path: `${APP_PREFIX_PATH}/user-management`,\r\n      title: \"User Management\",\r\n      icon: UserSwitchOutlined,\r\n      breadcrumb: false,\r\n      submenu: [\r\n        {\r\n          key: 'user-accounts',\r\n          path: `${APP_PREFIX_PATH}/user-management/user-accounts`,\r\n          title: 'User Accounts',\r\n          breadcrumb: false,\r\n          submenu: []\r\n        },\r\n      ],\r\n    },\r\n  ] : []),\r\n\r\n  ...(hasSectionAccess('order_management') ? [{\r\n    key: 'order-management',\r\n    path: `${APP_PREFIX_PATH}/order-management`,\r\n    title: 'Order Management',\r\n    icon: SettingOutlined,\r\n    breadcrumb: false,\r\n    submenu: []\r\n  }] : []),\r\n  ...(hasSectionAccess('inquiry_management') ? [{\r\n    key: 'inquiry-management',\r\n    path: `${APP_PREFIX_PATH}/inquiry-management`,\r\n    title: 'Inquiry Management',\r\n    icon: QuestionCircleOutlined,\r\n    breadcrumb: false,\r\n    submenu: []\r\n  }] : []),\r\n  ...(hasSectionAccess('machines_and_sensors') ? [{\r\n    key: 'machine-and-sensors',\r\n    path: `${APP_PREFIX_PATH}/machine-and-sensors`,\r\n    title: 'Machine & Sensors',\r\n    icon: ToolOutlined,\r\n    breadcrumb: false,\r\n    submenu: []\r\n  }] : []),\r\n  ...(hasSectionAccess('technician_management') ? [{\r\n    key: 'technician-management',\r\n    path: `${APP_PREFIX_PATH}/technician-management`,\r\n    title: 'Technician Management',\r\n    icon: LaptopOutlined,\r\n    breadcrumb: false,\r\n    submenu: []\r\n  }] : []),\r\n  ...((hasSectionAccess('job_sites') || hasSectionAccess('operational_areas')) ? [{\r\n    key: 'operator-master',\r\n    path: `${APP_PREFIX_PATH}/operator-master`,\r\n    title: 'Operation Master',\r\n    icon: EnvironmentOutlined,\r\n    breadcrumb: false,\r\n    submenu: [\r\n      ...(hasSectionAccess('job_sites') ? [{\r\n        key: 'jobsites',\r\n        path: `${APP_PREFIX_PATH}/operator-master/jobsites`,\r\n        title: 'Jobsites',\r\n        breadcrumb: false,\r\n        submenu: []\r\n      }] : []),\r\n      ...(hasSectionAccess('operational_areas') ? [{\r\n        key: 'operational-areas',\r\n        path: `${APP_PREFIX_PATH}/operator-master/operational-areas`,\r\n        title: 'Areas',\r\n        breadcrumb: false,\r\n        submenu: []\r\n      }] : [])\r\n    ],\r\n  }] : []),\r\n  // {\r\n  //   key: 'reports',\r\n  //   path: `${APP_PREFIX_PATH}/reports`,\r\n  //   title: 'Reports',\r\n  //   icon: FileOutlined,\r\n  //   breadcrumb: false,\r\n  //   submenu: []\r\n  // },\r\n  // {\r\n  //   key: 'notifications',\r\n  //   path: `${APP_PREFIX_PATH}/notifications`,\r\n  //   title: 'Notifications',\r\n  //   icon: BellOutlined,\r\n  //   breadcrumb: false,\r\n  //   submenu: []\r\n  // }\r\n  ],}]\r\n}\r\n\r\nconst navigationConfig = [\r\n  ...dashBoardNavTree\r\n]\r\n\r\nexport default navigationConfig;\r\n","/home/faizan/jd-works/customer-web-app/src/components/layout-components/Footer.js",[],"/home/faizan/jd-works/customer-web-app/src/components/layout-components/HeaderNav.js",["791","792"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout } from \"antd\";\r\nimport { MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons';\r\nimport Logo from './Logo';\r\nimport NavPanel from './NavPanel';\r\nimport NavSearch  from './NavSearch';\r\nimport { toggleCollapsedNav, onMobileNavToggle } from 'redux/actions/Theme';\r\nimport { NAV_TYPE_TOP, SIDE_NAV_COLLAPSED_WIDTH, SIDE_NAV_WIDTH } from 'constants/ThemeConstant';\r\nimport utils from 'utils'\r\nimport \"./MenuContent.css\"\r\n\r\n\r\nconst { Header } = Layout;\r\n\r\nexport const HeaderNav = props => {\r\n  const { navCollapsed, mobileNav, navType, headerNavColor, toggleCollapsedNav, onMobileNavToggle, isMobile, currentTheme, direction } = props;\r\n  const [searchActive, setSearchActive] = useState(false)\r\n\r\n  const onSearchClose = () => {\r\n    setSearchActive(false)\r\n  }\r\n\r\n  const onToggle = () => {\r\n    if(!isMobile) {\r\n      toggleCollapsedNav(!navCollapsed)\r\n    } else {\r\n      onMobileNavToggle(!mobileNav)\r\n    }\r\n  }\r\n\r\n  const isNavTop = navType === NAV_TYPE_TOP ? true : false\r\n  const mode = ()=> {\r\n    if(!headerNavColor) {\r\n      return utils.getColorContrast(currentTheme === 'dark' ? '#00000' : '#ffffff' )\r\n    }\r\n    return utils.getColorContrast(headerNavColor)\r\n  }\r\n  const navMode = mode()\r\n  const getNavWidth = () => {\r\n    if(isNavTop || isMobile) {\r\n      return '0px'\r\n    }\r\n    if(navCollapsed) {\r\n      return `${SIDE_NAV_COLLAPSED_WIDTH}px`\r\n    } else {\r\n      return `${SIDE_NAV_WIDTH}px`\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(!isMobile) {\r\n      onSearchClose()\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Header className={`app-header ${navMode}`} style={{backgroundColor: headerNavColor}}>\r\n      <div className={`app-header-wrapper ${isNavTop ? 'layout-top-nav' : ''}`}>\r\n        <Logo logoType={navMode}/>\r\n        <div className=\"nav\" style={{width: `calc(100% - ${getNavWidth()})`}}>\r\n          <div className=\"nav-left\">\r\n            <ul className=\"ant-menu ant-menu-root ant-menu-horizontal toggle-icon\">          \r\n              {\r\n                isNavTop && !isMobile ?\r\n                null\r\n                :\r\n                <li className=\"ant-menu-item ant-menu-item-only-child\" onClick={() => {onToggle()}}>\r\n                  {navCollapsed || isMobile ? <MenuUnfoldOutlined className=\"nav-icon\" style={{ color: 'white' }} /> : <MenuFoldOutlined className=\"nav-icon\" style={{ color: 'white' }} />}\r\n                </li>\r\n              }\r\n            </ul>\r\n          </div>\r\n          <div className=\"nav-right\">\r\n            {/* <NavPanel direction={direction} /> */}\r\n          </div>\r\n          <NavSearch active={searchActive} close={onSearchClose}/>\r\n        </div>\r\n      </div>\r\n    </Header>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({ theme }) => {\r\n  const { navCollapsed, navType, headerNavColor, mobileNav, currentTheme, direction } =  theme;\r\n  return { navCollapsed, navType, headerNavColor, mobileNav, currentTheme, direction }\r\n};\r\n\r\nexport default connect(mapStateToProps, {toggleCollapsedNav, onMobileNavToggle})(HeaderNav);","/home/faizan/jd-works/customer-web-app/src/components/layout-components/PageHeader.js",[],"/home/faizan/jd-works/customer-web-app/src/components/layout-components/MobileNav.js",[],"/home/faizan/jd-works/customer-web-app/src/components/layout-components/TopNav.js",[],"/home/faizan/jd-works/customer-web-app/src/components/layout-components/SideNav.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/index.js",["793"],"import React, { lazy, Suspense, useEffect } from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Loading from 'components/shared-components/Loading';\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig'\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom\";\r\n\r\nexport const AppViews = () => {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"token\")) {\r\n\r\n    } else {\r\n      history.push('/auth/login')\r\n    }\r\n\r\n  });\r\n  return (\r\n    <Suspense fallback={<Loading cover=\"content\" />}>\r\n      <Switch>\r\n        <Route exact path={`${APP_PREFIX_PATH}/dashboard`} component={lazy(() => import(`./dashboard`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/user-management/user-accounts`} component={lazy(() => import(`./user-management`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/user-management/user-accounts/add-new`} component={lazy(() => import(`./user-management/add-new`))} /> \r\n        <Route exact path={`${APP_PREFIX_PATH}/user-management/user-accounts/edit/:id`} component={lazy(() => import(`./user-management/add-new`))} /> \r\n        <Route exact path={`${APP_PREFIX_PATH}/user-management/user-accounts/account-details/:id`} component={lazy(() => import(`./user-management/view-details`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/user-management/free-user`} component={lazy(() => import(`./free-user/FreeUser`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/order-management`} component={lazy(() => import(`./order-management/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/order-management/add-order`} component={lazy(() => import(`./order-management/AddOrder/AddOrder`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/order-management/order-detail/:id`} component={lazy(() => import(`./order-management/order-detail/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/order-management/view-quotation`} component={lazy(() => import(`./order-management/view-quotation/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/order-management/orders`} component={lazy(() => import(`./order-management/schedule-order/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/inquiry-management`} component={lazy(() => import(`./inquiry-management/InquiryManagement`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/inquiry-management/new-inquiry`} component={lazy(() => import(`./inquiry-management/AddInquiry/AddInquiry`))} />\r\n      \r\n        <Route exact path={`${APP_PREFIX_PATH}/inquiry-management/inquiry-details/:id`} component={lazy(() => import(`./inquiry-management/InquiryDetails/InquiryDetails`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/technician-management`} component={lazy(() => import(`./technician-management`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/technician-management/addNew`} component={lazy(() => import(`./technician-management/AddNew/AddNew`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/technician-management/edit/:id`} component={lazy(() => import(`./technician-management/AddNew/AddNew`))} />\r\n\r\n\r\n\r\n        <Route exact path={`${APP_PREFIX_PATH}/operator-master/operational-areas`} component={lazy(() => import(`./operational-areas/operational-area`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/operator-master/operational-areas/add-new`} component={lazy(() => import(`./operational-areas/add-new/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/operator-master/operational-areas/edit/:id`} component={lazy(() => import(`./operational-areas/add-new/index`))} />\r\n\r\n        <Route exact path={`${APP_PREFIX_PATH}/operator-master/jobsites`} component={lazy(() => import(`./jobsites/Jobsite`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/operator-master/jobsites/add-new`} component={lazy(() => import(`./jobsites/AddNew/AddNew`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/operator-master/jobsites/edit/:id`} component={lazy(() => import(`./jobsites/AddNew/AddNew`))} /> \r\n    \r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors`} component={lazy(() => import(`./machine-and-sensor`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/:id`} component={lazy(() => import(`./machine-and-sensor/machine-details`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/life-cycle-management/add-new-life-cycle-event/:id`} component={lazy(() => import(`./machine-and-sensor/machine-details/add-new-life-cycle-event`))} /> \r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/life-cycle-management/edit-life-cycle-event/:id`} component={lazy(() => import(`./machine-and-sensor/machine-details/add-new-life-cycle-event`))} /> \r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/view-reports/:id`} component={lazy(() => import(`./machine-and-sensor/machine-details/view-reports/Index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/sensor/misc-files/:id`} component={lazy(() => import(`./machine-and-sensor/machine-details/misc-files`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/sensor/view-past-event/:id`} component={lazy(() => import(`./machine-and-sensor/machine-details/view-past-event`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/sensor/misc-files/:id/add-new`} component={lazy(() => import(`./machine-and-sensor/machine-details/misc-files/add-new`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/add-new`} component={lazy(() => import(`./machine-and-sensor/add-new`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/edit/:id`} component={lazy(() => import(`./machine-and-sensor/add-new`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/sensor-list/add-new/:id`} component={lazy(() => import(`./machine-and-sensor/add-new-sensor/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/sensor-list/edit-sensor/:id/:editId`} component={lazy(() => import(`./machine-and-sensor/add-new-sensor/edit.js`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/sensor-list/:id`} component={lazy(() => import(`./machine-and-sensor/view-sensor`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/sensor-analysis/:machineId/:sensorId`} component={lazy(() => import(`./machine-and-sensor/sensor-analysis`))} />\r\n\r\n\r\n        {/* <Route exact path={`${APP_PREFIX_PATH}/machine-range/edit/:id`} component={lazy(() => import(`./machine-range/add-new/index`))} /> */}\r\n        {/* <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details`} component={lazy(() => import(`./machine-and-sensor/machine-details/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/view-past-event`} component={lazy(() => import(`./machine-and-sensor/machine-details/view-past-event/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/misc`} component={lazy(() => import(`./machine-and-sensor/machine-details/misc-files/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/misc/add-new`} component={lazy(() => import(`./machine-and-sensor/machine-details/misc-files/add-new/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/sensors/:id`} component={lazy(() => import(`./machine-and-sensor/view-sensor/index`))} />\r\n       \r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/sensors/add-new/:id`} component={lazy(() => import(`./machine-and-sensor/add-new-sensor/index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/sensors/edit-sensor/:id/:editId`} component={lazy(() => import(`./machine-and-sensor/add-new-sensor/edit.js`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/life-cycle`} component={lazy(() => import(`./machine-and-sensor/machine-details/add-new-life-cycle-event/index`))} /> */}\r\n        <Route exact path={`${APP_PREFIX_PATH}/reports`} component={lazy(() => import(`./Reports/Index`))} />\r\n        <Route exact path={`${APP_PREFIX_PATH}/machine-and-sensors/machine-details/analysisReport/:id/:graphType/:bin/:xAxis/:yAxis`} component={lazy(() => import(`./machine-and-sensor/machine-details/graphType`))} />\r\n        <Redirect from={`${APP_PREFIX_PATH}`} to={`${localStorage.getItem(\"dashboardType\") != \"workshop\" ? `${APP_PREFIX_PATH}/dashboard` : `${APP_PREFIX_PATH}/machine-and-sensors`}`} />\r\n      </Switch>\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport default React.memo(AppViews);","/home/faizan/jd-works/customer-web-app/src/components/layout-components/NavPanel.js",[],"/home/faizan/jd-works/customer-web-app/src/components/layout-components/Logo.js",[],"/home/faizan/jd-works/customer-web-app/src/components/layout-components/MenuContent.js",["794","795","796"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu, Grid, Dropdown } from \"antd\";\r\nimport IntlMessage from \"../util-components/IntlMessage\";\r\nimport Icon from \"../util-components/Icon\";\r\nimport navigationConfig from \"configs/NavigationConfig\";\r\nimport { connect } from \"react-redux\";\r\nimport { SIDE_NAV_LIGHT, NAV_TYPE_SIDE } from \"constants/ThemeConstant\";\r\nimport utils from \"utils\";\r\nimport { onMobileNavToggle } from \"redux/actions/Theme\";\r\nimport { axiosInstance } from \"App\";\r\nimport { role } from \"utils/role\";\r\nimport { EditOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom\";\r\nimport { usePermissions } from \"contexts/PermissionsContext\";\r\n\r\nconst { SubMenu } = Menu;\r\nconst { useBreakpoint } = Grid;\r\n\r\nconst setLocale = (isLocaleOn, localeKey) =>\r\n  isLocaleOn ? <IntlMessage id={localeKey} /> : localeKey.toString();\r\n\r\nconst setDefaultOpen = (key) => {\r\n  let keyList = [];\r\n  let keyString = \"\";\r\n  if (key) {\r\n    const arr = key.split(\"-\");\r\n    for (let index = 0; index < arr.length; index++) {\r\n      const elm = arr[index];\r\n      index === 0 ? (keyString = elm) : (keyString = `${keyString}-${elm}`);\r\n      keyList.push(keyString);\r\n    }\r\n  }\r\n  return keyList;\r\n};\r\n\r\nconst SideNavContent = (props) => {\r\n  const {\r\n    sideNavTheme,\r\n    routeInfo,\r\n    hideGroupTitle,\r\n    localization,\r\n    onMobileNavToggle,\r\n  } = props;\r\n  const isMobile = !utils.getBreakPoint(useBreakpoint()).includes(\"lg\");\r\n  const { isLoading: permissionsLoading } = usePermissions();\r\n  \r\n  const closeMobileNav = () => {\r\n    if (isMobile) {\r\n      onMobileNavToggle(false);\r\n    }\r\n  };\r\n  \r\n\r\n  const history = useHistory();\r\n  \r\n  // Don't render menu until permissions are loaded to avoid flash of wrong menu items\r\n  if (permissionsLoading) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <Menu\r\n      theme={sideNavTheme === SIDE_NAV_LIGHT ? \"light\" : \"dark\"}\r\n      mode=\"inline\"\r\n      style={{ height: \"100%\", borderRight: 0 }}\r\n      defaultSelectedKeys={[routeInfo?.key]}\r\n      defaultOpenKeys={setDefaultOpen(routeInfo?.key)}\r\n      className={\r\n        hideGroupTitle ? \"hide-group-title customSideNav\" : \"customSideNav\"\r\n      }\r\n    >\r\n\r\n\r\n      <div className=\"profileCard\" style={{ width: \"100%\" }}>\r\n        <Dropdown\r\n          overlay={\r\n            <Menu>\r\n              <Menu.Item\r\n                key=\"edit\"\r\n                onClick={() => {\r\n                  history.push(`/app/user-management/user-accounts/edit/${localStorage.getItem('user_id')}`);\r\n                }}\r\n              >\r\n                <EditOutlined />\r\n                <span>Edit Profile</span>\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                key=\"profile\"\r\n                onClick={() => {\r\n                  localStorage.clear(); // Clear localStorage\r\n                  window.location.href = \"/\"; // Redirect to home\r\n                }}\r\n              >\r\n                <LogoutOutlined />\r\n                <span>Logout</span>\r\n              </Menu.Item>\r\n            </Menu>\r\n          }\r\n          placement=\"bottomCenter\"\r\n        >\r\n\r\n          <img\r\n            className=\"sideNavUserImage\"\r\n            src={`https://api.dicebear.com/9.x/initials/svg?seed=${localStorage.getItem(\"name\")}`}\r\n            alt=\"...\"\r\n          />\r\n        </Dropdown>\r\n        <h4 className=\"text-center mt-3 mb-1 text-white\">{\r\n          localStorage.getItem(\"name\")\r\n        }</h4>\r\n        <p\r\n          style={{ fontSize: \"12px\", color: \"#65b0f8\" }}\r\n          className=\"text-center mt-0\"\r\n        >\r\n          {role(localStorage.getItem(\"role\"))}\r\n        </p>\r\n      </div>\r\n      {navigationConfig.map((menu) =>\r\n        menu.submenu.length > 0 ? (\r\n          <Menu.ItemGroup\r\n            key={menu.key}\r\n            title={setLocale(localization, menu.title)}\r\n          >\r\n            {menu.submenu.map((subMenuFirst) =>\r\n              subMenuFirst.submenu.length > 0 ? (\r\n                <SubMenu\r\n                  icon={\r\n                    subMenuFirst.icon ? (\r\n                      <Icon type={subMenuFirst?.icon} />\r\n                    ) : null\r\n                  }\r\n                  key={subMenuFirst.key}\r\n                  title={setLocale(localization, subMenuFirst.title)}\r\n                >\r\n                  {subMenuFirst.submenu.map((subMenuSecond) => (\r\n                    <Menu.Item key={subMenuSecond.key}>\r\n                      {subMenuSecond.icon ? (\r\n                        <Icon type={subMenuSecond?.icon} />\r\n                      ) : null}\r\n                      <span>\r\n                        {setLocale(localization, subMenuSecond.title)}\r\n                      </span>\r\n                      <Link\r\n                        onClick={() => closeMobileNav()}\r\n                        to={subMenuSecond.path}\r\n                      />\r\n                    </Menu.Item>\r\n                  ))}\r\n                </SubMenu>\r\n              ) : (\r\n                <Menu.Item key={subMenuFirst.key}>\r\n                  {subMenuFirst.icon ? <Icon type={subMenuFirst.icon} /> : null}\r\n                  <span>{setLocale(localization, subMenuFirst.title)}</span>\r\n                  <Link\r\n                    onClick={() => closeMobileNav()}\r\n                    to={subMenuFirst.path}\r\n                  />\r\n                </Menu.Item>\r\n              )\r\n            )}\r\n          </Menu.ItemGroup>\r\n        ) : (\r\n          <Menu.Item key={menu.key}>\r\n            {menu.icon ? <Icon type={menu?.icon} /> : null}\r\n            <span>{setLocale(localization, menu?.title)}</span>\r\n            {menu.path ? (\r\n              <Link onClick={() => closeMobileNav()} to={menu.path} />\r\n            ) : null}\r\n          </Menu.Item>\r\n        )\r\n      )}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nconst TopNavContent = (props) => {\r\n  const { topNavColor, localization } = props;\r\n  return (\r\n    <Menu mode=\"horizontal\" style={{ backgroundColor: topNavColor }}>\r\n      {navigationConfig.map((menu) =>\r\n        menu.submenu.length > 0 ? (\r\n          <SubMenu\r\n            key={menu.key}\r\n            popupClassName=\"top-nav-menu\"\r\n            title={\r\n              <span>\r\n                {menu.icon ? <Icon type={menu?.icon} /> : null}\r\n                <span>{setLocale(localization, menu.title)}</span>\r\n              </span>\r\n            }\r\n          >\r\n            {menu.submenu.map((subMenuFirst) =>\r\n              subMenuFirst.submenu.length > 0 ? (\r\n                <SubMenu\r\n                  key={subMenuFirst.key}\r\n                  icon={\r\n                    subMenuFirst.icon ? (\r\n                      <Icon type={subMenuFirst?.icon} />\r\n                    ) : null\r\n                  }\r\n                  title={setLocale(localization, subMenuFirst.title)}\r\n                >\r\n                  {subMenuFirst.submenu.map((subMenuSecond) => (\r\n                    <Menu.Item key={subMenuSecond.key}>\r\n                      <span>\r\n                        {setLocale(localization, subMenuSecond.title)}\r\n                      </span>\r\n                      <Link to={subMenuSecond.path} />\r\n                    </Menu.Item>\r\n                  ))}\r\n                </SubMenu>\r\n              ) : (\r\n                <Menu.Item key={subMenuFirst.key}>\r\n                  {subMenuFirst.icon ? (\r\n                    <Icon type={subMenuFirst?.icon} />\r\n                  ) : null}\r\n                  <span>{setLocale(localization, subMenuFirst.title)}</span>\r\n                  <Link to={subMenuFirst.path} />\r\n                </Menu.Item>\r\n              )\r\n            )}\r\n          </SubMenu>\r\n        ) : (\r\n          <Menu.Item key={menu.key}>\r\n            {menu.icon ? <Icon type={menu?.icon} /> : null}\r\n            <span>{setLocale(localization, menu?.title)}</span>\r\n            {menu.path ? <Link to={menu.path} /> : null}\r\n          </Menu.Item>\r\n        )\r\n      )}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nconst MenuContent = (props) => {\r\n  return props.type === NAV_TYPE_SIDE ? (\r\n    <SideNavContent {...props} />\r\n  ) : (\r\n    <TopNavContent {...props} />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ theme }) => {\r\n  const { sideNavTheme, topNavColor } = theme;\r\n  return { sideNavTheme, topNavColor };\r\n};\r\n\r\nexport default connect(mapStateToProps, { onMobileNavToggle })(MenuContent);\r\n","/home/faizan/jd-works/customer-web-app/src/redux/actions/Theme.js",[],"/home/faizan/jd-works/customer-web-app/src/components/layout-components/AppBreadcrumb.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/free-user/FreeUser.js",["797","798"],"import Icon, { EyeOutlined, MoreOutlined, SearchOutlined, UserSwitchOutlined } from '@ant-design/icons'\r\nimport { Button, Checkbox, Dropdown, Form, Input, Menu, Modal, Radio, Space, Table } from 'antd'\r\nimport { useForm } from 'antd/lib/form/Form';\r\nimport SubMenu from 'antd/lib/menu/SubMenu';\r\nimport { AccountStatusIcon, CsvIcon, FilterIcon } from 'assets/svg/icon';\r\nimport Filter from 'components/shared-components/Filter'\r\nimport React from 'react'\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nconst data = [\r\n    {\r\n        id: 1,\r\n        name: \"John Doe\",\r\n        contact_number: \"1234567890\",\r\n        email: \"johndoe@gmail.com\",\r\n        user_since: \"2021-09-10\",\r\n        status: \"Active\",\r\n    }\r\n]\r\n\r\nfunction FreeUser() {\r\n    \r\n    const history = useHistory();\r\n    const form = Form.useForm();\r\n\r\n    const onFinish = (values) => {\r\n\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setModalVisible(false);\r\n    }\r\n\r\n    const [modalVisible, setModalVisible] = React.useState(false);\r\n\r\n    const FilterMenu = (\r\n        <Menu mode=\"horizontal\">\r\n          <SubMenu key=\"item1\" title=\"Status\">\r\n            <Menu.Item key=\"subitem1\">\r\n              <Checkbox>All</Checkbox>\r\n            </Menu.Item>{\" \"}\r\n            <Menu.Item key=\"subitem2\">\r\n              <Checkbox>Active</Checkbox>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"subitem3\">\r\n              <Checkbox>Terminated</Checkbox>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        </Menu>\r\n      );\r\n    \r\n\r\n    const columns = [\r\n        {\r\n            title:\"Id\",\r\n            dataIndex:\"id\",\r\n        },\r\n        {\r\n            title:\"User Name\",\r\n            dataIndex:\"name\",\r\n        },\r\n        {\r\n            title:\"Contact Number\",\r\n            dataIndex:\"contact_number\",\r\n        },\r\n        {\r\n            title:\"Email Id\",\r\n            dataIndex:\"email\",\r\n        },\r\n        {\r\n            title:\"User Since\",\r\n            dataIndex:\"user_since\",\r\n        },\r\n        {\r\n            title:\"Status\",\r\n            dataIndex:\"status\",\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n              <Space size=\"middle\">\r\n                <Dropdown overlay={getMenu(record.id)} placement=\"bottomRight\" trigger={['hover']}>\r\n                  <MoreOutlined />\r\n                </Dropdown>\r\n              </Space>\r\n            ),\r\n          },\r\n    ]\r\n\r\n    \r\n  const getMenu = (record) => (\r\n    <Menu>\r\n      <Menu.Item key=\"view\" onClick={() =>  history.push(`/app/user-management/user-accounts/account-details/${record.id}`)}>\r\n        <EyeOutlined /> View\r\n      </Menu.Item>\r\n\r\n      <Menu.Item onClick={() => setModalVisible(true)}>\r\n        <AccountStatusIcon /> Account Status\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n    const onSearch = () => {\r\n        console.log('search')\r\n    }\r\n  return (\r\n    <div>\r\n    <h4> <UserSwitchOutlined /><span style={{\r\n      color: '#6a6a6a',\r\n      fontWeight: '300'\r\n    }}> User Management </span>/ Free User Accounts </h4>\r\n    <div className=\"d-flex justify-content-between mb-3\">\r\n      <div className=\"\" style={{ display: \"flex\" }}>\r\n        <Space direction=\"vertical\">\r\n          <Input\r\n            placeholder=\"Search\"\r\n            allowClear\r\n            onChange={onSearch}\r\n            style={{\r\n              width: 200,\r\n            }}\r\n            prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n          />\r\n        </Space>\r\n        <Filter filters={FilterMenu}>\r\n          <Button\r\n            icon={<Icon component={FilterIcon} />}\r\n            className=\"d-flex align-items-center ml-2\"\r\n          >\r\n            Filters\r\n          </Button>\r\n        </Filter>\r\n        <Button icon={<Icon component={CsvIcon} />} className=\"d-flex align-items-center ml-2\" >Export</Button>\r\n      </div>\r\n  \r\n    </div>\r\n    <div>\r\n      <Table\r\n        // rowKey='id'\r\n        // rowSelection={{\r\n        //   selectedRowKeys,\r\n        //   onChange: (selectedRowKeys, selectedRows) => {\r\n        //     setSelectedRowKeys(selectedRowKeys);\r\n        //   }\r\n        // }} \r\n        columns={columns} dataSource={data} />\r\n    </div>\r\n    \r\n    <Modal\r\n        title={<div className='d-flex align-items-center'><span className='d-block ml-2' > User Account Status </span></div>}\r\n        visible={modalVisible}\r\n        onCancel={handleCancel}\r\n        footer={false}\r\n      >\r\n        <Form\r\n          name=\"yourForm\"\r\n          onFinish={onFinish}\r\n          labelCol={{ span: 8 }}\r\n          wrapperCol={{ span: 16 }}\r\n          layout=\"vertical\"\r\n        >\r\n          <Form.Item\r\n            label=\"User Status\"\r\n            name=\"user_status\"\r\n            rules={[{ required: false, message: 'Please select an user status' }]}\r\n            labelCol={{ span: 8 }}\r\n            wrapperCol={{ span: 16 }}\r\n          >\r\n            <Radio.Group>\r\n              <Radio value=\"active\">Active</Radio>\r\n              <Radio value=\"inactive\">Inactive</Radio>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n\r\n          {/* Add Remarks Textarea */}\r\n          <Form.Item\r\n            label=\"Remarks\"\r\n            name=\"addRemarks\"\r\n            rules={[{ required: false, message: 'Please add remarks' }]}\r\n            labelCol={{ span: 8 }}\r\n            wrapperCol={{ span: 32 }}\r\n          >\r\n            <Input.TextArea rows={4} />\r\n          </Form.Item>\r\n\r\n          {/* Submit Button */}\r\n\r\n          <div className='d-flex justify-content-end mt-3'>\r\n            <Button className='ml-2' onClick={handleCancel}>\r\n              Cancel\r\n            </Button>\r\n            <Button className='bg-primary text-white ml-2' type=\"primary\" htmlType=\"submit\">\r\n              Save\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Modal>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default FreeUser","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/add-new-sensor/edit.js",["799","800","801","802","803","804"],"import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Select, Row, Col, Button, Switch, message, Modal } from 'antd';\r\nimport { MachineSensorIcon, UploadFileIcon } from 'assets/svg/icon';\r\nimport { CloseCircleOutlined, EyeOutlined } from '@ant-design/icons';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { axiosInstance } from 'App';\r\n\r\nimport { UploadImage } from 'utils/Upload';\r\nconst { Option } = Select;\r\n\r\nconst AddNewSensor = () => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const query = new URLSearchParams(history.location.search);\r\n  const machineName = query.get('machine_name');\r\n  const { editId } = useParams();\r\n  const [form] = Form.useForm();\r\n  const [machineStatus, setMachineStatus] = useState(false);\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [visible, setVisible] = useState(false);\r\n  const [sensorId, setSensorId] = useState('');\r\n  const [generateSensorId, setGenerateSensorId] = useState('');\r\n  const [generatedSensorId, setGeneratedSensorId] = useState('');\r\n  const styles = {\r\n    files: {\r\n      listStyle: \"none\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"space-between\",\r\n      gap: \"13px\",\r\n      border: \"1px solid lightblue\",\r\n      padding: \"10px\",\r\n      borderRadius: \"9px\",\r\n      background: \"#0093ff0a\",\r\n    },\r\n    uploadFile: {\r\n      position: \"absolute\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      opacity: 0,\r\n    },\r\n    \".uploadFile::-webkit-file-upload-button\": {\r\n      visibility: \"hidden\",\r\n    },\r\n    \".uploadFile::before\": {\r\n      content: \"'Drag & Drop'\",\r\n      display: \"inline-block\",\r\n      padding: \"10px\",\r\n      border: \"1px solid #ccc\",\r\n      borderRadius: \"4px\",\r\n      cursor: \"pointer\",\r\n    },\r\n    \".uploadFile:hover::before\": {\r\n      backgroundColor: \"#ccc\",\r\n    },\r\n  };\r\n\r\n  const onFinish = async (values) => {\r\n    let file = [];\r\n    const temp = selectedFiles.filter((item) => {\r\n      return item.url === undefined;\r\n    })\r\n    const temp2 = selectedFiles.filter((item) => {\r\n      return item.url !== undefined;\r\n    })\r\n    if (temp.length !== 0) {\r\n      const uploadPromise = temp.map(async (item) => {\r\n        if (item.url === undefined) {\r\n          const url = await UploadImage(item);\r\n          return url;\r\n        } else {\r\n          return item.url;\r\n        }\r\n      })\r\n      setLoading(true);\r\n      file = await Promise.all(uploadPromise);\r\n      // setLoading(false);\r\n      console.log(file);\r\n    }\r\n    file = [...file, ...temp2.map((item) => {\r\n      return item.url\r\n    })];\r\n\r\n    const payload = {\r\n      sensor_type: values.sensor_type,\r\n      sensor_id: generatedSensorId,\r\n      sensor_id_label: form.getFieldValue('sensor_id_label'),\r\n      sensor_name: values.sensor_name,\r\n      sensor_location: values.sensor_location,\r\n      sensor_details: values.sensor_details,\r\n      sensor_status: machineStatus,\r\n      pictures: file\r\n    };\r\n\r\n    try {\r\n      setLoading(true);\r\n      const response = await axiosInstance.put(`/api/admin/machines/${id}/sensors/${editId}`, payload);\r\n      message.success('Sensor updated successfully!');\r\n      setLoading(false);\r\n      history.goBack(); // Navigate to the sensors list page\r\n    } catch (error) {\r\n      message.error('Failed to add sensor. Please try again.');\r\n      setLoading(false);\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n  const generateHexString = (id) => {\r\n    try {\r\n      // Parse the input to an integer\r\n      const sensorIdInt = parseInt(id, 10);\r\n\r\n      if (isNaN(sensorIdInt) || sensorIdInt < 0) {\r\n        return '';\r\n      }\r\n\r\n      // Convert to hex format as specified:\r\n      // LSB of sensor ID (3 bytes) + sensor type (1 byte)\r\n      // The sensor type is always 24 (0x24)\r\n\r\n      // Create a Buffer-like array for the sensor ID (3 bytes, LSB first)\r\n      const bytes = new Uint8Array(4);\r\n\r\n      // Set the sensor ID bytes (3 bytes, LSB first)\r\n      bytes[0] = sensorIdInt & 0xFF;         // First byte (LSB)\r\n      bytes[1] = (sensorIdInt >> 8) & 0xFF;  // Second byte\r\n      bytes[2] = (sensorIdInt >> 16) & 0xFF; // Third byte (MSB)\r\n\r\n      // Set the sensor type (always 0x24)\r\n      bytes[3] = 0x24;\r\n\r\n      // Convert to hex string\r\n      const hexString = Array.from(bytes)\r\n        .map(byte => byte.toString(16).padStart(2, '0'))\r\n        .join('');\r\n\r\n      return hexString.toUpperCase();\r\n    } catch (err) {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  const handleFileSelect = (event) => {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    setSelectedFiles([...selectedFiles, newSelectedFiles[0]]);\r\n  };\r\n\r\n  const delUplFile = (i) => {\r\n    const AfterDeleteFile = selectedFiles.filter((elem, index) => index !== i);\r\n    setSelectedFiles(AfterDeleteFile);\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n  const getSensor = async () => {\r\n    try {\r\n      const response = await axiosInstance.get(`api/admin/machines/${id}/sensors/${editId}`);\r\n      // message.success('Sensor added successfully!');\r\n      console.log(response.data.item);\r\n      const data = response.data.item;\r\n      // history.goBack(); \r\n      form.setFieldsValue({\r\n        machineName: data.machine_id,\r\n        sensor_type: data.sensor_type,\r\n        sensor_id_label: data.sensor_id_label,\r\n        sensor_name: data.sensor_name,\r\n        sensor_location: data.sensor_location,\r\n        sensor_details: data.sensor_details,\r\n        machineName: machineName,\r\n      })\r\n\r\n      setGeneratedSensorId(data.sensor_id);\r\n\r\n      setSelectedFiles(data?.pictures.map((item, index) => {\r\n        return {\r\n          url: item?.file_url,\r\n          name: `Picture ${index + 1}`\r\n        }\r\n      }))\r\n      setMachineStatus(data.sensor_status)\r\n    } catch (error) {\r\n      message.error('Failed to edit sensor. Please try again.');\r\n      console.error('Error:', error);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getSensor()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h4>\r\n        <MachineSensorIcon />\r\n        <span style={{ color: '#6a6a6a', fontWeight: '300' }}>\r\n          Machine / sensors\r\n        </span> / Edit Sensor\r\n      </h4>\r\n      <Form\r\n        labelCol={{ span: 24 }}\r\n        wrapperCol={{ span: 24 }}\r\n        onFinish={onFinish}\r\n        form={form}\r\n        name=\"control-hooks\"\r\n      >\r\n        <div className=\"border rounded p-3 bg-white\">\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item label=\"Machine Name\" name=\"machineName\">\r\n                <Input disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Sensor Type\"\r\n                name=\"sensor_type\"\r\n                rules={[{ required: true, message: 'Please Enter Sensor Type' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label={\r\n                  <span>\r\n                    Sensor ID&nbsp;\r\n                    <Button\r\n                      onClick={() => {\r\n                        setVisible(true);\r\n                        setSensorId(form.getFieldValue('sensor_id_label'));\r\n                        setGenerateSensorId(generatedSensorId);\r\n                      }}\r\n                      type=\"link\" style={{ padding: '0' }}>\r\n                      Generate ID\r\n                    </Button>\r\n                  </span>\r\n                }\r\n                name=\"sensor_id_label\"\r\n                rules={[{ required: true, message: 'Please enter Sensor ID' }]}\r\n              >\r\n                <Input disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Sensor Name\"\r\n                name=\"sensor_name\"\r\n                rules={[{ required: true, message: 'Please enter Sensor Name' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Sensor Location\"\r\n                name=\"sensor_location\"\r\n                rules={[{ required: true, message: 'Please enter Sensor Location' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Sensor Details\"\r\n                name=\"sensor_details\"\r\n                rules={[{ required: true, message: 'Please enter Sensor Details' }]}\r\n              >\r\n                <Input.TextArea rows={4} />\r\n              </Form.Item>\r\n              <Form.Item label=\"Sensor Status\" name=\"SensorStatus\" valuePropName=\"checked\">\r\n                <Switch\r\n                  checked={machineStatus}\r\n                  onChange={(value) => setMachineStatus(value)}\r\n                  style={{ backgroundColor: machineStatus ? '#3CA6C1' : '#d0d4d7' }}\r\n                />{' '}\r\n                {/* {machineStatus ? 'Active' : 'Inactive'} */}\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <h5 className=\"m-0 mt-2\">Upload Pictures</h5>\r\n              <div className=\"p-3\">\r\n                <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                  <UploadFileIcon />\r\n                  <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                  <h5 className=\"mb-0\">Or</h5>\r\n                  <h5 className=\"mb-0\" style={{ color: '#3CA6C1' }}>\r\n                    Click here to upload\r\n                  </h5>\r\n                  <input\r\n                    style={styles.uploadFile}\r\n                    className=\"uploadFile\"\r\n                    type=\"file\"\r\n                    accept='image/*'\r\n                    multiple\r\n                    onChange={handleFileSelect}\r\n                  />\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  {selectedFiles.length > 0 && (\r\n                    <ul className=\"p-0\" style={{ width: \"100%\" }}>\r\n                      {selectedFiles.map((file, i) => (\r\n                        <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                          {\" \"}\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <UploadFileIcon />{\" \"}\r\n                            <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                            {/* <span className=\"ml-5\">\r\n                                                    {file.url ? (  <EyeOutlined style={{ cursor: \"pointer\" }} onClick={() => window.open(file.url)} />) : null}\r\n                                                </span> */}\r\n                          </div>\r\n                          <div>\r\n                            {\r\n                              file.url && <span className=\"ml-3 \" style={{\r\n                                cursor: \"pointer\"\r\n                              }} onClick={() => {\r\n                                window.open(file.url, '_blank')\r\n                              }}>\r\n                                <EyeOutlined />\r\n                              </span>\r\n                            }\r\n                            <span\r\n                              style={{ cursor: \"pointer\" }}\r\n                              onClick={() => delUplFile(i)}\r\n                            >\r\n                              {\" \"}\r\n                              <CloseCircleOutlined />{\" \"}\r\n                            </span>\r\n                          </div>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <Form.Item>\r\n          <div style={{ gap: '10px' }} className=\"mt-5 d-flex justify-content-end\">\r\n            <Button className=\"px-4 font-weight-semibold\" htmlType=\"button\" onClick={handleBackClick}>\r\n              Back\r\n            </Button>\r\n            <Button className=\"px-4 font-weight-semibold text-white bg-primary\" htmlType=\"submit\">\r\n              Save\r\n            </Button>\r\n          </div>\r\n        </Form.Item>\r\n      </Form>\r\n\r\n      <Modal title=\"Generate Sensor ID\" visible={visible} onOk={() => {\r\n        if (sensorId === '') {\r\n          message.error('Please enter a Sensor ID');\r\n          return;\r\n        }\r\n        if (isNaN(sensorId)) {\r\n          message.error('Please enter a valid Sensor ID');\r\n          return;\r\n        }\r\n\r\n        setVisible(false);\r\n        form.setFieldsValue({ sensor_id_label: sensorId });\r\n        setGeneratedSensorId(generateSensorId);\r\n      }} onCancel={() => {\r\n        setVisible(false);\r\n      }}>\r\n        <Form\r\n          layout='vertical'>\r\n          <Form.Item label=\"Sensor ID\"\r\n\r\n          >\r\n            <Input\r\n              value={sensorId}\r\n              onChange={(e) => {\r\n                if (isNaN(e.target.value)) {\r\n                  message.error('Please enter a valid Sensor ID');\r\n                  return;\r\n                }\r\n                setSensorId(e.target.value);\r\n                const temp = generateHexString(e.target.value);\r\n\r\n                setGenerateSensorId(temp);\r\n              }\r\n              }\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Generate Sensor ID\"\r\n\r\n          >\r\n            <Input disabled\r\n              value={generateSensorId}\r\n\r\n            />\r\n          </Form.Item>\r\n\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNewSensor;\r\n","/home/faizan/jd-works/customer-web-app/src/components/layout-components/NavSearch/index.js",[],"/home/faizan/jd-works/customer-web-app/src/components/util-components/IntlMessage/index.js",[],"/home/faizan/jd-works/customer-web-app/src/components/layout-components/ThemeConfigurator.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/Reports/Index.js",["805","806","807"],"import Icon, { FileOutlined } from '@ant-design/icons'\r\nimport React from 'react'\r\nimport { Button, Checkbox, Input, Menu, Select, Space, Table, Tag } from 'antd'\r\nimport { SearchOutlined } from '@ant-design/icons'\r\nimport Filter from 'components/shared-components/Filter'\r\nimport { CsvIcon, FilterIcon } from 'assets/svg/icon'\r\nimport CalendarIcon from \"assets/calendar.png\"\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min'\r\nfunction Reports() {\r\n    // Check if current user is a free user (role id 5)\r\n    const userRole = parseInt(localStorage.getItem(\"role\"));\r\n    const isFreeUser = userRole === 5;\r\n    const [data, setData] = React.useState([\r\n        {\r\n            id: 1,\r\n            name: \"Machine 1\",\r\n            contact_number: \"Area 1\",\r\n            email: \"JobSite 1\",\r\n            activeJobs: \"Active\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Machine 2\",\r\n            contact_number: \"Area 2\",\r\n            email: \"JobSite 2\",\r\n            activeJobs: \"Inactive\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Machine 3\",\r\n            contact_number: \"Area 3\",\r\n            email: \"JobSite 3\",\r\n            activeJobs: \"Active\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Machine 4\",\r\n            contact_number: \"Area 4\",\r\n            email: \"JobSite 4\",\r\n            activeJobs: \"Inactive\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Machine 5\",\r\n            contact_number: \"Area 5\",\r\n            email: \"JobSite 5\",\r\n            activeJobs: \"Active\"\r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"Machine 6\",\r\n            contact_number: \"Area 6\",\r\n            email: \"JobSite 6\",\r\n            activeJobs: \"Inactive\"\r\n        },\r\n        {\r\n            id: 7,\r\n            name: \"Machine 7\",\r\n            contact_number: \"Area 7\",\r\n            email: \"JobSite 7\",\r\n            activeJobs: \"Active\"\r\n        },\r\n        {\r\n            id: 8,\r\n            name: \"Machine 8\",\r\n            contact_number: \"Area 8\",\r\n            email: \"JobSite 8\",\r\n            activeJobs: \"Inactive\"\r\n        },\r\n        {\r\n            id: 9,\r\n            name: \"Machine 9\",\r\n            contact_number: \"Area 9\",\r\n            email: \"JobSite 9\",\r\n            activeJobs: \"Active\"\r\n        },\r\n        {\r\n            id: 10,\r\n            name: \"Machine 10\",\r\n            contact_number: \"Area 10\",\r\n            email: \"JobSite 10\",\r\n            activeJobs: \"Inactive\"\r\n        },\r\n    ])\r\n    const columns = [\r\n        {\r\n            title: \"Id\",\r\n            dataIndex: \"id\",\r\n        },\r\n        {\r\n            title: \"Machine\",\r\n            dataIndex: \"name\",\r\n        },\r\n        {\r\n            title: \"Area\",\r\n            dataIndex: \"contact_number\",\r\n        },\r\n        {\r\n            title: \"JobSite\",\r\n            dataIndex: \"email\",\r\n        },\r\n\r\n        {\r\n            title: \"Status\",\r\n            dataIndex: \"activeJobs\",\r\n            render: (text, record) => (\r\n                <div>\r\n                    {record.activeJobs === \"Active\" ? (\r\n                        <Tag color=\"green\">Active</Tag>\r\n                    ) : (\r\n                        <Tag color=\"red\">Inactive</Tag>\r\n                    )}\r\n                </div>\r\n            ),\r\n        },\r\n\r\n    ]\r\n    const onSearch = (value) => console.log(value);\r\n    const FilterMenu = (\r\n        <Menu mode=\"horizontal\">\r\n            <Menu.SubMenu key=\"item1\" title=\"Service Type\">\r\n                <Menu.Item key=\"subitem1\">\r\n                    <Checkbox>All</Checkbox>\r\n                </Menu.Item>{\" \"}\r\n                <Menu.Item key=\"subitem3\">\r\n                    <Checkbox>workshop</Checkbox>\r\n                </Menu.Item>{\" \"}\r\n                <Menu.Item key=\"subitem2\">\r\n                    <Checkbox>Onsite</Checkbox>\r\n                </Menu.Item>\r\n            </Menu.SubMenu>\r\n\r\n            <Menu.SubMenu key=\"item2\" title=\"Status\">\r\n                <Menu.Item key=\"subitem5\">\r\n                    <Checkbox>All</Checkbox>\r\n                </Menu.Item>{\" \"}\r\n\r\n            </Menu.SubMenu>\r\n        </Menu>\r\n    );\r\n    return (\r\n        <div>\r\n            {/* <div>\r\n      <Tabs activeKey={key} onChange={setKey} tabBarExtraContent={key===\"1\"?operations:operationsTwo}>\r\n        {items.map((item) => (\r\n          <Tabs.TabPane tab={item.label} key={item.key}>\r\n            {item.children}\r\n          </Tabs.TabPane>\r\n        ))}\r\n      </Tabs>\r\n    </div> */}\r\n            <h4> <FileOutlined /> Reports</h4>\r\n            <div className=\"d-flex justify-content-between mb-3\">\r\n                <div className=\"\" style={{ display: \"flex\" }}>\r\n                    <Space direction=\"vertical\">\r\n                        <Input\r\n                            placeholder=\"Search\"\r\n                            allowClear\r\n                            onChange={onSearch}\r\n                            style={{\r\n                                width: 200,\r\n                            }}\r\n                            prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n                        />\r\n                    </Space>\r\n                    <Filter filters={FilterMenu}>\r\n                        <Button\r\n                            icon={<Icon component={FilterIcon} />}\r\n                            className=\"d-flex align-items-center ml-2\"\r\n                        >\r\n                            Filters\r\n                        </Button>\r\n                    </Filter>\r\n                    <Button icon={<Icon component={CsvIcon} />} className=\"d-flex align-items-center ml-2\" >Export</Button>\r\n                    <Select value={\"all\"} style={{\r\n                        width: \"200px\",\r\n                        marginLeft: \"10px\"\r\n                    }}>\r\n                        <Select.Option value={\"all\"}>All</Select.Option>\r\n                        <Select.Option value={\"service_report\"}>Service Report</Select.Option>\r\n                        <Select.Option value={\"repair_report\"}>Repair Report</Select.Option>\r\n                        {!isFreeUser && (\r\n                            <Select.Option value={\"analysis_report\"}>Analysis Report</Select.Option>\r\n                        )}\r\n                        <Select.Option value={\"failure_prediction_report\"}>Failure Prediction Report</Select.Option>\r\n                    </Select>\r\n                </div>\r\n                <div className=\"mb-2 d-flex align-items-center\">\r\n                    <Button\r\n                        // onClick={showModal}\r\n                        className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n                    >\r\n                        Generate Report\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Table\r\n                    // rowKey='id'\r\n                    // rowSelection={{\r\n                    //   selectedRowKeys,\r\n                    //   onChange: (selectedRowKeys, selectedRows) => {\r\n                    //     setSelectedRowKeys(selectedRowKeys);\r\n                    //   }\r\n                    // }} \r\n                    columns={columns} dataSource={data} />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reports","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/graphType.js",["808","809","810","811","812"],"import { Card } from 'antd';\r\nimport { axiosInstance } from 'App';\r\nimport TopLineChart from 'components/shared-components/ChartWidget/Top3LineChat';\r\nimport FrequencySpectrumChart from 'components/shared-components/ChartWidget/FrequencySpectrumChart'; // Import the new component\r\nimport moment from 'moment';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom/cjs/react-router-dom';\r\n\r\nfunction GraphType() {\r\n  const { id, graphType, deviceId, bin, xAxis, yAxis } = useParams();\r\n\r\n  const [x, setX] = useState([]);\r\n  const [y, setY] = useState([]);\r\n  const [z, setZ] = useState([]);\r\n  const [frequencyData, setFrequencyData] = useState([]); // New state for frequency data\r\n  const [fileType, setFileType] = useState(''); // To track if it's a single_axis or 3_axis file\r\n  const [show, setShow] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (bin) {\r\n      const tempBin = bin.split('.')[0];\r\n      const temp = tempBin.split('_')[tempBin.split('_').length - 1];\r\n      if (temp == 1) {\r\n        setShow(false);\r\n      } else {\r\n        setShow(true);\r\n      }\r\n    }\r\n    fetchSensorData();\r\n  }, [bin]);\r\n\r\n  const fetchSensorData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axiosInstance.get(`api/getDataFromPythonScript?fileName=${bin}`);\r\n      console.log('API Response:', response.data);\r\n\r\n      // Check if the response has the new data structure\r\n      if (response.data.success) {\r\n        // Set the file type\r\n        setFileType(response.data.fileType || 'three_axis');\r\n        if (response.data.fileType === 'single_axis') {\r\n          // If it's a single axis file, set the frequency data\r\n          setFrequencyData(response.data.frequencyDomain.frequencies.map((point, i) => ({\r\n            x: i + 1,\r\n            y: point\r\n          })));\r\n\r\n          setZ(response.data.timeDomain.data.map((point, i) => ({\r\n            x: i + 1,\r\n            y: point\r\n          })))\r\n\r\n        } else {\r\n          const rawData = response.data.timeDomain.subSeries;\r\n\r\n          setX(() => {\r\n            const data = rawData[0].data.map((item, index) => {\r\n              return {\r\n                x: index + 1,\r\n                y: item\r\n              }\r\n            })\r\n            return data\r\n          })\r\n\r\n          setY(() => {\r\n            const data = rawData[1].data.map((item, index) => {\r\n              return {\r\n                x: index + 1,\r\n                y: item\r\n              }\r\n            })\r\n            return data\r\n          })\r\n\r\n\r\n          setZ(() => {\r\n            const data = rawData[2].data.map((item, index) => {\r\n              return {\r\n                x: index + 1,\r\n                y: item\r\n              }\r\n            })\r\n            return data\r\n          })\r\n\r\n        }\r\n\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      setError('Error fetching data: ' + error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div>Loading data...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <div style={{\r\n          fontWeight: 'bold',\r\n          color: '#000000',\r\n        }}>\r\n          {bin}\r\n        </div>\r\n        <div>\r\n          X: {moment(xAxis).format('DD-MM-YYYY HH:mm:ss')}\r\n        </div>\r\n        <div>\r\n          Y: {yAxis}\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Frequency Spectrum Chart */}\r\n      {frequencyData && frequencyData.length > 0 && (\r\n        <FrequencySpectrumChart\r\n          frequencyData={frequencyData}\r\n          title=\"Amplitude Spectrum\"\r\n        />\r\n      )}\r\n\r\n      {/* Time Domain Charts */}\r\n      {show && (\r\n        <>\r\n          <TopLineChart graphType={graphType} title={\"Amplitude X\"} series={x} />\r\n          <TopLineChart graphType={graphType} title={\"Amplitude Y\"} series={y} />\r\n        </>\r\n      )}\r\n      <TopLineChart graphType={graphType} title={\"Amplitude Z\"} series={z} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphType;","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/add-new/index.js",["813","814","815","816","817","818"],"import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Select, Radio, Row, Col, Button, Switch, message, DatePicker } from 'antd';\r\nimport { MachineIcon, UploadFileIcon } from 'assets/svg/icon';\r\nimport { CloseCircleOutlined, EyeOutlined, ToolOutlined } from '@ant-design/icons';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { axiosInstance } from 'App';\r\nimport { useParams } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport moment from 'moment';\r\nimport { UploadImage } from 'utils/Upload';\r\nimport { get } from 'lodash';\r\n\r\nconst { Option } = Select;\r\n\r\nconst AddNewMachine = () => {\r\n  const history = useHistory();\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n  const [machineStatus, setMachineStatus] = useState(true);\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [customerData, setCustomerData] = useState([]);\r\n  const [jobSiteData, setJobSiteData] = useState([]);\r\n  const { id } = useParams();\r\n  const [machineType, setMachineType] = useState([]);\r\n  const handleFileSelect = (event) => {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    setSelectedFiles([...selectedFiles, ...newSelectedFiles]);\r\n  };\r\n\r\n  const delUplFile = (i) => {\r\n    let AfterDeleteFile = selectedFiles.filter((_, index) => index !== i);\r\n    setSelectedFiles(AfterDeleteFile);\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  const onFinish = async (values) => {\r\n    let file = [];\r\n    const temp = selectedFiles.filter((item) => {\r\n      return item.url === undefined;\r\n    })\r\n    const temp2 = selectedFiles.filter((item) => {\r\n      return item.url !== undefined;\r\n    })\r\n    setLoading(true);\r\n    if (temp.length !== 0) {\r\n      const uploadPromise = temp.map(async (item) => {\r\n        if (item.url === undefined) {\r\n          const url = await UploadImage(item);\r\n          return url;\r\n        } else {\r\n          return item.url;\r\n        }\r\n      })\r\n      file = await Promise.all(uploadPromise);\r\n      console.log(file);\r\n    }\r\n    file = [...file, ...temp2.map((item) => {\r\n      return item.url\r\n    })];\r\n\r\n\r\n    const postData = {\r\n        ...form.getFieldsValue(),\r\n        pictures:file,\r\n        machine_status:machineStatus,\r\n        year: values.year ? moment(values.year).format('YYYY') : null,\r\n        user_id:localStorage.getItem(\"parent_id\")===\"null\"?localStorage.getItem(\"user_id\"):localStorage.getItem(\"parent_id\")\r\n    };\r\n\r\n    if(!id){\r\n      try {\r\n        const response = await axiosInstance.post('/api/web/machines', postData);\r\n        // console.log('Machine added successfully:', response.data);\r\n        message.success(\"Machine Added Successfuly\");\r\n        if (response.status === 200 || response.status === 201) {\r\n          history.push(`/app/machine-and-sensors`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding machine:', error);\r\n        setLoading(false);\r\n        // Handle error, e.g., show notification\r\n      }\r\n    }else{\r\n      const response = await axiosInstance.put(\"/api/web/machines/\"+id,postData);\r\n      message.success(\"Machine Updated Successfully\");\r\n      if (response.status === 200 || response.status === 201) {\r\n        history.push(`/app/machine-and-sensors`);\r\n      }\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n    const getData = async () => {\r\n      // ?search=${search}&status=${status!='all'?status:''}&area=${workshop!='all'?workshop:''}\r\n      // let url = `?search=${search}`\r\n      // //for 0 it is not handling\r\n      // if((status !== '' && status != 'all')) {\r\n      //   url += `&status=${status}`\r\n      // }\r\n      let url = `?customer_id=${localStorage.getItem(\"parent_id\")!=\"null\"? localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}&status=1`\r\n      try {\r\n        const resp = await axiosInstance.get(`/api/web/jobsites${url}`);\r\n        setJobSiteData(resp.data.items);\r\n        if (id) {\r\n          fetchData();\r\n        }\r\n      } catch (err) {\r\n        console.log(err)\r\n        message.error('Something went wrong')\r\n      }\r\n    }\r\n  \r\n\r\n  const styles = {\r\n    files: {\r\n      listStyle: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      gap: '13px',\r\n      border: '1px solid lightblue',\r\n      padding: '10px',\r\n      borderRadius: '9px',\r\n      background: '#0093ff0a',\r\n    },\r\n    uploadFile: {\r\n      position: 'absolute',\r\n      width: '100%',\r\n      height: '100%',\r\n      opacity: 0,\r\n    },\r\n    '.uploadFile::-webkit-file-upload-button': {\r\n      visibility: 'hidden',\r\n    },\r\n    '.uploadFile::before': {\r\n      content: \"'Drag & Drop'\",\r\n      display: 'inline-block',\r\n      padding: '10px',\r\n      border: '1px solid #ccc',\r\n      borderRadius: '4px',\r\n      cursor: 'pointer',\r\n    },\r\n    '.uploadFile:hover::before': {\r\n      backgroundColor: '#ccc',\r\n    },\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const response = await axiosInstance.get(`api/web/machines/${id}`);\r\n    const data = response.data.item\r\n    setMachineStatus(data.machine_status == 1 ? true : false)\r\n    form.setFieldsValue({\r\n      ...data,\r\n      date: data.date ? moment(data.date) : null,\r\n      year: data.year ? moment(data.year) : null,\r\n    })\r\n    setSelectedFiles(data?.pictures.map((item,index) => {\r\n      return {\r\n          url: item?.file_url,\r\n          name: `Picture ${index+1}`\r\n      }\r\n  }))\r\n    // setMachineStatus(data.machine_status == 1 ? true : false)\r\n\r\n  }\r\n\r\n  // const getCustomerData = async () => {\r\n  //   const response = await axiosInstance.get('api/web/all-customers/list');\r\n  //   const data = response.data;\r\n  //   setCustomerData(data);\r\n   \r\n  //   // console.log(data);\r\n  // }\r\n\r\n  const fetchMachineType = async () => {\r\n    try {\r\n      const response = await axiosInstance.get(\"api/admin/machine-types/list\");\r\n      if (response.status === 200) {\r\n        const responseData = response.data.items;\r\n        if (Array.isArray(responseData)) {\r\n          setMachineType(responseData);\r\n          // getCustomerData();\r\n          getData();\r\n       \r\n        } \r\n        // console.log(JSON.stringify(responseData));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    // getCustomerData();\r\n    // getData();\r\n    fetchMachineType();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h4>\r\n        <ToolOutlined />\r\n        <span style={{ color: '#6a6a6a', fontWeight: '300' }}> Machine</span> / Add New Machine\r\n      </h4>\r\n      <Form\r\n        labelCol={{ span: 24 }}\r\n        wrapperCol={{ span: 24 }}\r\n        onFinish={onFinish}\r\n        form={form}\r\n        name=\"control-hooks\"\r\n      >\r\n        <div className=\"border rounded p-3 bg-white\">\r\n          <h4 className=\"d-flex align-items-center\" style={{ color: '#3CA6C1', gap: '4px' }}>\r\n            <MachineIcon /> Add New Machine\r\n          </h4>\r\n         \r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Machine Name\"\r\n                name=\"name\"\r\n                rules={[{ required: true, message: 'Please enter Machine Name' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Select Job Site\"\r\n                name=\"job_site_id\"\r\n                rules={[{ required: true, message: 'Please Select Job Site' }]}\r\n              >\r\n                <Select>\r\n                {\r\n                  jobSiteData.map((item)=>{\r\n                    return <Option value={item.id}>{item.jobsite_name}</Option>\r\n                  })\r\n                }\r\n                </Select>\r\n                {/* <Select>\r\n                  <Option value=\"site1\">Job Site 1</Option>\r\n                  <Option value=\"site2\">Job Site 2</Option>\r\n                </Select> */}\r\n                {/* <Input /> */}\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Machine Range Type\"\r\n                name=\"machine_type_id\"\r\n                rules={[{ required: true, message: 'Please enter Machine Range ' }]}\r\n              >\r\n                <Select>\r\n                  {\r\n                    machineType.map((item)=>{\r\n                      return <Option value={item.id}>{item.name}</Option>\r\n                    })\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            </Row>\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Machine Modal\"\r\n                name=\"model\"\r\n                rules={[{ required: true, message: 'Please enter Machine Modal' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Serial No\"\r\n                name=\"serial_no\"\r\n                rules={[{ required: true, message: 'Please enter Serial No' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"kw/Hp\"\r\n                name=\"kw_hp\"\r\n                rules={[{ required: true, message: 'Please enter kw/Hp' }]}\r\n              >\r\n                <Input type=\"number\" />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Manufacture\"\r\n                name=\"manufacturer\"\r\n                rules={[{ required: true, message: 'Please enter Manufacture' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"RPM\"\r\n                name=\"rpm\"\r\n                rules={[{ required: true, message: 'Please enter RPM' }]}\r\n              >\r\n                <Input type=\"number\" />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Frequency (Hz)\"\r\n                name=\"frequency\"\r\n                rules={[{ required: true, message: 'Please enter Frequency (Hz)' }]}\r\n              >\r\n                <Input type=\"number\" />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"NDE Bearing\"\r\n                name=\"nde_bearing\"\r\n                rules={[{ required: true, message: 'Please enter NDE Bearing' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"DE Bearing\"\r\n                name=\"de_bearing\"\r\n                rules={[{ required: true, message: 'Please enter DE Bearing' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Tag No\"\r\n                name=\"tag_no\"\r\n                rules={[{ required: true, message: 'Please enter Tag No' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"VFT\"\r\n                name=\"vft\"\r\n                rules={[{ required: true, message: 'Please Select VFT' }]}\r\n              >\r\n                <Radio.Group>\r\n                  <Radio value={1}>Yes</Radio>\r\n                  <Radio value={0}>No</Radio>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            {/* <Col span={12}>\r\n              <Form.Item\r\n                label=\"Year\"\r\n                name=\"year\"\r\n                rules={[{ required: true, message: 'Please enter Year' }]}\r\n              >\r\n               \r\n                <DatePicker picker=\"year\" format={\"YYYY\"} />\r\n              </Form.Item>\r\n            </Col> */}\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Equipment\"\r\n                name=\"equipment\"\r\n                rules={[{ required: true, message: 'Please enter Equipment' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Ampere\"\r\n                name=\"ampere\"\r\n                rules={[{ required: true, message: 'Please enter Ampere' }]}\r\n              >\r\n                <Input type=\"number\" />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Color\"\r\n                name=\"color\"\r\n                rules={[{ required: true, message: 'Please enter Color' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"INS\"\r\n                name=\"ins\"\r\n                rules={[{ required: true, message: 'Please enter INS' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Phase\"\r\n                name=\"phase\"\r\n                rules={[{ required: true, message: 'Please enter Phase' }]}\r\n              >\r\n                <Input  />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"EX Type\"\r\n                name=\"ex_type\"\r\n                rules={[{ required: true, message: 'Please enter EX Type' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"IP\"\r\n                name=\"ip\"\r\n                rules={[{ required: true, message: 'Please enter IP' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Operator\"\r\n                name=\"operator\"\r\n                rules={[{ required: true, message: 'Please enter Operator' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"EX Cert\"\r\n                name=\"ex_cert\"\r\n                rules={[{ required: true, message: 'Please enter EX Cert' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Date\"\r\n                name=\"date\"\r\n                rules={[{ required: true, message: 'Please Select Date' }]}\r\n              >\r\n                <DatePicker />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col span={24}>\r\n              <Form.Item\r\n                label=\"Machine Details\"\r\n                name=\"machine_detail\"\r\n                rules={[{ required: true, message: 'Please enter Machine Details' }]}\r\n              >\r\n                <Input.TextArea />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n          <Col span={12}>\r\n              <h5 className=\"m-0 mt-2\">Upload Pictures</h5>\r\n              <div className=\"p-3\">\r\n                <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                  <UploadFileIcon />\r\n                  <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                  <h5 className=\"mb-0\">Or</h5>\r\n                  <h5 className=\"mb-0\" style={{ color: '#3CA6C1' }}>\r\n                    Click here to upload\r\n                  </h5>\r\n                  <input\r\n                    style={styles.uploadFile}\r\n                    className=\"uploadFile\"\r\n                    type=\"file\"\r\n                    accept='image/*'\r\n                    multiple\r\n                    onChange={handleFileSelect}\r\n                  />\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                            {selectedFiles.length > 0 && (\r\n                                <ul className=\"p-0\" style={{ width: \"100%\" }}>\r\n                                    {selectedFiles.map((file, i) => (\r\n                                        <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                                            {\" \"}\r\n                                            <div className=\"d-flex align-items-center\">\r\n                                                <UploadFileIcon />{\" \"}\r\n                                                <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                                                {/* <span className=\"ml-5\">\r\n                                                    {file.url ? (  <EyeOutlined style={{ cursor: \"pointer\" }} onClick={() => window.open(file.url)} />) : null}\r\n                                                </span> */}\r\n                                            </div>\r\n                                            <div>\r\n                        {\r\n                          file.url && <span className=\"ml-3 \" style={{\r\n                            cursor: \"pointer\"\r\n                          }} onClick={() => {\r\n                            window.open(file.url, '_blank')\r\n                          }}>\r\n                            <EyeOutlined />\r\n                          </span>\r\n                        }\r\n                        <span\r\n                          style={{ cursor: \"pointer\" }}\r\n                          onClick={() => delUplFile(i)}\r\n                        >\r\n                          {\" \"}\r\n                          <CloseCircleOutlined />{\" \"}\r\n                        </span>\r\n                      </div>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            )}\r\n                        </div>\r\n              </div>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Machine Status\"\r\n\r\n              >\r\n                <Switch checked={machineStatus} onChange={(checked) => setMachineStatus(checked)} />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <div className=\"d-flex justify-content-end gap-3\">\r\n            <Button type=\"button\" onClick={handleBackClick}>\r\n              Back\r\n            </Button>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n              Save\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNewMachine;","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/add-new-sensor/index.js",["819","820","821","822","823"],"import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Select, Row, Col, Button, Switch, message, Modal } from 'antd';\r\nimport { MachineSensorIcon, UploadFileIcon } from 'assets/svg/icon';\r\nimport { CloseCircleOutlined } from '@ant-design/icons';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { axiosInstance } from 'App';\r\nimport { UploadImage } from 'utils/Upload';\r\nimport { set } from 'lodash';\r\n\r\nconst { Option } = Select;\r\n\r\nconst AddNewSensor = () => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [visible, setVisible] = useState(false);\r\n  const [sensorId, setSensorId] = useState('');\r\n  const query = new URLSearchParams(history.location.search);\r\n  const machineName = query.get('machine_name');\r\n  const [form] = Form.useForm();\r\n  const [machineStatus, setMachineStatus] = useState(false);\r\n  const [generateSensorId, setGenerateSensorId] = useState('');\r\n  const [generatedSensorId, setGeneratedSensorId] = useState('');\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const styles = {\r\n    files: {\r\n      listStyle: \"none\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"space-between\",\r\n      gap: \"13px\",\r\n      border: \"1px solid lightblue\",\r\n      padding: \"10px\",\r\n      borderRadius: \"9px\",\r\n      background: \"#0093ff0a\",\r\n    },\r\n    uploadFile: {\r\n      position: \"absolute\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      opacity: 0,\r\n    },\r\n    \".uploadFile::-webkit-file-upload-button\": {\r\n      visibility: \"hidden\",\r\n    },\r\n    \".uploadFile::before\": {\r\n      content: \"'Drag & Drop'\",\r\n      display: \"inline-block\",\r\n      padding: \"10px\",\r\n      border: \"1px solid #ccc\",\r\n      borderRadius: \"4px\",\r\n      cursor: \"pointer\",\r\n    },\r\n    \".uploadFile:hover::before\": {\r\n      backgroundColor: \"#ccc\",\r\n    },\r\n  };\r\n\r\n  const onFinish = async (values) => {\r\n    let file = [];\r\n    const temp = selectedFiles.filter((item) => {\r\n      return item.url === undefined;\r\n    })\r\n    const temp2 = selectedFiles.filter((item) => {\r\n      return item.url !== undefined;\r\n    })\r\n    if (temp.length !== 0) {\r\n      const uploadPromise = temp.map(async (item) => {\r\n        if (item.url === undefined) {\r\n          const url = await UploadImage(item);\r\n          return url;\r\n        } else {\r\n          return item.url;\r\n        }\r\n      })\r\n      setLoading(true);\r\n      file = await Promise.all(uploadPromise);\r\n      // setLoading(false);\r\n      console.log(file);\r\n    }\r\n    file = [...file, ...temp2.map((item) => {\r\n      return item.url\r\n    })];\r\n\r\n    const payload = {\r\n      sensor_type: values.sensor_type,\r\n      sensor_id: generatedSensorId,\r\n      sensor_id_label: form.getFieldValue('sensor_id_label'),\r\n      sensor_name: values.sensor_name,\r\n      sensor_location: values.sensor_location,\r\n      sensor_details: values.sensor_details,\r\n      sensor_status: machineStatus,\r\n      pictures: file\r\n    };\r\n\r\n    try {\r\n      const response = await axiosInstance.post(`/api/admin/machines/${id}/sensors`, payload);\r\n      message.success('Sensor added successfully!');\r\n      history.goBack(); // Navigate to the sensors list page\r\n    } catch (error) {\r\n      message.error('Failed to add sensor. Please try again.');\r\n      console.error('Error:', error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({ machineName: machineName })\r\n  }, [])\r\n\r\n  const handleFileSelect = (event) => {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    setSelectedFiles([...selectedFiles, newSelectedFiles[0]]);\r\n  };\r\n\r\n  const delUplFile = (i) => {\r\n    const AfterDeleteFile = selectedFiles.filter((elem, index) => index !== i);\r\n    setSelectedFiles(AfterDeleteFile);\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  const generateHexString = (id) => {\r\n    try {\r\n      // Parse the input to an integer\r\n      const sensorIdInt = parseInt(id, 10);\r\n\r\n      if (isNaN(sensorIdInt) || sensorIdInt < 0) {\r\n        return '';\r\n      }\r\n\r\n      // Convert to hex format as specified:\r\n      // LSB of sensor ID (3 bytes) + sensor type (1 byte)\r\n      // The sensor type is always 24 (0x24)\r\n\r\n      // Create a Buffer-like array for the sensor ID (3 bytes, LSB first)\r\n      const bytes = new Uint8Array(4);\r\n\r\n      // Set the sensor ID bytes (3 bytes, LSB first)\r\n      bytes[0] = sensorIdInt & 0xFF;         // First byte (LSB)\r\n      bytes[1] = (sensorIdInt >> 8) & 0xFF;  // Second byte\r\n      bytes[2] = (sensorIdInt >> 16) & 0xFF; // Third byte (MSB)\r\n\r\n      // Set the sensor type (always 0x24)\r\n      bytes[3] = 0x24;\r\n\r\n      // Convert to hex string\r\n      const hexString = Array.from(bytes)\r\n        .map(byte => byte.toString(16).padStart(2, '0'))\r\n        .join('');\r\n\r\n      return hexString.toUpperCase();\r\n    } catch (err) {\r\n      return '';\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4>\r\n        <MachineSensorIcon />\r\n        <span style={{ color: '#6a6a6a', fontWeight: '300' }}>\r\n          Machine / sensors\r\n        </span> / Add New Sensor\r\n      </h4>\r\n      <Form\r\n        labelCol={{ span: 24 }}\r\n        wrapperCol={{ span: 24 }}\r\n        onFinish={onFinish}\r\n        form={form}\r\n        name=\"control-hooks\"\r\n      >\r\n        <div className=\"border rounded p-3 bg-white\">\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item label=\"Machine Name\" name=\"machineName\">\r\n                <Input disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Sensor Type\"\r\n                name=\"sensor_type\"\r\n                rules={[{ required: true, message: 'Please Enter Sensor Type' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label={\r\n                  <span>\r\n                    Sensor ID&nbsp;\r\n                    <Button\r\n                      onClick={() => {\r\n                        setVisible(true);\r\n                        setSensorId(form.getFieldValue('sensor_id_label'));\r\n                        setGenerateSensorId(generatedSensorId);\r\n                      }}\r\n                      type=\"link\" style={{ padding: '0' }}>\r\n                      Generate ID\r\n                    </Button>\r\n                  </span>\r\n                }\r\n                name=\"sensor_id_label\"\r\n                rules={[{ required: true, message: 'Please enter Sensor ID' }]}\r\n              >\r\n                <Input disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Sensor Name\"\r\n                name=\"sensor_name\"\r\n                rules={[{ required: true, message: 'Please enter Sensor Name' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Sensor Location\"\r\n                name=\"sensor_location\"\r\n                rules={[{ required: true, message: 'Please enter Sensor Location' }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                label=\"Sensor Details\"\r\n                name=\"sensor_details\"\r\n                rules={[{ required: true, message: 'Please enter Sensor Details' }]}\r\n              >\r\n                <Input.TextArea rows={4} />\r\n              </Form.Item>\r\n              <Form.Item label=\"Sensor Status\" name=\"SensorStatus\" valuePropName=\"checked\">\r\n                <Switch\r\n                  checked={machineStatus}\r\n                  onChange={(value) => setMachineStatus(value)}\r\n                  style={{ backgroundColor: machineStatus ? '#3CA6C1' : '#d0d4d7' }}\r\n                />{' '}\r\n                {/* {machineStatus ? 'Active' : 'Inactive'} */}\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <h5 className=\"m-0 mt-2\">Upload Pictures</h5>\r\n              <div className=\"p-3\">\r\n                <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                  <UploadFileIcon />\r\n                  <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                  <h5 className=\"mb-0\">Or</h5>\r\n                  <h5 className=\"mb-0\" style={{ color: '#3CA6C1' }}>\r\n                    Click here to upload\r\n                  </h5>\r\n                  <input\r\n                    style={styles.uploadFile}\r\n                    className=\"uploadFile\"\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    multiple\r\n                    onChange={handleFileSelect}\r\n                  />\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  {selectedFiles.length > 0 && (\r\n                    <ul className=\"p-0\" style={{ width: '100%' }}>\r\n                      {selectedFiles.map((file, i) => (\r\n                        <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <UploadFileIcon /> <span className=\"ml-2\">{file.name}</span>\r\n                          </div>\r\n                          <span style={{ cursor: 'pointer' }} onClick={() => delUplFile(i)}>\r\n                            <CloseCircleOutlined />\r\n                          </span>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <Form.Item>\r\n          <div style={{ gap: '10px' }} className=\"mt-5 d-flex justify-content-end\">\r\n            <Button className=\"px-4 font-weight-semibold\" htmlType=\"button\" onClick={handleBackClick}>\r\n              Back\r\n            </Button>\r\n            <Button className=\"px-4 font-weight-semibold text-white bg-primary\"\r\n              loading={loading}\r\n              htmlType=\"submit\">\r\n              Save\r\n            </Button>\r\n          </div>\r\n        </Form.Item>\r\n      </Form>\r\n\r\n      <Modal title=\"Generate Sensor ID\" visible={visible} onOk={() => {\r\n        if(sensorId === ''){\r\n          message.error('Please enter a Sensor ID');\r\n          return;\r\n        }\r\n        if(isNaN(sensorId)){\r\n          message.error('Please enter a valid Sensor ID');\r\n          return;\r\n        }\r\n\r\n        setVisible(false);\r\n        form.setFieldsValue({ sensor_id_label: sensorId });\r\n        setGeneratedSensorId(generateSensorId);\r\n      }} onCancel={() => {\r\n        setVisible(false);\r\n      }}>\r\n        <Form\r\n          layout='vertical'>\r\n          <Form.Item label=\"Sensor ID\"\r\n\r\n          >\r\n            <Input\r\n              value={sensorId}\r\n              onChange={(e) => {\r\n                if(isNaN(e.target.value)){\r\n                  message.error('Please enter a valid Sensor ID');\r\n                  return;\r\n                }\r\n                setSensorId(e.target.value);\r\n                const temp = generateHexString(e.target.value);\r\n                \r\n                setGenerateSensorId(temp);\r\n              }\r\n              }\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Generate Sensor ID\"\r\n\r\n          >\r\n            <Input disabled\r\n              value={generateSensorId}\r\n\r\n            />\r\n          </Form.Item>\r\n\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNewSensor;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/view-reports/Index.js",["824","825","826","827"],"import React, {useState, useEffect} from \"react\";\r\nimport headerLogo from \"assets/svg/Female09.png\";\r\nimport signature from 'assets/svg/image 51.png';\r\nimport { axiosInstance } from \"App\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nconst tableData = [\r\n  {\r\n    srNo: 1,\r\n    quoteJobRef: \"Q123\",\r\n    poRef: \"PO456\",\r\n    customer: \"ABC Company\",\r\n    sales: \"John Doe\",\r\n  },\r\n  {\r\n    srNo: 2,\r\n    quoteJobRef: \"Q124\",\r\n    poRef: \"PO457\",\r\n    customer: \"XYZ Inc.\",\r\n    sales: \"Jane Smith\",\r\n  },\r\n  {\r\n    srNo: 3,\r\n    quoteJobRef: \"Q125\",\r\n    poRef: \"PO458\",\r\n    customer: \"123 Corp\",\r\n    sales: \"Alex Brown\",\r\n  },\r\n];\r\nconst tableData2 = [\r\n    { srNo: 1, dateReceived: '2024-03-14', receivedBy: 'John Doe', dateRequested: '2024-03-10', dateDelivery: '2024-03-15', deliveredBy: 'Jane Smith' },\r\n    { srNo: 2, dateReceived: '2024-03-15', receivedBy: 'Alex Brown', dateRequested: '2024-03-12', dateDelivery: '2024-03-17', deliveredBy: 'Michael Johnson' },\r\n    { srNo: 3, dateReceived: '2024-03-16', receivedBy: 'Emily Wilson', dateRequested: '2024-03-14', dateDelivery: '2024-03-18', deliveredBy: 'Sarah Lee' }\r\n  ];\r\nconst ViewReports = () => {\r\n  const { id } = useParams();\r\n  const [reportData, setReportData] = useState({});\r\n  const [jobReference, setJobReference] = useState([\r\n    {\r\n      srNo: 1,\r\n      quote_job_ref: \"\",\r\n      po_ref: \"\",\r\n      customer: \"\",\r\n      sales: \"\",   \r\n    }\r\n  ])\r\n  const [receiveAndDeliverData, setReceiveAndDeliverData] = useState([\r\n      {\r\n        srNo: 1,\r\n        dateReceived: \"\",\r\n        receivedBy: \"\",\r\n        dateRequested: \"\",\r\n        dateDelivery: \"\",\r\n        deliveredBy: \"\"\r\n      }\r\n  ])\r\n\r\n\r\n  const fetchEventData = async (event_id) => {\r\n      const response = await axiosInstance.get(`api/admin/life-cycle-event/${+event_id}/show`);\r\n      let data = response.data.item;\r\n      if(data) {\r\n        setJobReference(data.job_reference)\r\n        setReceiveAndDeliverData(data.receive_and_deliver_data)\r\n        console.log(data.job_reference)\r\n        console.log(data.receive_and_deliver_data)\r\n      }\r\n    }\r\n\r\n  const fetchReportData = async () => {\r\n    const response = await axiosInstance.get(`api/admin/reports/${id}/show`);\r\n    let data = response.data.item;\r\n    setReportData(data);\r\n    if(data.life_cycle_event_id) fetchEventData(data.life_cycle_event_id);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchReportData();\r\n  }, [])\r\n  \r\n  return (\r\n    <div className=\"bg-white\">\r\n      <div>\r\n        <h3\r\n          className=\"bg-primary p-3 text-white d-flex justify-content-center align-items-center\"\r\n          style={{ gap: \"8px\" }}\r\n        >\r\n          {/* <img src={headerLogo} alt=\"./..\" /> */}\r\n          <img src={'/img/logo.svg'} alt=\"./..\" />\r\n        </h3>\r\n      </div>\r\n      <div className=\"p-3 mt-4\">\r\n        <div className=\"d-flex justify-content-between\">\r\n          <h5>\r\n            Created By:{\" \"}\r\n            {/* <span className=\"font-weight-300\">\r\n              John Smith (Operation Manager)\r\n            </span> */}\r\n            <span className=\"font-weight-300\">\r\n              {reportData.created_by_name || ''}\r\n            </span>\r\n          </h5>\r\n          <h5>\r\n            Date: <span className=\"font-weight-300\">{moment(reportData.created_at).format(\"DD MMM YYYY, hh:mm A\")}</span>\r\n          </h5>\r\n        </div>\r\n        <div\r\n          style={{\r\n            borderTop: \"0.5px solid #b2adad\",\r\n            width: \"100%\",\r\n            margin: \"auto\",\r\n          }}\r\n        ></div>\r\n\r\n        {reportData.enabled_fields && reportData.enabled_fields.includes('Job Reference') && <h5 className=\"mt-4\">Job Reference </h5>}\r\n        {reportData.enabled_fields && reportData.enabled_fields.includes('Job Reference') && <div\r\n          style={{\r\n            border: \"1px solid rgb(233 233 233)\",\r\n            padding: \"0px\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <table style={{ borderCollapse: \"collapse\", width: \"100%\" }}>\r\n            <thead>\r\n              <tr\r\n                style={{\r\n                  backgroundColor: \"#5badd5\",\r\n                  color: \"white\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                  Sr No\r\n                </th>\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                  Quote/Job Ref\r\n                </th>\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                  PO Ref\r\n                </th>\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                  Customer\r\n                </th>\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                  Sales\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {jobReference.map((row, index) => (\r\n                <tr key={index}>\r\n                  <td style={{ padding: \"8px\", border: \"none\" }}>\r\n                    {row.srNo}\r\n                  </td>\r\n                  <td style={{ padding: \"8px\", border: \"none\" }}>\r\n                    {row.quote_job_ref}\r\n                  </td>\r\n                  <td style={{ padding: \"8px\", border: \"none\" }}>\r\n                    {row.po_ref}\r\n                  </td>\r\n                  <td style={{ padding: \"8px\", border: \"none\" }}>\r\n                    {row.customer}\r\n                  </td>\r\n                  <td style={{ padding: \"8px\", border: \"none\" }}>\r\n                    {row.sales}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>}\r\n        {reportData.enabled_fields && (reportData.enabled_fields.includes('Receiving & Delivery') || reportData.enabled_fields.includes('Recieving and Delivery'))\r\n         && <h5 className=\"mt-4\">Receiving & Delivery </h5>}\r\n        {reportData.enabled_fields && (reportData.enabled_fields.includes('Receiving & Delivery') || reportData.enabled_fields.includes('Recieving and Delivery'))\r\n         && <div\r\n          style={{\r\n            border: \"1px solid rgb(233 233 233)\",\r\n            padding: \"0px\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <table style={{ borderCollapse: \"collapse\", width: \"100%\" }}>\r\n            <thead>\r\n              <tr\r\n                style={{\r\n                  backgroundColor: \"#5badd5\",\r\n                  color: \"white\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                  Sr No\r\n                </th>\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                Date of Recieved\r\n                </th>\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                Received By\r\n                </th>\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                Date Requested\r\n                </th>\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                Date Delivery \r\n                </th>\r\n                <th style={{ padding: \"12px\", border: \"none\" }}>\r\n                Delivered By \r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {receiveAndDeliverData.map((row, index) => (\r\n            <tr key={index}>\r\n              <td style={{ padding: \"8px\", border: \"none\" }}>{row.srNo}</td>\r\n              <td style={{ padding: \"8px\", border: \"none\" }}>{row.dateReceived? \r\n              moment(row.dateReceived).format(\"DD-MM-YYYY\"): ''  \r\n            }</td>\r\n              <td style={{ padding: \"8px\", border: \"none\" }}>{row.receivedBy}</td>\r\n              <td style={{ padding: \"8px\", border: \"none\" }}>{row.dateRequested?\r\n              moment(row.dateRequested).format(\"DD-MM-YYYY\"): ''  \r\n            }</td>\r\n              <td style={{ padding: \"8px\", border: \"none\" }}>{row.dateDelivery?\r\n              moment(row.dateDelivery).format(\"DD-MM-YYYY\"): ''  \r\n            }</td>\r\n              <td style={{ padding: \"8px\", border: \"none\" }}>{row.deliveredBy}</td>\r\n            </tr>\r\n          ))}\r\n            </tbody>\r\n          </table>\r\n        </div>}\r\n        <h4 className=\"mt-5 font-weight-400\" style={{color:'#1a3353a6',fontSize:'15px'}}>\r\n        {/* Date of Report: 11 Aug 2023, 10:00 Am */}\r\n        Date of Report: {moment(reportData.created_at).format(\"DD MMM YYYY, hh:mm A\")}\r\n        </h4>\r\n        <h5 className=\"mt-3\"><sup>*</sup>Term & Conditions Apply</h5>\r\n        {/* <p className=\"w-75\" style={{color:'black'}}>\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nec id turpis malesuada nibh. Faucibus vitae, blandit aliquet scelerisque faucibus magna volutpat. Vitae aliquet maecenas purus sem. Egestas pellentesque varius elit quisque placerat integer elit sed senectus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nec id turpis malesuada nibh. Faucibus vitae, blandit aliquet scelerisque faucibus magna volutpat. Vitae aliquet maecenas purus sem. Egestas pellentesque varius elit quisque placerat integer elit sed senectus. \r\n        </p> */}\r\n        <img className=\"mt-2\" src={signature} alt=\"...\" />\r\n        <h3 className=\"mb-0\">{reportData.created_by_name || ''}</h3>\r\n        {/* <p style={{fontSize:'16px',fontWeight:'300'}} className=\"mb-0\">Operation Manager, Acme Co</p> */}\r\n        <p style={{fontSize:'16px',fontWeight:'300'}}>{moment(reportData.created_at).format(\"DD MMM YYYY, hh:mm A\")}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewReports;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/jobsites/Jobsite.js",["828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853"],"import { DashboardOutlined, DeleteOutlined, EditOutlined, EllipsisOutlined, EyeOutlined, MoreOutlined, SearchOutlined, TeamOutlined, UserSwitchOutlined } from '@ant-design/icons'\r\nimport Icon from '@ant-design/icons/lib/components/Icon'\r\nimport { Avatar, Button, Checkbox, Dropdown, Input, Menu, Space, Table, Tag, Modal, Select, Form, Radio, message, Popconfirm } from 'antd'\r\nimport SubMenu from 'antd/lib/menu/SubMenu'\r\nimport { AccountStatusIcon, AssignDashboardIcon, CsvIcon, FilterIcon, SuccessTickIcon } from 'assets/svg/icon'\r\nimport Filter from 'components/shared-components/Filter'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Alert from '../../../assets/images/Alert.png'\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min'\r\nimport { axiosInstance } from 'App'\r\nimport moment from 'moment'\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom'\r\nimport { JobsitesCsv } from \"constants/Headers\";\r\nimport Csv from \"utils/Csv\";\r\nimport ConfirmModal from 'components/shared-components/ConfirmModal'\r\nimport { hasPermission } from 'utils/permissionUtils';\r\n\r\nconst { Option } = Select;\r\n\r\nconst Jobsites = () => {\r\n  const [modalVisible2, setModalVisible2] = useState(false);\r\n  const [deleteId, setDeleteId] = useState(null);\r\n  const history = useHistory();\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [deleteConfirmationModal, setDeleteConfirmationModal] = useState(false)\r\n  const [looading, setLoading] = useState(false)\r\n  const [area, setArea] = useState([])\r\n  const [alertModal, setAlertModal] = useState(false)\r\n  const [searchText, setSearchText] = useState('');\r\n  const [selectedDashboards, setSelectedDashboards] = useState([]);\r\n  const [csvData, setCSVData] = useState([]);\r\n  // const [data, setData] = useState([]);\r\n  const handleCancel = () => {\r\n    setModalVisible(false);\r\n  };\r\n  const handleYesConfirmation2 = () => {\r\n    deleteRow(deleteId);\r\n    setModalVisible2(false);\r\n  }\r\n  const handleCancelConfirmation = () => {\r\n    setDeleteConfirmationModal(false)\r\n  }\r\n  const handleYesConfirmation = () => {\r\n    setDeleteConfirmationModal(false)\r\n    handleOpenAlert()\r\n    setTimeout(() => {\r\n      handleCloseAlert()\r\n    }, 1500);\r\n  }\r\n  const handleOpenAlert = () => {\r\n    setAlertModal(true)\r\n  }\r\n  const handleCloseAlert = () => {\r\n    setAlertModal(false)\r\n  }\r\n  const handleSave = (selectedDashboards) => {\r\n    // Handle save logic here\r\n    console.log('Selected Dashboards:', selectedDashboards);\r\n    setModalVisible(false);\r\n  };\r\n  const handleSelectChange = (selectedValues) => {\r\n    if (selectedValues.includes('all')) {\r\n      setSelectedDashboards(['all', 'Vibratory Sensor Dashboard', 'Solar Sensor Dashboard']);\r\n    } else {\r\n      setSelectedDashboards(selectedValues);\r\n    }\r\n  };\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = async (search=\"\",status = '', workshop = '') => {\r\n    // ?search=${search}&status=${status!='all'?status:''}&area=${workshop!='all'?workshop:''}\r\n    // let url = `?search=${search}`\r\n    let url = `?customer_id=${localStorage.getItem(\"parent_id\")!=\"null\"? localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}&search=${search}`\r\n\r\n    //for 0 it is not handling\r\n    if((status !== '' && status != 'all')) {\r\n      url += `&status=${status}`\r\n    }\r\n    if((workshop !== '' && workshop != 'all')) {\r\n      url += `&operational_area_id=${workshop}`\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      const resp = await axiosInstance.get(`/api/web/jobsites${url}`);\r\n      setData(resp.data.items);\r\n\r\n      setCSVData(resp.data.items.map((item)=>{\r\n        return {\r\n          id: item.id,\r\n          name: item.jobsite_name,\r\n          area: item.operational_area.area_name,\r\n          phone_no: item.phone_code + ' ' + item.phone_no,\r\n          created_at: moment(item.created_at).format('DD-MM-YYYY'),\r\n          status: item.status===1?\"Active\":\"Inactive\",\r\n        }\r\n      }))\r\n      setLoading(false)\r\n    } catch (err) {\r\n      console.log(err)\r\n      message.error('Something went wrong')\r\n    }\r\n  }\r\n\r\n    const getData2 = async () => {\r\n      let url = `?customer_id=${localStorage.getItem(\"parent_id\")!=\"null\"? localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}&status=1`\r\n      try {\r\n        setLoading(true)\r\n        const resp = await axiosInstance.get('/api/web/operational-area'+url);\r\n        setArea(resp.data.items);\r\n      } catch (err) {\r\n        console.log(err)\r\n       \r\n        message.error('Something went wrong')\r\n      }\r\n    }\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    getData2();\r\n  }, [])\r\n\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    // {\r\n    //   // title: 'Image',\r\n    //   dataIndex: 'image',\r\n    //   key: 'image',\r\n    //   render: (text, record) => <Avatar src={text} alt={`Avatar for ${record.organization}`} />,\r\n    // },\r\n    {\r\n      title: 'Jobsite Name',\r\n      dataIndex: 'jobsite_name',\r\n      key: 'jobsite_name',\r\n    },\r\n    {\r\n      title: 'Area',\r\n      dataIndex: 'operational_area',\r\n      key: 'operational_area',\r\n      render: (text, record) => <span>{record.operational_area.area_name}</span>\r\n    },\r\n    {\r\n      title: 'Mobile Number',\r\n      dataIndex: 'phone_no',\r\n      key: 'phone_no',\r\n        render: (text, record) => <span>{record.phone_code + \" \" +record.phone_no}</span>\r\n    },\r\n    // {\r\n    //   title: 'Email ID',\r\n    //   dataIndex: 'email',\r\n    //   key: 'email',\r\n    // },\r\n    {\r\n      title: 'Created On',\r\n      dataIndex: 'created_at',\r\n      key: 'created_at',\r\n        render: (text) => moment(text).format('DD-MM-YYYY hh:mm A')\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render: (active) => (active ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>),\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getMenu(record.id)} placement=\"bottomRight\" trigger={['hover']}>\r\n            <MoreOutlined />\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n\r\n  const getMenu = (record) => (\r\n    <Menu>\r\n     \r\n      {hasPermission('job_sites', 'Edit Jobsites') && (\r\n        <Menu.Item key=\"edit\" onClick={() => {\r\n          history.push(`/app/operator-master/jobsites/edit/${record}`)\r\n        }}>\r\n          <EditOutlined /> Edit\r\n        </Menu.Item>\r\n      )}\r\n      {/* <Popconfirm\r\n        title={\"Are you sure you want to delete this item?\"}\r\n        description={\"This action cannot be undone.\"}\r\n        okText=\"Yes\"\r\n        cancelText=\"No\"\r\n        onConfirm={() => deleteRow(record)}\r\n      > */}\r\n        <Menu.Item key=\"delete\"\r\n          onClick={() => {\r\n            setModalVisible2(true)\r\n            setDeleteId(record)\r\n          }}\r\n        >\r\n          <span style={{ display: \"flex\", gap: \"8px\", alignItems: \"center\" }}>\r\n            <DeleteOutlined /> Delete\r\n          </span>\r\n        </Menu.Item>\r\n      {/* </Popconfirm> */}\r\n      {/* <Menu.Item onClick={() => setModalVisible(true)}>\r\n        <AccountStatusIcon /> Account Status\r\n      </Menu.Item> */}\r\n    </Menu>\r\n  );\r\n  const deleteRow = async (id) => {\r\n    console.log(id);\r\n    try {\r\n      const response = await axiosInstance.delete(\r\n        `api/web/jobsites/${id}`\r\n      );\r\n      if (response.status === 200) {\r\n        message.success(\"Jobsite deleted successfully\");\r\n        // setData((prevData) => prevData.filter((item) => item.id !== id));\r\n        getData()\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting row:\", error);\r\n      if (error.response && error.response.data && error.response.data.message) {\r\n        message.error(error.response.data.message);\r\n      } else {\r\n        message.error(\"Failed to delete jobsite\");\r\n      }\r\n    }\r\n  };\r\n\r\n  var timeout = \"\"\r\n  const onSearch = (value) => {\r\n    setSearchText(value.target.value)\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => {\r\n      getData(value.target.value, selectedStatus)\r\n    }, 500)\r\n  }\r\n\r\n  const [selectedStatus, setSelectedStatus] = useState('all');\r\n  const [selectedWorkshop, setSelectedWorkshop] = useState('all');\r\n  const handleStatusChange = (filter) => {\r\n    setSelectedStatus(filter);\r\n    getData(searchText,filter=='active'?1:filter=='inactive'?0:'all', selectedWorkshop);\r\n    // Trigger the data fetch or update logic here for status\r\n    console.log(`Applied status filter: ${filter}`);\r\n  };\r\n\r\n  const handleWorkshopChange = (filter) => {\r\n    setSelectedWorkshop(filter);\r\n    getData(searchText,selectedStatus=='active'?1:selectedStatus=='inactive'?0:'all', filter);\r\n    // Trigger the data fetch or update logic here for workshop\r\n    console.log(`Applied workshop filter: ${filter}`);\r\n  };\r\n  const FilterMenu = (\r\n    <Menu mode=\"horizontal\">\r\n      {/* Status Filter */}\r\n      <SubMenu key=\"status\" title=\"Status\">\r\n        <Menu.Item key=\"status-all\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'all'}\r\n            onChange={() => handleStatusChange('all')}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-active\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'active'}\r\n            onChange={() => handleStatusChange('active')}\r\n          >\r\n            Active\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-inactive\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'inactive'}\r\n            onChange={() => handleStatusChange('inactive')}\r\n          >\r\n            Inactive\r\n          </Checkbox>\r\n        </Menu.Item>\r\n      </SubMenu>\r\n      <SubMenu key=\"jobType\" title=\"Job Type\">\r\n      <Menu.Item key={`jobType-all`}>\r\n              <Checkbox\r\n                checked={selectedWorkshop === \"all\"}\r\n                onChange={() => handleWorkshopChange(\"all\")}\r\n              >\r\n               All\r\n              </Checkbox>\r\n            </Menu.Item>\r\n        {\r\n          area.map((item, i) => (\r\n            <Menu.Item key={`jobType-${i}`}>\r\n              <Checkbox\r\n                checked={selectedWorkshop === item.id}\r\n                onChange={() => handleWorkshopChange(item.id)}\r\n              >\r\n                {item.area_name}\r\n              </Checkbox>\r\n            </Menu.Item>\r\n          ))\r\n        }\r\n\r\n      </SubMenu>\r\n   \r\n      {/* <SubMenu key=\"workshop\" title=\"Area\">\r\n        <Menu.Item key=\"area-all\">\r\n          <Checkbox\r\n            checked={selectedWorkshop === 'all'}\r\n            onChange={() => handleWorkshopChange('all')}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        {workshopData.map((item, i) => (\r\n          <Menu.Item key={`workshop-${i}`}>\r\n            <Checkbox\r\n              checked={selectedWorkshop === item.id}\r\n              onChange={() => handleWorkshopChange(item.id)}\r\n            >\r\n              {item.workshop_name}\r\n            </Checkbox>\r\n          </Menu.Item>\r\n        ))}\r\n      </SubMenu> */}\r\n    </Menu>\r\n  );\r\n\r\n  const exportHandler = () => {\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4> <UserSwitchOutlined /><span style={{\r\n        color: '#6a6a6a',\r\n        fontWeight: '300'\r\n      }}> Operation Master </span>/ Jobsites  </h4>\r\n      <div className=\"d-flex justify-content-between mb-3\">\r\n        <div className=\"\" style={{ display: \"flex\" }}>\r\n          <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              value={searchText}\r\n              onChange={onSearch}\r\n              style={{\r\n                width: 200,\r\n              }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space>\r\n          <Filter filters={FilterMenu}>\r\n            <Button\r\n              icon={<Icon component={FilterIcon} />}\r\n              className=\"d-flex align-items-center ml-2\"\r\n            >\r\n              Filters\r\n            </Button>\r\n          </Filter>\r\n          <Csv header={JobsitesCsv} data={csvData} filename={\"Jobsites List\"} />\r\n          {/* <Button icon={<Icon component={CsvIcon} />} className=\"d-flex align-items-center ml-2\" onClick={exportHandler}>Export</Button> */}\r\n        </div>\r\n        {hasPermission('job_sites', 'Create New Jobsites') && (\r\n          <div className=\"mb-2 d-flex align-items-center\">\r\n            <Button\r\n              className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n            >\r\n              <Link to={'jobsites/add-new'}>\r\n                + Add New</Link>\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <Table\r\n          loading={looading}\r\n          columns={columns} dataSource={data} />\r\n      </div>\r\n      <Modal\r\n        // title={<div className='d-flex align-items-center'><span className='d-block ml-2' > User Account Status </span></div>}\r\n        visible={deleteConfirmationModal}\r\n        onCancel={() => setDeleteConfirmationModal(false)}\r\n        footer={false}\r\n      >\r\n        <div className='d-flex flex-column justify-content-center align-items-center'>\r\n          <img style={{ width: '60px' }} src={Alert} alt={'...'} />\r\n          <h4 style={{ fontWeight: '300', width: '250px' }} className='text-center'>Are you sure you want to delete\r\n            user records?</h4>\r\n        </div>\r\n        <div className='d-flex justify-content-center mt-3'>\r\n          <Button className='' onClick={() => handleCancelConfirmation()}>\r\n            No\r\n          </Button>\r\n          <Button className='bg-primary text-white ml-2' onClick={handleYesConfirmation}>\r\n            Yes\r\n          </Button>\r\n        </div>\r\n\r\n      </Modal>\r\n      <Modal\r\n        visible={alertModal}\r\n        onCancel={() => setAlertModal(false)}\r\n        footer={false}\r\n      >\r\n        <div className='d-flex flex-column justify-content-center align-items-center'>\r\n          <SuccessTickIcon />\r\n          <h4 style={{ fontWeight: '300', width: '250px' }} className='text-center'>Admin account deleted successfully!</h4>\r\n        </div>\r\n        <div className='d-flex justify-content-center mt-3'>\r\n          <Button className='bg-primary text-white ml-2' onClick={handleCloseAlert}>\r\n            Close\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <ConfirmModal\r\n        deleteConfirmationModal={modalVisible2}\r\n        setDeleteConfirmationModal={setModalVisible2}\r\n        handleYesConfirmation={handleYesConfirmation2}\r\n        msg={'Do you want to delete this Jobsite?'}\r\n      />     \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Jobsites\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/jobsites/AddNew/AddNew.js",["854","855","856","857"],"import { CloseCircleOutlined, EyeOutlined, UserSwitchOutlined } from '@ant-design/icons'\r\nimport { Button, Card, Form, Input, InputNumber, message, Select, Switch, Tabs } from 'antd'\r\nimport { Option } from 'antd/lib/mentions';\r\nimport { axiosInstance } from 'App';\r\nimport { UploadFileIcon } from 'assets/svg/icon';\r\nimport axios from 'axios';\r\nimport { CountryContext } from 'CountryContext';\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom/cjs/react-router-dom';\r\nimport CountrySelector from 'utils/CountrySelector';\r\nimport PhoneCode from 'utils/PhoneCode';\r\nimport { UploadImage } from 'utils/Upload';\r\nimport usePostalCodeLookup from 'hooks/usePostalCodeLookup';\r\nimport { GoogleMap, Marker, useLoadScript } from \"@react-google-maps/api\";\r\n\r\n\r\nfunction AddNew() {\r\n    const [form] = Form.useForm();\r\n    const [status, setStatus] = useState(true);\r\n    const [data, setData] = useState([]);\r\n    const [countryCode, setCountryCode] = useState(\"+91\");\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const [selectedFiles, setSelectedFiles] = useState([]);\r\n    const { countryList } = useContext(CountryContext);\r\n    const { lookupPostalCode, loading: postalLoading } = usePostalCodeLookup(form, countryList);\r\n\r\n    const { isLoaded } = useLoadScript({\r\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAP,\r\n    });\r\n\r\n    const mapContainerStyle = {\r\n        width: \"100%\",\r\n        height: \"300px\",\r\n        marginBottom: \"20px\"\r\n    };\r\n\r\n    const getMapCenter = () => {\r\n        const latitude = form.getFieldValue('latitude');\r\n        const longitude = form.getFieldValue('longitude');\r\n        \r\n        if (latitude && longitude) {\r\n            return {\r\n                lat: parseFloat(latitude),\r\n                lng: parseFloat(longitude)\r\n            };\r\n        }\r\n        \r\n        return {\r\n            lat: 1.3521, // Default to Singapore\r\n            lng: 103.8198\r\n        };\r\n    };\r\n    const handleFileSelect = (event) => {\r\n        const fileList = event.target.files;\r\n        const newSelectedFiles = [];\r\n        for (let i = 0; i < fileList.length; i++) {\r\n            newSelectedFiles.push(fileList[i]);\r\n        }\r\n        setSelectedFiles([...selectedFiles, ...newSelectedFiles]);\r\n    };\r\n    const delUplFile = (i) => {\r\n        let AfterDeleteFile = selectedFiles.filter((_, index) => index !== i);\r\n        setSelectedFiles(AfterDeleteFile);\r\n    };\r\n    const onFinish = async (values) => {\r\n\r\n        let file = [];\r\n        const temp = selectedFiles.filter((item) => {\r\n            return item.url === undefined;\r\n        })\r\n        const temp2 = selectedFiles.filter((item) => {\r\n            return item.url !== undefined;\r\n        })\r\n        setLoading(true);\r\n        if (temp.length !== 0) {\r\n            const uploadPromise = temp.map(async (item) => {\r\n                if (item.url === undefined) {\r\n                    const url = await UploadImage(item);\r\n                    return url;\r\n                } else {\r\n                    return item.url;\r\n                }\r\n            })\r\n            file = await Promise.all(uploadPromise);\r\n            console.log(file);\r\n        }\r\n        file = [...file, ...temp2.map((item) => {\r\n            return item.url\r\n        })];\r\n        if (id) {\r\n            try {\r\n                axiosInstance.put(`api/web/jobsites/${id}`, {\r\n                    ...form.getFieldsValue(),\r\n                    status: status,\r\n                    pictures: file,\r\n                    phone_code: countryCode\r\n                }).then(response => {\r\n                    if (response.status === 200) {\r\n                        message.success(\"Updated Successfully\");\r\n                        history.push(`/app/operator-master/jobsites`)\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                setLoading(false);\r\n                message.error(\"Something went wrong\");\r\n            }\r\n        } else {\r\n            try {\r\n                axiosInstance.post('api/web/jobsites', {\r\n                    ...form.getFieldsValue(),\r\n                    status: status,\r\n                    pictures: file,\r\n                    phone_code: countryCode\r\n                }).then(response => {\r\n                    if (response.status === 200) {\r\n                        message.success(\"Added Successfully\");\r\n                        // history.push('/app/operator-master/operational-areas')\r\n                        history.push(`/app/operator-master/jobsites`)\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                setLoading(false);\r\n                message.error(\"Something went wrong\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const getData = async (id) => {\r\n        try {\r\n            const response = await axiosInstance.get(`api/web/jobsites/${id}`);\r\n            if (response.status === 200) {\r\n                const data = response.data.item;\r\n                form.setFieldsValue({\r\n                    ...data,\r\n                })\r\n                setStatus(data.status);\r\n                setSelectedFiles(data?.pictures.map((item, index) => {\r\n                    return {\r\n                        url: item?.file_url,\r\n                        name: `Picture ${index + 1}`\r\n                    }\r\n                }))\r\n                setCountryCode(data.phone_code);\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    const handlePostalCodeChange = async (e) => {\r\n        const postalCode = e.target.value;\r\n        if (postalCode && postalCode.length === 6) {\r\n            await lookupPostalCode(postalCode);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n\r\n        getOperationArea();\r\n    }, [])\r\n\r\n    const getOperationArea = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`api/web/operational-area?customer_id=${localStorage.getItem(\"parent_id\") != \"null\" ? localStorage.getItem(\"parent_id\") : localStorage.getItem(\"user_id\")}&status=1`);\r\n            if (response.status === 200) {\r\n                setData(response.data.items);\r\n                if (id) {\r\n                    getData(id);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"customTableBackground\">\r\n            <h4> <UserSwitchOutlined /><span style={{\r\n                color: '#6a6a6a',\r\n                fontWeight: '300'\r\n            }}> Operation Master / Jobsite</span> / {id ?\r\n                \"Edit\" : \"Add New\"\r\n                } </h4>\r\n            <Card>\r\n                <Tabs defaultActiveKey=\"1\">\r\n                    <Tabs.TabPane tab=\"Job Site Details\" key=\"1\">\r\n                        <Form form={form} layout=\"vertical\" onFinish={onFinish} >\r\n\r\n                            <div className=\"row\">\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    name=\"jobsite_name\"\r\n                                    label=\"Jobsite Name\"\r\n                                    rules={[{ required: true, message: 'Please input Jobsite Name!' }]}\r\n                                >\r\n                                    <Input />\r\n                                </Form.Item>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    name=\"phone_no\"\r\n                                    label=\"Phone Number\"\r\n                                    rules={[\r\n                                        { required: true, message: \"Please enter Phone Number\" },\r\n                                        {\r\n                                            pattern: new RegExp(/^[0-9\\b]+$/),\r\n                                            message: \"Please enter valid phone number\",\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input\r\n                                        addonBefore={\r\n                                            // <Select\r\n                                            //     // defaultValue={\"In\"}\r\n                                            //     style={{\r\n                                            //         width: 80,\r\n                                            //     }}\r\n                                            //     value={countryCode}\r\n                                            //     onChange={(e) => {\r\n                                            //         setCountryCode(e)\r\n                                            //     }}\r\n                                            // >\r\n                                            //     <Option value=\"+91\">+91</Option>\r\n                                            //     <Option value=\"+65\">+65</Option>\r\n                                            // </Select>\r\n                                            <PhoneCode value={countryCode} onChange={(e) => {\r\n                                                setCountryCode(e)\r\n                                            }\r\n                                            } />\r\n                                        }\r\n                                        style={{ width: \"100%\" }}\r\n                                        placeholder=\"Phone number\"\r\n                                    />\r\n                                </Form.Item>\r\n                            </div>\r\n                            <div style={{\r\n                                // fontSize: \"px\",\r\n                                fontWeight: \"bold\",\r\n                                color: \"#000\",\r\n                                marginBottom: \"10px\"\r\n                            }}>\r\n                                JobSite Address\r\n                            </div>\r\n\r\n                            <div style={{\r\n                                width: \"45%\"\r\n                            }}>\r\n                                <Form.Item name={\"operational_area_id\"} label=\"Operational Area\" rules={[{ required: true, message: 'Please select Operational Area!' }]}>\r\n                                    <Select placeholder=\"Select Operational Area\" style={{ width: '100%' }}>\r\n                                        {data.map((item) => {\r\n                                            return <Select.Option key={item.id} value={item.id}>{item.area_name}</Select.Option>\r\n                                        })}\r\n                                    </Select>\r\n                                </Form.Item>\r\n\r\n                            </div>\r\n\r\n                            <div style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                marginBottom: \"20px\"\r\n                            }}>\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    label={'Postal Code'}\r\n                                    name=\"postal_code\"\r\n                                    rules={[{ required: true, message: 'Please input postal Code!' },\r\n                                    {\r\n                                        pattern: new RegExp(/^[0-9\\b]+$/),\r\n                                        message: \"Please enter valid postal code\",\r\n                                    },\r\n                                    {\r\n                                        len: 6,\r\n                                        message: \"Postal code must be exactly 6 digits\",\r\n                                    }\r\n                                    ]}\r\n                                >\r\n                                    <Input \r\n                                        placeholder=\"Postal Code\" \r\n                                        style={{ width: '100%' }}\r\n                                        onChange={handlePostalCodeChange}\r\n                                        loading={postalLoading}\r\n                                    />\r\n                                </Form.Item>\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    label={'Block Number'}\r\n                                    name=\"block_number\"\r\n                                    rules={[{ required: true, message: 'Please enter the block number!' }]}\r\n                                >\r\n                                    <InputNumber placeholder=\"Block Number\" style={{ width: '100%' }} />\r\n                                </Form.Item>\r\n                            </div>\r\n\r\n                            <div style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                marginBottom: \"20px\"\r\n                            }}>\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    label={'Street Number'}\r\n                                    name=\"street_number\"\r\n                                    rules={[{ required: true, message: 'Please enter the street number!' }\r\n                                     \r\n                                    ]}\r\n                                >\r\n                                    <Input placeholder=\"Street Number\" style={{ width: '100%' }} />\r\n                                </Form.Item>\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    label={'Unit Number'}\r\n                                    name=\"unit_number\"\r\n                                    rules={[{ required: true, message: 'Please enter the unit number!' }]}\r\n                                >\r\n                                    <Input placeholder='Unit Number' style={{ width: '100%' }} />\r\n                                </Form.Item>\r\n                            </div>\r\n                            <div style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                marginBottom: \"20px\"\r\n                            }}>\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    label={'Level Number'}\r\n                                    name=\"level_number\"\r\n                                    rules={[{ required: true, message: 'Please enter the level number!' },\r\n                                   \r\n                                    ]}\r\n                                >\r\n                                    <Input placeholder=\"Level Number\" style={{ width: '100%' }} />\r\n                                </Form.Item>\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    label={'Country'}\r\n                                    name=\"country\"\r\n                                    rules={[{ required: true, message: 'Please select a country!' }]}\r\n                                >\r\n                                    <CountrySelector onChange={\r\n                                        (e) => {\r\n                                            form.setFieldsValue({\r\n                                                country: e\r\n                                            })\r\n                                        }\r\n                                    } \r\n                                    />\r\n                                </Form.Item>\r\n                            </div >\r\n                            <div style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                marginBottom: \"20px\"\r\n                            }}>\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    label={'Latitude'}\r\n                                    name=\"latitude\"\r\n                                    rules={[{ required: true, message: 'Please input Latitude!' }]}\r\n                                \r\n                                >\r\n                                    <Input disabled placeholder=\"Latitude\" style={{ width: '100%' }} />\r\n                                </Form.Item>\r\n                                <Form.Item style={{\r\n                                    width: \"45%\"\r\n                                }}\r\n                                    label={'Longitude'}\r\n                                    name=\"longitude\"\r\n                                    rules={[{ required: true, message: 'Please input Longitude!' }]}\r\n                                >\r\n                                    <Input disabled placeholder='Longitude' style={{ width: '100%' }} />\r\n                                </Form.Item>\r\n                            </div>\r\n\r\n                            {/* Google Map Section */}\r\n                            <Form.Item shouldUpdate={(prevValues, currentValues) => \r\n                                prevValues.latitude !== currentValues.latitude || \r\n                                prevValues.longitude !== currentValues.longitude\r\n                            }>\r\n                                {({ getFieldValue }) => {\r\n                                    const latitude = getFieldValue('latitude');\r\n                                    const longitude = getFieldValue('longitude');\r\n                                    \r\n                                    if (latitude && longitude && isLoaded) {\r\n                                        return (\r\n                                            <div style={{ marginBottom: \"20px\" }}>\r\n                                                <div style={{\r\n                                                    fontWeight: \"bold\",\r\n                                                    color: \"#000\",\r\n                                                    marginBottom: \"10px\"\r\n                                                }}>\r\n                                                    Location on Map\r\n                                                </div>\r\n                                                <GoogleMap \r\n                                                    mapContainerStyle={mapContainerStyle} \r\n                                                    center={getMapCenter()} \r\n                                                    zoom={15}\r\n                                                >\r\n                                                    <Marker \r\n                                                        position={getMapCenter()}\r\n                                                    />\r\n                                                </GoogleMap>\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                }}\r\n                            </Form.Item>\r\n\r\n                            <div style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                marginBottom: \"20px\"\r\n                            }}>\r\n                                <div style={{\r\n                                    width: \"45%\"\r\n                                }}>\r\n                                    <Form.Item\r\n                                        label=\"Description\"\r\n                                        name=\"jobsite_description\"\r\n                                        rules={[{ required: true, message: 'Please input Description!' }]}\r\n                                    >\r\n                                        <Input.TextArea />\r\n                                    </Form.Item>\r\n                                </div>\r\n                                <div style={{\r\n                                    width: \"45%\"\r\n                                }}>\r\n                                    <Form.Item\r\n                                        label=\"Upload Picture\"\r\n                                    // name=\"description\"\r\n\r\n                                    >\r\n                                        {/* <h5 className=\"m-0 mt-2\">Upload Pictures</h5> */}\r\n                                        <div className=\"p-3\">\r\n                                            <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                                                <UploadFileIcon />\r\n                                                <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                                                <h5 className=\"mb-0\">Or</h5>\r\n                                                <h5 className=\"mb-0\" style={{ color: '#3CA6C1' }}>\r\n                                                    Click here to upload\r\n                                                </h5>\r\n                                                <input\r\n                                                    style={styles.uploadFile}\r\n                                                    className=\"uploadFile\"\r\n                                                    type=\"file\"\r\n                                                    accept='image/*'\r\n                                                    multiple\r\n                                                    onChange={handleFileSelect}\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"mt-4\">\r\n                                                {selectedFiles.length > 0 && (\r\n                                                    <ul className=\"p-0\" style={{ width: \"100%\" }}>\r\n                                                        {selectedFiles.map((file, i) => (\r\n                                                            <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                                                                {\" \"}\r\n                                                                <div className=\"d-flex align-items-center\">\r\n                                                                    <UploadFileIcon />{\" \"}\r\n                                                                    <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                                                                    {/* <span className=\"ml-5\">\r\n                                                                        {file.url ? (<EyeOutlined style={{ cursor: \"pointer\" }} onClick={() => window.open(file.url)} />) : null}\r\n                                                                    </span> */}\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    {\r\n                                                                        file.url && <span className=\"ml-3 \" style={{\r\n                                                                            cursor: \"pointer\"\r\n                                                                        }} onClick={() => {\r\n                                                                            window.open(file.url, '_blank')\r\n                                                                        }}>\r\n                                                                            <EyeOutlined />\r\n                                                                        </span>\r\n                                                                    }\r\n                                                                    <span\r\n                                                                        style={{ cursor: \"pointer\" }}\r\n                                                                        onClick={() => delUplFile(i)}\r\n                                                                    >\r\n                                                                        {\" \"}\r\n                                                                        <CloseCircleOutlined />{\" \"}\r\n                                                                    </span>\r\n                                                                </div>\r\n                                                            </li>\r\n                                                        ))}\r\n                                                    </ul>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <Form.Item\r\n                                label=\"Status\"\r\n                            >\r\n                                <Switch checked={status}\r\n                                    onChange={() => setStatus(!status)}\r\n                                />\r\n                            </Form.Item>\r\n                            <div style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\"\r\n                            }}>\r\n                                <Form.Item >\r\n                                    <Button\r\n                                        style={{ marginRight: 8 }}\r\n                                        onClick={() => form.resetFields()}\r\n                                    >\r\n                                        Clear\r\n                                    </Button>\r\n\r\n                                    <Button\r\n\r\n                                        type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                                        {/* Submit */}\r\n                                        Save\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        </Form>\r\n                    </Tabs.TabPane>\r\n                </Tabs>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNew\r\n\r\n\r\nconst styles = {\r\n    files: {\r\n        listStyle: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        gap: '13px',\r\n        border: '1px solid lightblue',\r\n        padding: '10px',\r\n        borderRadius: '9px',\r\n        background: '#0093ff0a',\r\n    },\r\n    uploadFile: {\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        opacity: 0,\r\n    },\r\n    '.uploadFile::-webkit-file-upload-button': {\r\n        visibility: 'hidden',\r\n    },\r\n    '.uploadFile::before': {\r\n        content: \"'Drag & Drop'\",\r\n        display: 'inline-block',\r\n        padding: '10px',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '4px',\r\n        cursor: 'pointer',\r\n    },\r\n    '.uploadFile:hover::before': {\r\n        backgroundColor: '#ccc',\r\n    },\r\n};\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/operational-areas/add-new/index.js",["858"],"import { UserSwitchOutlined } from '@ant-design/icons'\r\nimport { Button, Card, Form, Input, message, Switch } from 'antd'\r\nimport { axiosInstance } from 'App';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom/cjs/react-router-dom';\r\n\r\n\r\nfunction AddNew() {\r\n    const [form] = Form.useForm();\r\n    const [status, setStatus] = useState(true);\r\n    const history = useHistory();\r\n    const [loading, setLoading] = useState(false);\r\n    const { id } = useParams();\r\n\r\n    const onFinish = (values) => {\r\n        setLoading(true);\r\n        if (id) {\r\n            try {\r\n                axiosInstance.put(`api/web/operational-area/${id}`, {\r\n                    area_name: values.name,\r\n                    status: status\r\n                }).then(response => {\r\n                    if (response.status === 200) {\r\n                        message.success(\"Area Updated Successfully\");\r\n                        history.push('/app/operator-master/operational-areas')\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                message.error(\"Something went wrong\");\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            try {\r\n                axiosInstance.post('api/web/operational-area', {\r\n                    area_name: values.name,\r\n                    status: status\r\n                }).then(response => {\r\n                    if (response.status === 200) {\r\n                        message.success(\"Area Added Successfully\");\r\n                        history.push('/app/operator-master/operational-areas')\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                message.error(\"Something went wrong\");\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const getData = async (id) => {\r\n        try {\r\n            const response = await axiosInstance.get(`api/web/operational-area/${id}`);\r\n            if (response.status === 200) {\r\n                const data = response.data.item;\r\n                form.setFieldsValue({\r\n                    name: data.area_name,\r\n\r\n                })\r\n                setStatus(data.status);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (id) {\r\n            getData(id);\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"customTableBackground\">\r\n            <h4> <UserSwitchOutlined /><span style={{\r\n                color: '#6a6a6a',\r\n                fontWeight: '300'\r\n            }}> Operational Master / Area</span> / {\r\n                id ? \"Edit\" : \"Add New\"\r\n            } </h4>\r\n            <Card>\r\n                <Form form={form} layout=\"vertical\" name=\"userForm\" onFinish={onFinish} >\r\n\r\n                    <Form.Item\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        rules={[{ required: true, message: 'Please input name!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Status\"\r\n                    >\r\n                        <Switch checked={status}\r\n                            onChange={() => setStatus(!status)}\r\n                        />\r\n                    </Form.Item>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"flex-end\"\r\n                    }}>\r\n                        <Form.Item >\r\n                            <Button\r\n                                style={{ marginRight: 8 }}\r\n                                onClick={() => form.resetFields()}\r\n                            >\r\n                                Clear\r\n                            </Button>\r\n\r\n                            <Button\r\n                                loading={loading}\r\n                                type=\"primary\" htmlType=\"submit\">\r\n                                {/* Submit */}\r\n                                Save\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </div>\r\n                </Form>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNew","/home/faizan/jd-works/customer-web-app/src/views/app-views/operational-areas/operational-area.js",["859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880"],"import { DashboardOutlined, DeleteOutlined, EditOutlined, EllipsisOutlined, EyeOutlined, MoreOutlined, SearchOutlined, TeamOutlined, UserSwitchOutlined } from '@ant-design/icons'\r\nimport Icon from '@ant-design/icons/lib/components/Icon'\r\nimport { Avatar, Button, Checkbox, Dropdown, Input, Menu, Space, Table, Tag, Modal, Select, Form, Radio, message, Popconfirm } from 'antd'\r\nimport SubMenu from 'antd/lib/menu/SubMenu'\r\nimport { AccountStatusIcon, AssignDashboardIcon, CsvIcon, FilterIcon, SuccessTickIcon } from 'assets/svg/icon'\r\nimport Filter from 'components/shared-components/Filter'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Alert from '../../../assets/images/Alert.png'\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min'\r\nimport { axiosInstance } from 'App'\r\nimport moment from 'moment'\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom'\r\nimport ConfirmModal from 'components/shared-components/ConfirmModal'\r\nimport { hasPermission } from 'utils/permissionUtils';\r\n// import { useHistory } from 'react-router-dom/cjs/react-router-dom'\r\n\r\nconst { Option } = Select;\r\n\r\nconst OperationalAreas = () => {\r\n\r\n  const history = useHistory();\r\n    const [modalVisible2, setModalVisible2] = useState(false);\r\n    const [deleteId, setDeleteId] = useState(null);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [deleteConfirmationModal, setDeleteConfirmationModal] = useState(false)\r\n  const [selectedDashboards, setSelectedDashboards] = useState([]);\r\n  const [alertModal, setAlertModal] = useState(false)\r\n  const [searchText, setSearchText] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  // const [data, setData] = useState([]);\r\n  const handleCancel = () => {\r\n    setModalVisible(false);\r\n  };\r\n  const handleCancelConfirmation = () => {\r\n    setDeleteConfirmationModal(false)\r\n  }\r\n  const handleYesConfirmation = () => {\r\n    setDeleteConfirmationModal(false)\r\n    handleOpenAlert()\r\n    setTimeout(() => {\r\n      handleCloseAlert()\r\n    }, 1500);\r\n  }\r\n  const handleOpenAlert = () => {\r\n    setAlertModal(true)\r\n  }\r\n  const handleCloseAlert = () => {\r\n    setAlertModal(false)\r\n  }\r\n  const handleSave = (selectedDashboards) => {\r\n    // Handle save logic here\r\n    console.log('Selected Dashboards:', selectedDashboards);\r\n    setModalVisible(false);\r\n  };\r\n  const handleSelectChange = (selectedValues) => {\r\n    if (selectedValues.includes('all')) {\r\n      setSelectedDashboards(['all', 'Vibratory Sensor Dashboard', 'Solar Sensor Dashboard']);\r\n    } else {\r\n      setSelectedDashboards(selectedValues);\r\n    }\r\n  };\r\n  const [data, setData] = useState([]);\r\n\r\n const [selectedStatus, setSelectedStatus] = useState('all');\r\n  const FilterMenu = (\r\n    <Menu mode=\"horizontal\">\r\n      {/* Status Filter */}\r\n      <SubMenu key=\"status\" title=\"Status\">\r\n        <Menu.Item key=\"status-all\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'all'}\r\n            onChange={() => handleStatusChange('all')}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-active\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'active'}\r\n            onChange={() => handleStatusChange('active')}\r\n          >\r\n            Active\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-inactive\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'inactive'}\r\n            onChange={() => handleStatusChange('inactive')}\r\n          >\r\n            Inactive\r\n          </Checkbox>\r\n        </Menu.Item>\r\n      </SubMenu>\r\n\r\n   \r\n      {/* <SubMenu key=\"workshop\" title=\"Area\">\r\n        <Menu.Item key=\"area-all\">\r\n          <Checkbox\r\n            checked={selectedWorkshop === 'all'}\r\n            onChange={() => handleWorkshopChange('all')}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        {workshopData.map((item, i) => (\r\n          <Menu.Item key={`workshop-${i}`}>\r\n            <Checkbox\r\n              checked={selectedWorkshop === item.id}\r\n              onChange={() => handleWorkshopChange(item.id)}\r\n            >\r\n              {item.workshop_name}\r\n            </Checkbox>\r\n          </Menu.Item>\r\n        ))}\r\n      </SubMenu> */}\r\n    </Menu>\r\n  );\r\n\r\n  const handleStatusChange = (filter) => {\r\n    setSelectedStatus(filter);\r\n    getData(searchText,filter=='active'?1:filter=='inactive'?0:'all');\r\n    // Trigger the data fetch or update logic here for status\r\n    console.log(`Applied status filter: ${filter}`);\r\n  };\r\n\r\n  const getData = async (search=\"\",status=\"\") => {\r\n    // let url = `?search=${search}`\r\n    let url = `?customer_id=${localStorage.getItem(\"parent_id\")!=\"null\"? localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}&search=${search}`\r\n\r\n    //for 0 it is not handling\r\n    if((status !== '' && status != 'all')) {\r\n      url += `&status=${status}`\r\n    }\r\n    try {\r\n      setLoading(true)\r\n      const resp = await axiosInstance.get('/api/web/operational-area'+url);\r\n      setData(resp.data.items);\r\n      setLoading(false)\r\n    } catch (err) {\r\n      console.log(err)\r\n      setLoading(false)\r\n      message.error('Something went wrong')\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [])\r\n  const handleYesConfirmation2 = () => {\r\n    deleteRow(deleteId);\r\n    setModalVisible2(false);\r\n  }\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    // {\r\n    //   // title: 'Image',\r\n    //   dataIndex: 'image',\r\n    //   key: 'image',\r\n    //   render: (text, record) => <Avatar src={text} alt={`Avatar for ${record.organization}`} />,\r\n    // },\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'area_name',\r\n      key: 'area_name',\r\n    },\r\n    // {\r\n    //   title: 'Accopunt Type',\r\n    //   dataIndex: 'type',\r\n    //   key: 'type',\r\n    // },\r\n    // {\r\n    //   title: 'Mobile Number',\r\n    //   dataIndex: 'contactNumber',\r\n    //   key: 'contactNumber',\r\n    // },\r\n    // {\r\n    //   title: 'Email ID',\r\n    //   dataIndex: 'email',\r\n    //   key: 'email',\r\n    // },\r\n    // {\r\n    //   title: 'Created On',\r\n    //   dataIndex: 'created_at',\r\n    //   key: 'userSince',\r\n    // },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render: (active) => (active ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>),\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getMenu(record.id)} placement=\"bottomRight\" trigger={['hover']}>\r\n            <MoreOutlined />\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n\r\n  const getMenu = (record) => (\r\n    <Menu>\r\n      {hasPermission('operational_areas', 'Edit Operational Areas') && (\r\n        <Menu.Item key=\"edit\" onClick={() => {\r\n          history.push(`/app/operator-master/operational-areas/edit/${record}`)\r\n        }}>\r\n          <EditOutlined /> Edit\r\n        </Menu.Item>\r\n      )}\r\n      {hasPermission('operational_areas', 'Delete Operational Areas') && (\r\n        <Menu.Item key=\"delete\"\r\n          onClick={()=>{\r\n            setModalVisible2(true)\r\n            setDeleteId(record)\r\n          }}\r\n        >\r\n          <span style={{ display: \"flex\", gap: \"8px\", alignItems: \"center\" }}>\r\n            <DeleteOutlined /> Delete\r\n          </span>\r\n        </Menu.Item>\r\n      )}\r\n      {/* </Popconfirm> */}\r\n      {/* <Menu.Item onClick={() => setModalVisible(true)}>\r\n        <AccountStatusIcon /> Account Status\r\n      </Menu.Item> */}\r\n    </Menu>\r\n  );\r\n  const deleteRow = async (id) => {\r\n    console.log(id);\r\n    try {\r\n      const response = await axiosInstance.delete(\r\n        `api/web/operational-area/${id}`\r\n      );\r\n      if (response.status === 200) {\r\n        message.success(\"Area deleted successfully\");\r\n        // setData((prevData) => prevData.filter((item) => item.id !== id));\r\n        getData()\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting row:\", error);\r\n    }\r\n  };\r\n\r\n  var timeout = \"\"\r\n  const onSearch = (value) => {\r\n    setSearchText(value.target.value)\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => {\r\n      getData(value.target.value)\r\n    }, 500)\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4> <UserSwitchOutlined /><span style={{\r\n        color: '#6a6a6a',\r\n        fontWeight: '300'\r\n      }}> Operation Master </span>/ Area  </h4>\r\n      <div className=\"d-flex justify-content-between mb-3\">\r\n        <div className=\"\" style={{ display: \"flex\" }}>\r\n          <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              value={searchText}\r\n              onChange={onSearch}\r\n              style={{\r\n                width: 200,\r\n              }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space>\r\n          <Filter filters={FilterMenu}>\r\n            <Button\r\n              icon={<Icon component={FilterIcon} />}\r\n              className=\"d-flex align-items-center ml-2\"\r\n            >\r\n              Filters\r\n            </Button>\r\n          </Filter>\r\n          {/* <Button icon={<Icon component={CsvIcon} />} className=\"d-flex align-items-center ml-2\" >Export</Button> */}\r\n        </div>\r\n        {hasPermission('operational_areas', 'Create New Operational Areas') && (\r\n          <div className=\"mb-2 d-flex align-items-center\">\r\n            <Button\r\n              className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n            >\r\n              <Link to={'operational-areas/add-new'}>\r\n                + Add New</Link>\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <Table\r\n          loading={loading}\r\n          columns={columns} dataSource={data} />\r\n      </div>\r\n      <Modal\r\n        // title={<div className='d-flex align-items-center'><span className='d-block ml-2' > User Account Status </span></div>}\r\n        visible={deleteConfirmationModal}\r\n        onCancel={() => setDeleteConfirmationModal(false)}\r\n        footer={false}\r\n      >\r\n        <div className='d-flex flex-column justify-content-center align-items-center'>\r\n          <img style={{ width: '60px' }} src={Alert} alt={'...'} />\r\n          <h4 style={{ fontWeight: '300', width: '250px' }} className='text-center'>Are you sure you want to delete\r\n            user records?</h4>\r\n        </div>\r\n        <div className='d-flex justify-content-center mt-3'>\r\n          <Button className='' onClick={() => handleCancelConfirmation()}>\r\n            No\r\n          </Button>\r\n          <Button className='bg-primary text-white ml-2' onClick={handleYesConfirmation}>\r\n            Yes\r\n          </Button>\r\n        </div>\r\n\r\n      </Modal>\r\n      <Modal\r\n        visible={alertModal}\r\n        onCancel={() => setAlertModal(false)}\r\n        footer={false}\r\n      >\r\n        <div className='d-flex flex-column justify-content-center align-items-center'>\r\n          <SuccessTickIcon />\r\n          <h4 style={{ fontWeight: '300', width: '250px' }} className='text-center'>Admin account deleted successfully!</h4>\r\n        </div>\r\n        <div className='d-flex justify-content-center mt-3'>\r\n          <Button className='bg-primary text-white ml-2' onClick={handleCloseAlert}>\r\n            Close\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <ConfirmModal\r\n        deleteConfirmationModal={modalVisible2}\r\n        setDeleteConfirmationModal={setModalVisible2}\r\n        handleYesConfirmation={handleYesConfirmation2}\r\n        msg={'Do you want to delete this Area?'}\r\n      />     \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OperationalAreas\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/technician-management/AddNew/AddNew.js",["881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903"],"import { Button, Form, Input, Select, Modal, DatePicker, Upload, message, Radio, InputNumber } from \"antd\";\r\nimport { BasicDetail, LocationIcon, SuccessTickIcon, UploadDocument, UploadFileIcon } from \"assets/svg/icon\";\r\n\r\nimport React, { useContext } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport { CloseCircleOutlined, EnvironmentOutlined, EyeOutlined, LaptopOutlined, PlusOutlined, TeamOutlined, UserSwitchOutlined } from \"@ant-design/icons\";\r\nimport { Option } from \"antd/lib/mentions\";\r\n// import axios from \"../../../../axios\";\r\nimport moment from \"moment\";\r\nimport { useEffect } from \"react\";\r\nimport { useLocation, useParams } from \"react-router-dom/cjs/react-router-dom\";\r\nimport { useHistory } from 'react-router-dom';\r\n// import uploadImage from \"middleware/uploadImage\";\r\nimport { API_BASE_URL } from \"constants/ApiConstant\";\r\nimport { axiosInstance } from \"App\";\r\nimport { UploadImage } from \"utils/Upload\";\r\nimport CountrySelector from \"utils/CountrySelector\";\r\nimport PhoneCode from \"utils/PhoneCode\";\r\nimport usePostalCodeLookup from \"hooks/usePostalCodeLookup\";\r\nimport { CountryContext } from \"CountryContext\";\r\nexport default function AddNewTechnician() {\r\n    const { TabPane } = Tabs;\r\n\r\n    const history = useHistory();\r\n    const [statu, setStatu] = useState(\"\")\r\n    const [remark, setRemark] = useState(\"\")\r\n    const [mainStatus, setMainStatus] = useState('')\r\n    const [mainId, setMainId] = useState(null)\r\n    const [activeTab, setActiveTab] = useState(\"1\");\r\n    const [isChangeStudModalOpen, setIsChangeStudModalOpen] = useState(false);\r\n    const [deactiveModalOpen, setIsDeactiveModalOpen] = useState(false);\r\n    const [successModal, setSuccessModal] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const location = useLocation();\r\n    const [countryCode, setCountryCode] = useState('+91')\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const [fileList, setFileList] = useState([]);\r\n    const [imageUrl, setImageUrl] = useState();\r\n    // const id = queryParams.get('id')\r\n    const {id } = useParams();\r\n    const [selectedFiles, setSelectedFiles] = useState([]);\r\n    const [alertModal, setAlertModal] = useState(false)\r\n    const [country, setCountry] = useState([\r\n        {\r\n            country: \"India\",\r\n        }\r\n    ]);\r\n\r\n    let styles = {\r\n        files: {\r\n            listStyle: \"none\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            gap: \"13px\",\r\n            border: \"1px solid lightblue\",\r\n            padding: \"10px\",\r\n            borderRadius: \"9px\",\r\n            background: \"#0093ff0a\",\r\n        },\r\n        uploadFile: {\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            opacity: 0,\r\n        },\r\n\r\n        // Add the new styles here:\r\n\r\n        \".uploadFile::-webkit-file-upload-button\": {\r\n            visibility: \"hidden\",\r\n        },\r\n\r\n        \".uploadFile::before\": {\r\n            content: \"'Drag & Drop'\",\r\n            display: \"inline-block\",\r\n            padding: \"10px\",\r\n            border: \"1px solid #ccc\",\r\n            borderRadius: \"4px\",\r\n            cursor: \"pointer\",\r\n        },\r\n\r\n        \".uploadFile:hover::before\": {\r\n            backgroundColor: \"#ccc\",\r\n        },\r\n    };\r\n    const [succesmodaltext, setSuccesmodaltext] = useState({\r\n        title: \"Staff Status Change Successfully!\",\r\n        text: \"Staff status changed to terminated.\",\r\n    });\r\n\r\n    function handleTabClick(key) {\r\n        handleNext(key);\r\n    }\r\n    const successOk = () => {\r\n        setSuccessModal(false);\r\n    };\r\n    const successCancel = () => {\r\n        setSuccessModal(false);\r\n    };\r\n\r\n    const changeStudHandleOk = () => {\r\n        setIsChangeStudModalOpen(false);\r\n    };\r\n    const DeactiveHandleOk = () => {\r\n        setIsDeactiveModalOpen(false);\r\n    };\r\n\r\n    function handleBackClick() {\r\n        // if (activeTab > 1 && activeTab <= 7) {\r\n        //   let actnum = Number(activeTab) - 1;\r\n        //   setActiveTab(actnum.toString());\r\n        // }\r\n        if (activeTab > 1) {\r\n            let actnum = Number(activeTab) - 1;\r\n            setActiveTab(actnum.toString());\r\n            return;\r\n        }\r\n        history.goBack();\r\n    }\r\n\r\n    const handleNext = (active) => {\r\n        if (active === \"1\") {\r\n            if(!imageUrl){\r\n                message.error(\"Please upload profile picture\");\r\n                return;\r\n            }\r\n            form1.validateFields().then(() => {\r\n                setActiveTab(\"2\");\r\n            })\r\n        } else if (active === \"2\") {\r\n            form2.validateFields().then(() => {\r\n                setActiveTab(\"3\");\r\n            })\r\n        } else {\r\n\r\n            onFinish();\r\n\r\n        }\r\n    }\r\n\r\n    const [form1] = Form.useForm();\r\n    const [form2] = Form.useForm();\r\n    const [form3] = Form.useForm();\r\n    \r\n    const { countryList } = useContext(CountryContext);\r\n    const { lookupPostalCode, loading: postalLoading } = usePostalCodeLookup(form2, countryList);\r\n\r\n    const handlePostalCodeChange = async (e) => {\r\n        const postalCode = e.target.value;\r\n        if (postalCode && postalCode.length === 6) {\r\n            await lookupPostalCode(postalCode);\r\n        }\r\n    };\r\n    const onFinish = async (values) => {\r\n        console.log(fileList);\r\n        console.log(selectedFiles);\r\n        // const image = await uploadImage(fileList);\r\n        let profile_pic = imageUrl\r\n        \r\n        console.log(fileList);\r\n      if(profile_pic && profile_pic.includes('base64')){\r\n         profile_pic = await UploadImage(fileList);\r\n     }\r\n        let file= [];\r\n        const temp = selectedFiles.filter((item) => {\r\n            return item.url === undefined;\r\n        })\r\n        const temp2 = selectedFiles.filter((item) => {\r\n            return item.url !== undefined;\r\n        })\r\n        setLoading(true);\r\n        if(temp.length !== 0){\r\n        const uploadPromise = temp.map(async (item) => {\r\n            if (item.url === undefined) {\r\n                const url = await UploadImage(item);\r\n                return url;\r\n            } else {\r\n                return item.url;\r\n            }\r\n        })\r\n        file = await Promise.all(uploadPromise);\r\n        console.log(file);\r\n    }\r\n    file = [ ...file,...temp2.map((item)=>{\r\n        return item.url\r\n    })];\r\n    if(id){\r\n        try {\r\n            // handleOpenAlert()\r\n\r\n            const resp = await axiosInstance.put(`/api/web/technician/${id}/update`, {\r\n                ...form1.getFieldsValue(),\r\n                ...form2.getFieldsValue(),\r\n                dob: form1.getFieldValue('dob').format('YYYY-MM-DD'),\r\n                phone_code : countryCode,\r\n                profile_pic,\r\n                parent_id: localStorage.getItem(\"parent_id\"),\r\n                documents: file,\r\n\r\n\r\n            })\r\n            if(resp.data.message==\"Invalid phone number format. Please provide a valid phone number.\"){\r\n                setLoading(false);\r\n                message.error(\"Invalid phone number format. Please provide a valid phone number.\");\r\n                return;\r\n              }\r\n            handleCloseAlert()\r\n            setTimeout(() => {\r\n                history.goBack()\r\n            }, 1000)\r\n            // history.goBack();\r\n\r\n        } catch (error) {\r\n            setLoading(false);\r\n            console.error(error)\r\n            message.error(error.response.data.message)\r\n        }\r\n    }else{\r\n        try {\r\n            // handleOpenAlert()\r\n\r\n            const resp = await axiosInstance.post(`/api/web/technician/store`, {\r\n                ...form1.getFieldsValue(),\r\n                ...form2.getFieldsValue(),\r\n                dob: form1.getFieldValue('dob').format('YYYY-MM-DD'),\r\n                phone_code : countryCode,\r\n                profile_pic,\r\n                documents: file,\r\n                parent_id: localStorage.getItem(\"parent_id\")!=\"null\"?localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\"),\r\n\r\n\r\n            })\r\n            if(resp.data.message==\"Invalid phone number format. Please provide a valid phone number.\"){\r\n                setLoading(false);\r\n                message.error(\"Invalid phone number format. Please provide a valid phone number.\");\r\n                return;\r\n              }\r\n            handleCloseAlert()\r\n            setTimeout(() => {\r\n                history.goBack()\r\n            }, 1000)\r\n            // history.goBack();\r\n\r\n        } catch (error) {\r\n            console.error(error)\r\n            setLoading(false);\r\n            message.error(error.response.data.message)\r\n        }\r\n    }\r\n    };\r\n\r\n    const sendStatus = async () => {\r\n        try {\r\n            const response = await axiosInstance.put(`/api/web/technician/${id}/update-status`, {\r\n                status: statu,\r\n                remark: remark\r\n            });\r\n            setIsChangeStudModalOpen(false);\r\n            setSuccessModal(true);\r\n            setSuccesmodaltext({\r\n                title: \"Technician Status Change Successfully!\",\r\n                text: \"Technician status changed to \" + (statu === 1 ? \"Active\" : \"Inactive\"),\r\n            });\r\n            // history.goBack();\r\n        } catch (error) {\r\n            console.error(error);\r\n            message.error(error.response.data.message);\r\n        }\r\n    }\r\n\r\n    // const onFinishFailed = (errorInfo) => {\r\n    //   console.log(\"Failed:\", errorInfo);\r\n    // };\r\n    const handleChange = (info) => {\r\n        const file = info.fileList[0]?.originFileObj;\r\n        let formData = new FormData();\r\n        if (file) {\r\n            formData.append(\"file\", file);\r\n            setFileList(file);\r\n        }\r\n        if (info?.fileList[0]) {\r\n            getBase64(info.fileList[0].originFileObj, (url) => {\r\n                setImageUrl(url);\r\n            });\r\n        }\r\n    };\r\n\r\n    const getBase64 = (img, callback) => {\r\n        const reader = new FileReader();\r\n        reader.addEventListener(\"load\", () => callback(reader.result));\r\n        reader.readAsDataURL(img);\r\n    };\r\n    function handleFileSelect(event) {\r\n        const fileList = event.target.files;\r\n        const newSelectedFiles = [];\r\n        for (let i = 0; i < fileList.length; i++) {\r\n            newSelectedFiles.push(fileList[i]);\r\n        }\r\n        //   console.log(selectedFiles)\r\n        setSelectedFiles([...selectedFiles, newSelectedFiles[0]]);\r\n    }\r\n    const delUplFile = (i) => {\r\n        let AfterDeleteFile = selectedFiles.filter((elem, index) => {\r\n            return index !== i;\r\n        });\r\n        setSelectedFiles(AfterDeleteFile);\r\n    };\r\n    const uploadButton = (\r\n        <div style={{ width: \"200px\" }}>\r\n            <PlusOutlined />\r\n            <div\r\n                style={{\r\n                    marginTop: 8,\r\n                }}\r\n            >\r\n                Profile Picture\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n\r\n    const handleOpenAlert = () => {\r\n        setAlertModal(true)\r\n    }\r\n    const handleCloseAlert = () => {\r\n        setAlertModal(false)\r\n\r\n    }\r\n\r\n    // Fetch Country\r\n    useEffect(() => {\r\n      \r\n        if (id) {\r\n            getData();\r\n        }\r\n    }, []);\r\n\r\n    const getData = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/api/web/technician/${id}/show`);\r\n            const data = response.data.item;\r\n\r\n            form1.setFieldsValue({\r\n                ...data,\r\n                dob: moment(data.dob),\r\n                gender: data.gender.toString(),\r\n            })\r\n            form2.setFieldsValue({\r\n                ...data.address,\r\n                country: data.address.country\r\n            })\r\n            setCountryCode(data.phone_code)\r\n            setImageUrl(data.profile_pic)\r\n            setSelectedFiles(data?.documents.map((item,index) => {\r\n                return {\r\n                    url: item?.document_url,\r\n                    name: `Document ${index+1}`\r\n                }\r\n            }))\r\n\r\n            setRemark(data.status_remark)\r\n            setStatu(data.status)\r\n        } catch (error) {\r\n            // console.error(error);\r\n            message.error(error.response.data.message);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"customTableBackground\">\r\n            <Modal\r\n                visible={alertModal}\r\n                onCancel={() => setAlertModal(false)}\r\n                footer={false}\r\n            >\r\n                <div className='d-flex flex-column justify-content-center align-items-center'>\r\n                    <SuccessTickIcon />\r\n                    <h3>Operation Admin Created Successfully!</h3>\r\n                    <h4 style={{ fontWeight: '300', width: '350px' }} className='text-center'>Username Jane cooper account created as operation admin successfully!</h4>\r\n                </div>\r\n                <div className='d-flex justify-content-center mt-3'>\r\n                    <Button className='bg-primary text-white ml-2' onClick={handleCloseAlert}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n            <h4> <LaptopOutlined /><span style={{\r\n                color: '#6a6a6a',\r\n                fontWeight: '300'\r\n            }}> Technician Management / </span> {\r\n                id ? \"Edit Technician\" : \"Add New Technician\"\r\n            } </h4>\r\n\r\n            <Tabs activeKey={activeTab} onTabClick={handleTabClick} tabBarExtraContent={\r\n                 id && <Button onClick={() => {\r\n                    setIsChangeStudModalOpen(true)\r\n                }}>\r\n                    Change Technician Status\r\n                </Button>\r\n            }>\r\n                <TabPane\r\n                    disabled\r\n                    tab={\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <BasicDetail /> <span className=\"ml-2\">Basic Details</span>\r\n                        </div>\r\n                    }\r\n                    key=\"1\"\r\n                >\r\n                    <Form\r\n                        layout=\"vertical\"\r\n                        // onFinish={onFinish}\r\n                        // onFinishFailed={onFinishFailed}\r\n                        form={form1}\r\n                        name=\"control-hooks\"\r\n                    >\r\n                        <div className=\"border rounded p-3 bg-white\">\r\n                            {\" \"}\r\n                            <Form.Item name=\"profile_pic\">\r\n                                <Upload\r\n                                    name=\"avatar\"\r\n                                    listType=\"picture-card\"\r\n                                    className=\"avatar-uploader\"\r\n                                    showUploadList={false}\r\n                                    beforeUpload={() => false}\r\n                                    maxCount={1}\r\n                                    onChange={handleChange}\r\n                                    accept='image/*'\r\n                                >\r\n                                    {imageUrl ? (\r\n                                        <img\r\n                                            src={imageUrl}\r\n                                            alt=\"avatar\"\r\n                                            style={{\r\n                                                width: \"100%\",\r\n                                                height: \"100%\",\r\n                                            }}\r\n                                        />\r\n                                    ) : (\r\n                                        uploadButton\r\n                                    )}\r\n                                </Upload>\r\n                            </Form.Item>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                {/* {id && <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"Technician_id\"\r\n                                        label=\"Technician ID\"\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: \"Please enter Technician ID\",\r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                </div>} */}\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"name\"\r\n                                        label=\"Full Name\"\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: \"Please enter Full Name\",\r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"email\"\r\n                                        label=\"Email Id\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please enter Email Id\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input style={{ width: \"100%\" }} placeholder=\"Email Id\" />\r\n                                    </Form.Item>\r\n                                </div>\r\n                                <div style={{ width: \"45%\" }}>\r\n\r\n                                    {/* <Form.Item\r\n                                        name=\"workshop_user_name\"\r\n                                        label=\"Workshop User name\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please enter full name\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Workshop User name\" />\r\n                                    </Form.Item> */}\r\n                                    <div></div>\r\n                                    <Form.Item\r\n                                        name=\"phone_no\"\r\n                                        label=\"Phone Number\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please enter Full Name\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input\r\n                                            addonBefore={\r\n                                                <PhoneCode value={countryCode} onChange={(e) => {\r\n                                                    setCountryCode(e)\r\n                                                }\r\n                                                } />\r\n                                            }\r\n                                            style={{ width: \"100%\" }}\r\n                                            placeholder=\"Phone number\"\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"nric_fin_number\"\r\n                                        label=\"NRIC/FIN\"\r\n                                        rules={[\r\n                                            { required: false, message: \"Please enter NRIC/FIN\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input style={{ width: \"100%\" }} placeholder=\"NRIC/FIN\" />\r\n                                    </Form.Item>\r\n                                </div>\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"dob\"\r\n                                        label=\"Date of Birth\"\r\n                                        rules={[{ required: true, message: \"Please enter DOB\" }]}\r\n                                    >\r\n                                        <DatePicker\r\n                                            disabledDate={(current) => {\r\n                                                return current && current > moment().endOf(\"day\");  \r\n                                            }}\r\n                                            placeholder=\"Date of birth\"\r\n                                            style={{ width: \"100%\" }}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"naitonality\"\r\n                                        label=\"Nationality\"\r\n                                        rules={[{ required: true, message: \"Please Select Nationality\" }]}\r\n                                    >\r\n                                       <CountrySelector/>\r\n                                    </Form.Item>\r\n                                </div>\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"gender\"\r\n                                        label=\"Gender\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please select gender.\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Radio.Group>\r\n                                        <Radio value={\"1\"}>Male</Radio>\r\n                                        <Radio value={\"2\"}>Female</Radio>\r\n                                        </Radio.Group>\r\n                                    </Form.Item>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </Form>\r\n                </TabPane>\r\n                <TabPane\r\n                    disabled\r\n                    tab={\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <LocationIcon /> <span className=\"ml-2\">Address Details</span>\r\n                        </div>\r\n                    }\r\n                    key=\"2\"\r\n                >\r\n                    <Form\r\n                        layout=\"vertical\"\r\n                        // onFinish={onFinish}\r\n                        // onFinishFailed={onFinishFailed}\r\n                        form={form2}\r\n                        name=\"control-hooks\"\r\n                    >\r\n                        <div className=\"border rounded p-3 bg-white\">\r\n\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Postal Code'}\r\n                                        name=\"postal_code\"\r\n                                        rules={[{ required: true, message: 'Please enter the postal code!' },{\r\n                                                      pattern: new RegExp(/^[0-9\\b]+$/),\r\n                                                      message: \"Please enter valid postal code\",\r\n                                                    },\r\n                                                    {\r\n                                                        len: 6,\r\n                                                        message: \"Postal code must be exactly 6 digits\",\r\n                                                    }]}\r\n                                    >\r\n                                        <Input \r\n                                            placeholder=\"Postal Code\" \r\n                                            style={{ width: '100%' }} \r\n                                            onChange={handlePostalCodeChange}\r\n                                            loading={postalLoading}\r\n                                            maxLength={6}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div><div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Block Number'}\r\n                                        name=\"block_number\"\r\n                                        rules={[{ required: true, message: 'Please enter the block number!' }]}\r\n                                    >\r\n                                        <InputNumber placeholder=\"Block Number\" style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Street Number'}\r\n                                        name=\"street_number\"\r\n                                        rules={[{ required: true, message: 'Please enter the street number!' },\r\n                                            {\r\n                                            pattern: new RegExp(/^[0-9\\b]+$/),\r\n                                            message: \"Please enter valid street number\",\r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Street Number\" style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n                                </div><div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Unit Number'}\r\n                                        name=\"unit_number\"\r\n                                        rules={[{ required: true, message: 'Please enter the unit number!' }, {\r\n                                                        pattern: new RegExp(/^[0-9\\b]+$/),\r\n                                                        message: \"Please enter valid unit number\",\r\n                                                      }]}\r\n                                    >\r\n                                        <Input placeholder='Unit Number' style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n\r\n                                    <Form.Item\r\n                                        label={'Level Number'}\r\n                                        name=\"level_number\"\r\n                                        rules={[{ required: true, message: 'Please enter the level number!' }]}\r\n                                    >\r\n                                        <Input placeholder=\"Level Number\" style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n                                </div><div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Country'}\r\n                                        name=\"country\"\r\n                                        rules={[{ required: true, message: 'Please select a country!' }]}\r\n                                    >\r\n                                      <CountrySelector/>\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                </TabPane>\r\n                <TabPane\r\n                    disabled={true}\r\n                    tab={\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <UploadDocument />{\" \"}\r\n                            <span className=\"ml-2\">Upload Documents</span>\r\n                        </div>\r\n                    }\r\n                    key=\"3\"\r\n                >\r\n                    <div className=\"border bg-white rounded p-3 mt-4\">\r\n                        <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                            <svg\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                width=\"64\"\r\n                                height=\"64\"\r\n                                fill=\"none\"\r\n                                viewBox=\"0 0 64 64\"\r\n                            >\r\n                                <path\r\n                                    fill={\"#3CA6C1\"}\r\n                                    d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n                                ></path>\r\n                                <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n                                <path\r\n                                    fill={\"#3CA6C1\"}\r\n                                    d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n                                ></path>\r\n                                <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n                                <path\r\n                                    fill={\"#3CA6C1\"}\r\n                                    d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n                                ></path>\r\n                                <path\r\n                                    fill=\"#F7FCFF\"\r\n                                    d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n                                ></path>\r\n                                <path\r\n                                    fill=\"#D7E6EF\"\r\n                                    d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n                                ></path>\r\n                                <path\r\n                                    fill=\"#44394A\"\r\n                                    d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n                                ></path>\r\n                            </svg>\r\n                            <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                            <h5 className=\"mb-0\">Or</h5>\r\n                            <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n                                Choosen File\r\n                            </h5>\r\n                            <input\r\n                                style={styles.uploadFile}\r\n                                className=\"uploadFile\"\r\n                                type=\"file\"\r\n                                multiple\r\n                                onChange={handleFileSelect}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mt-4\">\r\n                            {selectedFiles.length > 0 && (\r\n                                <ul className=\"p-0\" style={{ width: \"40%\" }}>\r\n                                    {selectedFiles.map((file, i) => (\r\n                                        <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                                            {\" \"}\r\n                                            <div className=\"d-flex align-items-center\">\r\n                                                <UploadFileIcon />{\" \"}\r\n                                                <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                                                {/* {\r\n                                                    file.url && <span className=\"ml-5 \" style={{\r\n                                                        cursor: \"pointer\"\r\n                                                    }} onClick={()=>{\r\n                                                        window.open(file.url, '_blank')  \r\n                                                    }}>\r\n                                                        <EyeOutlined />\r\n                                                    </span>\r\n                                                } */}\r\n                                            </div>\r\n                                            \r\n\r\n                                            <div>\r\n                        {\r\n                          file.url && <span className=\"ml-3 \" style={{\r\n                            cursor: \"pointer\"\r\n                          }} onClick={() => {\r\n                            window.open(file.url, '_blank')\r\n                          }}>\r\n                            <EyeOutlined />\r\n                          </span>\r\n                        }\r\n                        <span\r\n                          style={{ cursor: \"pointer\" }}\r\n                          onClick={() => delUplFile(i)}\r\n                        >\r\n                          {\" \"}\r\n                          <CloseCircleOutlined />{\" \"}\r\n                        </span>\r\n                      </div>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </TabPane>\r\n            </Tabs>\r\n            <Form.Item>\r\n                <div\r\n                    style={{ gap: \"10px\" }}\r\n                    className=\"mt-5 d-flex justify-content-end\"\r\n                >\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold\"\r\n                        htmlType=\"button\"\r\n                        onClick={handleBackClick}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                    {/* <Button className=\"px-4 font-weight-semibold\" htmlType=\"button\">\r\n                            Save Draft\r\n                        </Button> */}\r\n                    <Button\r\n                        className=\"px-4 bg-primary font-weight-semibold text-white bg-info\"\r\n                        htmlType=\"submit\"\r\n                        loading={loading}\r\n                        onClick={() => {\r\n                            handleNext(activeTab)\r\n                        }}\r\n                    >\r\n                        {activeTab === \"3\" ? \"Save\" : \"Next\"}\r\n                    </Button>\r\n                </div>\r\n            </Form.Item>\r\n\r\n\r\n            <Modal\r\n                width={600}\r\n                footer={null}\r\n                visible={isChangeStudModalOpen}\r\n                onOk={changeStudHandleOk}\r\n                onCancel={() => setIsChangeStudModalOpen(false)}\r\n            >\r\n                <div className=\"d-flex my-3 flex-column w-75\">\r\n                    <h4 className=\"mb-4\">Technician Status</h4>\r\n                    <h5>User Status</h5>\r\n                    <Radio.Group\r\n                        onChange={(e) => {\r\n                            setStatu(e.target.value);\r\n                        }}\r\n                        value={statu}>\r\n                        <Radio value={1}>Active</Radio>\r\n                        <Radio value={0}>Inactive</Radio>\r\n                    </Radio.Group>\r\n                    <h5 className=\"mt-4\">Remarks</h5>\r\n                    <Input.TextArea  value={remark}\r\n                        onChange={(e)=>{\r\n                            setRemark(e.target.value) \r\n                        }}\r\n                    placeholder=\"Reason\" />\r\n                </div>\r\n                <div\r\n                    style={{ gap: \"10px\" }}\r\n                    className=\"mt-5 d-flex justify-content-end\"\r\n                >\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold\"\r\n                        onClick={() => setIsChangeStudModalOpen(false)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold text-white bg-info\"\r\n                        onClick={() => {\r\n                            // if (statu === '') {\r\n                            //     message.error(`Please select status first !`)\r\n                            //     return\r\n                            // }\r\n                            if(remark == '' || remark == null){\r\n                                message.error(`Please enter remarks !`)\r\n                                return\r\n                            }\r\n                            sendStatus()\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n            <Modal\r\n                width={500}\r\n                footer={null}\r\n                visible={successModal}\r\n                onOk={successOk}\r\n                onCancel={successCancel}\r\n            >\r\n                <div className=\"d-flex my-3 align-items-center flex-column justify-content-center\">\r\n                    {/* <CustomIcon svg={Verified} /> */}\r\n                    <svg\r\n                        width=\"65\"\r\n                        height=\"64\"\r\n                        viewBox=\"0 0 65 64\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M32.5 0C37.4636 0 42.1609 1.13082 46.358 3.14781C44.64 4.50697 43.0471 5.81176 41.5629 7.06762C38.7358 6.04009 35.6859 5.48012 32.5054 5.48012C25.1823 5.48012 18.5496 8.44852 13.7545 13.2491C8.95396 18.0496 5.98556 24.6769 5.98556 32C5.98556 39.3231 8.95396 45.9504 13.7545 50.7509C18.555 55.5515 25.1823 58.5199 32.5054 58.5199C39.8286 58.5199 46.4613 55.5515 51.2564 50.7509C56.0569 45.9504 59.0253 39.3231 59.0253 32C59.0253 30.2603 58.8568 28.5532 58.536 26.9059C59.9115 25.1118 61.3196 23.3231 62.7603 21.5508C63.8911 24.8236 64.5054 28.3411 64.5054 32C64.5054 40.8345 60.9227 48.8372 55.1327 54.6273C49.3427 60.4173 41.34 64 32.5054 64C23.6709 64 15.6682 60.4173 9.87819 54.6273C4.08274 48.8372 0.5 40.8345 0.5 32C0.5 23.1655 4.08274 15.1628 9.87275 9.37275C15.6628 3.58274 23.6655 0 32.5 0ZM17.5928 26.7428L25.3998 26.6395L25.9815 26.7917C27.5581 27.6996 29.0423 28.738 30.4286 29.9123C31.429 30.7604 32.3858 31.6847 33.2938 32.685C36.0936 28.178 39.0783 24.0408 42.2316 20.2351C45.6838 16.0652 49.3481 12.2813 53.1973 8.82909L53.9584 8.53551H62.4776L60.7596 10.4438C55.4806 16.3099 50.691 22.3717 46.3634 28.6239C42.0359 34.8814 38.165 41.3401 34.7236 47.9891L33.6526 50.055L32.6685 47.9511C30.8527 44.053 28.6781 40.4757 26.0848 37.279C23.4915 34.0822 20.4742 31.2443 16.9567 28.8304L17.5928 26.7428Z\"\r\n                            fill=\"#00AB6F\"\r\n                        />\r\n                    </svg>\r\n                    <h3 className=\"font-weight-bold mt-4\">{succesmodaltext.title}</h3>\r\n                    <span className=\"text-center font-size-sm w-75 font-weight-semibold\">\r\n                        {succesmodaltext.text}\r\n                    </span>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryManagement.js",["904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933"],"import { Button, Menu, Modal, Select, Rate, Switch, Divider, message, Dropdown, Table, Checkbox, Empty, Card } from \"antd\";\r\nimport { Space, Tag } from 'antd';\r\nimport { BellOutlined, EditOutlined, EyeOutlined, MoreOutlined, SearchOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport Icon from '@ant-design/icons';\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useState } from \"react\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { AudioOutlined } from '@ant-design/icons';\r\nimport { Input } from 'antd';\r\nimport Filter from \"components/shared-components/Filter\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { CsvIcon, FilterIcon } from \"assets/svg/icon\";\r\nimport { axiosInstance } from \"App\";\r\nimport CalendarIcon from \"assets/calendar.png\"\r\nimport moment from \"moment\";\r\nimport CardOrder from \"./Card/CardOrder\";\r\nimport SubMenu from \"antd/lib/menu/SubMenu\";\r\nimport { hasPermission } from 'utils/permissionUtils';\r\n\r\nfunction Index() {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const history = useHistory();\r\n  const [data, setData] = useState([])\r\n  const [selectedFilter, setSelectedFilter] = useState('all');\r\n  const [selectedWorkshop, setSelectedWorkshop] = useState('all');\r\n  const [searchText, setSearchText] = useState('');\r\n  var timeout = \"\"\r\n  const onSearch = (value) => {\r\n    setSearchText(value.target.value)\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => {\r\n      getData(value.target.value)\r\n    }, 500)\r\n  }\r\n\r\n  const getData = async (Search=\"\",filter=\"all\",type=\"all\") => {\r\n    let url = `?customer_id=${localStorage.getItem(\"parent_id\")!=\"null\"? localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}&search=${Search}`\r\n    //for 0 it is not handling\r\n    if((filter !== '' && filter != 'all')) {\r\n      url += `&status=${filter}`\r\n    }\r\n    if((type !== '' && type != 'all')) {\r\n      url += `&inquiry_type=${type}`\r\n    }\r\n    try {\r\n      const response = await axiosInstance.get('api/web/inquiries' + url);\r\n      if (response.status === 200) {\r\n        setData(response.data.items);\r\n        // console.log(response.data.items)\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [])\r\n\r\n  const handleService = (filter) => {\r\n    setSelectedWorkshop(filter);\r\n    getData(searchText, selectedFilter, filter);\r\n\r\n  };\r\n\r\n  const FilterMenu = (\r\n    <Menu mode=\"horizontal\" onChange={(e) => {\r\n      console.log(e)\r\n    }}>\r\n      <SubMenu key=\"item1\" title=\"Status\">\r\n        <Menu.Item key=\"subitem1\"\r\n\r\n        >\r\n          <Checkbox onChange={() => {\r\n            getData(searchText);\r\n            setSelectedFilter('all')\r\n          }} checked={\r\n            selectedFilter === 'all'\r\n          }>All</Checkbox>\r\n        </Menu.Item>{\" \"}\r\n        <Menu.Item key=\"subitem2\"\r\n\r\n        >\r\n          <Checkbox\r\n            onChange={() => {\r\n              getData(searchText, 1, selectedWorkshop);\r\n              setSelectedFilter(1)\r\n            }}\r\n            checked={selectedFilter == 1}\r\n\r\n          >Open</Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"subitem3\"\r\n\r\n        >\r\n          <Checkbox onChange={() => {\r\n            getData(searchText, 0, selectedWorkshop);\r\n            setSelectedFilter(0)\r\n          }}\r\n\r\n            checked={selectedFilter === 0}>Closed</Checkbox>\r\n        </Menu.Item>\r\n      </SubMenu>\r\n      <SubMenu key=\"inquiryType\" title=\"Inquiry Type\">\r\n        <Menu.Item key=\"inquiry-all\">\r\n          <Checkbox\r\n            checked={selectedWorkshop === 'all'}\r\n            onChange={() => {\r\n              getData(searchText, selectedFilter, 'all');\r\n              setSelectedWorkshop('all')\r\n            }}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"service-onsite\">\r\n          <Checkbox\r\n            checked={selectedWorkshop === 'General Inquiry'}\r\n            onChange={() =>{\r\n              handleService('General Inquiry')\r\n              // setSelectedWorkshop('General Inquiry')\r\n            }}\r\n          >\r\n            General Inquiry\r\n          </Checkbox>\r\n         \r\n\r\n        </Menu.Item>\r\n        <Menu.Item key=\"service-workshop\">\r\n         <Checkbox\r\n            checked={selectedWorkshop === 'Machine Inquiry'}\r\n            onChange={() => handleService('Machine Inquiry')}\r\n          >\r\n            Machine Inquiry\r\n          </Checkbox>\r\n        </Menu.Item>\r\n\r\n      </SubMenu>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h4> <SettingOutlined /> Inquiry Management</h4>\r\n      <div className=\"d-flex justify-content-between mb-3\">\r\n        <div className=\"\" style={{ display: \"flex\" }}>\r\n          {/* <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              value={searchText}\r\n              onChange={onSearch}\r\n              style={{\r\n                width: 200,\r\n              }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space> */}\r\n          <Filter filters={FilterMenu}>\r\n            <Button\r\n              icon={<Icon component={FilterIcon} />}\r\n              className=\"d-flex align-items-center ml-2\"\r\n            >\r\n              Filters\r\n            </Button>\r\n          </Filter>\r\n          {/* <Filter filters={FilterMenu}>\r\n            <Button\r\n              icon={<Icon component={FilterIcon} />}\r\n              className=\"d-flex align-items-center ml-2\"\r\n            >\r\n              Filters\r\n            </Button>\r\n          </Filter>\r\n          <Button icon={<Icon component={CsvIcon} />} className=\"d-flex align-items-center ml-2\" >Export</Button> */}\r\n\r\n        </div>\r\n        {hasPermission('inquiry_management', 'Create New Inquiry') && (\r\n          <div className=\"mb-2 d-flex align-items-center\">\r\n            <Button\r\n              className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n            >\r\n              <Link to={'/app/inquiry-management/new-inquiry'}>\r\n                + New Inquiry</Link>\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {\r\n        data.length!==0?\r\n        <div style={{\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          // justifyContent: \"space-between\",\r\n          gap: \"20px\",\r\n        }}>\r\n          {\r\n            data.map((item, index) => (\r\n              <CardOrder key={index} data={item} />\r\n            ))}\r\n        </div>:\r\n       <Card>\r\n         <Empty />\r\n       </Card>\r\n\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Index","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/InquiryDetails.js",["934","935","936","937","938","939","940","941","942","943","944","945","946","947"],"/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/AddInquiry/AddInquiry.js",["948","949","950","951","952"],"import {\r\n  CloseCircleOutlined,\r\n  EyeOutlined,\r\n  FileOutlined,\r\n  FilterOutlined,\r\n  InboxOutlined,\r\n  SettingOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Divider,\r\n  Form,\r\n  Input,\r\n  InputNumber,\r\n  Select,\r\n  Upload,\r\n  message,\r\n} from \"antd\";\r\nimport { axiosInstance } from \"App\";\r\nimport { UploadFileIcon } from \"assets/svg/icon\";\r\nimport { UploadImage } from \"utils/Upload\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom/cjs/react-router-dom\";\r\nimport CountrySelector from \"utils/CountrySelector\";\r\nimport PhoneCode from \"utils/PhoneCode\";\r\nimport usePostalCodeLookup from \"hooks/usePostalCodeLookup\";\r\nimport { CountryContext } from \"CountryContext\";\r\n\r\nfunction AddInquiry() {\r\n  const [form] = Form.useForm();\r\n\r\n  const history = useHistory();\r\n  const { Option } = Select;\r\n  const [countryCode, setCountryCode] = useState(\"+91\");\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [machineData, setMachineData] = useState([]);\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const { countryList } = useContext(CountryContext);\r\n  const { lookupPostalCode, loading: postalLoading } = usePostalCodeLookup(form, countryList);\r\n\r\n  const handlePostalCodeChange = async (e) => {\r\n    const postalCode = e.target.value;\r\n    if (postalCode && postalCode.length === 6) {\r\n      await lookupPostalCode(postalCode);\r\n    }\r\n  };\r\n  const handleFileSelect = (event) => {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    setSelectedFiles([...selectedFiles, ...newSelectedFiles]);\r\n  };\r\n  const delUplFile = (i) => {\r\n    let AfterDeleteFile = selectedFiles.filter((_, index) => index !== i);\r\n    setSelectedFiles(AfterDeleteFile);\r\n  };\r\n  const getJobsites = async () => {\r\n    try {\r\n      const resp = await axiosInstance.get(\r\n        `/api/web/jobsites?customer_id=${localStorage.getItem(\"parent_id\")!=\"null\"? localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}`\r\n      );\r\n      setData(resp.data.items);\r\n    } catch (err) {\r\n      console.log(err);\r\n      message.error(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const getMachineData = async () => {\r\n    try {\r\n      const response = await axiosInstance.get(\"api/web/machines\");\r\n      if (response.status === 200) {\r\n        setMachineData(response.data.items);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const onFinish = async (values) => {\r\n    let file = [];\r\n    const temp = selectedFiles.filter((item) => {\r\n      return item.url === undefined;\r\n    });\r\n    const temp2 = selectedFiles.filter((item) => {\r\n      return item.url !== undefined;\r\n    });\r\n    setLoading(true);\r\n    if (temp.length !== 0) {\r\n      const uploadPromise = temp.map(async (item) => {\r\n        if (item.url === undefined) {\r\n          const url = await UploadImage(item);\r\n          return url;\r\n        } else {\r\n          return item.url;\r\n        }\r\n      });\r\n      file = await Promise.all(uploadPromise);\r\n      console.log(file);\r\n    }\r\n    file = [\r\n      ...file,\r\n      ...temp2.map((item) => {\r\n        return item.url;\r\n      }),\r\n    ];\r\n    if (id) {\r\n      try {\r\n        const response = await axiosInstance.put(`api/web/inquiry/${id}`, {\r\n          ...values,\r\n          phone_no: values.phone_no,\r\n          phone_code: countryCode,\r\n          files: file,\r\n        });\r\n        if (response.status === 200) {\r\n          message.success(\"Inquiry updated successfully\");\r\n          form.resetFields();\r\n          setSelectedFiles([]);\r\n          history.push(\"/app/inquiry-management\");\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      try {\r\n        const response = await axiosInstance.post(`api/web/inquiries`, {\r\n          ...values,\r\n          phone_no: values.phone_no,\r\n          phone_code: countryCode,\r\n          files: file,\r\n        });\r\n        if (response.status === 200) {\r\n          message.success(\"Inquiry created successfully\");\r\n          form.resetFields();\r\n          history.push(\"/app/inquiry-management\");\r\n          setSelectedFiles([]);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getJobsites();\r\n    getMachineData();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <h4>\r\n        {\" \"}\r\n        <SettingOutlined />\r\n        <span\r\n          style={{\r\n            color: \"#6a6a6a\",\r\n            fontWeight: \"300\",\r\n          }}\r\n        >\r\n          {\" \"}\r\n          Inquiry Management\r\n        </span>{\" \"}\r\n        / Create New Inquiry{\" \"}\r\n      </h4>\r\n\r\n      <Card>\r\n        <Form\r\n          form={form}\r\n          layout=\"vertical\"\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexWrap: \"wrap\",\r\n          }}\r\n          onFinish={onFinish}\r\n        >\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            name=\"phone_no\"\r\n            label=\"Phone Number\"\r\n            rules={[{ required: true, message: \"Please enter Full Name\" }]}\r\n          >\r\n            <Input\r\n              addonBefore={\r\n                // <Select\r\n                //   // defaultValue={\"In\"}\r\n                //   style={{\r\n                //     width: 80,\r\n                //   }}\r\n                //   value={countryCode}\r\n                //   onChange={(e) => {\r\n                //     setCountryCode(e);\r\n                //   }}\r\n                // >\r\n                //   <Option value=\"+91\">+91</Option>\r\n                //   <Option value=\"+65\">+65</Option>\r\n                // </Select>\r\n                <PhoneCode \r\n                  value={countryCode}\r\n                  onChange={(e) => {\r\n                    setCountryCode(e);\r\n                  }}/>\r\n\r\n              }\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Phone number\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"email\"\r\n            label=\"Email Id\"\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            rules={[{ required: true, message: \"Please enter Email Id\" }]}\r\n          >\r\n            <Input style={{ width: \"100%\" }} placeholder=\"Email Id\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"jobsite_id\"\r\n            label=\"Jobsite\"\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            rules={[{ required: true, message: \"Please Select Jobsite\" }]}\r\n          >\r\n            <Select>\r\n              {data.map((item, index) => (\r\n                <Option key={index} value={item.id}>\r\n                  {item.jobsite_name}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"company_name\"\r\n            label=\"Company Name\"\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            rules={[{ required: true, message: \"Please Enter Company Name\" }]}\r\n          >\r\n            <Input style={{ width: \"100%\" }} placeholder=\"Company Name\" />\r\n          </Form.Item>\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <h3>Address</h3>\r\n          </div>\r\n\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label={\"Postal Code\"}\r\n            name=\"postal_code\"\r\n            rules={[\r\n              { required: true, message: \"Please input postal Code!\" },\r\n              {\r\n                pattern: new RegExp(/^[0-9\\b]+$/),\r\n                message: \"Please enter valid postal code\",\r\n              },\r\n              {\r\n                len: 6,\r\n                message: \"Postal code must be exactly 6 digits\",\r\n              }\r\n            ]}\r\n          >\r\n            <Input \r\n              placeholder=\"Postal Code\" \r\n              style={{ width: \"100%\" }} \r\n              onChange={handlePostalCodeChange}\r\n              loading={postalLoading}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label={\"Block Number\"}\r\n            name=\"block_number\"\r\n            rules={[\r\n              { required: true, message: \"Please enter the block number!\" },\r\n            ]}\r\n          >\r\n            <InputNumber placeholder=\"Block Number\" style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label={\"Street Number\"}\r\n            name=\"street_number\"\r\n            rules={[\r\n              { required: true, message: \"Please enter the street number!\" },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Street Number\" style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label={\"Unit Number\"}\r\n            name=\"unit_number\"\r\n            rules={[\r\n              { required: true, message: \"Please enter the unit number!\" },\r\n              {\r\n                pattern: new RegExp(/^[0-9\\b]+$/),\r\n                message: \"Please enter valid unit number\",\r\n              }\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Unit Number\" style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label={\"Level Number\"}\r\n            name=\"level_number\"\r\n            rules={[\r\n              { required: true, message: \"Please enter the level number!\" },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Level Number\" style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label={\"Country\"}\r\n            name=\"country\"\r\n            rules={[{ required: true, message: \"Please select a country!\" }]}\r\n          >\r\n              <CountrySelector/>\r\n          </Form.Item>\r\n\r\n          <Divider />\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Inquiry Type\"\r\n            name={\"inquiry_type\"}\r\n            rules={[\r\n              { required: true, message: \"Please select an inquiry type!\" },\r\n            ]}\r\n          >\r\n            <Select>\r\n              <Select.Option value={\"General Inquiry\"}>\r\n                General Inquiry\r\n              </Select.Option>\r\n              <Select.Option value={\"Machine Inquiry\"}>\r\n                Machine Inquiry\r\n              </Select.Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Machine\"\r\n            name={\"machine_id\"}\r\n            rules={[{ required: true, message: \"Please select a machine!\" }]}\r\n          >\r\n            <Select>\r\n              {machineData.map((item, index) => (\r\n                <Option key={index} value={item.id}>\r\n                  {item.name}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            style={{\r\n              width: \"100%\",\r\n            }}\r\n            label=\"Inquiry Details\"\r\n            name=\"inquiry_details\"\r\n            rules={[\r\n              { required: true, message: \"Please enter inquiry details!\" },\r\n            ]}\r\n          >\r\n            <Input.TextArea />\r\n          </Form.Item>\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <Form.Item\r\n              label=\"Upload Picture\"\r\n              // name=\"description\"\r\n            >\r\n              {/* <h5 className=\"m-0 mt-2\">Upload Pictures</h5> */}\r\n              <div className=\"p-3\">\r\n                <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                  <UploadFileIcon />\r\n                  <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                  <h5 className=\"mb-0\">Or</h5>\r\n                  <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n                    Click here to upload\r\n                  </h5>\r\n                  <input\r\n                    style={styles.uploadFile}\r\n                    className=\"uploadFile\"\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    multiple\r\n                    onChange={handleFileSelect}\r\n                  />\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  {selectedFiles.length > 0 && (\r\n                    <ul className=\"p-0\" style={{ width: \"100%\" }}>\r\n                      {selectedFiles.map((file, i) => (\r\n                        <li\r\n                          key={file.name}\r\n                          className=\"my-3\"\r\n                          style={styles.files}\r\n                        >\r\n                          {\" \"}\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <UploadFileIcon />{\" \"}\r\n                            <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                            {/* <span className=\"ml-5\">\r\n                              {file.url ? (\r\n                                <EyeOutlined\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  onClick={() => window.open(file.url)}\r\n                                />\r\n                              ) : null}\r\n                            </span> */}\r\n                          </div>\r\n                          <div>\r\n                        {\r\n                          file.url && <span className=\"ml-3 \" style={{\r\n                            cursor: \"pointer\"\r\n                          }} onClick={() => {\r\n                            window.open(file.url, '_blank')\r\n                          }}>\r\n                            <EyeOutlined />\r\n                          </span>\r\n                        }\r\n                        <span\r\n                          style={{ cursor: \"pointer\" }}\r\n                          onClick={() => delUplFile(i)}\r\n                        >\r\n                          {\" \"}\r\n                          <CloseCircleOutlined />{\" \"}\r\n                        </span>\r\n                      </div>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </Form.Item>\r\n\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <Form.Item>\r\n                <Button\r\n                  style={{ marginRight: 8 }}\r\n                  onClick={() => form.resetFields()}\r\n                >\r\n                  Clear\r\n                </Button>\r\n\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                  Submit\r\n                  {/* Save */}\r\n                </Button>\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddInquiry;\r\n\r\nconst styles = {\r\n  files: {\r\n    listStyle: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    gap: \"13px\",\r\n    border: \"1px solid lightblue\",\r\n    padding: \"10px\",\r\n    borderRadius: \"9px\",\r\n    background: \"#0093ff0a\",\r\n  },\r\n  uploadFile: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    opacity: 0,\r\n  },\r\n  \".uploadFile::-webkit-file-upload-button\": {\r\n    visibility: \"hidden\",\r\n  },\r\n  \".uploadFile::before\": {\r\n    content: \"'Drag & Drop'\",\r\n    display: \"inline-block\",\r\n    padding: \"10px\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  \".uploadFile:hover::before\": {\r\n    backgroundColor: \"#ccc\",\r\n  },\r\n};\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/index.js",["953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000"],"import {\r\n  Button,\r\n  Menu,\r\n  Modal,\r\n  Select,\r\n  Rate,\r\n  Switch,\r\n  Divider,\r\n  message,\r\n  Dropdown,\r\n  Table,\r\n  Checkbox,\r\n  Empty,\r\n  Card,\r\n} from \"antd\";\r\nimport { Space, Tag } from \"antd\";\r\nimport {\r\n  BellOutlined,\r\n  EditOutlined,\r\n  EyeOutlined,\r\n  MoreOutlined,\r\n  SearchOutlined,\r\n  SettingOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Icon from \"@ant-design/icons\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useState } from \"react\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { AudioOutlined } from \"@ant-design/icons\";\r\nimport { Input } from \"antd\";\r\nimport Filter from \"components/shared-components/Filter\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { CsvIcon, FilterIcon } from \"assets/svg/icon\";\r\nimport { axiosInstance } from \"App\";\r\nimport CalendarIcon from \"assets/calendar.png\";\r\nimport moment from \"moment\";\r\nimport CardOrder from \"./Card/CardOrder\";\r\nimport SubMenu from \"antd/lib/menu/SubMenu\";\r\nimport { hasPermission } from 'utils/permissionUtils';\r\n\r\nfunction OrderManagement() {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const history = useHistory();\r\n  const [data, setData] = useState([]);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  // const [selectedFilter, setSelectedFilter] = useState(\"all\");\r\n  const [selectedStatus, setSelectedStatus] = useState('all');\r\n  const [selectedWorkshop, setSelectedWorkshop] = useState('all');\r\n  const getMenu = (record) => (\r\n    <Menu>\r\n      <Menu.Item key=\"edit\" onClick={() => handleView(record.id)}>\r\n        <EyeOutlined /> Order Detail\r\n      </Menu.Item>\r\n      {hasPermission('order_management', 'Delete Orders') && (\r\n        <Menu.Item key=\"delete\" onClick={() => handleDelete(record.id)}>\r\n          <DeleteOutlined /> Delete\r\n        </Menu.Item>\r\n      )}\r\n    </Menu>\r\n  );\r\n\r\n  const handleSwitchChange = (checked, key) => {\r\n    // Add logic for handling the switch change\r\n    console.log(\r\n      `Notification with key ${key} is now ${checked ? \"Active\" : \"Inactive\"}`\r\n    );\r\n  };\r\n\r\n  const showModal = () => {\r\n    setIsModalOpen(true);\r\n    // handleOk()\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setTimeout(() => {\r\n      setIsModalOpen(false);\r\n    }, 10000);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const operations = (\r\n    <div className=\"mb-2 d-flex align-items-center\">\r\n      <Button\r\n        // onClick={showModal}\r\n        className=\"ml-3 bg-info d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n      >\r\n        <Link to={\"/app/notification/add_notification\"}>\r\n          + Add New Notification\r\n        </Link>\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const onDeleteData = (Id) => {\r\n    // console.log(Id)\r\n    // console.log(record)\r\n    Modal.confirm({\r\n      title: \"Are you sure, you want to delete this Broadcast notification ?\",\r\n      okText: \"Yes\",\r\n      okType: \"danger\",\r\n      onOk: () => {\r\n        handleDelete(Id);\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleView = (key) => {\r\n    // Add logic for editing a notification\r\n    history.push(`order-management/order-details/${key}`, {\r\n      myCustomState: \"Hello from MyComponent\",\r\n    });\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      const response = await axiosInstance.delete(`api/web/orders/${id}`);\r\n      if (response.status === 200) {\r\n        message.success(\"Order deleted successfully\");\r\n        getOrderList(searchText, selectedStatus=='active'?1:selectedStatus=='inactive'?2:selectedStatus=='closed'?3:'all', \r\n          selectedWorkshop=='Onsite'?'Onsite':selectedWorkshop=='Workshop'?'Workshop':'all');\r\n      }\r\n    } catch (error) {\r\n      message.error(\"Failed to delete order. Please try again.\");\r\n      console.error(\"Error deleting order:\", error);\r\n    }\r\n  };\r\n  var timeout = \"\"\r\n  const onSearch = (value) => {\r\n    setSearchText(value.target.value)\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => {\r\n      getOrderList(value.target.value, selectedStatus=='active'?1:selectedStatus=='inactive'?2: selectedStatus=='closed'?3:'all'\r\n\r\n        , \r\n        selectedWorkshop=='Onsite'?'Onsite':selectedWorkshop=='Workshop'?'Workshop':'all'\r\n      )\r\n    }, 500)\r\n  }\r\n\r\n  const handleStatusChange = (filter) => {\r\n    setSelectedStatus(filter);\r\n    getOrderList(searchText,filter=='active'?1:filter=='inactive'?2:filter=='closed'?3:'all',\r\n    selectedWorkshop=='Onsite'?'Onsite':selectedWorkshop=='Workshop'?'Workshop':'all'\r\n\r\n    );\r\n    // Trigger the data fetch or update logic here for status\r\n    console.log(`Applied status filter: ${filter}`);\r\n  };\r\n\r\n  const handleService = (filter) => {\r\n    setSelectedWorkshop(filter);\r\n    getOrderList(searchText,selectedStatus=='active'?1:selectedStatus=='inactive'?2:selectedStatus=='closed'?3:'all',\r\n    filter=='Onsite'?'Onsite':filter=='Workshop'?'Workshop':'all'\r\n\r\n    );\r\n    // Trigger the data fetch or update logic here for workshop\r\n    console.log(`Applied workshop filter: ${filter}`);\r\n  };\r\n\r\n\r\n  const FilterMenu = (\r\n    <Menu mode=\"horizontal\">\r\n      {/* Status Filter */}\r\n      <SubMenu key=\"status\" title=\"Status\">\r\n        <Menu.Item key=\"status-all\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'all'}\r\n            onChange={() => handleStatusChange('all')}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-active\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'active'}\r\n            onChange={() => handleStatusChange('active')}\r\n          >\r\n            {/* Survey Scheduled */}\r\n            Order Created\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-inactive\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'inactive'}\r\n            onChange={() => handleStatusChange('inactive')}\r\n          >\r\n            {/* Order Created */}\r\n            Survey Scheduled\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-closed\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'closed'}\r\n            onChange={() => handleStatusChange('closed')}\r\n          >\r\n            {/* Order Created */}\r\n            Survey Completed\r\n          </Checkbox>\r\n        </Menu.Item>\r\n      </SubMenu>\r\n\r\n      {/* Workshop Filter */}\r\n      <SubMenu key=\"serviceType\" title=\"Service Type\">\r\n        <Menu.Item key=\"service-all\">\r\n          <Checkbox\r\n            checked={selectedWorkshop === 'all'}\r\n            onChange={() => handleService('all')}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"service-onsite\">\r\n          <Checkbox\r\n            checked={selectedWorkshop === 'Onsite'}\r\n            onChange={() => handleService('Onsite')}\r\n          >\r\n            Onsite\r\n          </Checkbox>\r\n         \r\n\r\n        </Menu.Item>\r\n        <Menu.Item key=\"service-workshop\">\r\n         <Checkbox\r\n            checked={selectedWorkshop === 'Workshop'}\r\n            onChange={() => handleService('Workshop')}\r\n          >\r\n            Workshop\r\n          </Checkbox>\r\n        </Menu.Item>\r\n\r\n      </SubMenu>\r\n    </Menu>\r\n  );\r\n  \r\n  \r\n  const getOrderList = async (search=\"\",filter=\"\",service=\"\") => {\r\n    let url = `?customer_id=${localStorage.getItem(\"parent_id\")!=\"null\"? localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}&search=${search}`\r\n    //for 0 it is not handling\r\n    if((filter !== '' && filter != 'all')) {\r\n      url += `&status=${filter}`\r\n    }\r\n    if((service !== '' && service != 'all')) {\r\n      url += `&maintenance_service_type=${service}`\r\n    }\r\n    const res1 = await axiosInstance.get(\"api/web/orders\"+url);\r\n    console.log(\"res1\", res1);\r\n    setData(res1.data.items);\r\n  };\r\n  useEffect(() => {\r\n    getOrderList();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* <div>\r\n        <Tabs activeKey={key} onChange={setKey} tabBarExtraContent={key===\"1\"?operations:operationsTwo}>\r\n          {items.map((item) => (\r\n            <Tabs.TabPane tab={item.label} key={item.key}>\r\n              {item.children}\r\n            </Tabs.TabPane>\r\n          ))}\r\n        </Tabs>\r\n      </div> */}\r\n      <h4>\r\n        {\" \"}\r\n        <SettingOutlined /> Order Management\r\n      </h4>\r\n      <div className=\"d-flex justify-content-between mb-3\">\r\n        <div className=\"\" style={{ display: \"flex\" }}>\r\n          {/* <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              onChange={onSearch}\r\n              value={searchText}\r\n              style={{\r\n                width: 200,\r\n              }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space> */}\r\n          <Filter filters={FilterMenu}>\r\n            <Button\r\n              icon={<Icon component={FilterIcon} />}\r\n              className=\"d-flex align-items-center ml-2\"\r\n            >\r\n              Filters\r\n            </Button>\r\n          </Filter>\r\n          <Button\r\n            icon={<Icon component={CsvIcon} />}\r\n            className=\"d-flex align-items-center ml-2\"\r\n          >\r\n            Export\r\n          </Button>\r\n          <Button className=\"d-flex align-items-center ml-2\"\r\n            onClick={()=>{\r\n              history.push(\"/app/order-management/orders\")\r\n            }}\r\n          >\r\n            <img src={CalendarIcon} alt=\"Calendar Icon\" />\r\n          </Button>\r\n        </div>\r\n        {hasPermission('order_management', 'Create New Orders') && (\r\n          <div className=\"mb-2 d-flex align-items-center\">\r\n            <Button\r\n              className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n            >\r\n              <Link to={\"/app/order-management/add-order\"}>+ New Order</Link>\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n        {data.length > 0 ? (\r\n          <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            // justifyContent:\"space-between\",\r\n            gap: \"20px\",\r\n          }}\r\n        >\r\n            {data.map((item) => (\r\n              <CardOrder key={item.id} data={item} />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <Card>\r\n          <Empty />\r\n        </Card>\r\n        )}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OrderManagement;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/view-quotation/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/schedule-order/index.js",["1001","1002","1003","1004","1005","1006","1007","1008","1009"],"import { SettingOutlined } from '@ant-design/icons'\r\nimport { Button, Col, Popover, Row, Table } from 'antd'\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport React, { useEffect } from 'react'\r\n\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\r\nimport moment from 'moment';\r\nimport { axiosInstance } from 'App';\r\nimport \"./index.css\"\r\n\r\n\r\nconst ScheduleOrder = () => {\r\n    const [data, setData] = React.useState([\r\n        {\r\n            \"id\": \"phipn888fit97ps9k08ear241o\",\r\n            \"conversation_id\": \"WEB-aqiwzu8n-94d8523bd68f4674878db580fa718158\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=cGhpcG44ODhmaXQ5N3BzOWswOGVhcjI0MW8gZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-05-10T10:00:00\",\r\n            \"end\": \"2024-05-10T11:00:00\",\r\n            \"title\": \"rohan test (rohan@gmail.com)\",\r\n            \"description\": \"Web User - 158\",\r\n            \"phone_number\": null,\r\n            \"location\": null,\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"69b0gj4tfjudlgqq0hu9mmq42k\",\r\n            \"conversation_id\": \"WEB-aqiwzu8n-aee037b788284716bfc95a2c27f3532f\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=NjliMGdqNHRmanVkbGdxcTBodTltbXE0MmsgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-05-08T11:00:00\",\r\n            \"end\": \"2024-05-08T12:00:00\",\r\n            \"title\": \"Xavier Xavier (xavier@eightdesign.com.sg)\",\r\n            \"description\": \"Web User - 32f\",\r\n            \"phone_number\": null,\r\n            \"location\": null,\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"fjdq42mmhn51m0fipqu3dg4o5c\",\r\n            \"conversation_id\": \"WEB-aqiwzu8n-dc07b9ab6ceb49a2a431fd82e0b72789\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=ZmpkcTQybW1objUxbTBmaXBxdTNkZzRvNWMgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-06-01T09:00:00\",\r\n            \"end\": \"2024-06-01T10:00:00\",\r\n            \"title\": \"testing xavier (xavier@eightdesign.com.sg)\",\r\n            \"description\": \"Web User - 789 (+6591195154)\",\r\n            \"phone_number\": \"+6591195154\",\r\n            \"location\": \"s\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"3b4ijv6kf0o050fd3flq7e28bc\",\r\n            \"conversation_id\": \"WHATSAPP-6589366888-6587868759\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=M2I0aWp2NmtmMG8wNTBmZDNmbHE3ZTI4YmMgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-06-21T18:00:00\",\r\n            \"end\": \"2024-06-21T19:00:00\",\r\n            \"title\": \"Kacey Lieu (Kaceylieu@gmail.com)\",\r\n            \"description\": \"Web User - e44 (+6587868759)\",\r\n            \"phone_number\": \"+6587868759\",\r\n            \"location\": \"15 lentor crescent\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"fbpe96oplmg69tk6d1njrbpq1o\",\r\n            \"conversation_id\": \"WEB-aqiwzu8n-969569e581cc49249ad8c8eb7430532e\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=ZmJwZTk2b3BsbWc2OXRrNmQxbmpyYnBxMW8gZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-06-27T16:00:00\",\r\n            \"end\": \"2024-06-27T17:00:00\",\r\n            \"title\": \"Tiang yong Png (Baspng5758@gmail.com)\",\r\n            \"description\": \"Web User - 32e (+6596727376)\",\r\n            \"phone_number\": \"+6596727376\",\r\n            \"location\": \"140 Paya Lebar Road #01-04 AZ@Paya Lebar Singapore 409015\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"e5bhmo234q9c07u56tsl44te2c\",\r\n            \"conversation_id\": \"WEB-aqiwzu8n-99e5dccd308e44069f8b6369320b3071\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=ZTViaG1vMjM0cTljMDd1NTZ0c2w0NHRlMmMgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-07-03T09:00:00\",\r\n            \"end\": \"2024-07-03T10:00:00\",\r\n            \"title\": \"rahul talreja (rahul@reddotinnovative.com)\",\r\n            \"description\": \"Web User - 071 (+6594481685)\",\r\n            \"phone_number\": \"+6594481685\",\r\n            \"location\": \"140 Paya Lebar Road #01-04 AZ@Paya Lebar Singapore 409015\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"lnc7be6oce63m9dtl3bbsv7bl0\",\r\n            \"conversation_id\": \"WHATSAPP-6589366888-6591195154\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=bG5jN2JlNm9jZTYzbTlkdGwzYmJzdjdibDAgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-07-20T11:00:00\",\r\n            \"end\": \"2024-07-20T12:00:00\",\r\n            \"title\": \"Xavier testing (xavier-0909@hotmail.com)\",\r\n            \"description\": \"Web User - 38d (+6591195154)\",\r\n            \"phone_number\": \"+6591195154\",\r\n            \"location\": \"140 Paya Lebar Road #01-04 AZ@Paya Lebar Singapore 409015\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"3t6sa8lik08o45ub95nnp5t48g\",\r\n            \"conversation_id\": \"WHATSAPP-6589366888-917987280954\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=M3Q2c2E4bGlrMDhvNDV1Yjk1bm5wNXQ0OGcgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-07-25T15:00:00\",\r\n            \"end\": \"2024-07-25T16:00:00\",\r\n            \"title\": \"Faizan Khan (faizankhan2595@gmail.com)\",\r\n            \"description\": \"Web User - fd2 (+65798728095)\",\r\n            \"phone_number\": \"+65798728095\",\r\n            \"location\": \"Test\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"thhl1fh92l426i48juanfpg37c\",\r\n            \"conversation_id\": \"WHATSAPP-6589366888-6591195154\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=dGhobDFmaDkybDQyNmk0OGp1YW5mcGczN2MgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-07-27T09:00:00\",\r\n            \"end\": \"2024-07-27T10:00:00\",\r\n            \"title\": \"Xavier Testing (xavier-0909@hotmail.com)\",\r\n            \"description\": \"Web User - e2c (+6580899591)\",\r\n            \"phone_number\": \"+6580899591\",\r\n            \"location\": \"140 Paya Lebar Road #01-04 AZ@Paya Lebar Singapore 409015\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"74uhvjb6lfvvjpbiv6sqn32ndk\",\r\n            \"conversation_id\": \"WEB-aqiwzu8n-1cc6f0b4b77d4b3689f7fa25d0b4138d\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=NzR1aHZqYjZsZnZ2anBiaXY2c3FuMzJuZGsgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-07-27T12:00:00\",\r\n            \"end\": \"2024-07-27T13:00:00\",\r\n            \"title\": \"Xavier Testing (eric@eightdesign.com.sg)\",\r\n            \"description\": \"Web User - 38d (+6597788868)\",\r\n            \"phone_number\": \"+6597788868\",\r\n            \"location\": \"140 Paya Lebar Road #01-04 AZ@Paya Lebar Singapore 409015\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"17l4oa3nvc7lfne2vk29ul25ek\",\r\n            \"conversation_id\": \"WHATSAPP-6589366888-6583283625\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=MTdsNG9hM252YzdsZm5lMnZrMjl1bDI1ZWsgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-09-02T10:00:00\",\r\n            \"end\": \"2024-09-02T11:00:00\",\r\n            \"title\": \"Steven  Yap (Helengkchoo@gmail.com)\",\r\n            \"description\": \"Web User - ce0 (+6583283625)\",\r\n            \"phone_number\": \"+6583283625\",\r\n            \"location\": \"1 Jalan Lateh Singapore 359155 off Upper Serangoon Road \",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"me6ubai8ip30gs36f8j1brslds\",\r\n            \"conversation_id\": \"WHATSAPP-6589366888-6592789644\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=bWU2dWJhaThpcDMwZ3MzNmY4ajFicnNsZHMgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-09-07T14:00:00\",\r\n            \"end\": \"2024-09-07T15:00:00\",\r\n            \"title\": \"Ayden Tan (t.gaojing25@gmail.com)\",\r\n            \"description\": \"Web User - 87c (+6592789644)\",\r\n            \"phone_number\": \"+6592789644\",\r\n            \"location\": \"140 Paya Lebar Road #01-04 AZ@Paya Lebar Singapore 409015\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"cn2amkurqpd8lhurvuiporpde0\",\r\n            \"conversation_id\": \"WHATSAPP-6589366888-6586840567\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=Y24yYW1rdXJxcGQ4bGh1cnZ1aXBvcnBkZTAgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-09-09T18:00:00\",\r\n            \"end\": \"2024-09-09T19:00:00\",\r\n            \"title\": \"Shaik Emam Sulaiman (shaik@printlab.com.sg)\",\r\n            \"description\": \"Web User - d96 (+6586840567)\",\r\n            \"phone_number\": \"+6586840567\",\r\n            \"location\": \"140 Paya Lebar Road #01-04 AZ@Paya Lebar Singapore 409015\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"6tj47lrjfrei747sfb2jfuab90\",\r\n            \"conversation_id\": \"WHATSAPP-6589366888-6597311921\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=NnRqNDdscmpmcmVpNzQ3c2ZiMmpmdWFiOTAgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-09-21T14:00:00\",\r\n            \"end\": \"2024-09-21T15:00:00\",\r\n            \"title\": \"Kevin Gan (kevinganemail@gmail.com)\",\r\n            \"description\": \"Web User - 095 (+6597311921)\",\r\n            \"phone_number\": \"+6597311921\",\r\n            \"location\": \"140 Paya Lebar Road #01-04 AZ@Paya Lebar Singapore 409015\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"nuh9crcips10gf56aoi135k0co\",\r\n            \"conversation_id\": \"WHATSAPP-6589366888-6584360352\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=bnVoOWNyY2lwczEwZ2Y1NmFvaTEzNWswY28gZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-09-24T10:00:00\",\r\n            \"end\": \"2024-09-24T11:00:00\",\r\n            \"title\": null,\r\n            \"description\": \"None (+6584360352)\",\r\n            \"phone_number\": \"+6584360352\",\r\n            \"location\": \"140 Paya Lebar Road #01-04 AZ@Paya Lebar Singapore 409015\",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"74mm6dhjg21tde7h41jkr9msqg\",\r\n            \"conversation_id\": \"FACEBOOK-482395991849800-9247327288630073\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=NzRtbTZkaGpnMjF0ZGU3aDQxamtyOW1zcWcgZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-10-22T11:00:00\",\r\n            \"end\": \"2024-10-22T12:00:00\",\r\n            \"title\": \"Kyaw  Thu (kyawthu71670969@gmail.com)\",\r\n            \"description\": \"Web User - cb0 (+6584603215)\",\r\n            \"phone_number\": \"+6584603215\",\r\n            \"location\": \"Woodland \",\r\n            \"allDay\": false\r\n        },\r\n        {\r\n            \"id\": \"h5svpt3pujlaiduacct860qpco\",\r\n            \"conversation_id\": \"WEB-aqiwzu8n-6a385beffa484c5fa848c2a4621b30d3\",\r\n            \"status\": \"confirmed\",\r\n            \"htmlLink\": \"https://www.google.com/calendar/event?eid=aDVzdnB0M3B1amxhaWR1YWNjdDg2MHFwY28gZTExZGVmNWMwYWQ3NjQ1ZDc4ZDhjZGU1N2M4OTIzNDU4MGExZmY1OGM3ZDU4YjE1OTQwMGNmYWM0ZTZhNTFhYUBn\",\r\n            \"start\": \"2024-11-17T17:00:00\",\r\n            \"end\": \"2024-11-17T18:00:00\",\r\n            \"title\": \"Dev Test Dev Test (ashay@sellswift.ai)\",\r\n            \"description\": \"Web User - 0d3 (+6522548975)\",\r\n            \"phone_number\": \"+6522548975\",\r\n            \"location\": \"26 Boon Lay Way #01-84 Tradehub@21 Singapore 609970\",\r\n            \"allDay\": false,\r\n            className: 'custom-event-bg'\r\n        }\r\n    ])\r\n\r\n    const renderEventContent = (eventInfo) => {\r\n        let startTime = moment(eventInfo.event.startStr).format(\"hh:mm A\");\r\n        let endTime = moment(eventInfo.event.endStr).format(\"hh:mm A\");\r\n    \r\n        const eventDetails = (\r\n            <div>\r\n                <p><strong>Technician:</strong> {eventInfo.event.extendedProps.technician || \"N/A\"}</p>\r\n                <p><strong>Job Site:</strong> {eventInfo.event.extendedProps.jobsite || \"N/A\"}</p>\r\n                <p><strong>Customer Remarks:</strong> {eventInfo.event.extendedProps.customerRemarks || \"N/A\"}</p>\r\n                <p><strong>Instructions:</strong> {eventInfo.event.extendedProps.instructions || \"N/A\"}</p>\r\n            </div>\r\n        );\r\n    \r\n        return (\r\n            <Popover content={eventDetails} title={eventInfo.event.title} trigger=\"hover\">\r\n                <div style={{\r\n                    backgroundColor: \"#3788D8\",  // Blue background\r\n                    color: \"white\",               // White text\r\n                    padding: \"4px\",\r\n                    borderRadius: \"4px\",\r\n                    // textAlign: \"center\",\r\n                    cursor: \"pointer\",\r\n                }}>\r\n                    {eventInfo.event.title} - {startTime} - {endTime}\r\n                </div>\r\n            </Popover>\r\n        );\r\n    };\r\n    const fetchEvents = async (startDate, endDate) => {\r\n        try {\r\n          const response = await axiosInstance.get(`/api/admin/getScheduledSurveysByDateRange?customer_id=${localStorage.getItem(\"parent_id\")!='null'?localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}`, {\r\n            params: { from_date: startDate, to_date: endDate },\r\n          });\r\n          const formattedEvents = response.data.items.map((item) => {\r\n            const [startTime, endTime] = item.timeslot.split(\" To \"); // Split timeslot\r\n      \r\n            return {\r\n              id: item.id,\r\n              title: `${item.order.company_name} `, // Display company name & timeslot\r\n              start: `${item.survey_date}T${convertTo24HourFormat(startTime)}`, // Convert time to 24-hour format\r\n              end: `${item.survey_date}T${convertTo24HourFormat(endTime)}`, // Convert time to 24-hour format\r\n              extendedProps: {\r\n                technician: item.technician?.name || \"N/A\",\r\n                jobsite: item.job_site?.jobsite_name || \"N/A\",\r\n                customerRemarks: item.customer_remarks,\r\n                instructions: item.instructions,\r\n              },\r\n            };\r\n          });\r\n      \r\n          setData(formattedEvents); // Update calendar events\r\n        } catch (error) {\r\n          console.error(\"Error fetching events:\", error);\r\n        }\r\n      };\r\n   \r\n      const convertTo24HourFormat = (time) => {\r\n        const [timePart, modifier] = time.split(\" \"); // Separate time and AM/PM\r\n        let [hours, minutes] = timePart.split(\":\").map(Number);\r\n      \r\n        if (modifier.toLowerCase() === \"pm\" && hours !== 12) {\r\n          hours += 12;\r\n        } else if (modifier.toLowerCase() === \"am\" && hours === 12) {\r\n          hours = 0;\r\n        }\r\n      \r\n        return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}:00`; // Ensure HH:MM:SS format\r\n      };\r\n    return (\r\n        <div>\r\n            <div className='d-flex justify-content-between'>\r\n\r\n                <h4> <SettingOutlined /><span style={{\r\n                    color: '#6a6a6a',\r\n                    fontWeight: '300'\r\n                }}> Order Management </span>/ Schedule </h4>\r\n            </div>\r\n            <FullCalendar\r\n                plugins={[dayGridPlugin, timeGridPlugin]}\r\n                initialView=\"timeGridWeek\"\r\n                height={\"auto\"}\r\n                views={{\r\n                    dayGridMonth: { buttonText: \"Month\" },\r\n                    timeGridWeek: { buttonText: \"Week\" },\r\n                    timeGridDay: { buttonText: \"Day\" },\r\n                }}\r\n                buttonText={{\r\n                    today: \"Today\",\r\n                }}\r\n            allDayText=\"All Day\"\r\n            \r\n                events={data}\r\n                datesSet={(info) => {\r\n                    // Fetch events whenever calendar view changes\r\n                    const start = moment(info.start).format(\"YYYY-MM-DD\");\r\n                    const end = moment(info.end).format(\"YYYY-MM-DD\");\r\n                    fetchEvents(start, end);\r\n                  }}\r\n                headerToolbar={{\r\n                    left: \"today,prev,next\",\r\n                    center: \"dayGridMonth,timeGridWeek,timeGridDay\",\r\n                    right: \"title\",\r\n                }}\r\n                eventContent={renderEventContent}\r\n            // eventClick={(info) => {\r\n            //     console.log(info.event.extendedProps)\r\n            //     setDetailData({\r\n            //         title: info.event.title,\r\n            //         description: info.event.extendedProps,\r\n            //         start: moment(info.event.startStr),\r\n            //         end: moment(info.event.endStr)\r\n            //     })\r\n            //     setDetail(true)\r\n            // }}\r\n            />\r\n\r\n            {/* </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScheduleOrder\r\nconst styles = {\r\n    width: \"100%\",\r\n    whiteSpace: \"nowrap\",\r\n    overflow: \"hidden\",\r\n    textOverflow: \"ellipsis\",\r\n    color: '#000000',\r\n};\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/AddOrder/AddOrder.js",["1010","1011","1012","1013","1014","1015","1016","1017","1018"],"import {\r\n  CloseCircleOutlined,\r\n  DeleteOutlined,\r\n  EyeOutlined,\r\n  FileOutlined,\r\n  FilterOutlined,\r\n  InboxOutlined,\r\n  PlusOutlined,\r\n  SettingOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Empty,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Select,\r\n  Upload,\r\n} from \"antd\";\r\nimport { Option } from \"antd/lib/mentions\";\r\nimport { axiosInstance } from \"App\";\r\nimport { UploadFileIcon } from \"assets/svg/icon\";\r\n// import UploadImage from \"assets/uploadDocument.svg\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom\";\r\nimport CountrySelector from \"utils/CountrySelector\";\r\nimport { UploadImage } from \"utils/Upload\";\r\n\r\nfunction AddOrder() {\r\n  const [form] = Form.useForm();\r\n  const [data, setData] = React.useState([]);\r\n  const [machineData, setMachineData] = React.useState([]);\r\n  const [technician, setTechnician] = React.useState([]);\r\n  const [workshop, setWorkshop] = React.useState([]);\r\n  const [serviceType, setServiceType] = React.useState(\"\");\r\n  const [machineFaultInput, setMachineFaultInput] = React.useState(\"\");\r\n  const [faultDetails, setFaultDetails] = React.useState(\"\");\r\n  const [machineFault, setMachineFault] = React.useState([]);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const onFinish = async (values) => {\r\n    // console.log(\"values\", values);\r\n    if (machineFault.length === 0) {\r\n      message.error(\"Please add machine fault\");\r\n      return;\r\n    }\r\n    let file = [];\r\n\r\n    const temp = selectedFiles.filter((item) => {\r\n      return item.url === undefined;\r\n    });\r\n\r\n    const temp2 = selectedFiles.filter((item) => {\r\n      return item.url !== undefined;\r\n    });\r\n    setLoading(true);\r\n    if (temp.length !== 0) {\r\n      const uploadPromise = temp.map(async (item) => {\r\n        if (item.url === undefined) {\r\n          const url = await UploadImage(item);\r\n          return url;\r\n        } else {\r\n          return item.url;\r\n        }\r\n      });\r\n\r\n      file = await Promise.all(uploadPromise);\r\n      console.log(file);\r\n    }\r\n\r\n    file = [\r\n      ...file,\r\n      ...temp2.map((item) => {\r\n        return item.url;\r\n      }),\r\n    ];\r\n    // return;\r\n    try {\r\n      const response = await axiosInstance.post(\"api/web/orders\", {\r\n        ...values,\r\n        machine_faults: machineFault,\r\n        files: file,\r\n        model: machineData.find((item) => item.id === values.machine_id).model,\r\n        status: 1,\r\n        //    0 -> Order Created\r\n      });\r\n      if (response.status === 200) {\r\n        console.log(\"response\", response);\r\n        message.success(\"Order created successfully\");\r\n        history.push(\"/app/order-management\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getBase64 = (img, callback) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener(\"load\", () => callback(reader.result));\r\n    reader.readAsDataURL(img);\r\n  };\r\n  function handleFileSelect(event) {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    //   console.log(selectedFiles)\r\n    setSelectedFiles([...selectedFiles, newSelectedFiles[0]]);\r\n  }\r\n  const delUplFile = (i) => {\r\n    let AfterDeleteFile = selectedFiles.filter((elem, index) => {\r\n      return index !== i;\r\n    });\r\n    setSelectedFiles(AfterDeleteFile);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axiosInstance.get(\r\n        `api/web/machines?customer_id=${\r\n          localStorage.getItem(\"parent_id\") != \"null\"\r\n            ? localStorage.getItem(\"parent_id\")\r\n            : localStorage.getItem(\"user_id\")\r\n        }&status=1`\r\n      );\r\n      if (response.status === 200) {\r\n        const responseData = response.data.items;\r\n        if (Array.isArray(responseData)) {\r\n          setMachineData(responseData);\r\n        } else {\r\n          console.error(\"Unexpected response format:\", responseData);\r\n        }\r\n        // console.log(JSON.stringify(responseData));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      const resp = await axiosInstance.get(\r\n        `/api/web/jobsites?customer_id=${\r\n          localStorage.getItem(\"parent_id\") != \"null\"\r\n            ? localStorage.getItem(\"parent_id\")\r\n            : localStorage.getItem(\"user_id\")\r\n        }&status=1`\r\n      );\r\n      setData(resp.data.items);\r\n    } catch (err) {\r\n      console.log(err);\r\n      message.error(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const getTechnicianList = async () => {\r\n    const res1 = await axiosInstance.get(\r\n      `api/web/technician/list?customer_id=${\r\n        localStorage.getItem(\"parent_id\") != \"null\"\r\n          ? localStorage.getItem(\"parent_id\")\r\n          : localStorage.getItem(\"user_id\")\r\n      }&status=1`\r\n    );\r\n    console.log(\"res1\", res1);\r\n    setTechnician(res1.data.items);\r\n  };\r\n\r\n  const getWorkshop = async () => {\r\n    const res1 = await axiosInstance.get(\r\n      `api/admin/workshop-user/list?status=1`\r\n    );\r\n    // console.log('res1', res1);\r\n    setWorkshop(res1.data.items);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    fetchData();\r\n    getTechnicianList();\r\n    getWorkshop();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <h4>\r\n        {\" \"}\r\n        <SettingOutlined />\r\n        <span\r\n          style={{\r\n            color: \"#6a6a6a\",\r\n            fontWeight: \"300\",\r\n          }}\r\n        >\r\n          {\" \"}\r\n          Order Management\r\n        </span>{\" \"}\r\n        / Create New Order{\" \"}\r\n      </h4>\r\n\r\n      <Card>\r\n        <Form\r\n          form={form}\r\n          layout=\"vertical\"\r\n          onFinish={onFinish}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexWrap: \"wrap\",\r\n          }}\r\n        >\r\n          <Form.Item\r\n            rules={[{ required: true, message: \"Please input Company Name!\" }]}\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Company Name\"\r\n            name={\"company_name\"}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Job Site Name\"\r\n            name={\"job_site_id\"}\r\n            rules={[{ required: true, message: \"Please input Job Site Name!\" }]}\r\n          >\r\n            {/* <Input /> */}\r\n            <Select>\r\n              {data.map((item) => {\r\n                return <Option value={item.id}>{item.jobsite_name}</Option>;\r\n              })}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            rules={[\r\n              { required: true, message: \"Please input Postal Code!\" },\r\n              {\r\n                pattern: new RegExp(/^[0-9\\b]+$/),\r\n                message: \"Please enter valid postal code\",\r\n              },\r\n            ]}\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Postal Code\"\r\n            name={\"postal_code\"}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            rules={[{ required: true, message: \"Please input Block Number!\" }]}\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Block Number\"\r\n            name={\"block_number\"}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Street Number\"\r\n            name={\"street_number\"}\r\n            rules={[{ required: true, message: \"Please input Street Number!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Level Number\"\r\n            name={\"level_number\"}\r\n            rules={[{ required: true, message: \"Please input Level Number!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Unit Number\"\r\n            name={\"unit_number\"}\r\n            rules={[\r\n              { required: true, message: \"Please input Unit Number!\" },\r\n              {\r\n                pattern: new RegExp(/^[0-9\\b]+$/),\r\n                message: \"Please enter valid unit number\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Country\"\r\n            name={\"country\"}\r\n            rules={[{ required: true, message: \"Please input Country!\" }]}\r\n          >\r\n            <CountrySelector />\r\n          </Form.Item>\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Maintenance Service Type\"\r\n            name={\"maintenance_service_type\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input Maintenance Service Type!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Select\r\n              onChange={(e) => {\r\n                setServiceType(e);\r\n              }}\r\n            >\r\n              <Option value=\"Onsite\">Onsite</Option>\r\n              <Option value=\"Workshop\">Workshop</Option>\r\n            </Select>\r\n          </Form.Item>\r\n          {serviceType === \"Onsite\" ? (\r\n            <Form.Item\r\n              style={{\r\n                width: \"45%\",\r\n              }}\r\n              label=\"Technician\"\r\n              name={\"technician_id\"}\r\n              rules={[{ required: true, message: \"Please select Technician!\" }]}\r\n            >\r\n              <Select>\r\n                {technician.map((item) => {\r\n                  return <Option value={item.id}>{item.name}</Option>;\r\n                })}\r\n              </Select>\r\n            </Form.Item>\r\n          ) : serviceType === \"Workshop\" ? (\r\n            <Form.Item\r\n              style={{\r\n                width: \"45%\",\r\n              }}\r\n              label=\"Workshop\"\r\n              name={\"workshop_id\"}\r\n              rules={[{ required: true, message: \"Please Select Workshop!\" }]}\r\n            >\r\n              <Select>\r\n                {workshop.map((item) => {\r\n                  return <Option value={item.id}>{item.name}</Option>;\r\n                })}\r\n              </Select>\r\n            </Form.Item>\r\n          ) : null}\r\n          <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Machine\"\r\n            name={\"machine_id\"}\r\n            rules={[{ required: true, message: \"Please input Machine!\" }]}\r\n          >\r\n            {/* <Input /> */}\r\n            <Select>\r\n              {machineData.map((item) => {\r\n                return (\r\n                  <Option value={item.id}>\r\n                    {item.name} | {item.model}\r\n                  </Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            style={{\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                gap: \"5px\",\r\n                alignItems: \"flex-end\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  // display:\"flex\"\r\n                  width: \"100%\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  gap: \"10px\",\r\n                }}\r\n              >\r\n                <div>\r\n                  <div\r\n                    style={{\r\n                      fontWeight: \"bold\",\r\n                      // color:\"black\"\r\n                    }}\r\n                  >\r\n                    Fault Title\r\n                  </div>\r\n                  <Input\r\n                    value={machineFaultInput}\r\n                    onChange={(e) => {\r\n                      setMachineFaultInput(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <div\r\n                    style={{\r\n                      fontWeight: \"bold\",\r\n                      // color:\"black\"\r\n                    }}\r\n                  >\r\n                     Fault Detail\r\n                  </div>\r\n                  <Input.TextArea\r\n                    value={faultDetails}\r\n                    onChange={(e) => {\r\n                      setFaultDetails(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <Button\r\n                type=\"primary\"\r\n                onClick={() => {\r\n                  if (machineFaultInput === \"\" || machineFaultInput === null) {\r\n                    message.error(\"Please add machine fault\");\r\n                    return;\r\n                  }\r\n                  if (faultDetails === \"\" || faultDetails === null) {\r\n                    message.error(\"Please add fault details\");\r\n                    return;\r\n                  }\r\n\r\n                  setMachineFault([\r\n                    ...machineFault,\r\n                    {\r\n                      sNo: machineFault.length + 1,\r\n                      fault: machineFaultInput,\r\n                      faultDetails: faultDetails,\r\n                    },\r\n                  ]);\r\n                  setMachineFaultInput(\"\");\r\n                  setFaultDetails(\"\");\r\n                }}\r\n              >\r\n                <PlusOutlined />\r\n              </Button>\r\n            </div>\r\n            {machineFault.length > 0 ? (\r\n              machineFault.map((item) => {\r\n                return (\r\n                  <Card\r\n                    style={{\r\n                      marginTop: \"10px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <div>\r\n                          <div\r\n                            style={{\r\n                              fontWeight: \"bold\",\r\n\r\n                              // color:\"black\"\r\n                            }}\r\n                          >\r\n                            Fault{\" \"}\r\n                          </div>\r\n                          {item.fault}\r\n                        </div>\r\n                        <div>\r\n                          <div\r\n                            style={{\r\n                              fontWeight: \"bold\",\r\n                              marginTop: \"10px\",\r\n                              // color:\"black\"\r\n                            }}\r\n                          >\r\n                            Fault Detail\r\n                          </div>\r\n                          {item.faultDetails}\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        onClick={() => {\r\n                          setMachineFault(\r\n                            machineFault.filter(\r\n                              (item2) => item2.sNo !== item.sNo\r\n                            )\r\n                          );\r\n                          // setMachineFault(\r\n                          //   machineFault.filter((item2,i) => i !== item.sNo)\r\n                          // );\r\n                        }}\r\n                        style={{\r\n                          color: \"red\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <DeleteOutlined />\r\n                      </div>\r\n                    </div>\r\n                  </Card>\r\n                );\r\n              })\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Form.Item>\r\n          {/* <Form.Item\r\n            style={{\r\n              width: \"45%\",\r\n            }}\r\n            label=\"Fault Details\"\r\n            name={\"fault_details\"}\r\n            rules={[{ required: true, message: \"Please input Fault Details!\" }]}\r\n          >\r\n            <Input.TextArea />\r\n          </Form.Item> */}\r\n          <div style={{ width: \"100%\" }}>\r\n            <h2>Attachment</h2>\r\n            <div className=\"border bg-white rounded p-3 mt-4\">\r\n              <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"64\"\r\n                  height=\"64\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 64 64\"\r\n                >\r\n                  <path\r\n                    fill={\"#3CA6C1\"}\r\n                    d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n                  ></path>\r\n                  <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n                  <path\r\n                    fill={\"#3CA6C1\"}\r\n                    d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n                  ></path>\r\n                  <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n                  <path\r\n                    fill={\"#3CA6C1\"}\r\n                    d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n                  ></path>\r\n                  <path\r\n                    fill=\"#F7FCFF\"\r\n                    d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n                  ></path>\r\n                  <path\r\n                    fill=\"#D7E6EF\"\r\n                    d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n                  ></path>\r\n                  <path\r\n                    fill=\"#44394A\"\r\n                    d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n                  ></path>\r\n                </svg>\r\n                <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                <h5 className=\"mb-0\">Or</h5>\r\n                <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n                  Choosen File\r\n                </h5>\r\n                <input\r\n                  style={styles.uploadFile}\r\n                  className=\"uploadFile\"\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileSelect}\r\n                />\r\n              </div>\r\n              <div className=\"mt-4\">\r\n                {selectedFiles.length > 0 && (\r\n                  <ul className=\"p-0\" style={{ width: \"40%\" }}>\r\n                    {selectedFiles.map((file, i) => (\r\n                      <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                        {\" \"}\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <UploadFileIcon />{\" \"}\r\n                          <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                          {/* <span className=\"ml-5\">\r\n                            {file.url ? (\r\n                              <EyeOutlined\r\n                                style={{ cursor: \"pointer\" }}\r\n                                onClick={() => window.open(file.url)}\r\n                              />\r\n                            ) : null}\r\n                          </span> */}\r\n                        </div>\r\n                        <div>\r\n                        {\r\n                          file.url && <span className=\"ml-3 \" style={{\r\n                            cursor: \"pointer\"\r\n                          }} onClick={() => {\r\n                            window.open(file.url, '_blank')\r\n                          }}>\r\n                            <EyeOutlined />\r\n                          </span>\r\n                        }\r\n                        <span\r\n                          style={{ cursor: \"pointer\" }}\r\n                          onClick={() => delUplFile(i)}\r\n                        >\r\n                          {\" \"}\r\n                          <CloseCircleOutlined />{\" \"}\r\n                        </span>\r\n                      </div>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"flex-end\",\r\n              width: \"100%\",\r\n              marginTop: \"10px\",\r\n            }}\r\n          >\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                Submit\r\n              </Button>\r\n            </Form.Item>\r\n          </div>\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddOrder;\r\n\r\nlet styles = {\r\n  files: {\r\n    listStyle: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    gap: \"13px\",\r\n    border: \"1px solid lightblue\",\r\n    padding: \"10px\",\r\n    borderRadius: \"9px\",\r\n    background: \"#0093ff0a\",\r\n  },\r\n  uploadFile: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    opacity: 0,\r\n  },\r\n\r\n  // Add the new styles here:\r\n\r\n  \".uploadFile::-webkit-file-upload-button\": {\r\n    visibility: \"hidden\",\r\n  },\r\n\r\n  \".uploadFile::before\": {\r\n    content: \"'Drag & Drop'\",\r\n    display: \"inline-block\",\r\n    padding: \"10px\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  \".uploadFile:hover::before\": {\r\n    backgroundColor: \"#ccc\",\r\n  },\r\n};\r\n\r\n// company_name:Acme co pte ltd\r\n// job_site_id:1\r\n// postal_code:411001\r\n// block_number:23\r\n// street_number:34\r\n// level_number:22222\r\n// unit_number:54\r\n// country:75\r\n// maintenance_service_type:Onsite\r\n// machine_id:16\r\n// make:Johnson Electric\r\n// model:CF1245g6\r\n// sensor_id:5\r\n// sensor_location:Rotor\r\n// machine_fault:Pump Vibrations\r\n// fault_details:loreum ipsum is dummy text. loreum ipsum is dummy text.loreum ipsum is dummy text.↵loreum ipsum is dummy text.loreum ipsum is dummy text.loreum ipsum is dummy text.↵loreum ipsum is dummy text.loreum ipsum is dummy text. loreum ipsum is dummy text.loreum↵ ipsum is dummy text.loreum ipsum is dummy text.loreum ipsum is dummy text.loreum ipsum is ↵dummy text.l oreum ipsum is dummy text.\r\n// status:1\r\n// files[]:https://jd-stag-jd.s3.ap-southeast-1.amazonaws.com/images.jpeg\r\n// files[]:https://jd-stag-jd.s3.ap-southeast-1.amazonaws.com/cm551k0uw00010jnz9rx0domz.jpeg\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/order-detail/index.js",["1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031"],"import { EyeOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { Button, Card, Empty, Input, Tag, Timeline } from 'antd'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport Icon1 from \"assets/OrderDetail/question (4) 1.png\"\r\nimport Icon2 from \"assets/OrderDetail/precision_manufacturing_black_24dp 1 (1).png\"\r\nimport Icon3 from \"assets/OrderDetail/question (4) 1.png\"\r\nimport Icon4 from \"assets/OrderDetail/perm_media_black_24dp 1.png\"\r\nimport SampleImage from \"assets/OrderDetail/360_F_185851253_EmJWmKOrReArl27PN6bVVV5fOanRiCCm 1.png\"\r\nimport Icon5 from \"assets/OrderDetail/task_black_24dp (4) 1.png\"\r\nimport Icon6 from \"assets/OrderDetail/analytics-icon 1.png\"\r\nimport SurveyNotFoundImage from \"assets/images/—Pngtree—not found_5408094 (1) 1.png\";\r\nimport { useHistory, useParams } from 'react-router-dom/cjs/react-router-dom'\r\nimport { axiosInstance } from 'App'\r\nimport moment from 'moment'\r\nimport { CountryContext } from 'CountryContext'\r\nimport { ImageIcon, UploadFileIcon } from 'assets/svg/icon'\r\n\r\nfunction Index() {\r\n  const history = useHistory()\r\n  const {id} = useParams();\r\n  const {countryList} = useContext(CountryContext);\r\n  const [order, setOrder] = useState({});\r\n  const [fileData, setFileData] = useState([]);\r\n  const [surveyData, setSurveyData] = useState({\r\n    \"id\": 0,\r\n    \"user_id\": 0,\r\n    \"order_id\": 0,\r\n    \"survey_date\": null,\r\n    \"timeslot\": null,\r\n    \"technician_id\": 0,\r\n    \"instructions\": null,\r\n    \"postal_code\": \"\",\r\n    \"block_number\": \"\",\r\n    \"street_number\": \"\",\r\n    \"level_number\": \"\",\r\n    \"unit_number\": \"\",\r\n    \"country\": \"\",\r\n    \"customer_remarks\": \"\",\r\n    \"status\": 0,\r\n    \"is_deleted\": 0,\r\n    \"technician\": \"\"\r\n});\r\nconst getMachineImage = async (id) => {\r\n  const res = await axiosInstance.get(`api/admin/machines/${id}`);\r\n  setFileData(res.data.item.pictures);\r\n}\r\n  const getData = async () => {\r\n    try{\r\n      const data = await axiosInstance.get(`/api/admin/orders/${id}`);\r\n      // orders/${id}\r\n      const order = data.data.item;\r\n      getMachineImage(order.machine_id);\r\n      setOrder(order);\r\n      // const order = data.data.items.find((item)=>item.id == id);\r\n      // setOrder(order);\r\n      if(order.survey[0]) setSurveyData(order.survey[0])\r\n    }catch(e){\r\n\r\n    }\r\n  }\r\n  useEffect(()=>{\r\n    getData();\r\n  },[])\r\n\r\n  const getTimelineStatus = (time_item, i) => {\r\n    if(time_item.status == 1) {\r\n      return \"Order Created\"\r\n    }\r\n    if(time_item.status == 2) {\r\n      return \"Survey Scheduled\"\r\n    }\r\n    return \"Timeline \"+(i+1)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4> <SettingOutlined /><span\r\n        style={{\r\n          color: \"#6a6a6a\",\r\n          fontWeight: \"300\",\r\n        }}\r\n      >\r\n        {\" \"}\r\n        Order Management\r\n      </span>{\" \"}\r\n        / Order Details{\" \"}</h4>\r\n\r\n      <div style={{\r\n        textAlign: \"right\",\r\n        display: \"flex\",\r\n        justifyContent: \"right\",\r\n        gap: \"20px\",\r\n      }}>\r\n        <Button onClick={()=>{\r\n          history.goBack()\r\n        }}>Back</Button>\r\n        {/* <Button onClick={()=>{\r\n          history.push(\"/app/order-management/view-quotation\")\r\n        }} type=\"primary\">View Quotation</Button> */}\r\n        <div>\r\n        {\r\n                (order.status === 1) ? (\r\n                  <Tag color=\"gold\">Order Created</Tag>\r\n                ):\r\n                (order.status === 2) ? (\r\n                  <Tag color=\"green\">Order Scheduled</Tag>\r\n                ):\r\n                (order.status === 3) ? (\r\n                  <Tag color=\"blue\">Order Closed</Tag>\r\n                ):\"NA\"\r\n              }\r\n          <div style={{\r\n            color: \"#72849A\",\r\n            fontSize: \"12px\",\r\n            fontWeight: \"400\",\r\n            marginTop: \"5px\"\r\n          }}>\r\n            Since {moment(order.created_at).format(\"DD-MM-YYYY hh:mmA\")}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n\r\n      }}>\r\n        <div style={{\r\n          width: \"71%\"\r\n        }}>\r\n\r\n          {/* Card 1  */}\r\n\r\n          <Card title={\r\n            <div style={{\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n\r\n              alignItems: \"center\"\r\n            }}>\r\n              <img src={Icon1} />\r\n              <span style={{\r\n                fontWeight: \"bold\",\r\n                fontSize: \"17px\",\r\n                color: \"#000\"\r\n              }}>Order Details</span>\r\n            </div>\r\n          }>\r\n\r\n            <div style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              flexWrap: \"wrap\",\r\n              gap: \"40px\"\r\n            }}>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Company Name</div>\r\n                <div>{order.company_name}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Job Site</div>\r\n                <div>{order.job_site?.jobsite_name}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"100%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n\r\n                }}>Address</div>\r\n\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Postal Code</div>\r\n                <div>{order.postal_code}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Block Number</div>\r\n                <div>{order.block_number}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Street Number</div>\r\n                <div>{order.street_number}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Unit Number</div>\r\n                <div>{order.unit_number}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Level Number</div>\r\n                <div>{order.level_number}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Country</div>\r\n                <h5>\r\n                {/* {data.country} */}\r\n                {countryList.find((country) => country.id == order.country)?.name}\r\n              </h5>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Maintenance Service Type </div>\r\n                <div>{order.maintenance_service_type}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Machine Name</div>\r\n                <div>{order.machine?.name}</div>\r\n              </div>\r\n              {/* <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Machine Make</div>\r\n                <div>{\r\n                  }</div>\r\n              </div> */}\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Machine Model </div>\r\n                <div>{order.model}</div>\r\n              </div>\r\n              {/* <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Sensor</div>\r\n                <div>Vibratory Sensor</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Sensor Location</div>\r\n                <div>Rotor</div>\r\n              </div> */}\r\n            </div>\r\n\r\n          </Card>\r\n\r\n          {/* Card 2  */}\r\n          <Card title={\r\n            <div style={{\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n\r\n              alignItems: \"center\"\r\n            }}>\r\n              <img src={Icon2} />\r\n              <span style={{\r\n                fontWeight: \"bold\",\r\n                fontSize: \"17px\",\r\n                color: \"#000\"\r\n              }}>Machine Faults</span>\r\n            </div>\r\n          }>\r\n\r\n            <div style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              flexWrap: \"wrap\",\r\n              gap: \"40px\"\r\n            }}>\r\n              {\r\n                order.faults?.length>0 ?               \r\n                  order.machine_faults?.map((item,i)=>{\r\n                   return <div style={{\r\n                      width: \"80%\",\r\n                      color: \"#000\"\r\n                    }}>\r\n                     <Card>\r\n                          <div>\r\n                            <div\r\n                              style={{\r\n                                fontWeight: \"bold\",\r\n  \r\n                                // color:\"black\"\r\n                              }}\r\n                            >\r\n                              Fault{\" \"}\r\n                            </div>\r\n                            {item.fault}\r\n                          </div>\r\n                          <div>\r\n                            <div\r\n                              style={{\r\n                                fontWeight: \"bold\",\r\n                                marginTop: \"10px\",\r\n                                // color:\"black\"\r\n                              }}\r\n                            >\r\n                              Fault Detail\r\n                            </div>\r\n                            {item.faultDetails}\r\n                          </div>\r\n                        </Card>\r\n                    </div>\r\n                   \r\n                  })\r\n                :<Empty style={{\r\n                  width: \"100%\",\r\n                }}/>\r\n              }\r\n            </div>\r\n\r\n          </Card>\r\n\r\n\r\n          {/* Card 3 */}\r\n          <Card title={\r\n            <div style={{\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n\r\n              alignItems: \"center\"\r\n            }}>\r\n              <img src={Icon3} />\r\n              <span style={{\r\n                fontWeight: \"bold\",\r\n                fontSize: \"17px\",\r\n                color: \"#000\"\r\n              }}>Survey Schedule</span>\r\n            </div>\r\n          }>\r\n\r\n            {surveyData.created_at ? <div style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              flexWrap: \"wrap\",\r\n              gap: \"40px\"\r\n            }}>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Date of Survey</div>\r\n                <div>{surveyData.survey_date}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Survey Time Slot</div>\r\n                <div>{surveyData.timeslot}</div>\r\n              </div>\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Technician Assigned</div>\r\n                <div>{surveyData.technician || 'Robert Fox'}</div>\r\n              </div>\r\n\r\n              {/* <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Postal Code</div>\r\n                <div>{surveyData.postal_code}</div>\r\n              </div>\r\n\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Block Number</div>\r\n                <div>{surveyData.block_number}</div>\r\n              </div>\r\n\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Street Name</div>\r\n                <div>{surveyData.street_number}</div>\r\n              </div>\r\n\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Unit Number</div>\r\n                <div>{surveyData.unit_number}</div>\r\n              </div>\r\n\r\n              <div style={{\r\n                width: \"45%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Level Number</div>\r\n                <div>{surveyData.level_number}</div>\r\n              </div> */}\r\n\r\n              <div style={{\r\n                width: \"95%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Customer Remarks</div>\r\n                <div>{surveyData.customer_remarks}</div>\r\n              </div>\r\n              \r\n              {/* <div style={{\r\n                width: \"80%\",\r\n                color: \"#000\"\r\n              }}>\r\n                <div style={{\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"10px\"\r\n                }}>Add Remarks</div>\r\n                <div>\r\n                  <Input.TextArea />\r\n                </div>\r\n                <Button style={{\r\n                  marginTop: \"10px\"\r\n                }} type=\"primary\">Save</Button>\r\n              </div> */}\r\n\r\n            </div> : \r\n            (<div className=\"d-flex flex-column justify-content-center mt-3\">\r\n              <img\r\n                style={{\r\n                  width: \"200px\",\r\n                  margin: \"auto\",\r\n                }}\r\n                src={SurveyNotFoundImage}\r\n                alt=\"...\"\r\n              />\r\n              <p className=\"text-center mt-3\">\r\n                Survey is not scheduled yet!{\" \"}\r\n              </p>\r\n            </div>)}\r\n\r\n          </Card>\r\n        </div>\r\n        <div style={{\r\n          width: \"28%\"\r\n        }}>\r\n          <Card title={\r\n            <div style={{\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              overflow:\"auto\" ,height:\"100%\" ,\r\n              alignItems: \"center\"\r\n            }}>\r\n              <img src={Icon4} />\r\n              <span style={{\r\n                fontWeight: \"bold\",\r\n                fontSize: \"17px\",\r\n                color: \"#000\"\r\n              }}>Machine Pictures/Videos</span>\r\n            </div>\r\n          }>\r\n\r\n            <div>\r\n            {\r\n                  fileData.length > 0 ? fileData?.map((item, i) => {\r\n                    return <div style={{\r\n                      // outline-style: dashed;\r\n                      // outline-color: #E6EBF1;\r\n                      // border-radius: 12px;\r\n                      outlineStyle: \"dashed\",\r\n                      outlineColor: \"#E6EBF1\",\r\n                      borderRadius: \"12px\",\r\n                      padding: \"20px\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n\r\n                    }}>\r\n                       <img style={{\r\n                        maxWidth:\"100%\"\r\n                      }} src={item.file_url} />\r\n                      \r\n                    </div>\r\n                  }) : <Empty />\r\n                }\r\n            </div>\r\n\r\n          </Card>\r\n          <div style={{ height: \"35%\", paddingBottom: \"0.6rem\" }}>\r\n            <div\r\n              style={{ minHeight: \"100%\" }}\r\n              className=\"p-3 bg-white border rounded ml-1 customimgUploader\"\r\n            >\r\n              <h4 className=\"d-flex m-0 mb-2\">\r\n                <ImageIcon />\r\n                <span className=\"ml-2\">Orders Document</span>\r\n              </h4>\r\n              <div>\r\n  \r\n                 <div className=\"mt-4\">\r\n                      {order?.files?.length > 0 && (\r\n                        <ul className=\"p-0\" style={{ width: \"100%\" }}>\r\n                          {order.files.map((file, i) => (\r\n                            <li key={i} className=\"my-3\" style={styles.files}>\r\n                              {\" \"}\r\n                              <div className=\"d-flex align-items-center\">\r\n                                <UploadFileIcon />{\" \"}\r\n                                <span className=\"ml-2\">Document #{i+1} </span>{\" \"}\r\n                                {/* <span className=\"ml-5\">\r\n                                            {file.url ? (  <EyeOutlined style={{ cursor: \"pointer\" }} onClick={() => window.open(file.url)} />) : null}\r\n                                        </span> */}\r\n                              </div>\r\n                              <div>\r\n                                {\r\n                                  file.file_url && <span className=\"ml-3 \" style={{\r\n                                    cursor: \"pointer\"\r\n                                  }} onClick={() => {\r\n                                    window.open(file.file_url, '_blank')\r\n                                  }}>\r\n                                    <EyeOutlined />\r\n                                  </span>\r\n                                }\r\n                               \r\n                              </div>\r\n                            </li>\r\n                          ))}\r\n                        </ul>\r\n                      )}\r\n                   \r\n                  </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          <Card title={\r\n            <div style={{\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n\r\n              alignItems: \"center\"\r\n            }}>\r\n              <img src={Icon5} />\r\n              <span style={{\r\n                fontWeight: \"bold\",\r\n                fontSize: \"17px\",\r\n                color: \"#000\"\r\n              }}>Order Timeline</span>\r\n            </div>\r\n          }>\r\n\r\n            <div>\r\n              <Timeline>\r\n                {\r\n                  order.timeline?.map((item,i)=>{\r\n                    return (\r\n                      <Timeline.Item>\r\n                        {/* <div>Timeline{i+1}</div> */}\r\n                        <div>{getTimelineStatus(item, i)}</div>\r\n                        <div>{moment(item.created_at).format(\"DD-MM-YYYY hh:mmA\")}</div>\r\n                      </Timeline.Item>\r\n                    )\r\n                  })\r\n                }\r\n                {/* <Timeline.Item>\r\n                  <div>Order Generated.</div>\r\n                  <div>16 Jan 2022, 10:02 AM</div>\r\n                </Timeline.Item> */}\r\n                {/* <Timeline.Item>\r\n                  <div>Order Generated.</div>\r\n                  <div>16 Jan 2022, 10:02 AM</div>\r\n                </Timeline.Item>\r\n                <Timeline.Item>\r\n                  <div>Order Generated.</div>\r\n                  <div>16 Jan 2022, 10:02 AM</div>\r\n                </Timeline.Item>\r\n                <Timeline.Item>\r\n                  <div>Order Generated.</div>\r\n                  <div>16 Jan 2022, 10:02 AM</div>\r\n                </Timeline.Item> */}\r\n\r\n              </Timeline>\r\n            </div>\r\n\r\n          </Card>\r\n\r\n          {/* <Card title={\r\n            <div style={{\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n\r\n              alignItems: \"center\"\r\n            }}>\r\n              <img src={Icon6} />\r\n              <span style={{\r\n                fontWeight: \"bold\",\r\n                fontSize: \"17px\",\r\n                color: \"#000\"\r\n              }}>Survey Details</span>\r\n            </div>\r\n          }>\r\n\r\n            <div>\r\n              <Empty />\r\n            </div>\r\n\r\n          </Card> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Index\r\n\r\nconst styles = {\r\n  files: {\r\n    listStyle: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    gap: '13px',\r\n    border: '1px solid lightblue',\r\n    padding: '10px',\r\n    borderRadius: '9px',\r\n    background: '#0093ff0a',\r\n  },\r\n  uploadFile: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: '100%',\r\n    opacity: 0,\r\n  },\r\n  '.uploadFile::-webkit-file-upload-button': {\r\n    visibility: 'hidden',\r\n  },\r\n  '.uploadFile::before': {\r\n    content: \"'Drag & Drop'\",\r\n    display: 'inline-block',\r\n    padding: '10px',\r\n    border: '1px solid #ccc',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer',\r\n  },\r\n  '.uploadFile:hover::before': {\r\n    backgroundColor: '#ccc',\r\n  },\r\n};","/home/faizan/jd-works/customer-web-app/src/views/app-views/user-management/index.js",["1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044"],"import { DashboardOutlined, DeleteOutlined, EditOutlined, EllipsisOutlined, EyeOutlined, MoreOutlined, SearchOutlined, TeamOutlined, UserSwitchOutlined } from '@ant-design/icons'\r\nimport Icon from '@ant-design/icons/lib/components/Icon'\r\nimport { Avatar, Button, Checkbox, Dropdown, Input, Menu, Space, Table, Tag, Modal, Select, Form, Radio, message } from 'antd'\r\nimport SubMenu from 'antd/lib/menu/SubMenu'\r\nimport { AccountStatusIcon, AssignDashboardIcon, CsvIcon, FilterIcon, SuccessTickIcon } from 'assets/svg/icon'\r\nimport Filter from 'components/shared-components/Filter'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Alert from '../../../assets/images/Alert.png'\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min'\r\nimport { axiosInstance } from 'App'\r\nimport moment from 'moment'\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom'\r\nimport { role, Status } from 'utils/role';\r\nimport { hasPermission } from 'utils/permissionUtils';\r\n\r\nconst { Option } = Select;\r\n\r\nconst StaffManagement = () => {\r\n  const [selectedDashboards, setSelectedDashboards] = useState([]);\r\n  const history = useHistory();\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [deleteConfirmationModal, setDeleteConfirmationModal] = useState(false)\r\n  const [alertModal, setAlertModal] = useState(false)\r\n  // const [data, setData] = useState([]);\r\n  const handleCancel = () => {\r\n    setModalVisible(false);\r\n  };\r\n  const handleCancelConfirmation = () => {\r\n    setDeleteConfirmationModal(false)\r\n  }\r\n  const handleYesConfirmation = () => {\r\n    setDeleteConfirmationModal(false)\r\n    handleOpenAlert()\r\n    setTimeout(() => {\r\n      handleCloseAlert()\r\n    }, 1500);\r\n  }\r\n  const handleOpenAlert = () => {\r\n    setAlertModal(true)\r\n  }\r\n  const handleCloseAlert = () => {\r\n    setAlertModal(false)\r\n  }\r\n  const handleSave = (selectedDashboards) => {\r\n    // Handle save logic here\r\n    console.log('Selected Dashboards:', selectedDashboards);\r\n    setModalVisible(false);\r\n  };\r\n  const handleSelectChange = (selectedValues) => {\r\n    if (selectedValues.includes('all')) {\r\n      setSelectedDashboards(['all', 'Vibratory Sensor Dashboard', 'Solar Sensor Dashboard']);\r\n    } else {\r\n      setSelectedDashboards(selectedValues);\r\n    }\r\n  };\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = async (search=\"\",status=\"\") => {\r\n    let url = `?customer_id=${localStorage.getItem(\"parent_id\")!='null'?localStorage.getItem('parent_id'):localStorage.getItem('user_id')}&search=${search}`\r\n    //for 0 it is not handling\r\n    if((status !== '' && status != 'all')) {\r\n      url += `&status=${status}`\r\n    }\r\n    try {\r\n      const resp = await axiosInstance.post('/api/admin/customer-users/list'+url);\r\n      setData(resp.data);\r\n    } catch (err) {\r\n      console.log(err)\r\n      message.error('Something went wrong')\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    {\r\n      // title: 'Image',\r\n      dataIndex: 'profile_pic',\r\n      key: 'profile_pic',\r\n      render: (text, record) => <Avatar src={text} alt={`Avatar for ${text}`} />,\r\n    },\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'username',\r\n    },\r\n    {\r\n      title: 'Accopunt Type',\r\n      dataIndex: 'role_id',\r\n      key: 'role_id',\r\n      render: (role_id) => {\r\n        return role(role_id)\r\n      }\r\n    },\r\n    {\r\n      title: 'Mobile Number',\r\n      dataIndex: 'phone_no',\r\n      key: 'phone_no',\r\n      render:(phone_no, record)=>(\r\n        <span>{record.phone_code +-+ phone_no}</span>\r\n      ) \r\n    },\r\n    {\r\n      title: 'Email ID',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n    },\r\n    {\r\n      title: 'Created On',\r\n      dataIndex: 'created_at',\r\n      key: 'userSince',\r\n      render: (date) => moment(date).format('DD-MM-YYYY'),\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render: (role_id) => {\r\n        const {status,color} = Status(role_id)\r\n        return <Tag color={color}>{status}</Tag>\r\n      }\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getMenu(record.id)} placement=\"bottomRight\" trigger={['hover']}>\r\n            <MoreOutlined />\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const handleView = (id) => {\r\n    console.log(`Editing record with ID ${id}`);\r\n  };\r\n\r\n  const AssignDashboardfun = (id) => {\r\n    console.log(`Deleting record with ID ${id}`);\r\n    setModalVisible(true)\r\n  };\r\n\r\n  const getMenu = (record) => (\r\n    <Menu>\r\n      {hasPermission('user_management', 'View Users') && (\r\n        <Menu.Item key=\"view\" onClick={() => history.push(`/app/user-management/user-accounts/account-details/${record}`)}>\r\n          <EyeOutlined /> View\r\n        </Menu.Item>\r\n      )}\r\n      {hasPermission('user_management', 'Edit Users') && (\r\n        <Menu.Item key=\"edit\" onClick={() =>{\r\n          history.push(`user-accounts/edit/${record}`)\r\n        }}>\r\n          <EditOutlined /> Edit\r\n        </Menu.Item>\r\n      )}\r\n      {hasPermission('user_management', 'Delete Users') && (\r\n        <Menu.Item key=\"delete\" onClick={() => {\r\n          setDeleteConfirmationModal(true)\r\n          console.log(record.key)\r\n        }}>\r\n          <DeleteOutlined /> Delete\r\n        </Menu.Item>\r\n      )}\r\n    </Menu>\r\n  );\r\n\r\n  const onFinish = (values) => {\r\n    console.log('Received values:', values);\r\n    // You can handle form submission logic here\r\n  };\r\n  const [searchText, setSearchText] = useState('');\r\n  var timeout = \"\"\r\n  const onSearch = (value) => {\r\n    setSearchText(value.target.value)\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => {\r\n      getData(value.target.value,selectedStatus==='all'?'':selectedStatus==='pending-approval'?0:selectedStatus==='approved'?1:2);\r\n    }, 500)\r\n  }\r\n   const [selectedStatus, setSelectedStatus] = useState('all');\r\n  const handleStatusChange = (filter) => {\r\n    setSelectedStatus(filter);\r\n    getData(searchText,filter==='all'?'':filter==='pending-approval'?0:filter==='approved'?1:2);\r\n\r\n  };\r\n\r\n\r\n\r\n  const FilterMenu = (\r\n    <Menu mode=\"horizontal\">\r\n          <SubMenu key=\"status\" title=\"Status\">\r\n        <Menu.Item key=\"status-all\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'all'}\r\n            onChange={() => handleStatusChange('all')}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-active\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'pending-approval'}\r\n            onChange={() => handleStatusChange('pending-approval')}\r\n          >\r\n            Pending Approval\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-inactive\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'approved'}\r\n            onChange={() => handleStatusChange('approved')}\r\n          >\r\n            Approved\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-rejected\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'rejected'}\r\n            onChange={() => handleStatusChange('rejected')}\r\n          >\r\n            Rejected\r\n          </Checkbox>\r\n        </Menu.Item>\r\n      </SubMenu>\r\n\r\n    </Menu>\r\n  );\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4> <UserSwitchOutlined /><span style={{\r\n        color: '#6a6a6a',\r\n        fontWeight: '300'\r\n      }}> User Management </span>/ User Accounts </h4>\r\n      <div className=\"d-flex justify-content-between mb-3\">\r\n        <div className=\"\" style={{ display: \"flex\" }}>\r\n          <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              value={searchText}\r\n              onChange={onSearch}\r\n              style={{\r\n                width: 200,\r\n              }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space>\r\n          <Filter filters={FilterMenu}>\r\n            <Button\r\n              icon={<Icon component={FilterIcon} />}\r\n              className=\"d-flex align-items-center ml-2\"\r\n            >\r\n              Filters\r\n            </Button>\r\n          </Filter>\r\n          <Button icon={<Icon component={CsvIcon} />} className=\"d-flex align-items-center ml-2\" >Export</Button>\r\n        </div>\r\n        {hasPermission('user_management', 'Create New Users') && (\r\n          <div className=\"mb-2 d-flex align-items-center\">\r\n            <Button\r\n              className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n            >\r\n              <Link to={'user-accounts/add-new'}>\r\n                + Add New</Link>\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <Table\r\n          // rowKey='id'\r\n          // rowSelection={{\r\n          //   selectedRowKeys,\r\n          //   onChange: (selectedRowKeys, selectedRows) => {\r\n          //     setSelectedRowKeys(selectedRowKeys);\r\n          //   }\r\n          // }} \r\n          columns={columns} dataSource={data} />\r\n      </div>\r\n      <Modal\r\n        // title={<div className='d-flex align-items-center'><span className='d-block ml-2' > User Account Status </span></div>}\r\n        visible={deleteConfirmationModal}\r\n        onCancel={() => setDeleteConfirmationModal(false)}\r\n        footer={false}\r\n      >\r\n        <div className='d-flex flex-column justify-content-center align-items-center'>\r\n          <img style={{ width: '60px' }} src={Alert} alt={'...'} />\r\n          <h4 style={{ fontWeight: '300', width: '250px' }} className='text-center'>Are you sure you want to delete\r\n            user records?</h4>\r\n        </div>\r\n        <div className='d-flex justify-content-center mt-3'>\r\n          <Button className='' onClick={() => handleCancelConfirmation()}>\r\n            No\r\n          </Button>\r\n          <Button className='bg-primary text-white ml-2' onClick={handleYesConfirmation}>\r\n            Yes\r\n          </Button>\r\n        </div>\r\n\r\n      </Modal>\r\n      <Modal\r\n        visible={alertModal}\r\n        onCancel={() => setAlertModal(false)}\r\n        footer={false}\r\n      >\r\n        <div className='d-flex flex-column justify-content-center align-items-center'>\r\n          <SuccessTickIcon />\r\n          <h4 style={{ fontWeight: '300', width: '250px' }} className='text-center'>Admin account deleted successfully!</h4>\r\n        </div>\r\n        <div className='d-flex justify-content-center mt-3'>\r\n          <Button className='bg-primary text-white ml-2' onClick={handleCloseAlert}>\r\n            Close\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        title={<div className='d-flex align-items-center'><span className='d-block ml-2' > User Account Status </span></div>}\r\n        visible={modalVisible}\r\n        onCancel={handleCancel}\r\n        footer={false}\r\n      >\r\n        <Form\r\n          name=\"yourForm\"\r\n          onFinish={onFinish}\r\n          labelCol={{ span: 8 }}\r\n          wrapperCol={{ span: 16 }}\r\n          layout=\"vertical\"\r\n        >\r\n          <Form.Item\r\n            label=\"User Status\"\r\n            name=\"user_status\"\r\n            rules={[{ required: false, message: 'Please select an user status' }]}\r\n            labelCol={{ span: 8 }}\r\n            wrapperCol={{ span: 16 }}\r\n          >\r\n            <Radio.Group>\r\n              <Radio value=\"active\">Active</Radio>\r\n              <Radio value=\"inactive\">Inactive</Radio>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n\r\n          {/* Add Remarks Textarea */}\r\n          <Form.Item\r\n            label=\"Remarks\"\r\n            name=\"addRemarks\"\r\n            rules={[{ required: false, message: 'Please add remarks' }]}\r\n            labelCol={{ span: 8 }}\r\n            wrapperCol={{ span: 32 }}\r\n          >\r\n            <Input.TextArea rows={4} />\r\n          </Form.Item>\r\n\r\n          {/* Submit Button */}\r\n\r\n          <div className='d-flex justify-content-end mt-3'>\r\n            <Button className='ml-2' onClick={handleCancel}>\r\n              Cancel\r\n            </Button>\r\n            <Button className='bg-primary text-white ml-2' type=\"primary\" htmlType=\"submit\">\r\n              Save\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StaffManagement\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/dashboard/index.js",["1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066"],"import React, { useEffect, useState } from 'react'\r\nimport CardInfo from './CardInfo/CardInfo'\r\nimport Image1 from \"../../../assets/dashboard/enterprise (1) 1.png\"\r\nimport bg1 from \"../../../assets/dashboard/Rectangle 217.png\"\r\nimport Image2 from \"../../../assets/dashboard/map 1.png\"\r\nimport Image3 from \"../../../assets/dashboard/milling-machine (1) 1.png\"\r\nimport Image4 from \"../../../assets/dashboard/Accelerate Innovate Automate 1.png\"\r\nimport { AppstoreOutlined, UserSwitchOutlined } from '@ant-design/icons'\r\nimport { Card, Divider, Select } from 'antd'\r\nimport PieChartWidget from 'components/shared-components/pieChartWidget/PieChartWidget'\r\nimport LineChart from 'components/shared-components/lineChart/LineChart'\r\nimport BarChart from 'components/shared-components/BarChart/BarChart'\r\nimport { axiosInstance } from 'App'\r\nimport GoogleMapWithMarkers from 'components/shared-components/Map/googleMap'\r\n\r\n// Custom hook for responsive design\r\nconst useWindowSize = () => {\r\n\tconst [windowSize, setWindowSize] = useState({\r\n\t\twidth: window.innerWidth,\r\n\t\theight: window.innerHeight,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleResize = () => {\r\n\t\t\tsetWindowSize({\r\n\t\t\t\twidth: window.innerWidth,\r\n\t\t\t\theight: window.innerHeight,\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\twindow.addEventListener('resize', handleResize);\r\n\t\treturn () => window.removeEventListener('resize', handleResize);\r\n\t}, []);\r\n\r\n\treturn windowSize;\r\n};\r\n\r\nconst Dashboard = () => {\r\n\tconst { width } = useWindowSize();\r\n\tconst isMobile = width <= 768;\r\n\tconst [cardData, setCardData] = useState([\r\n\t\t// {\r\n\t\t// \tcolor: \"#459ED8\",\r\n\t\t// \timage: Image1,\r\n\t\t// \tbackgroundImage: bg1,\r\n\t\t// \tvalue: \"0\",\r\n\t\t// \theading: \"Total Customers\"\r\n\t\t// },\r\n\t\t{\r\n\t\t\tcolor: \"#F05179\",\r\n\t\t\timage: Image2,\r\n\t\t\tbackgroundImage: bg1,\r\n\t\t\tvalue: \"1\",\r\n\t\t\theading: \"Total Jobsites\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tcolor: \"#F89747\",\r\n\t\t\timage: Image3,\r\n\t\t\tbackgroundImage: bg1,\r\n\t\t\tvalue: \"2\",\r\n\t\t\theading: \"Total Machines\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tcolor: \"#BB69C8\",\r\n\t\t\timage: Image4,\r\n\t\t\tbackgroundImage: bg1,\r\n\t\t\tvalue: \"3\",\r\n\t\t\theading: \"No. of Sensors\"\r\n\t\t},\r\n\t]);\r\n\r\n\tconst [offlineMachines, setOfflineMachines] = useState(0);\r\n\tconst [onlineMachines, setOnlineMachines] = useState(0);\r\n\r\n\tconst [health, setHealth] = useState(0);\r\n\tconst [unhealthy, setUnhealthy] = useState(0);\r\n\r\n\tconst [green, setGreen] = useState(0);\r\n\tconst [yellow, setYellow] = useState(0);\r\n\tconst [orange, setOrange] = useState(0);\r\n\tconst [red, setRed] = useState(0);\r\n\r\n\tconst [goodBattery, setGoodBattery] = useState(0);\r\n\tconst [badBattery, setBadBattery] = useState(0);\r\n\r\n\tconst [lineUnCountSeries,setLineUnCountSeries] = useState({\r\n\t\tname: \"Series A\",\r\n\t\tdata: []\r\n\t})\r\n\r\n\tconst [lineUnCountCategories,setLineUnCountCategories] = useState([]);\r\n\r\n\tconst [uncountSeries,setUnCountSeries] = useState({\r\n\t\tname: \"Series A\",\r\n\t\tdata: []\r\n\t});\r\n\r\n\tconst [uncountCategories,setUnCountCategories] = useState([]);\r\n\r\n\r\n\tconst [lineAlertSeries,setLineAlertSeries] = useState({\r\n\t\tname: \"Series A\",\r\n\t\tdata: []\r\n\t})\r\n\r\n\tconst [lineAlertCategories,setLineAlertCategories] = useState([]);\r\n\r\n\r\n\tconst [alertSeries,setAlertSeries] = useState({\r\n\t\tname: \"Series A\",\r\n\t\tdata: []\r\n\t})\r\n\r\n\tconst [alertCategories,setAlertCategories] = useState([]);\r\n\r\n\tconst [lineVibrationSeries,setLineVibrationSeries] = useState({\r\n\t\tname: \"Series A\",\r\n\t\tdata: []\r\n\t})\r\n\r\n\tconst [lineVibrationCategories,setLineVibrationCategories] = useState([]);\r\n\t\r\n\r\n\tconst [vibrationSeries,setVibrationSeries] = useState({\r\n\t\tname: \"Series A\",\r\n\t\tdata: []\r\n\t})\r\n\r\n\tconst [vibrationCategories,setVibrationCategories] = useState([]);\r\n\r\n\r\n\tconst [lineBatterySeries,setLineBatterySeries] = useState({\r\n\t\tname: \"Series A\",\r\n\t\tdata: []\r\n\t})\r\n\r\n\tconst [lineBatteryCategories,setLineBatteryCategories] = useState([]);\r\n\t\r\n\tconst [batterySer,setBatterySer] = useState({\r\n\t\tname: \"Series A\",\r\n\t\tdata: []\r\n\t})\r\n\r\n\tconst [batteryCategories,setBatteryCategories] = useState([]);\r\n\tconst [mapData, setMapData] = useState([]);\r\n\t\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await axiosInstance.get(`api/admin/dashboard?customer_id=${localStorage.getItem(\"parent_id\")===\"null\"?localStorage.getItem(\"user_id\"):localStorage.getItem(\"parent_id\")}`);\r\n\t\t\t\tconst result = response.data.item.results;\r\n\r\n\t\t\t\tconst newCardData = [\r\n\t\t\t\t\t// {\r\n\t\t\t\t\t// \tcolor: \"#459ED8\",\r\n\t\t\t\t\t// \timage: Image1,\r\n\t\t\t\t\t// \tbackgroundImage: bg1,\r\n\t\t\t\t\t// \tvalue: result.totalCustomers,\r\n\t\t\t\t\t// \theading: \"Total Customers\"\r\n\t\t\t\t\t// },\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcolor: \"#F05179\",\r\n\t\t\t\t\t\timage: Image2,\r\n\t\t\t\t\t\tbackgroundImage: bg1,\r\n\t\t\t\t\t\tvalue: result.totalOrders,\r\n\t\t\t\t\t\theading: \"Total Jobsites\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcolor: \"#F89747\",\r\n\t\t\t\t\t\timage: Image3,\r\n\t\t\t\t\t\tbackgroundImage: bg1,\r\n\t\t\t\t\t\tvalue: result.totalMachines,\r\n\t\t\t\t\t\theading: \"Total Machines\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcolor: \"#BB69C8\",\r\n\t\t\t\t\t\timage: Image4,\r\n\t\t\t\t\t\tbackgroundImage: bg1,\r\n\t\t\t\t\t\tvalue: result.totalMachineSensors,\r\n\t\t\t\t\t\theading: \"No. of Sensors\"\r\n\t\t\t\t\t},\r\n\t\t\t\t];\r\n\r\n\t\t\t\tsetCardData(newCardData);\r\n\r\n\t\t\t\tsetOfflineMachines(result.offline_machines);\r\n\t\t\t\tsetOnlineMachines(result.online_machines);\r\n\t\t\t\tsetHealth(result.healthy_machines);\r\n\t\t\t\tsetUnhealthy(result.unhealthy_machines);\r\n\t\t\t\tsetGreen(result.green_machines);\r\n\t\t\t\tsetYellow(result.yellow_machines);\r\n\t\t\t\tsetOrange(result.orange_machines);\r\n\t\t\t\tsetRed(result.red_machines);\r\n\r\n\t\t\t\tsetGoodBattery(result.machines_with_good_battery);\r\n\t\t\t\tsetBadBattery(result.machines_with_bad_battery);\r\n\t\t\t\tsetLineUnCountSeries(result.offline_timerange_graph_chart.offline_machines_by_timerange_series[0]);\r\n\t\t\t\tsetLineUnCountCategories(result.offline_timerange_graph_chart.offline_machines_by_timerange_categories);\r\n\t\t\t\t// setLineUnCountCategories(result.offline_graph_chart.offline_machines_by_job_site_categories);\r\n\r\n\t\t\t\tsetUnCountSeries(result.offline_graph_chart.offline_machines_by_job_site_series[0]);\r\n\t\t\t\tsetUnCountCategories(result.offline_graph_chart.offline_machines_by_job_site_categories);\r\n\r\n\r\n\t\t\t\tsetLineAlertSeries(result.alert_timerange_graph_chart.machines_with_alert_by_timerange_series[0]);\r\n\t\t\t\tsetLineAlertCategories(result.alert_timerange_graph_chart.machines_with_alert_by_timerange_categories);\r\n\r\n\t\t\t\tsetAlertSeries(result.alert_graph_chart.machines_with_alert_by_job_site_series[0]);\r\n\t\t\t\tsetAlertCategories(result.alert_graph_chart.machines_with_alert_by_job_site_categories);\r\n\r\n\r\n\t\t\t\tsetLineVibrationSeries(result.warning_timerange_graph_chart.machines_with_warning_by_timerange_series[0]);\r\n\t\t\t\tsetLineVibrationCategories(result.warning_timerange_graph_chart.machines_with_warning_by_timerange_categories);\r\n\r\n\t\t\t\tsetVibrationSeries(result.warning_graph_chart.machines_with_warning_by_job_site_series[0]);\r\n\t\t\t\tsetVibrationCategories(result.warning_graph_chart.machines_with_warning_by_job_site_categories);\r\n\r\n\r\n\t\t\t\tsetLineBatterySeries(result.battery_alert_timerange_graph_chart.machines_with_battery_alert_by_timerange_series[0]);\r\n\t\t\t\tsetLineBatteryCategories(result.battery_alert_timerange_graph_chart.machines_with_battery_alert_by_timerange_categories);\r\n\r\n\t\t\t\tsetBatterySer(result.battery_alert_graph_chart.machines_with_battery_alert_by_job_site_series[0]);\r\n\t\t\t\tsetBatteryCategories(result.battery_alert_graph_chart.machines_with_battery_alert_by_job_site_categories);\r\n\r\n\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"Error fetching data:\", error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst fetchMapData = async () => {\r\n\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await axiosInstance.get(`api/admin/dashboard/map?customer_id=${localStorage.getItem(\"parent_id\")===\"null\"?localStorage.getItem(\"user_id\"):localStorage.getItem(\"parent_id\")}`);\r\n\t\t\t\tsetMapData(response.data.item.markersData.filter(item => item.lat && item.lng));\r\n\t\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t}\r\n\t\t}\r\n\t\tfetchMapData();\r\n\t\tfetchData();\r\n\t}, []);\r\n\t\r\n\r\n\treturn (\r\n\t\t<div style={{\r\n\t\t\tpadding: isMobile ? \"10px\" : \"20px\",\r\n\r\n\t\t}}>\r\n\t\t\t<div style={{\r\n\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\tjustifyContent: \"space-between\",\r\n\t\t\t\tmarginBottom: \"20px\"\r\n\t\t\t}}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h4> <AppstoreOutlined /><span style={{\r\n\t\t\t\t\t\tcolor: '#6a6a6a',\r\n\t\t\t\t\t\tfontWeight: '300'\r\n\t\t\t\t\t}}> Dashboard </span></h4>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* <div style={{\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tgap: \"10px\"\r\n\t\t\t\t}}>\r\n\t\t\t\t\t<Select placeholder=\"Customer\" style={{ width: 180 }} >\r\n\t\t\t\t\t\t<Select.Option value=\"jack\">Jack</Select.Option>\r\n\t\t\t\t\t\t<Select.Option value=\"lucy\">Lucy</Select.Option>\r\n\t\t\t\t\t\t<Select.Option value=\"Yiminghe\">yiminghe</Select.Option>\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t\t<Select placeholder=\"Jobsites\" style={{ width: 180 }} >\r\n\t\t\t\t\t\t<Select.Option value=\"jack\">Jack</Select.Option>\r\n\t\t\t\t\t\t<Select.Option value=\"lucy\">Lucy</Select.Option>\r\n\t\t\t\t\t\t<Select.Option value=\"Yiminghe\">yiminghe</Select.Option>\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t</div> */}\r\n\t\t\t</div>\r\n\t\t\t<div style={{\r\n\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\tflexWrap: \"wrap\",\r\n\t\t\t\tjustifyContent: isMobile ? \"center\" : \"space-between\",\r\n\t\t\t\tgap: isMobile ? \"15px\" : \"0\",\r\n\t\t\t}}>\r\n\r\n\t\t\t\t{cardData.map((item, index) => (\r\n\t\t\t\t\t<CardInfo {...item} key={index} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\r\n\t\t\t<Card style={{\r\n\t\t\t\tmarginTop: \"20px\",\r\n\t\t\t\toverflow: \"auto\",\r\n\t\t\t}}>\r\n\t\t\t\t<div style={{\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tflexDirection: isMobile ? \"column\" : \"row\",\r\n\t\t\t\t\tjustifyContent: \"space-between\",\r\n\t\t\t\t}}>\r\n\t\t\t\t\t<div style={{\r\n\t\t\t\t\t\twidth: isMobile ? \"100%\" : \"25%\",\r\n\t\t\t\t\t\tborderRight: isMobile ? \"none\" : \"1px solid #F0F0F0\",\r\n\t\t\t\t\t\tborderBottom: isMobile ? \"1px solid #F0F0F0\" : \"none\",\r\n\t\t\t\t\t\tpadding: \"15px\"\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<PieChartWidget\r\n\t\t\t\t\t\t\ttitle=\"Availability\"\r\n\t\t\t\t\t\t\tlabel={[\"Online\", \"Offline\"]}\r\n\t\t\t\t\t\t\tcolors={[\"#6467F0\", \"#38B4EC\"]}\r\n\t\t\t\t\t\t\tvalue={[onlineMachines,offlineMachines]} />\r\n\t\t\t\t\t\t{/* <Divider />\r\n\t\t\t\t\t\t<LineChart title=\"Incident Counts-Unavailability\" colors={[\"#38B4EC\"]} series={[\r\n\t\t\t\t\t\t\tlineUnCountSeries\r\n\t\t\t\t\t\t]} categories={\r\n\t\t\t\t\t\t\t// uncountCategories\r\n\t\t\t\t\t\t\tlineUnCountCategories\r\n\t\t\t\t\t\t} />\r\n\t\t\t\t\t\t<Divider />\r\n\t\t\t\t\t\t<BarChart title=\"Incident Counts-Unavailability\" colors={[\"#38B4EC\"]} series={[\r\n\t\t\t\t\t\t\tuncountSeries\r\n\t\t\t\t\t\t]} categories={\r\n\t\t\t\t\t\t\tuncountCategories\r\n\t\t\t\t\t\t} /> */}\r\n\t\t\t\t\t</div>\r\n\r\n\r\n\t\t\t\t\t<div style={{\r\n\t\t\t\t\t\twidth: isMobile ? \"100%\" : \"25%\",\r\n\t\t\t\t\t\tborderRight: isMobile ? \"none\" : \"1px solid #F0F0F0\",\r\n\t\t\t\t\t\tborderBottom: isMobile ? \"1px solid #F0F0F0\" : \"none\",\r\n\t\t\t\t\t\tpadding: \"15px\"\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<PieChartWidget title=\"Alert Status\" label={[\"Healthy\", \"With Alert\"]}\r\n\t\t\t\t\t\t\tcolors={[\"#6467F0\", \"#B666C3\"]}\r\n\t\t\t\t\t\t\tvalue={[health, unhealthy]} />\r\n\t\t\t\t\t\t{/* <Divider />\r\n\t\t\t\t\t\t<LineChart title=\"Incident Counts-Alert Status\" colors={[\"#B666C3\"]} series={\r\n\t\t\t\t\t\t\t[lineAlertSeries]\r\n\t\t\t\t\t\t} categories={\r\n\t\t\t\t\t\t\tlineAlertCategories\r\n\t\t\t\t\t\t} />\r\n\t\t\t\t\t\t<Divider />\r\n\t\t\t\t\t\t<BarChart title=\"Incident Counts-Alert Status\" colors={[\"#B666C3\"]} series={[\r\n\t\t\t\t\t\t\talertSeries\t\r\n\t\t\t\t\t\t]} categories={\r\n\t\t\t\t\t\t\talertCategories\r\n\t\t\t\t\t\t} /> */}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div style={{\r\n\t\t\t\t\t\twidth: isMobile ? \"100%\" : \"25%\",\r\n\t\t\t\t\t\tborderRight: isMobile ? \"none\" : \"1px solid #F0F0F0\",\r\n\t\t\t\t\t\tborderBottom: isMobile ? \"1px solid #F0F0F0\" : \"none\",\r\n\t\t\t\t\t\tpadding: \"15px\"\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<PieChartWidget title={\"Vibration Status\"} label={[\"Green\", \"Yellow\", \"Orange\", \"Red\"]}\r\n\t\t\t\t\t\t\tcolors={[\"#00A843\", \"#FFCB21\", \"#FB8920\", \"#FF4646\"]}\r\n\t\t\t\t\t\t\tvalue={[green, yellow, orange, red]}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{/* <Divider />\r\n\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\ttitle=\"Incident Counts-Vibration Status\"\r\n\t\t\t\t\t\t\tcolors={[\"#FB8920\", \"#FF4646\"]}\r\n\t\t\t\t\t\t\tseries={[\r\n\t\t\t\t\t\t\t\tlineVibrationSeries\r\n\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t\tcategories={\r\n\t\t\t\t\t\t\t\tlineVibrationCategories\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Divider />\r\n\t\t\t\t\t\t<BarChart title=\"Incident Counts-Vibration Status\" colors={[\"#FB8920\", \"#FF4646\"]} series={[\r\n\t\t\t\t\t\t\tvibrationSeries\r\n\t\t\t\t\t\t]} categories={\r\n\t\t\t\t\t\t\tvibrationCategories\r\n\t\t\t\t\t\t} /> */}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div style={{\r\n\t\t\t\t\t\twidth: isMobile ? \"100%\" : \"25%\",\r\n\t\t\t\t\t\tpadding: \"15px\"\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<PieChartWidget title=\"Battery Status\" label={[\"Good\", \"Need to change within 3 months\"]}\r\n\t\t\t\t\t\t\tcolors={[\"#6467F0\", \"#B666C3\"]}\r\n\t\t\t\t\t\t\tvalue={\r\n\t\t\t\t\t\t\t\t[goodBattery, badBattery]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{/* <Divider />\r\n\t\t\t\t\t\t<LineChart title=\"Incident Counts-Battery Status\" colors={[\"#B666C3\"]} series={[ \r\n\t\t\t\t\t\t\tlineBatterySeries\r\n\t\t\t\t\t\t]} categories={\r\n\t\t\t\t\t\t\tlineBatteryCategories\r\n\t\t\t\t\t\t} />\r\n\t\t\t\t\t\t<Divider />\r\n\t\t\t\t\t\t<BarChart title=\"Incident Counts-Battery Status\" colors={[\"#B666C3\"]} series={[\r\n\t\t\t\t\t\t\tbatterySer\r\n\t\t\t\t\t\t]} categories={\r\n\t\t\t\t\t\t\tbatteryCategories\r\n\t\t\t\t\t\t} /> */}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\r\n\t\t\t<Card title=\"Machine Locations\" style={{\r\n\t\t\t\tmarginTop: \"20px\",\r\n\t\t\t\toverflow: \"hidden\"\r\n\t\t\t}}>\r\n\t\t\t\t<div style={{\r\n\t\t\t\t\theight: isMobile ? \"300px\" : \"400px\",\r\n\t\t\t\t\twidth: \"100%\"\r\n\t\t\t\t}}>\r\n\t\t\t\t\t<GoogleMapWithMarkers data={mapData}/>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Dashboard\r\n\r\n\r\n\r\n// {\r\n// \t\"totalMachines\": 11,\r\n// \t\"totalCustomers\": 42,\r\n// \t\"totalOrders\": 11,\r\n// \t\"totalMachineSensors\": 8,\r\n// \t\"offline_machines\": 11,\r\n// \t\"online_machines\": 0,\r\n// \t\"healthy_machines\": 0,\r\n// \t\"unhealthy_machines\": 11,\r\n// \t\"green_machines\": 0,\r\n// \t\"yellow_machines\": 0,\r\n// \t\"orange_machines\": 0,\r\n// \t\"red_machines\": 11,\r\n// \t\"machines_with_good_battery\": 0,\r\n// \t\"machines_with_bad_battery\": 11,\r\n// \t\"offline_graph_chart\": {\r\n// \t  \"offline_machines_by_job_site_series\": [\r\n// \t\t{\r\n// \t\t  \"name\": \"Offline Machines\",\r\n// \t\t  \"data\": [\r\n// \t\t\t3,\r\n// \t\t\t3,\r\n// \t\t\t4,\r\n// \t\t\t1\r\n// \t\t  ]\r\n// \t\t}\r\n// \t  ],\r\n// \t  \"offline_machines_by_job_site_categories\": [\r\n// \t\t\"Pumping Station \",\r\n// \t\t\"Pumping Station 2\",\r\n// \t\t\"Jobsite 1\",\r\n// \t\t\"Jobsite for DNY\"\r\n// \t  ]\r\n// \t},\r\n// \t\"alert_graph_chart\": {\r\n// \t  \"machines_with_alert_by_job_site_series\": [\r\n// \t\t{\r\n// \t\t  \"name\": \"Machines with Alert\",\r\n// \t\t  \"data\": [\r\n// \t\t\t3,\r\n// \t\t\t3,\r\n// \t\t\t4,\r\n// \t\t\t1\r\n// \t\t  ]\r\n// \t\t}\r\n// \t  ],\r\n// \t  \"machines_with_alert_by_job_site_categories\": [\r\n// \t\t\"Pumping Station \",\r\n// \t\t\"Pumping Station 2\",\r\n// \t\t\"Jobsite 1\",\r\n// \t\t\"Jobsite for DNY\"\r\n// \t  ]\r\n// \t},\r\n// \t\"warning_graph_chart\": {\r\n// \t  \"machines_with_warning_by_job_site_series\": [\r\n// \t\t{\r\n// \t\t  \"name\": \"Machines with Warning\",\r\n// \t\t  \"data\": [\r\n// \t\t\t3,\r\n// \t\t\t3,\r\n// \t\t\t4,\r\n// \t\t\t1\r\n// \t\t  ]\r\n// \t\t}\r\n// \t  ],\r\n// \t  \"machines_with_warning_by_job_site_categories\": [\r\n// \t\t\"Pumping Station \",\r\n// \t\t\"Pumping Station 2\",\r\n// \t\t\"Jobsite 1\",\r\n// \t\t\"Jobsite for DNY\"\r\n// \t  ]\r\n// \t},\r\n// \t\"battery_alert_graph_chart\": {\r\n// \t  \"machines_with_battery_alert_by_job_site_series\": [\r\n// \t\t{\r\n// \t\t  \"name\": \"Machines with Battery Alert\",\r\n// \t\t  \"data\": [\r\n// \t\t\t3,\r\n// \t\t\t3,\r\n// \t\t\t4,\r\n// \t\t\t1\r\n// \t\t  ]\r\n// \t\t}\r\n// \t  ],\r\n// \t  \"machines_with_battery_alert_by_job_site_categories\": [\r\n// \t\t\"Pumping Station \",\r\n// \t\t\"Pumping Station 2\",\r\n// \t\t\"Jobsite 1\",\r\n// \t\t\"Jobsite for DNY\"\r\n// \t  ]\r\n// \t},\r\n// \t\"offline_timerange_graph_chart\": {\r\n// \t  \"offline_machines_by_timerange_series\": [\r\n// \t\t{\r\n// \t\t  \"name\": \"Offline Machines\",\r\n// \t\t  \"data\": [\r\n// \t\t\t11,\r\n// \t\t\t11,\r\n// \t\t\t11,\r\n// \t\t\t11,\r\n// \t\t\t11,\r\n// \t\t\t11\r\n// \t\t  ]\r\n// \t\t}\r\n// \t  ],\r\n// \t  \"offline_machines_by_timerange_categories\": [\r\n// \t\t\"23:00\",\r\n// \t\t\"0:00\",\r\n// \t\t\"1:00\",\r\n// \t\t\"2:00\",\r\n// \t\t\"3:00\",\r\n// \t\t\"4:00\"\r\n// \t  ]\r\n// \t},\r\n// \t\"alert_timerange_graph_chart\": {\r\n// \t  \"machines_with_alert_by_timerange_series\": [\r\n// \t\t{\r\n// \t\t  \"name\": \"Machines with Alert\",\r\n// \t\t  \"data\": []\r\n// \t\t}\r\n// \t  ],\r\n// \t  \"machines_with_alert_by_timerange_categories\": []\r\n// \t},\r\n// \t\"warning_timerange_graph_chart\": {\r\n// \t  \"machines_with_warning_by_timerange_series\": [\r\n// \t\t{\r\n// \t\t  \"name\": \"Machines with Warning\",\r\n// \t\t  \"data\": []\r\n// \t\t}\r\n// \t  ],\r\n// \t  \"machines_with_warning_by_timerange_categories\": []\r\n// \t},\r\n// \t\"battery_alert_timerange_graph_chart\": {\r\n// \t  \"machines_with_battery_alert_by_timerange_series\": [\r\n// \t\t{\r\n// \t\t  \"name\": \"Machines with Battery Alert\",\r\n// \t\t  \"data\": []\r\n// \t\t}\r\n// \t  ],\r\n// \t  \"machines_with_battery_alert_by_timerange_categories\": []\r\n// \t}\r\n//   }","/home/faizan/jd-works/customer-web-app/src/views/app-views/user-management/add-new/index.js",["1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088"],"import { Button, Form, Input, Select, Modal, DatePicker, Upload, message, Radio, InputNumber } from \"antd\";\r\nimport { BasicDetail, LocationIcon, SuccessTickIcon, UploadDocument, UploadFileIcon } from \"assets/svg/icon\";\r\n\r\nimport React, { useContext } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport { CloseCircleOutlined, EnvironmentOutlined, EyeOutlined, PlusOutlined, TeamOutlined, UserSwitchOutlined } from \"@ant-design/icons\";\r\nimport { Option } from \"antd/lib/mentions\";\r\n// import axios from \"../../../../axios\";\r\nimport moment from \"moment\";\r\nimport { useEffect } from \"react\";\r\nimport { useLocation, useParams } from \"react-router-dom/cjs/react-router-dom\";\r\nimport { useHistory } from 'react-router-dom';\r\n// import uploadImage from \"middleware/uploadImage\";\r\nimport { API_BASE_URL } from \"constants/ApiConstant\";\r\nimport { axiosInstance } from \"App\";\r\nimport { UploadFile, UploadImage } from \"utils/Upload\";\r\nimport CountrySelector from \"utils/CountrySelector\";\r\nimport PhoneCode from \"utils/PhoneCode\";\r\nimport usePostalCodeLookup from \"hooks/usePostalCodeLookup\";\r\nimport { CountryContext } from \"CountryContext\";\r\nimport { getAssignablePermissions, getParentPermissions } from \"utils/permissionUtils\";\r\nimport { Row, Col, Avatar, Typography, Card } from \"antd\";\r\nimport {\r\n  Table,\r\n  Tag,\r\n  Space,\r\n  Dropdown,\r\n  Menu,\r\n  Checkbox,\r\n  Switch,\r\n  Divider,\r\n} from \"antd\";\r\n\r\nconst { Title, Text } = Typography;\r\nexport default function AddNewAdminAccount() {\r\n    const { TabPane } = Tabs;\r\n    const {id } = useParams();\r\n    const history = useHistory();\r\n    const [statu, setStatu] = useState(\"\")\r\n    const [mainStatus, setMainStatus] = useState('')\r\n    const [mainId, setMainId] = useState(null)\r\n    const [activeTab, setActiveTab] = useState(\"1\");\r\n    const [isChangeStudModalOpen, setIsChangeStudModalOpen] = useState(false);\r\n    const [deactiveModalOpen, setIsDeactiveModalOpen] = useState(false);\r\n    const [successModal, setSuccessModal] = useState(false);\r\n    const location = useLocation();\r\n    const [countryCode, setCountryCode] = useState('+91')\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const [loading, setLoading] = useState(false);\r\n    const [fileList, setFileList] = useState([]);\r\n    const [imageUrl, setImageUrl] = useState();\r\n    // const id = queryParams.get('id')\r\n    const [selectedFiles, setSelectedFiles] = useState([]);\r\n    const [alertModal, setAlertModal] = useState(false)\r\n    const [country, setCountry] = useState([\r\n        {\r\n            country: \"India\",\r\n        }\r\n    ]);\r\n\r\n    // Add can_access state management\r\n    const [orderManagementCheck, setOrderManagementCheck] = useState([\r\n        { label: 'View Orders', check: false },\r\n        { label: 'Create New Orders', check: false },\r\n        { label: 'Delete Orders', check: false }\r\n    ]);\r\n\r\n    const [InquirymanagementCheck, setInquirymanagementCheck] = useState([\r\n        { label: 'View Inquiry', check: false },\r\n        { label: 'Create New Inquiry', check: false }\r\n    ]);\r\n\r\n    const [jobSitesCheck, setJobSitesCheck] = useState([\r\n        { label: 'View Jobsites', check: false },\r\n        { label: 'Create New Jobsites', check: false },\r\n        { label: 'Edit Jobsites', check: false },\r\n        { label: 'Delete Jobsites', check: false }\r\n    ]);\r\n\r\n    const [machinesAndSensorsCheck, setMachinesAndSensorsCheck] = useState([\r\n        { label: 'View Machines and Sensors', check: false },\r\n        { label: 'Create New Machines and Sensors', check: false },\r\n    ]);\r\n\r\n    const [operationalAreasCheck, setOperationalAreasCheck] = useState([\r\n        { label: 'View Operational Areas', check: false },\r\n        { label: 'Create New Operational Areas', check: false },\r\n        { label: 'Edit Operational Areas', check: false },\r\n        { label: 'Delete Operational Areas', check: false }\r\n    ]);\r\n\r\n    const [userManagementCheck, setUserManagementCheck] = useState([\r\n        { label: 'View Users', check: false },\r\n        { label: 'Create New Users', check: false },\r\n        { label: 'Edit Users', check: false },\r\n        { label: 'Delete Users', check: false }\r\n    ]);\r\n\r\n    const [technicianManagementCheck, setTechnicianManagementCheck] = useState([\r\n        { label: 'View Technicians', check: false },\r\n        { label: 'Create New Technicians', check: false },\r\n        { label: 'Edit Technicians', check: false },\r\n        { label: 'Delete Technicians', check: false }\r\n    ]);\r\n\r\n    // Parent permissions for inheritance validation\r\n    const [parentPermissions, setParentPermissions] = useState({});\r\n\r\n    const [dataMobileAppPer, setDataMobileAppPer] = useState([\r\n        { title: \"Jobsites\", key: \"jobsites\", check: false },\r\n        { title: \"Machines\", key: \"machines\", check: false },\r\n        { title: \"Sensors\", key: \"sensors\", check: false },\r\n        { title: \"Inquiries\", key: \"inquiries\", check: false },\r\n        { title: \"Orders\", key: \"orders\", check: false }\r\n    ]);\r\n\r\n    let styles = {\r\n        files: {\r\n            listStyle: \"none\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            gap: \"13px\",\r\n            border: \"1px solid lightblue\",\r\n            padding: \"10px\",\r\n            borderRadius: \"9px\",\r\n            background: \"#0093ff0a\",\r\n        },\r\n        uploadFile: {\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            opacity: 0,\r\n        },\r\n\r\n        // Add the new styles here:\r\n\r\n        \".uploadFile::-webkit-file-upload-button\": {\r\n            visibility: \"hidden\",\r\n        },\r\n\r\n        \".uploadFile::before\": {\r\n            content: \"'Drag & Drop'\",\r\n            display: \"inline-block\",\r\n            padding: \"10px\",\r\n            border: \"1px solid #ccc\",\r\n            borderRadius: \"4px\",\r\n            cursor: \"pointer\",\r\n        },\r\n\r\n        \".uploadFile:hover::before\": {\r\n            backgroundColor: \"#ccc\",\r\n        },\r\n    };\r\n    const [succesmodaltext, setSuccesmodaltext] = useState({\r\n        title: \"Staff Status Change Successfully!\",\r\n        text: \"Staff status changed to terminated.\",\r\n    });\r\n\r\n    function handleTabClick(key) {\r\n        setActiveTab(key);\r\n    }\r\n    const successOk = () => {\r\n        setSuccessModal(false);\r\n    };\r\n    const successCancel = () => {\r\n        setSuccessModal(false);\r\n    };\r\n\r\n    const changeStudHandleOk = () => {\r\n        setIsChangeStudModalOpen(false);\r\n    };\r\n    const DeactiveHandleOk = () => {\r\n        setIsDeactiveModalOpen(false);\r\n    };\r\n\r\n    function handleBackClick() {\r\n        // if (activeTab > 1 && activeTab <= 7) {\r\n        //   let actnum = Number(activeTab) - 1;\r\n        //   setActiveTab(actnum.toString());\r\n        // }\r\n        if (activeTab > 1) {\r\n            let actnum = Number(activeTab) - 1;\r\n            setActiveTab(actnum.toString());\r\n            return;\r\n        }\r\n        history.goBack();\r\n    }\r\n\r\n    const handleNext = (active) => {\r\n        if (active === \"1\") {\r\n            form1.validateFields().then(() => {\r\n                setActiveTab(\"2\");\r\n            }).catch(() => {\r\n                // Stay on current tab if validation fails\r\n            })\r\n        } else if (active === \"2\") {\r\n            form2.validateFields().then(() => {\r\n                setActiveTab(\"3\");\r\n            }).catch(() => {\r\n                // Stay on current tab if validation fails\r\n            })\r\n        } else if (active === \"3\") {\r\n            setActiveTab(\"4\");\r\n        } else {\r\n            onFinish();\r\n        }\r\n    }\r\n\r\n    const [form1] = Form.useForm();\r\n    const [form2] = Form.useForm();\r\n    const [form3] = Form.useForm();\r\n    \r\n    const { countryList } = useContext(CountryContext);\r\n    const { lookupPostalCode, loading: postalLoading } = usePostalCodeLookup(form2, countryList);\r\n\r\n    const handlePostalCodeChange = async (e) => {\r\n        const postalCode = e.target.value;\r\n        if (postalCode && postalCode.length === 6) {\r\n            await lookupPostalCode(postalCode);\r\n        }\r\n    };\r\n\r\n    // Fetch parent customer permissions for inheritance validation\r\n    const fetchParentPermissions = async () => {\r\n        try {\r\n            const parentId = localStorage.getItem(\"parent_id\");\r\n            if (parentId && parentId !== \"null\") {\r\n                const response = await axiosInstance.get(`/api/admin/customer-users/parent-permissions/${parentId}`);\r\n                if (response.data?.item?.can_access) {\r\n                    setParentPermissions(response.data.item.can_access);\r\n                    console.log('Parent permissions loaded:', response.data.item.can_access);\r\n                }\r\n            } else {\r\n                // For free users, get their own permissions as the limit\r\n                const storedParentPermissions = getParentPermissions();\r\n                setParentPermissions(storedParentPermissions);\r\n            }\r\n            \r\n            // Initialize default permissions after parent permissions are loaded\r\n            initializePermissionDefaults();\r\n        } catch (error) {\r\n            console.error('Error fetching parent permissions:', error);\r\n            // If we can't fetch parent permissions, show all options (fallback)\r\n            setParentPermissions({});\r\n            initializePermissionDefaults();\r\n        }\r\n    };\r\n    \r\n    // Initialize permission defaults based on assignable permissions\r\n    const initializePermissionDefaults = () => {\r\n        const assignablePermissions = getAssignablePermissions();\r\n        if (assignablePermissions?.web_app) {\r\n            if (assignablePermissions.web_app.order_management) {\r\n                setOrderManagementCheck(assignablePermissions.web_app.order_management);\r\n            }\r\n            if (assignablePermissions.web_app.inquiry_management) {\r\n                setInquirymanagementCheck(assignablePermissions.web_app.inquiry_management);\r\n            }\r\n            if (assignablePermissions.web_app.job_sites) {\r\n                setJobSitesCheck(assignablePermissions.web_app.job_sites);\r\n            }\r\n            if (assignablePermissions.web_app.machines_and_sensors) {\r\n                setMachinesAndSensorsCheck(assignablePermissions.web_app.machines_and_sensors);\r\n            }\r\n            if (assignablePermissions.web_app.operational_areas) {\r\n                setOperationalAreasCheck(assignablePermissions.web_app.operational_areas);\r\n            }\r\n            if (assignablePermissions.web_app.user_management) {\r\n                setUserManagementCheck(assignablePermissions.web_app.user_management);\r\n            }\r\n            if (assignablePermissions.web_app.technician_management) {\r\n                setTechnicianManagementCheck(assignablePermissions.web_app.technician_management);\r\n            }\r\n        }\r\n        if (assignablePermissions?.mobile_app) {\r\n            setDataMobileAppPer(assignablePermissions.mobile_app);\r\n        }\r\n    };\r\n\r\n    // Check if a specific permission is allowed by parent\r\n    const isPermissionAllowedByParent = (section, permissionLabel) => {\r\n        // If no parent permissions loaded, allow all (for backwards compatibility)\r\n        if (!parentPermissions?.web_app) return true;\r\n        \r\n        const parentSection = parentPermissions.web_app[section];\r\n        if (!parentSection || !Array.isArray(parentSection)) return true;\r\n        \r\n        // Find the permission in parent's permissions\r\n        const parentPermission = parentSection.find(perm => perm.label === permissionLabel);\r\n        return parentPermission ? parentPermission.check : false;\r\n    };\r\n\r\n    // Render a permission checkbox only if allowed by parent\r\n    const renderPermissionCheckbox = (element, index, section, setStateFunction) => {\r\n        const isAllowed = isPermissionAllowedByParent(section, element.label);\r\n        \r\n        if (!isAllowed) {\r\n            return null; // Don't render if parent doesn't have this permission\r\n        }\r\n        \r\n        return (\r\n            <Checkbox\r\n                key={index}\r\n                style={{ margin: '0' }}\r\n                checked={element.check}\r\n                onChange={(val) => setStateFunction((previous) => {\r\n                    return previous.map((elm, i) => {\r\n                        if (i === index) {\r\n                            return {\r\n                                ...elm,\r\n                                check: val.target.checked,\r\n                            }\r\n                        } else {\r\n                            return elm\r\n                        }\r\n                    })\r\n                })}\r\n            >\r\n                {element.label}\r\n            </Checkbox>\r\n        );\r\n    };\r\n\r\n    // Select All/Deselect All Functions for Individual Cards\r\n    const handleOrderManagementSelectAll = (selectAll) => {\r\n        setOrderManagementCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n    };\r\n\r\n    const handleInquiryManagementSelectAll = (selectAll) => {\r\n        setInquirymanagementCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n    };\r\n\r\n    const handleJobSitesSelectAll = (selectAll) => {\r\n        setJobSitesCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n    };\r\n\r\n    const handleMachinesAndSensorsSelectAll = (selectAll) => {\r\n        setMachinesAndSensorsCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n    };\r\n\r\n    const handleOperationalAreasSelectAll = (selectAll) => {\r\n        setOperationalAreasCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n    };\r\n\r\n    const handleUserManagementSelectAll = (selectAll) => {\r\n        setUserManagementCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n    };\r\n\r\n    const handleTechnicianManagementSelectAll = (selectAll) => {\r\n        setTechnicianManagementCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n    };\r\n\r\n    const handleMobileAppSelectAll = (selectAll) => {\r\n        setDataMobileAppPer(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n    };\r\n\r\n    // Global Select All/Deselect All Functions\r\n    const handleWebAppGlobalSelectAll = (selectAll) => {\r\n        handleOrderManagementSelectAll(selectAll);\r\n        handleInquiryManagementSelectAll(selectAll);\r\n        handleJobSitesSelectAll(selectAll);\r\n        handleMachinesAndSensorsSelectAll(selectAll);\r\n        handleOperationalAreasSelectAll(selectAll);\r\n        handleUserManagementSelectAll(selectAll);\r\n        handleTechnicianManagementSelectAll(selectAll);\r\n    };\r\n    const onFinish = async (values) => {\r\n        // Prepare can_access object\r\n        const can_access = {\r\n            web_app: {\r\n                order_management: orderManagementCheck,\r\n                inquiry_management: InquirymanagementCheck,\r\n                job_sites: jobSitesCheck,\r\n                machines_and_sensors: machinesAndSensorsCheck,\r\n                operational_areas: operationalAreasCheck,\r\n                user_management: userManagementCheck,\r\n                technician_management: technicianManagementCheck\r\n            },\r\n            mobile_app: dataMobileAppPer\r\n        };\r\n        \r\n        // Debug: Log the permissions being sent\r\n        console.log('Permissions being sent:', JSON.stringify(can_access, null, 2));\r\n\r\n        let profile_pic = imageUrl\r\n\r\n        console.log(fileList);\r\n        if(profile_pic?.includes('base64')){\r\n            profile_pic = await UploadImage(fileList);\r\n        }\r\n\r\n        let file = [];\r\n\r\n        const temp = selectedFiles.filter((item) => {\r\n            return item.url === undefined;\r\n        })\r\n\r\n        const temp2 = selectedFiles.filter((item) => {\r\n            return item.url !== undefined;\r\n        })\r\n\r\n        if (temp.length !== 0) {\r\n            const uploadPromise = temp.map(async (item) => {\r\n                if (item.url === undefined) {\r\n                    const url = await UploadImage(item);\r\n                    return url;\r\n                } else {\r\n                    return item.url;\r\n                }\r\n            })\r\n\r\n            file = await Promise.all(uploadPromise);\r\n            console.log(file);\r\n        }\r\n\r\n        file = [...file, ...temp2.map((item) => {\r\n            return item.url\r\n        })];\r\n\r\n        if (id) {\r\n            try {\r\n                setLoading(true);\r\n                const resp = await axiosInstance.post(`/api/admin/customer-users/${id}/update`, {\r\n                    ...form1.getFieldsValue(),\r\n                    ...form2.getFieldsValue(),\r\n                    dob: form1.getFieldValue('dob').format('YYYY-MM-DD'),\r\n                    parent_id:localStorage.getItem(\"parent_id\"),\r\n                    phone_code: countryCode,\r\n                    profile_pic,\r\n                    documents: file,\r\n                    can_access: JSON.stringify(can_access)\r\n                })\r\n                setLoading(false);\r\n                if(resp.data.message==\"Invalid phone number format. Please provide a valid phone number.\"){\r\n                    message.error(\"Invalid phone number format. Please provide a valid phone number.\");\r\n                    return;\r\n                }\r\n                else{\r\n                    message.success(\"Admin Account Updated Successfully\");\r\n                    history.goBack();\r\n                }\r\n            } catch (error) {\r\n                setLoading(false);\r\n                const errorResponse = error?.response?.data?.data;\r\n                if (errorResponse && errorResponse.error) {\r\n                    const errorMessage = errorResponse.error[0];\r\n                    message.warn(errorMessage);\r\n                } else {\r\n                    message.error(\"Something went wrong. Please try again.\");\r\n                }\r\n            }\r\n        } else {\r\n\r\n\r\n            try {\r\n                // handleOpenAlert()\r\n                setLoading(true);\r\n                \r\n                // Debug: Log the complete payload being sent to API\r\n                const payload = {\r\n                    ...form1.getFieldsValue(),\r\n                    ...form2.getFieldsValue(),\r\n                    phone_code: countryCode,\r\n                    parent_id:localStorage.getItem(\"parent_id\"),\r\n                    profile_pic,\r\n                    dob: form1.getFieldValue('dob') ? form1.getFieldValue('dob').format('YYYY-MM-DD') : null,\r\n                    documents: file,\r\n                    can_access: JSON.stringify(can_access)\r\n                };\r\n                console.log('Complete API payload for CREATE USER:', payload);\r\n                \r\n                const resp = await axiosInstance.post(`/api/admin/customer-users/store`, payload);\r\n                setLoading(false);\r\n                if(resp.data.message==\"Invalid phone number format. Please provide a valid phone number.\"){\r\n                    message.error(\"Invalid phone number format. Please provide a valid phone number.\");\r\n                    return;\r\n                }\r\n                handleCloseAlert()\r\n                message.success(\"Admin Account Created Successfully\");\r\n                setTimeout(() => {\r\n                    history.goBack()\r\n                }, 1000)\r\n\r\n            } catch (error) {\r\n                setLoading(false);\r\n                const errorResponse = error?.response?.data?.data;\r\n\r\n                if (errorResponse && errorResponse.error) {\r\n                    const errorMessage = errorResponse.error[0];\r\n                    message.warn(errorMessage);\r\n                } else {\r\n                    message.error(\"Something went wrong. Please try again.\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const sendStatus = async (status) => {\r\n\r\n    }\r\n\r\n    // const onFinishFailed = (errorInfo) => {\r\n    //   console.log(\"Failed:\", errorInfo);\r\n    // };\r\n    const handleChange = (info) => {\r\n        const file = info.fileList[0]?.originFileObj;\r\n        let formData = new FormData();\r\n        if (file) {\r\n            formData.append(\"file\", file);\r\n            setFileList(file);\r\n        }\r\n        if (info?.fileList[0]) {\r\n            getBase64(info.fileList[0].originFileObj, (url) => {\r\n                setImageUrl(url);\r\n            });\r\n        }\r\n    };\r\n\r\n    const getBase64 = (img, callback) => {\r\n        const reader = new FileReader();\r\n        reader.addEventListener(\"load\", () => callback(reader.result));\r\n        reader.readAsDataURL(img);\r\n    };\r\n    function handleFileSelect(event) {\r\n        const fileList = event.target.files;\r\n        const newSelectedFiles = [];\r\n        for (let i = 0; i < fileList.length; i++) {\r\n            newSelectedFiles.push(fileList[i]);\r\n        }\r\n        //   console.log(selectedFiles)\r\n        setSelectedFiles([...selectedFiles, newSelectedFiles[0]]);\r\n    }\r\n    const delUplFile = (i) => {\r\n        let AfterDeleteFile = selectedFiles.filter((elem, index) => {\r\n            return index !== i;\r\n        });\r\n        setSelectedFiles(AfterDeleteFile);\r\n    };\r\n    const uploadButton = (\r\n        <div style={{ width: \"200px\" }}>\r\n            <PlusOutlined />\r\n            <div\r\n                style={{\r\n                    marginTop: 8,\r\n                }}\r\n            >\r\n                Profile Picture\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n\r\n    const handleOpenAlert = () => {\r\n        setAlertModal(true)\r\n    }\r\n    const handleCloseAlert = () => {\r\n        setAlertModal(false)\r\n\r\n    }\r\n\r\n    // Fetch Country\r\n    useEffect(() => {\r\n        const fetchCountry = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/api/admin/country/list');\r\n                setCountry(response.data.items);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        fetchCountry();\r\n        fetchParentPermissions(); // Load parent permissions and initialize defaults\r\n        \r\n        if (id) {\r\n            getData();\r\n        }\r\n    }, []);\r\n\r\n    const getData = async () => {\r\n        try {\r\n            const response = await axiosInstance.post(`/api/admin/customer-users/${id}/show`);\r\n            const data = response.data.item;\r\n            setImageUrl(data.profile_pic)\r\n            form1.setFieldsValue({\r\n                name: data.name,\r\n                email: data.email,\r\n                phone_no: data.phone_no,\r\n                nric_fin_number: data.nric_fin_number,\r\n                dob: data.dob ? moment(data.dob) : null,\r\n                gender: data.gender?.toString(),\r\n                role_id: data.role_id\r\n            })\r\n\r\n            form2.setFieldsValue({\r\n                postal_code: data.address?.postal_code,\r\n                block_number: data.address?.block_number,\r\n                street_number: data.address?.street_number,\r\n                unit_number: data.address?.unit_number,\r\n                level_number: data.address?.level_number,\r\n                country: data.address?.country\r\n\r\n            })\r\n            setSelectedFiles(data?.documents.map((item, index) => {\r\n                return {\r\n                    url: item?.document_url,\r\n                    name: `Document ${index + 1}`\r\n                }\r\n            }))\r\n            setCountryCode(data.phone_code)\r\n            \r\n            // Load can_access permissions\r\n            const can_access = data.can_access;\r\n            if (can_access && Object.keys(can_access).length !== 0) {\r\n                if (can_access?.web_app?.order_management) {\r\n                    setOrderManagementCheck(can_access.web_app.order_management);\r\n                }\r\n                if (can_access?.web_app?.inquiry_management) {\r\n                    setInquirymanagementCheck(can_access.web_app.inquiry_management);\r\n                }\r\n                if (can_access?.web_app?.job_sites) {\r\n                    setJobSitesCheck(can_access.web_app.job_sites);\r\n                }\r\n                if (can_access?.web_app?.machines_and_sensors) {\r\n                    setMachinesAndSensorsCheck(can_access.web_app.machines_and_sensors);\r\n                }\r\n                if (can_access?.web_app?.operational_areas) {\r\n                    setOperationalAreasCheck(can_access.web_app.operational_areas);\r\n                }\r\n                if (can_access?.web_app?.user_management) {\r\n                    setUserManagementCheck(can_access.web_app.user_management);\r\n                }\r\n                if (can_access?.web_app?.technician_management) {\r\n                    setTechnicianManagementCheck(can_access.web_app.technician_management);\r\n                }\r\n                if (can_access?.mobile_app) {\r\n                    setDataMobileAppPer(can_access.mobile_app);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            // console.error(error);\r\n            message.error(error.response.data.message);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"customTableBackground\">\r\n            <Modal\r\n                visible={alertModal}\r\n                onCancel={() => setAlertModal(false)}\r\n                footer={false}\r\n            >\r\n                <div className='d-flex flex-column justify-content-center align-items-center'>\r\n                    <SuccessTickIcon />\r\n                    <h3>Operation Admin Created Successfully!</h3>\r\n                    <h4 style={{ fontWeight: '300', width: '350px' }} className='text-center'>Username Jane cooper account created as operation admin successfully!</h4>\r\n                </div>\r\n                <div className='d-flex justify-content-center mt-3'>\r\n                    <Button className='bg-primary text-white ml-2' onClick={handleCloseAlert}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n            <h4> <UserSwitchOutlined /><span style={{\r\n                color: '#6a6a6a',\r\n                fontWeight: '300'\r\n            }}> User Management / User Accounts</span> / {\r\n                    id ? \"Edit Admin Account\" : \"Add New Admin Account\"\r\n            }</h4>\r\n\r\n            <Tabs activeKey={activeTab} onTabClick={handleTabClick} >\r\n                <TabPane\r\n                    tab={\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <BasicDetail /> <span className=\"ml-2\">Basic Details</span>\r\n                        </div>\r\n                    }\r\n                    key=\"1\"\r\n                >\r\n                    <Form\r\n                        layout=\"vertical\"\r\n                        // onFinish={onFinish}\r\n                        // onFinishFailed={onFinishFailed}\r\n                        form={form1}\r\n                        name=\"control-hooks\"\r\n                    >\r\n                        <div className=\"border rounded p-3 bg-white\">\r\n                            {\" \"}\r\n                            <Form.Item name=\"profile_pic\">\r\n                                <Upload\r\n                                    name=\"avatar\"\r\n                                    listType=\"picture-card\"\r\n                                    className=\"avatar-uploader\"\r\n                                    showUploadList={false}\r\n                                    beforeUpload={() => false}\r\n                                    maxCount={1}\r\n                                    onChange={handleChange}\r\n                                    accept='image/*'\r\n                                >\r\n                                    {imageUrl ? (\r\n                                        <img\r\n                                            src={imageUrl}\r\n                                            alt=\"avatar\"\r\n                                            style={{\r\n                                                width: \"100%\",\r\n                                                height: \"100%\",\r\n                                            }}\r\n                                        />\r\n                                    ) : (\r\n                                        uploadButton\r\n                                    )}\r\n                                </Upload>\r\n                            </Form.Item>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"name\"\r\n                                        label=\"Admin Name\"\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: \"Please enter Admin Name\",\r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                </div>\r\n                                <div style={{ width: \"45%\" }}>\r\n\r\n                                    {/* <Form.Item\r\n                                        name=\"workshop_user_name\"\r\n                                        label=\"Workshop User name\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please enter full name\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Workshop User name\" />\r\n                                    </Form.Item> */}\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"email\"\r\n                                        label=\"Email Id\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please enter Email Id\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input style={{ width: \"100%\" }} placeholder=\"Email Id\" />\r\n                                    </Form.Item>\r\n                                </div>\r\n                                <div style={{ width: \"45%\" }}>\r\n\r\n                                    {/* <Form.Item\r\n                                        name=\"workshop_user_name\"\r\n                                        label=\"Workshop User name\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please enter full name\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Workshop User name\" />\r\n                                    </Form.Item> */}\r\n                                    <div></div>\r\n                                    <Form.Item\r\n                                        name=\"phone_no\"\r\n                                        label=\"Phone Number\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please enter Full Name\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input\r\n                                            addonBefore={\r\n                                                <PhoneCode value={countryCode} onChange={(e) => {\r\n                                                    setCountryCode(e)\r\n                                                }\r\n                                                } />\r\n                                            }\r\n                                            style={{ width: \"100%\" }}\r\n                                            placeholder=\"Phone number\"\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"nric_fin_number\"\r\n                                        label=\"NRIC/FIN\"\r\n                                        rules={[\r\n                                            { required: false, message: \"Please enter NRIC/FIN\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input style={{ width: \"100%\" }} placeholder=\"NRIC/FIN\" />\r\n                                    </Form.Item>\r\n                                </div>\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"dob\"\r\n                                        label=\"Date of Birth\"\r\n                                        rules={[{ required: true, message: \"Please enter DOB\" }]}\r\n                                    >\r\n                                        <DatePicker\r\n                                            placeholder=\"Date of birth\"\r\n                                            style={{ width: \"100%\" }}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"gender\"\r\n                                        label=\"Gender\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please select gender.\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Radio.Group>\r\n                                            <Radio value={\"1\"}>Male</Radio>\r\n                                            <Radio value={\"2\"}>Female</Radio>\r\n                                        </Radio.Group>\r\n                                    </Form.Item>\r\n                                </div>\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        name=\"role_id\"\r\n                                        label=\"Role\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please select role.\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Radio.Group>\r\n                                            <Radio value={7}>Admin</Radio>\r\n                                            <Radio value={8}>Manager</Radio>\r\n                                            <Radio value={9}>User</Radio>\r\n                                        </Radio.Group>\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </Form>\r\n                </TabPane>\r\n                <TabPane\r\n                    disabled={activeTab < \"2\"}\r\n                    tab={\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <LocationIcon /> <span className=\"ml-2\">Address Details</span>\r\n                        </div>\r\n                    }\r\n                    key=\"2\"\r\n                >\r\n                    <Form\r\n                        layout=\"vertical\"\r\n                        // onFinish={onFinish}\r\n                        // onFinishFailed={onFinishFailed}\r\n                        form={form2}\r\n                        name=\"control-hooks\"\r\n                    >\r\n                        <div className=\"border rounded p-3 bg-white\">\r\n\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Postal Code'}\r\n                                        name=\"postal_code\"\r\n                                        rules={[{ required: true, message: 'Please enter the postal code!' },{\r\n                                                      pattern: new RegExp(/^[0-9\\b]+$/),\r\n                                                      message: \"Please enter valid postal code\",\r\n                                                    },\r\n                                                    {\r\n                                                        len: 6,\r\n                                                        message: \"Postal code must be exactly 6 digits\",\r\n                                                    }]}\r\n                                    >\r\n                                        <Input \r\n                                            placeholder=\"Postal Code\" \r\n                                            style={{ width: '100%' }} \r\n                                            onChange={handlePostalCodeChange}\r\n                                            loading={postalLoading}\r\n                                            maxLength={6}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div><div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Block Number'}\r\n                                        name=\"block_number\"\r\n                                        rules={[{ required: true, message: 'Please enter the block number!' }]}\r\n                                    >\r\n                                        <InputNumber placeholder=\"Block Number\" style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Street Number'}\r\n                                        name=\"street_number\"\r\n                                        rules={[{ required: true, message: 'Please enter the street number!' }]}\r\n                                    >\r\n                                        <Input placeholder=\"Street Number\" style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n                                </div><div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Unit Number'}\r\n                                        name=\"unit_number\"\r\n                                        rules={[{ required: true, message: 'Please enter the unit number!' }, {\r\n                                                        pattern: new RegExp(/^[0-9\\b]+$/),\r\n                                                        message: \"Please enter valid unit number\",\r\n                                                      }]}\r\n                                    >\r\n                                        <Input placeholder='Unit Number' style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                                <div style={{ width: \"45%\" }}>\r\n\r\n                                    <Form.Item\r\n                                        label={'Level Number'}\r\n                                        name=\"level_number\"\r\n                                        rules={[{ required: true, message: 'Please enter the level number!' }]}\r\n                                    >\r\n                                        <Input placeholder=\"Level Number\" style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n                                </div><div style={{ width: \"45%\" }}>\r\n                                    <Form.Item\r\n                                        label={'Country'}\r\n                                        name=\"country\"\r\n                                        rules={[{ required: true, message: 'Please select a country!' }]}\r\n                                    >\r\n                                        <CountrySelector/>\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                </TabPane>\r\n                <TabPane\r\n                    disabled={activeTab < \"3\"}\r\n                    tab={\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <UploadDocument />{\" \"}\r\n                            <span className=\"ml-2\">Upload Documents</span>\r\n                        </div>\r\n                    }\r\n                    key=\"3\"\r\n                >\r\n                    <div className=\"border bg-white rounded p-3 mt-4\">\r\n                        <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                            <svg\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                width=\"64\"\r\n                                height=\"64\"\r\n                                fill=\"none\"\r\n                                viewBox=\"0 0 64 64\"\r\n                            >\r\n                                <path\r\n                                    fill={\"#3CA6C1\"}\r\n                                    d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n                                ></path>\r\n                                <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n                                <path\r\n                                    fill={\"#3CA6C1\"}\r\n                                    d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n                                ></path>\r\n                                <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n                                <path\r\n                                    fill={\"#3CA6C1\"}\r\n                                    d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n                                ></path>\r\n                                <path\r\n                                    fill=\"#F7FCFF\"\r\n                                    d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n                                ></path>\r\n                                <path\r\n                                    fill=\"#D7E6EF\"\r\n                                    d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n                                ></path>\r\n                                <path\r\n                                    fill=\"#44394A\"\r\n                                    d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n                                ></path>\r\n                            </svg>\r\n                            <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                            <h5 className=\"mb-0\">Or</h5>\r\n                            <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n                                Choosen File\r\n                            </h5>\r\n                            <input\r\n                                style={styles.uploadFile}\r\n                                className=\"uploadFile\"\r\n                                type=\"file\"\r\n                                multiple\r\n                                onChange={handleFileSelect}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mt-4\">\r\n                            {selectedFiles.length > 0 && (\r\n                                <ul className=\"p-0\" style={{ width: \"40%\" }}>\r\n                                    {selectedFiles.map((file, i) => (\r\n                                        <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                                            {\" \"}\r\n                                            <div className=\"d-flex align-items-center\">\r\n                                                <UploadFileIcon />{\" \"}\r\n                                                <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                                                {/* <span className=\"ml-5\">\r\n                                                    {file.url ? (<EyeOutlined style={{ cursor: \"pointer\" }} onClick={() => window.open(file.url)} />) : null}\r\n                                                </span> */}\r\n                                            </div>\r\n                                            <div>\r\n                        {\r\n                          file.url && <span className=\"ml-3 \" style={{\r\n                            cursor: \"pointer\"\r\n                          }} onClick={() => {\r\n                            window.open(file.url, '_blank')\r\n                          }}>\r\n                            <EyeOutlined />\r\n                          </span>\r\n                        }\r\n                        <span\r\n                          style={{ cursor: \"pointer\" }}\r\n                          onClick={() => delUplFile(i)}\r\n                        >\r\n                          {\" \"}\r\n                          <CloseCircleOutlined />{\" \"}\r\n                        </span>\r\n                      </div>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </TabPane>\r\n                <TabPane\r\n                    disabled={activeTab < \"4\"}\r\n                    tab={\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <UploadDocument /> <span className=\"ml-2\">Access</span>\r\n                        </div>\r\n                    }\r\n                    key=\"4\"\r\n                >\r\n                    <div className=\"border bg-white rounded p-3\">\r\n                        {/* Tabs for Web App and Mobile App */}\r\n                        <Tabs defaultActiveKey=\"1\">\r\n                            {/* Web App Tab */}\r\n                            <TabPane\r\n                                tab={\r\n                                    <div className=\"d-flex align-items-center justify-content-center\" style={{ gap: '5px' }}>\r\n                                        Web App\r\n                                    </div>\r\n                                }\r\n                                key=\"1\"\r\n                            >\r\n                                {/* Global Web App Select All Controls */}\r\n                                <Row justify=\"end\" style={{ marginBottom: '16px' }}>\r\n                                    <Col>\r\n                                        <Button.Group size=\"small\">\r\n                                            <Button onClick={() => handleWebAppGlobalSelectAll(true)}>Select All</Button>\r\n                                            <Button onClick={() => handleWebAppGlobalSelectAll(false)}>Deselect All</Button>\r\n                                        </Button.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row gutter={[16, 24]}>\r\n                                    {/* Order Management */}\r\n                                    <Col span={6}>\r\n                                        <div\r\n                                            style={{\r\n                                                border: \"1px solid #d9d9d9\",\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                minHeight: '300px'\r\n                                            }}\r\n                                        >\r\n                                            <Row justify=\"space-between\" align=\"middle\">\r\n                                                <Title level={5}>Order Management</Title>\r\n                                            </Row>\r\n                                            <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                                                <Col>\r\n                                                    <Button.Group size=\"small\">\r\n                                                        <Button onClick={() => handleOrderManagementSelectAll(true)}>All</Button>\r\n                                                        <Button onClick={() => handleOrderManagementSelectAll(false)}>None</Button>\r\n                                                    </Button.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Divider />\r\n                                            <div className=\"d-flex flex-column\">\r\n                                                {orderManagementCheck.map((element, index) => \r\n                                                    renderPermissionCheckbox(element, index, 'order_management', setOrderManagementCheck)\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    {/* Inquiry Management */}\r\n                                    <Col span={6}>\r\n                                        <div\r\n                                            style={{\r\n                                                border: \"1px solid #d9d9d9\",\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                minHeight: '300px'\r\n                                            }}\r\n                                        >\r\n                                            <Row justify=\"space-between\" align=\"middle\">\r\n                                                <Title level={5}>Inquiry Management</Title>\r\n                                            </Row>\r\n                                            <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                                                <Col>\r\n                                                    <Button.Group size=\"small\">\r\n                                                        <Button onClick={() => handleInquiryManagementSelectAll(true)}>All</Button>\r\n                                                        <Button onClick={() => handleInquiryManagementSelectAll(false)}>None</Button>\r\n                                                    </Button.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Divider />\r\n                                            <div className=\"d-flex flex-column\">\r\n                                                {InquirymanagementCheck.map((element, index) => \r\n                                                    renderPermissionCheckbox(element, index, 'inquiry_management', setInquirymanagementCheck)\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    {/* Job Sites */}\r\n                                    <Col span={6}>\r\n                                        <div\r\n                                            style={{\r\n                                                border: \"1px solid #d9d9d9\",\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                minHeight: '300px'\r\n                                            }}\r\n                                        >\r\n                                            <Row justify=\"space-between\" align=\"middle\">\r\n                                                <Title level={5}>Job Sites</Title>\r\n                                            </Row>\r\n                                            <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                                                <Col>\r\n                                                    <Button.Group size=\"small\">\r\n                                                        <Button onClick={() => handleJobSitesSelectAll(true)}>All</Button>\r\n                                                        <Button onClick={() => handleJobSitesSelectAll(false)}>None</Button>\r\n                                                    </Button.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Divider />\r\n                                            <div className=\"d-flex flex-column\">\r\n                                                {jobSitesCheck.map((element, index) => \r\n                                                    renderPermissionCheckbox(element, index, 'job_sites', setJobSitesCheck)\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    {/* Machines and Sensors */}\r\n                                    <Col span={6}>\r\n                                        <div\r\n                                            style={{\r\n                                                border: \"1px solid #d9d9d9\",\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                minHeight: '300px'\r\n                                            }}\r\n                                        >\r\n                                            <Row justify=\"space-between\" align=\"middle\">\r\n                                                <Title level={5}>Machines and Sensors</Title>\r\n                                            </Row>\r\n                                            <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                                                <Col>\r\n                                                    <Button.Group size=\"small\">\r\n                                                        <Button onClick={() => handleMachinesAndSensorsSelectAll(true)}>All</Button>\r\n                                                        <Button onClick={() => handleMachinesAndSensorsSelectAll(false)}>None</Button>\r\n                                                    </Button.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Divider />\r\n                                            <div className=\"d-flex flex-column\">\r\n                                                {machinesAndSensorsCheck.map((element, index) => \r\n                                                    renderPermissionCheckbox(element, index, 'machines_and_sensors', setMachinesAndSensorsCheck)\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                {/* Second Row */}\r\n                                <Row gutter={[16, 24]} style={{ marginTop: '24px' }}>\r\n                                    {/* Operational Areas */}\r\n                                    <Col span={6}>\r\n                                        <div\r\n                                            style={{\r\n                                                border: \"1px solid #d9d9d9\",\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                minHeight: '300px'\r\n                                            }}\r\n                                        >\r\n                                            <Row justify=\"space-between\" align=\"middle\">\r\n                                                <Title level={5}>Operational Areas</Title>\r\n                                            </Row>\r\n                                            <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                                                <Col>\r\n                                                    <Button.Group size=\"small\">\r\n                                                        <Button onClick={() => handleOperationalAreasSelectAll(true)}>All</Button>\r\n                                                        <Button onClick={() => handleOperationalAreasSelectAll(false)}>None</Button>\r\n                                                    </Button.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Divider />\r\n                                            <div className=\"d-flex flex-column\">\r\n                                                {operationalAreasCheck.map((element, index) => \r\n                                                    renderPermissionCheckbox(element, index, 'operational_areas', setOperationalAreasCheck)\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    {/* User Management */}\r\n                                    <Col span={6}>\r\n                                        <div\r\n                                            style={{\r\n                                                border: \"1px solid #d9d9d9\",\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                minHeight: '300px'\r\n                                            }}\r\n                                        >\r\n                                            <Row justify=\"space-between\" align=\"middle\">\r\n                                                <Title level={5}>User Management</Title>\r\n                                            </Row>\r\n                                            <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                                                <Col>\r\n                                                    <Button.Group size=\"small\">\r\n                                                        <Button onClick={() => handleUserManagementSelectAll(true)}>All</Button>\r\n                                                        <Button onClick={() => handleUserManagementSelectAll(false)}>None</Button>\r\n                                                    </Button.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Divider />\r\n                                            <div className=\"d-flex flex-column\">\r\n                                                {userManagementCheck.map((element, index) => \r\n                                                    renderPermissionCheckbox(element, index, 'user_management', setUserManagementCheck)\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    {/* Technician Management */}\r\n                                    <Col span={6}>\r\n                                        <div\r\n                                            style={{\r\n                                                border: \"1px solid #d9d9d9\",\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                minHeight: '300px'\r\n                                            }}\r\n                                        >\r\n                                            <Row justify=\"space-between\" align=\"middle\">\r\n                                                <Title level={5}>Technician Management</Title>\r\n                                            </Row>\r\n                                            <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                                                <Col>\r\n                                                    <Button.Group size=\"small\">\r\n                                                        <Button onClick={() => handleTechnicianManagementSelectAll(true)}>All</Button>\r\n                                                        <Button onClick={() => handleTechnicianManagementSelectAll(false)}>None</Button>\r\n                                                    </Button.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Divider />\r\n                                            <div className=\"d-flex flex-column\">\r\n                                                {technicianManagementCheck.map((element, index) => \r\n                                                    renderPermissionCheckbox(element, index, 'technician_management', setTechnicianManagementCheck)\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n\r\n                            {/* Mobile App Tab */}\r\n                            <TabPane\r\n                                tab={\r\n                                    <div className=\"d-flex align-items-center justify-content-center\" style={{ gap: '5px' }}>\r\n                                        Mobile App\r\n                                    </div>\r\n                                }\r\n                                key=\"2\"\r\n                            >\r\n                                {/* Global Mobile App Select All Controls */}\r\n                                <Row justify=\"end\" style={{ marginBottom: '16px' }}>\r\n                                    <Col>\r\n                                        <Button.Group size=\"small\">\r\n                                            <Button onClick={() => handleMobileAppSelectAll(true)}>Select All</Button>\r\n                                            <Button onClick={() => handleMobileAppSelectAll(false)}>Deselect All</Button>\r\n                                        </Button.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row gutter={[24, 24]} style={{ padding: '20px' }}>\r\n                                    {dataMobileAppPer.map((item) => (\r\n                                        <Col xs={24} sm={12} key={item.key}>\r\n                                            <Card>\r\n                                                <div style={{\r\n                                                    display: 'flex',\r\n                                                    justifyContent: 'space-between'\r\n                                                }}>\r\n                                                    <div>\r\n                                                        {item.title}\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <Switch\r\n                                                            checked={item.check}\r\n                                                            onChange={(checked) => {\r\n                                                                setDataMobileAppPer((prev) => {\r\n                                                                    return prev.map((elm) => {\r\n                                                                        if (elm.key === item.key) {\r\n                                                                            return {\r\n                                                                                ...elm,\r\n                                                                                check: checked\r\n                                                                            }\r\n                                                                        } else {\r\n                                                                            return elm\r\n                                                                        }\r\n                                                                    })\r\n                                                                })\r\n                                                            }}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    ))}\r\n                                </Row>\r\n                            </TabPane>\r\n                        </Tabs>\r\n                    </div>\r\n                </TabPane>\r\n            </Tabs>\r\n            <Form.Item>\r\n                <div\r\n                    style={{ gap: \"10px\" }}\r\n                    className=\"mt-5 d-flex justify-content-end\"\r\n                >\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold\"\r\n                        htmlType=\"button\"\r\n                        onClick={handleBackClick}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                    {/* <Button className=\"px-4 font-weight-semibold\" htmlType=\"button\">\r\n                            Save Draft\r\n                        </Button> */}\r\n                    <Button\r\n                        className=\"px-4 bg-primary font-weight-semibold text-white bg-info\"\r\n                        htmlType=\"submit\"\r\n                        loading={loading}\r\n                        onClick={() => {\r\n                            handleNext(activeTab)\r\n                        }}\r\n                    >\r\n                        {activeTab === \"4\" ? \"Save\" : \"Next\"}\r\n                    </Button>\r\n                </div>\r\n            </Form.Item>\r\n\r\n            <Modal\r\n                width={600}\r\n                footer={null}\r\n                visible={deactiveModalOpen}\r\n                onOk={DeactiveHandleOk}\r\n                onCancel={() => setIsDeactiveModalOpen(false)}\r\n            >\r\n                <div className=\"d-flex my-3 flex-column w-75\">\r\n                    <h4 className=\"mb-4\">Sure you want to deactivate staff?</h4>\r\n                    <h5>Staff ID #TC-1234 will be deleted from system</h5>\r\n                </div>\r\n                <div\r\n                    style={{ gap: \"10px\" }}\r\n                    className=\"mt-5 d-flex justify-content-end\"\r\n                >\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold\"\r\n                        onClick={() => setIsDeactiveModalOpen(false)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold text-white bg-info\"\r\n                        onClick={() => {\r\n                            if (mainStatus === \"Inactive\") {\r\n                                sendStatus(\"Active\")\r\n                            } else {\r\n                                sendStatus(\"Inactive\")\r\n                            }\r\n                            setIsDeactiveModalOpen(false);\r\n                            setSuccesmodaltext({\r\n                                title: \"Staff Deactivated\",\r\n                                text: \"Staff ID #TC-1234 deleted.\",\r\n                            });\r\n                            setSuccessModal(true);\r\n                        }}\r\n                    >\r\n                        Yes, confirm\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n            <Modal\r\n                width={600}\r\n                footer={null}\r\n                visible={isChangeStudModalOpen}\r\n                onOk={changeStudHandleOk}\r\n                onCancel={() => setIsChangeStudModalOpen(false)}\r\n            >\r\n                <div className=\"d-flex my-3 flex-column w-75\">\r\n                    <h4 className=\"mb-4\">Change Employee Status</h4>\r\n                    <h5>Working Status</h5>\r\n                    <Select\r\n                        placeholder=\"Select\"\r\n                        optionFilterProp=\"children\"\r\n                        value={statu}\r\n                        onChange={(val) => setStatu(val)}\r\n                        filterOption={(input, option) =>\r\n                            (option?.label ?? \"\").toLowerCase().includes(input.toLowerCase())\r\n                        }\r\n                        options={[\r\n                            {\r\n                                value: \"Active\",\r\n                                label: \"Active\",\r\n                            },\r\n                            {\r\n                                value: \"Inactive\",\r\n                                label: \"Inactive\",\r\n                            },\r\n                            // {\r\n                            //   value: \"terminated\",\r\n                            //   label: \"Terminated\",\r\n                            // },\r\n                            // {\r\n                            //   value: \"Contract_end\",\r\n                            //   label: \"Contract end\",\r\n                            // },\r\n                        ]}\r\n                    />\r\n                </div>\r\n                <div\r\n                    style={{ gap: \"10px\" }}\r\n                    className=\"mt-5 d-flex justify-content-end\"\r\n                >\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold\"\r\n                        onClick={() => setIsChangeStudModalOpen(false)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold text-white bg-info\"\r\n                        onClick={() => {\r\n                            if (statu === '') {\r\n                                message.error(`Please select status first !`)\r\n                                return\r\n                            }\r\n                            sendStatus(statu)\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n            <Modal\r\n                width={500}\r\n                footer={null}\r\n                visible={successModal}\r\n                onOk={successOk}\r\n                onCancel={successCancel}\r\n            >\r\n                <div className=\"d-flex my-3 align-items-center flex-column justify-content-center\">\r\n                    {/* <CustomIcon svg={Verified} /> */}\r\n                    <svg\r\n                        width=\"65\"\r\n                        height=\"64\"\r\n                        viewBox=\"0 0 65 64\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M32.5 0C37.4636 0 42.1609 1.13082 46.358 3.14781C44.64 4.50697 43.0471 5.81176 41.5629 7.06762C38.7358 6.04009 35.6859 5.48012 32.5054 5.48012C25.1823 5.48012 18.5496 8.44852 13.7545 13.2491C8.95396 18.0496 5.98556 24.6769 5.98556 32C5.98556 39.3231 8.95396 45.9504 13.7545 50.7509C18.555 55.5515 25.1823 58.5199 32.5054 58.5199C39.8286 58.5199 46.4613 55.5515 51.2564 50.7509C56.0569 45.9504 59.0253 39.3231 59.0253 32C59.0253 30.2603 58.8568 28.5532 58.536 26.9059C59.9115 25.1118 61.3196 23.3231 62.7603 21.5508C63.8911 24.8236 64.5054 28.3411 64.5054 32C64.5054 40.8345 60.9227 48.8372 55.1327 54.6273C49.3427 60.4173 41.34 64 32.5054 64C23.6709 64 15.6682 60.4173 9.87819 54.6273C4.08274 48.8372 0.5 40.8345 0.5 32C0.5 23.1655 4.08274 15.1628 9.87275 9.37275C15.6628 3.58274 23.6655 0 32.5 0ZM17.5928 26.7428L25.3998 26.6395L25.9815 26.7917C27.5581 27.6996 29.0423 28.738 30.4286 29.9123C31.429 30.7604 32.3858 31.6847 33.2938 32.685C36.0936 28.178 39.0783 24.0408 42.2316 20.2351C45.6838 16.0652 49.3481 12.2813 53.1973 8.82909L53.9584 8.53551H62.4776L60.7596 10.4438C55.4806 16.3099 50.691 22.3717 46.3634 28.6239C42.0359 34.8814 38.165 41.3401 34.7236 47.9891L33.6526 50.055L32.6685 47.9511C30.8527 44.053 28.6781 40.4757 26.0848 37.279C23.4915 34.0822 20.4742 31.2443 16.9567 28.8304L17.5928 26.7428Z\"\r\n                            fill=\"#00AB6F\"\r\n                        />\r\n                    </svg>\r\n                    <h3 className=\"font-weight-bold mt-4\">{succesmodaltext.title}</h3>\r\n                    <span className=\"text-center font-size-sm w-75 font-weight-semibold\">\r\n                        {succesmodaltext.text}\r\n                    </span>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/user-management/view-details/index.js",["1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125"],"import {\r\n  Button,\r\n  Form,\r\n  Input,\r\n  Select,\r\n  Modal,\r\n  DatePicker,\r\n  Upload,\r\n  message,\r\n  Radio,\r\n  InputNumber,\r\n} from \"antd\";\r\nimport {\r\n  BasicDetail,\r\n  LocationIcon,\r\n  LocationIcon2,\r\n  SuccessTickIcon,\r\n  UploadDocument,\r\n  UploadFileIcon,\r\n} from \"assets/svg/icon\";\r\n\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport {\r\n  CloseCircleOutlined,\r\n  DeleteOutlined,\r\n  EnvironmentOutlined,\r\n  EyeOutlined,\r\n  PlusOutlined,\r\n  TeamOutlined,\r\n  UserSwitchOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Option } from \"antd/lib/mentions\";\r\n// import axios from \"../../../../axios\";\r\nimport moment from \"moment\";\r\nimport { useEffect } from \"react\";\r\nimport { useLocation, useParams } from \"react-router-dom/cjs/react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import uploadImage from \"middleware/uploadImage\";\r\nimport { API_BASE_URL } from \"constants/ApiConstant\";\r\nimport { axiosInstance } from \"App\";\r\nimport { Row, Col, Avatar, Typography, Card } from \"antd\";\r\nimport {\r\n  Table,\r\n  Tag,\r\n  Space,\r\n  Dropdown,\r\n  Menu,\r\n  Checkbox,\r\n  Switch,\r\n  Divider,\r\n} from \"antd\";\r\nimport { MoreOutlined, SearchOutlined } from \"@ant-design/icons\";\r\nimport { UploadImage } from \"utils/Upload\";\r\nimport CountrySelector from \"utils/CountrySelector\";\r\nimport PhoneCode from \"utils/PhoneCode\";\r\nimport { getAssignablePermissions, getParentPermissions } from \"utils/permissionUtils\";\r\n\r\nconst { Search } = Input;\r\nconst { Title, Text } = Typography;\r\n\r\nconst SwitchCard = ({ title }) => (\r\n  <Card bordered={false} style={{ borderRadius: '10px', border: '1px solid #e5e5e5', }}>\r\n    <Row justify=\"space-between\" align=\"middle\">\r\n      <Col span={18}>\r\n        <div>{title}</div>\r\n      </Col>\r\n      <Col>\r\n        <Switch defaultChecked />\r\n      </Col>\r\n    </Row>\r\n  </Card>\r\n);\r\nexport default function AddNewAdminAccount() {\r\n  const { TabPane } = Tabs;\r\n  const history = useHistory();\r\n  const [statu, setStatu] = useState(\"\");\r\n  const [mainStatus, setMainStatus] = useState(\"\");\r\n  const [mainId, setMainId] = useState(null);\r\n  const [activeTab, setActiveTab] = useState(\"1\");\r\n  const [isChangeStudModalOpen, setIsChangeStudModalOpen] = useState(false);\r\n  const [deactiveModalOpen, setIsDeactiveModalOpen] = useState(false);\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const location = useLocation();\r\n  const [countryCode, setCountryCode] = useState(\"+91\");\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const [fileList, setFileList] = useState([]);\r\n  const [jobsite, setJobSite] = useState(null);\r\n  const [assignedJobSite, setAssignedJobSite] = useState([]);\r\n  const [unassignedJobSite, setUnassignedJobSite] = useState([]);\r\n  const [imageUrl, setImageUrl] = useState();\r\n  // const id = queryParams.get(\"id\");\r\n  const { id } = useParams();\r\n  // const dataMobileAppPer = [\r\n  //   { title: \"Jobsites\", key: \"jobsites\", check:true },\r\n  //   { title: \"Machines\", key: \"machines\", check:true },\r\n  //   { title: \"Machine Reports\", key: \"machine_reports\" , check:true},\r\n  //   { title: \"Life Cycle Management\", key: \"life_cycle_management\", check:true },\r\n  //   { title: \"Order Management\", key: \"order_management\" , check:true},\r\n  //   { title: \"Inquiry Management\", key: \"inquiry_management\" , check:true},\r\n  // ];\r\n  const [dataMobileAppPer, setDataMobileAppPer] = useState(\r\n    [\r\n      { title: \"Jobsites\", key: \"jobsites\", check: true },\r\n      { title: \"Machines\", key: \"machines\", check: true },\r\n      { title: \"Sensors\", key: \"sensors\", check: true },\r\n      { title: \"Inquiries\", key: \"inquiries\", check: true },\r\n      { title: \"Orders\", key: \"orders\", check: true }\r\n    ]\r\n  )\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [alertModal, setAlertModal] = useState(false);\r\n  const [country, setCountry] = useState([\r\n    {\r\n      country: \"India\",\r\n    },\r\n  ]);\r\n  const [data1, setData1] = useState([\r\n    {\r\n      id: \"#123\",\r\n      jobsiteName: \"Pumping Station 1\",\r\n      area: \"Bedok\",\r\n      contactNumber: \"+65 1359 7283\",\r\n      createdOn: \"17 Jan 2023, 10:00:00 AM\",\r\n      status: \"Active\",\r\n      image: \"https://via.placeholder.com/40\", // Replace with actual image if needed\r\n    },\r\n    {\r\n      id: \"#124\",\r\n      jobsiteName: \"Pumping Station 2\",\r\n      area: \"Woodland\",\r\n      contactNumber: \"+65 1359 7283\",\r\n      createdOn: \"15 Jan 2023, 10:00:00 AM\",\r\n      status: \"Active\",\r\n      image: \"https://via.placeholder.com/40\",\r\n    },\r\n    {\r\n      id: \"#125\",\r\n      jobsiteName: \"Pumping Station 3\",\r\n      area: \"Tampines\",\r\n      contactNumber: \"+65 1359 7283\",\r\n      createdOn: \"14 Jan 2023, 10:00:00 AM\",\r\n      status: \"Active\",\r\n      image: \"https://via.placeholder.com/40\",\r\n    },\r\n    {\r\n      id: \"#126\",\r\n      jobsiteName: \"Pumping Station 4\",\r\n      area: \"Bukit\",\r\n      contactNumber: \"+65 1359 7283\",\r\n      createdOn: \"14 Jan 2023, 10:00:00 AM\",\r\n      status: \"Active\",\r\n      image: \"https://via.placeholder.com/40\",\r\n    },\r\n  ]);\r\n\r\n  const columns1 = [\r\n    {\r\n      title: \"Id\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n    },\r\n    {\r\n      title: \"Jobsite Name\",\r\n      dataIndex: \"jobsiteName\",\r\n      key: \"jobsiteName\",\r\n      render: (text, record) => (\r\n        <Space>\r\n          <Avatar shape=\"square\" src={record.image} />\r\n          {text}\r\n        </Space>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Area\",\r\n      dataIndex: \"area\",\r\n      key: \"area\",\r\n    },\r\n    {\r\n      title: \"Contact Number\",\r\n      dataIndex: \"contactNumber\",\r\n      key: \"contactNumber\",\r\n    },\r\n    {\r\n      title: \"Created On\",\r\n      dataIndex: \"createdOn\",\r\n      key: \"createdOn\",\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      render: (status) => (\r\n        <Tag color={status === \"Active\" ? \"green\" : \"red\"}>{status}</Tag>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      render: (text, record) => (\r\n        <Dropdown overlay={menu(record)} trigger={[\"click\"]}>\r\n          <MoreOutlined style={{ fontSize: \"20px\", cursor: \"pointer\" }} />\r\n        </Dropdown>\r\n      ),\r\n    },\r\n  ];\r\n  const [webAppChecked, setWebAppChecked] = useState(false);\r\n  const [orderManagement, setOrderManagement] = useState(true);\r\n  const [inquiryManagement, setInquiryManagement] = useState(true);\r\n  const [operationMaster, setOperationMaster] = useState(false);\r\n  const [orderManagementCheck, setOrderManagementCheck] = useState([\r\n    {\r\n      label: 'View Orders',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Create New Orders',\r\n      check: true\r\n    },\r\n    {\r\n      label: 'Delete Orders',\r\n      check: false\r\n    }\r\n  ])\r\n  const [InquirymanagementCheck, setInquirymanagementCheck] = useState([\r\n    {\r\n      label: 'View Inquiry',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Create New Inquiry',\r\n      check: true\r\n    }\r\n  ])\r\n  const [jobSitesCheck, setJobSitesCheck] = useState([\r\n    {\r\n      label: 'View Jobsites',\r\n      check: true\r\n    },\r\n    {\r\n      label: 'Create New Jobsites',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Edit Jobsites',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Delete Jobsites',\r\n      check: false\r\n    }\r\n  ])\r\n\r\n  const [machinesAndSensorsCheck, setMachinesAndSensorsCheck] = useState([\r\n    {\r\n      label: 'View Machines and Sensors',\r\n      check: true\r\n    },\r\n    {\r\n      label: 'Create New Machines and Sensors',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Edit Machines and Sensors',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Delete Machines and Sensors',\r\n      check: false\r\n    }\r\n  ])\r\n\r\n  // New Operational Areas state\r\n  const [operationalAreasCheck, setOperationalAreasCheck] = useState([\r\n    {\r\n      label: 'View Operational Areas',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Create New Operational Areas',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Edit Operational Areas',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Delete Operational Areas',\r\n      check: false\r\n    }\r\n  ])\r\n\r\n  // User Management state\r\n  const [userManagementCheck, setUserManagementCheck] = useState([\r\n    {\r\n      label: 'View Users',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Create New Users',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Edit Users',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Delete Users',\r\n      check: false\r\n    }\r\n  ])\r\n\r\n  // Technician Management state\r\n  const [technicianManagementCheck, setTechnicianManagementCheck] = useState([\r\n    {\r\n      label: 'View Technicians',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Create New Technicians',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Edit Technicians',\r\n      check: false\r\n    },\r\n    {\r\n      label: 'Delete Technicians',\r\n      check: false\r\n    }\r\n  ])\r\n\r\n  // Parent permissions for inheritance validation\r\n  const [parentPermissions, setParentPermissions] = useState({})\r\n  const [webAppPermissions, setWebAppPermissions] = useState([\r\n    \"Create New Orders\",\r\n    \"Edit Orders\",\r\n    \"View Orders\",\r\n    \"Create New Inquiry\",\r\n    \"View Inquiry\",\r\n  ]);\r\n\r\n  // Mobile App State\r\n  const [mobileAppChecked, setMobileAppChecked] = useState(false);\r\n  const [mobileAppPermissions, setMobileAppPermissions] = useState([\r\n    \"Create New Orders\",\r\n    \"Edit Orders\",\r\n    \"View Orders\",\r\n    \"Create New Inquiry\",\r\n    \"View Inquiry\",\r\n  ]);\r\n\r\n  // Select All/Deselect All Functions for Individual Cards\r\n  const handleOrderManagementSelectAll = (selectAll) => {\r\n    setOrderManagementCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n  };\r\n\r\n  const handleInquiryManagementSelectAll = (selectAll) => {\r\n    setInquirymanagementCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n  };\r\n\r\n  const handleJobSitesSelectAll = (selectAll) => {\r\n    setJobSitesCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n  };\r\n\r\n  const handleMachinesAndSensorsSelectAll = (selectAll) => {\r\n    setMachinesAndSensorsCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n  };\r\n\r\n  const handleOperationalAreasSelectAll = (selectAll) => {\r\n    setOperationalAreasCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n  };\r\n\r\n  const handleUserManagementSelectAll = (selectAll) => {\r\n    setUserManagementCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n  };\r\n\r\n  const handleTechnicianManagementSelectAll = (selectAll) => {\r\n    setTechnicianManagementCheck(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n  };\r\n\r\n  // Fetch parent customer permissions for inheritance validation\r\n  const fetchParentPermissions = async () => {\r\n    try {\r\n      const parentId = localStorage.getItem(\"parent_id\");\r\n      if (parentId && parentId !== \"null\") {\r\n        const response = await axiosInstance.get(`/api/admin/customer-users/parent-permissions/${parentId}`);\r\n        if (response.data?.item?.can_access) {\r\n          setParentPermissions(response.data.item.can_access);\r\n          console.log('Parent permissions loaded:', response.data.item.can_access);\r\n        }\r\n      } else {\r\n        // For free users, get their own permissions as the limit\r\n        const storedParentPermissions = getParentPermissions();\r\n        setParentPermissions(storedParentPermissions);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching parent permissions:', error);\r\n      // If we can't fetch parent permissions, show all options (fallback)\r\n      setParentPermissions({});\r\n    }\r\n  };\r\n\r\n  // Check if a specific permission is allowed by parent\r\n  const isPermissionAllowedByParent = (section, permissionLabel) => {\r\n    // If no parent permissions loaded, allow all (for backwards compatibility)\r\n    if (!parentPermissions?.web_app) return true;\r\n    \r\n    const parentSection = parentPermissions.web_app[section];\r\n    if (!parentSection || !Array.isArray(parentSection)) return true;\r\n    \r\n    // Find the permission in parent's permissions\r\n    const parentPermission = parentSection.find(perm => perm.label === permissionLabel);\r\n    return parentPermission ? parentPermission.check : false;\r\n  };\r\n\r\n  // Render a permission checkbox only if allowed by parent\r\n  const renderPermissionCheckbox = (element, index, section, setStateFunction) => {\r\n    const isAllowed = isPermissionAllowedByParent(section, element.label);\r\n    \r\n    if (!isAllowed) {\r\n      return null; // Don't render if parent doesn't have this permission\r\n    }\r\n    \r\n    return (\r\n      <Checkbox \r\n        key={index}\r\n        style={{ margin: '0' }} \r\n        checked={element.check} \r\n        onChange={(val) => setStateFunction((previos) => {\r\n          return previos.map((elm, i) => {\r\n            if (i === index) {\r\n              return {\r\n                ...elm,\r\n                check: val.target.checked,\r\n              }\r\n            } else {\r\n              return elm\r\n            }\r\n          })\r\n        })}\r\n      >\r\n        {element.label}\r\n      </Checkbox>\r\n    );\r\n  };\r\n\r\n  const handleMobileAppSelectAll = (selectAll) => {\r\n    setDataMobileAppPer(prev => prev.map(item => ({ ...item, check: selectAll })));\r\n  };\r\n\r\n  // Global Select All/Deselect All Functions\r\n  const handleWebAppGlobalSelectAll = (selectAll) => {\r\n    handleOrderManagementSelectAll(selectAll);\r\n    handleInquiryManagementSelectAll(selectAll);\r\n    handleJobSitesSelectAll(selectAll);\r\n    handleMachinesAndSensorsSelectAll(selectAll);\r\n    handleOperationalAreasSelectAll(selectAll);\r\n    handleUserManagementSelectAll(selectAll);\r\n    handleTechnicianManagementSelectAll(selectAll);\r\n  };\r\n\r\n  // Handling Web App Checkbox Check All\r\n  const onWebAppCheckAllChange = (e) => {\r\n    setWebAppChecked(e.target.checked);\r\n    if (e.target.checked) {\r\n      setWebAppPermissions([\r\n        \"Create New Orders\",\r\n        \"Edit Orders\",\r\n        \"View Orders\",\r\n        \"Create New Inquiry\",\r\n        \"View Inquiry\",\r\n        \"View Jobsites\",\r\n        \"Create New Jobsites\",\r\n        \"Edit Jobsites\",\r\n        \"View Machine & Sensors\",\r\n        \"Create Machine & Sensors\",\r\n        \"Edit Machine & Sensors\",\r\n      ]);\r\n    } else {\r\n      setWebAppPermissions([]);\r\n    }\r\n  };\r\n\r\n  // Handling Mobile App Checkbox Check All\r\n  const onMobileAppCheckAllChange = (e) => {\r\n    setMobileAppChecked(e.target.checked);\r\n    if (e.target.checked) {\r\n      setMobileAppPermissions([\r\n        \"Create New Orders\",\r\n        \"Edit Orders\",\r\n        \"View Orders\",\r\n        \"Create New Inquiry\",\r\n        \"View Inquiry\",\r\n        \"View Jobsites\",\r\n        \"Create New Jobsites\",\r\n        \"Edit Jobsites\",\r\n        \"View Machine & Sensors\",\r\n        \"Create Machine & Sensors\",\r\n        \"Edit Machine & Sensors\",\r\n      ]);\r\n    } else {\r\n      setMobileAppPermissions([]);\r\n    }\r\n  };\r\n  const menu = (record) => (\r\n    <Menu>\r\n      <Menu.Item key=\"1\">View {record.jobsiteName}</Menu.Item>\r\n      <Menu.Item key=\"2\">Edit {record.jobsiteName}</Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  const handleSearch = (value) => {\r\n    // Add your search logic here if necessary\r\n    console.log(\"Search:\", value);\r\n  };\r\n  let styles = {\r\n    files: {\r\n      listStyle: \"none\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"space-between\",\r\n      gap: \"13px\",\r\n      border: \"1px solid lightblue\",\r\n      padding: \"10px\",\r\n      borderRadius: \"9px\",\r\n      background: \"#0093ff0a\",\r\n    },\r\n    uploadFile: {\r\n      position: \"absolute\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      opacity: 0,\r\n    },\r\n\r\n    // Add the new styles here:\r\n\r\n    \".uploadFile::-webkit-file-upload-button\": {\r\n      visibility: \"hidden\",\r\n    },\r\n\r\n    \".uploadFile::before\": {\r\n      content: \"'Drag & Drop'\",\r\n      display: \"inline-block\",\r\n      padding: \"10px\",\r\n      border: \"1px solid #ccc\",\r\n      borderRadius: \"4px\",\r\n      cursor: \"pointer\",\r\n    },\r\n\r\n    \".uploadFile:hover::before\": {\r\n      backgroundColor: \"#ccc\",\r\n    },\r\n  };\r\n  const [succesmodaltext, setSuccesmodaltext] = useState({\r\n    title: \"Staff Status Change Successfully!\",\r\n    text: \"Staff status changed to terminated.\",\r\n  });\r\n\r\n  function handleTabClick(key) {\r\n    setActiveTab(key);\r\n  }\r\n  const successOk = () => {\r\n    setSuccessModal(false);\r\n  };\r\n  const successCancel = () => {\r\n    setSuccessModal(false);\r\n  };\r\n\r\n  const changeStudHandleOk = () => {\r\n    setIsChangeStudModalOpen(false);\r\n  };\r\n  const DeactiveHandleOk = () => {\r\n    setIsDeactiveModalOpen(false);\r\n  };\r\n\r\n  function handleBackClick() {\r\n    // if (activeTab > 1 && activeTab <= 7) {\r\n    //   let actnum = Number(activeTab) - 1;\r\n    //   setActiveTab(actnum.toString());\r\n    // }\r\n    if (activeTab > 1) {\r\n      let actnum = Number(activeTab) - 1;\r\n      setActiveTab(actnum.toString());\r\n      return;\r\n    }\r\n    history.goBack();\r\n  }\r\n\r\n  const handleNext = (active) => {\r\n    setActiveTab(`${parseInt(active) + 1}`);\r\n  };\r\n\r\n  const [form1] = Form.useForm();\r\n  const [form2] = Form.useForm();\r\n  const onFinish = async (values) => {\r\n    const can_access = {\r\n      web_app: {\r\n        order_management: orderManagementCheck,\r\n        inquiry_management: InquirymanagementCheck,\r\n        job_sites: jobSitesCheck,\r\n        machines_and_sensors: machinesAndSensorsCheck,\r\n        operational_areas: operationalAreasCheck,\r\n        user_management: userManagementCheck,\r\n        technician_management: technicianManagementCheck\r\n      },\r\n      mobile_app: dataMobileAppPer\r\n    }\r\n\r\n    // let profile_pic = imageUrl\r\n\r\n    let profile_pic = imageUrl\r\n\r\n    // console.log(fileList);\r\n  if(profile_pic.includes('base64')){\r\n     profile_pic = await UploadImage(fileList);\r\n }\r\n\r\n    let file = [];\r\n\r\n    const temp = selectedFiles.filter((item) => {\r\n      return item.url === undefined;\r\n    })\r\n\r\n    const temp2 = selectedFiles.filter((item) => {\r\n      return item.url !== undefined;\r\n    })\r\n\r\n    if (temp.length !== 0) {\r\n      const uploadPromise = temp.map(async (item) => {\r\n        if (item.url === undefined) {\r\n          const url = await UploadImage(item);\r\n          return url;\r\n        } else {\r\n          return item.url;\r\n        }\r\n      })\r\n\r\n      file = await Promise.all(uploadPromise);\r\n      console.log(file);\r\n    }\r\n\r\n    file = [...file, ...temp2.map((item) => {\r\n      return item.url\r\n    })];\r\n\r\n    if (id) {\r\n      try {\r\n        const resp = await axiosInstance.post(`/api/admin/customer-users/${id}/update`, {\r\n          ...form1.getFieldsValue(),\r\n          ...form2.getFieldsValue(),\r\n          parent_id:localStorage.getItem(\"parent_id\"),\r\n          dob: form1.getFieldValue('dob')? form1.getFieldValue('dob').format('YYYY-MM-DD'):null,\r\n          phone_code: countryCode,\r\n          profile_pic,\r\n          documents: file,\r\n          can_access: JSON.stringify(can_access)\r\n          // documents: file,\r\n        })\r\n        message.success(resp.data.message); \r\n        history.goBack();\r\n      } catch (error) {\r\n    \r\n        const errorResponse = error.response.data.message;\r\n        if (errorResponse && errorResponse.error) {\r\n          const errorMessage = errorResponse.error[0];\r\n\r\n          message.warn(errorMessage);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const sendStatus = async (status) => { };\r\n\r\n  // const onFinishFailed = (errorInfo) => {\r\n  //   console.log(\"Failed:\", errorInfo);\r\n  // };\r\n  const handleChange = (info) => {\r\n    const file = info.fileList[0]?.originFileObj;\r\n    let formData = new FormData();\r\n    if (file) {\r\n      formData.append(\"file\", file);\r\n      setFileList(file);\r\n    }\r\n    if (info?.fileList[0]) {\r\n      getBase64(info.fileList[0].originFileObj, (url) => {\r\n        setImageUrl(url);\r\n      });\r\n    }\r\n  };\r\n\r\n  const getBase64 = (img, callback) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener(\"load\", () => callback(reader.result));\r\n    reader.readAsDataURL(img);\r\n  };\r\n  function handleFileSelect(event) {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    //   console.log(selectedFiles)\r\n    setSelectedFiles([...selectedFiles, newSelectedFiles[0]]);\r\n  }\r\n  const delUplFile = (i) => {\r\n    let AfterDeleteFile = selectedFiles.filter((elem, index) => {\r\n      return index !== i;\r\n    });\r\n    setSelectedFiles(AfterDeleteFile);\r\n  };\r\n  const uploadButton = (\r\n    <div style={{ width: \"200px\" }}>\r\n      <PlusOutlined />\r\n      <div\r\n        style={{\r\n          marginTop: 8,\r\n        }}\r\n      >\r\n        Profile Picture\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const handleOpenAlert = () => {\r\n    setAlertModal(true);\r\n  };\r\n  const handleCloseAlert = () => {\r\n    setAlertModal(false);\r\n  };\r\n\r\n  const getAssignedJobSites = async () => {\r\n    try {\r\n      const response = await axiosInstance.post(`/api/admin/customer-users/getAssignedJobSites`,{\r\n        user_id:id,\r\n        customer_id:localStorage.getItem(\"user_id\")\r\n      });\r\n      // setData1(response.data.items);\r\n      setAssignedJobSite(response.data.items);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const getUnassignedJobSites = async () => {\r\n    try {\r\n      const response = await axiosInstance.post(`/api/admin/customer-users/getUnassignedJobSites`,{\r\n        user_id:id,\r\n        customer_id:localStorage.getItem(\"user_id\")\r\n      });\r\n      // setData1(response.data.items);\r\n      setUnassignedJobSite(response.data.items);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  // Fetch Country\r\n  useEffect(() => {\r\n    const fetchCountry = async () => {\r\n      try {\r\n        const response = await axiosInstance.get(\"/api/admin/country/list\");\r\n        setCountry(response.data.items);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n    fetchCountry();\r\n    fetchParentPermissions(); // Load parent permissions for inheritance validation\r\n    if (id) {\r\n      getAssignedJobSites();\r\n      getUnassignedJobSites();\r\n      getData();\r\n    }\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      const response = await axiosInstance.post(`/api/admin/customer-users/${id}/show`);\r\n      const data = response.data.item;\r\n      setImageUrl(data.profile_pic)\r\n      form1.setFieldsValue({\r\n        name: data.name,\r\n        email: data.email,\r\n        phone_no: data.phone_no,\r\n        nric_fin_number: data.nric_fin_number,\r\n        dob: data.dob ? moment(data.dob) : null,\r\n        gender: data.gender?.toString(),\r\n        role_id: data.role_id\r\n      })\r\n\r\n      form2.setFieldsValue({\r\n        postal_code: data.address.postal_code,\r\n        block_number: data.address.block_number,\r\n        street_number: data.address.street_number,\r\n        unit_number: data.address.unit_number,\r\n        level_number: data.address.level_number,\r\n        country: data.address.country\r\n\r\n      })\r\n      setSelectedFiles(data?.documents.map((item, index) => {\r\n        return {\r\n          url: item?.document_url,\r\n          name: `Document ${index + 1}`\r\n        }\r\n      }))\r\n      setCountryCode(data.phone_code)\r\n      const can_access = data.can_access \r\n      if (Object.keys(can_access).length !== 0) {\r\n        if (can_access?.web_app?.order_management) {\r\n          setOrderManagementCheck(can_access.web_app.order_management)\r\n        }\r\n        if (can_access?.web_app?.inquiry_management) {\r\n          setInquirymanagementCheck(can_access.web_app.inquiry_management)\r\n        }\r\n        if (can_access?.web_app?.job_sites) {\r\n          setJobSitesCheck(can_access.web_app.job_sites)\r\n        }\r\n        if (can_access?.web_app?.machines_and_sensors) {\r\n          setMachinesAndSensorsCheck(can_access.web_app.machines_and_sensors)\r\n        }\r\n        if (can_access?.web_app?.operational_areas) {\r\n          setOperationalAreasCheck(can_access.web_app.operational_areas)\r\n        }\r\n        if (can_access?.web_app?.user_management) {\r\n          setUserManagementCheck(can_access.web_app.user_management)\r\n        }\r\n        if (can_access?.web_app?.technician_management) {\r\n          setTechnicianManagementCheck(can_access.web_app.technician_management)\r\n        }\r\n        if (can_access?.mobile_app) {\r\n          setDataMobileAppPer(can_access.mobile_app)\r\n        }\r\n      }\r\n      \r\n\r\n    } catch (error) {\r\n      console.error(error);\r\n      message.error(error.response.data.message);\r\n    }\r\n  }\r\n\r\n  const onFinishSubmit = async () => {\r\n    // console.log(\"Submit\");\r\n    try{\r\n      const response = await axiosInstance.post(`/api/admin/customer-users/assignJobSite`,{\r\n        user_id:id,\r\n        // customer_id:localStorage.getItem(\"user_id\"),\r\n        job_site_id:jobsite\r\n      });\r\n      message.success(response.data.message);\r\n      getAssignedJobSites();\r\n      getUnassignedJobSites();\r\n      setJobSite(null);\r\n    }catch(err){\r\n      message.error(err.response.data.message);\r\n    }\r\n  }\r\n\r\n  const unassignedJobSiteFunction = async (job) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/api/admin/customer-users/unassignJobSite`,{\r\n        user_id:id,\r\n        // customer_id:localStorage.getItem(\"user_id\"),\r\n        job_site_id:job\r\n      });\r\n      message.success(response.data.message);\r\n      getAssignedJobSites();\r\n      getUnassignedJobSites();\r\n    } catch (error) {\r\n      console.error(error);\r\n      message.error(error.response.data.message);\r\n    }\r\n  }\r\n\r\n\r\n  const column = [\r\n    {\r\n      title: \"Id\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n    },\r\n    {\r\n      title:\"Jobsite Name\",\r\n      dataIndex:\"jobsite_name\"\r\n    },\r\n    {\r\n      title:\"Contact Number\",\r\n      dataIndex:'phone_no',\r\n      render:(text,record)=>(\r\n        <>{record.phone_code} - {text}</>\r\n      )\r\n    },\r\n    {\r\n      title:\"Created On\",\r\n      dataIndex:\"created_at\",\r\n      render:(text)=>(\r\n        <>{moment(text).format('DD-MM-YYYY')}</>\r\n      )\r\n    },\r\n    {\r\n      title:\"Action\",\r\n      key:\"action\",\r\n      render:(text,record)=>(\r\n        <div style={{\r\n          cursor:\"pointer\"\r\n        }} type=\"primary\" onClick={()=>{\r\n            unassignedJobSiteFunction(record.id)\r\n        }}><DeleteOutlined/></div>\r\n      )\r\n    }\r\n  ]\r\n  return (\r\n    <div className=\"customTableBackground\">\r\n      <Modal\r\n        visible={alertModal}\r\n        onCancel={() => setAlertModal(false)}\r\n        footer={false}\r\n      >\r\n        <div className=\"d-flex flex-column justify-content-center align-items-center\">\r\n          <SuccessTickIcon />\r\n          <h3>Operation Admin Created Successfully!</h3>\r\n          <h4\r\n            style={{ fontWeight: \"300\", width: \"350px\" }}\r\n            className=\"text-center\"\r\n          >\r\n            Username Jane cooper account created as operation admin\r\n            successfully!\r\n          </h4>\r\n        </div>\r\n        <div className=\"d-flex justify-content-center mt-3\">\r\n          <Button\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={handleCloseAlert}\r\n          >\r\n            Close\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <h4>\r\n        {\" \"}\r\n        <UserSwitchOutlined />\r\n        <span\r\n          style={{\r\n            color: \"#6a6a6a\",\r\n            fontWeight: \"300\",\r\n          }}\r\n        >\r\n          {\" \"}\r\n          Staff Management / Admin Accounts\r\n        </span>{\" \"}\r\n        / Add New Accounts{\" \"}\r\n      </h4>\r\n\r\n      <Tabs activeKey={activeTab} onTabClick={handleTabClick}>\r\n        <TabPane\r\n\r\n          tab={\r\n            <div className=\"d-flex justify-content-center\">\r\n              <BasicDetail /> <span className=\"ml-2\">Basic Details</span>\r\n            </div>\r\n          }\r\n          key=\"1\"\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            // onFinish={onFinish}\r\n            // onFinishFailed={onFinishFailed}\r\n            form={form1}\r\n            name=\"control-hooks\"\r\n          >\r\n            <div className=\"border rounded p-3 bg-white\">\r\n              {\" \"}\r\n              <Form.Item name=\"profile_pic\">\r\n                <Upload\r\n                  name=\"avatar\"\r\n                  disabled\r\n                  listType=\"picture-card\"\r\n                  className=\"avatar-uploader\"\r\n                  showUploadList={false}\r\n                  beforeUpload={() => false}\r\n                  maxCount={1}\r\n                  onChange={handleChange}\r\n                  accept='image/*'\r\n                >\r\n                  {imageUrl ? (\r\n                    <img\r\n                      src={imageUrl}\r\n                      alt=\"avatar\"\r\n                      style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    uploadButton\r\n                  )}\r\n                </Upload>\r\n              </Form.Item>\r\n              <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                <div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    name=\"name\"\r\n                    label=\"Admin Name\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: \"Please enter Admin Name\",\r\n                      }\r\n                    ]}\r\n                  >\r\n                    <Input disabled />\r\n                  </Form.Item>\r\n                </div>\r\n                <div style={{ width: \"45%\" }}>\r\n\r\n                  {/* <Form.Item\r\n                                        name=\"workshop_user_name\"\r\n                                        label=\"Workshop User name\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please enter full name\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Workshop User name\" />\r\n                                    </Form.Item> */}\r\n                </div>\r\n              </div>\r\n              <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                <div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    name=\"email\"\r\n                    label=\"Email Id\"\r\n                    rules={[\r\n                      { required: true, message: \"Please enter Email Id\" },\r\n                    ]}\r\n                  >\r\n                    <Input disabled style={{ width: \"100%\" }} placeholder=\"Email Id\" />\r\n                  </Form.Item>\r\n                </div>\r\n                <div style={{ width: \"45%\" }}>\r\n\r\n                  {/* <Form.Item\r\n                                        name=\"workshop_user_name\"\r\n                                        label=\"Workshop User name\"\r\n                                        rules={[\r\n                                            { required: true, message: \"Please enter full name\" },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder=\"Workshop User name\" />\r\n                                    </Form.Item> */}\r\n                  <div></div>\r\n                  <Form.Item\r\n                    name=\"phone_no\"\r\n                    label=\"Phone Number\"\r\n                    rules={[\r\n                      { required: true, message: \"Please enter Full Name\" },\r\n                    ]}\r\n                  >\r\n                    <Input disabled\r\n                      addonBefore={\r\n                        <PhoneCode value={countryCode} onChange={(e) => {\r\n                          setCountryCode(e)\r\n                      }\r\n                      } />\r\n                      }\r\n                      style={{ width: \"100%\" }}\r\n                      placeholder=\"Phone number\"\r\n                    />\r\n                  </Form.Item>\r\n                </div>\r\n              </div>\r\n              <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                <div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    name=\"nric_fin_number\"\r\n                    label=\"NRIC/FIN\"\r\n                    rules={[\r\n                      { required: false, message: \"Please enter NRIC/FIN\" },\r\n                    ]}\r\n                  >\r\n                    <Input disabled style={{ width: \"100%\" }} placeholder=\"NRIC/FIN\" />\r\n                  </Form.Item>\r\n                </div>\r\n                <div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    name=\"dob\"\r\n                    label=\"Date of Birth\"\r\n                    rules={[{ required: true, message: \"Please enter DOB\" }]}\r\n                  >\r\n                    <DatePicker disabled\r\n                      placeholder=\"Date of birth\"\r\n                      style={{ width: \"100%\" }}\r\n                    />\r\n                  </Form.Item>\r\n                </div>\r\n              </div>\r\n              <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                <div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    name=\"gender\"\r\n                    label=\"Gender\"\r\n                    rules={[\r\n                      { required: true, message: \"Please select gender.\" },\r\n                    ]}\r\n                  >\r\n                    <Radio.Group disabled>\r\n                      <Radio value={\"1\"}>Male</Radio>\r\n                      <Radio value={\"2\"}>Female</Radio>\r\n                    </Radio.Group>\r\n                  </Form.Item>\r\n                </div>\r\n                <div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    name=\"role_id\"\r\n                    label=\"Role\"\r\n                    rules={[\r\n                      { required: true, message: \"Please select role.\" },\r\n                    ]}\r\n                  >\r\n                    <Radio.Group disabled>\r\n                      <Radio value={7}>Admin</Radio>\r\n                      <Radio value={8}>Manager</Radio>\r\n                      <Radio value={9}>User</Radio>\r\n                    </Radio.Group>\r\n                  </Form.Item>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </Form>\r\n        </TabPane>\r\n        <TabPane\r\n\r\n          tab={\r\n            <div className=\"d-flex justify-content-center\">\r\n              <LocationIcon /> <span className=\"ml-2\">Address Details</span>\r\n            </div>\r\n          }\r\n          key=\"2\"\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            // onFinish={onFinish}\r\n            // onFinishFailed={onFinishFailed}\r\n            form={form2}\r\n            name=\"control-hooks\"\r\n          >\r\n            <div className=\"border rounded p-3 bg-white\">\r\n\r\n              <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                <div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    label={'Postal Code'}\r\n                    name=\"postal_code\"\r\n                    rules={[{ required: true, message: 'Please enter the postal code!' }]}\r\n                  >\r\n                    <Input disabled placeholder=\"Postal Code\" style={{ width: '100%' }} />\r\n                  </Form.Item>\r\n                </div><div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    label={'Block Number'}\r\n                    name=\"block_number\"\r\n                    rules={[{ required: true, message: 'Please enter the block number!' }]}\r\n                  >\r\n                    <InputNumber disabled placeholder=\"Block Number\" style={{ width: '100%' }} />\r\n                  </Form.Item>\r\n                </div>\r\n              </div>\r\n              <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                <div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    label={'Street Number'}\r\n                    name=\"street_number\"\r\n                    rules={[{ required: true, message: 'Please enter the street number!' }]}\r\n                  >\r\n                    <Input disabled placeholder=\"Street Number\" style={{ width: '100%' }} />\r\n                  </Form.Item>\r\n                </div><div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    label={'Unit Number'}\r\n                    name=\"unit_number\"\r\n                    rules={[{ required: true, message: 'Please enter the unit number!' }, {\r\n                                    pattern: new RegExp(/^[0-9\\b]+$/),\r\n                                    message: \"Please enter valid unit number\",\r\n                                  }]}\r\n                  >\r\n                    <Input disabled placeholder='Unit Number' style={{ width: '100%' }} />\r\n                  </Form.Item>\r\n                </div>\r\n              </div>\r\n              <div style={{ gap: \"60px\" }} className=\"d-flex \">\r\n                <div style={{ width: \"45%\" }}>\r\n\r\n                  <Form.Item\r\n                    label={'Level Number'}\r\n                    name=\"level_number\"\r\n                    rules={[{ required: true, message: 'Please enter the level number!' }]}\r\n                  >\r\n                    <Input disabled placeholder=\"Level Number\" style={{ width: '100%' }} />\r\n                  </Form.Item>\r\n                </div><div style={{ width: \"45%\" }}>\r\n                  <Form.Item\r\n                    label={'Country'}\r\n                    name=\"country\"\r\n                    rules={[{ required: true, message: 'Please select a country!' }]}\r\n                  >\r\n                    <CountrySelector/>\r\n                  </Form.Item>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Form>\r\n        </TabPane>\r\n        <TabPane\r\n\r\n          tab={\r\n            <div className=\"d-flex justify-content-center\">\r\n              <UploadDocument />{\" \"}\r\n              <span className=\"ml-2\">Upload Documents</span>\r\n            </div>\r\n          }\r\n          key=\"3\"\r\n        >\r\n          <div className=\"border bg-white rounded p-3 mt-4\">\r\n            <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"64\"\r\n                height=\"64\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 64 64\"\r\n              >\r\n                <path\r\n                  fill={\"#3CA6C1\"}\r\n                  d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n                ></path>\r\n                <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n                <path\r\n                  fill={\"#3CA6C1\"}\r\n                  d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n                ></path>\r\n                <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n                <path\r\n                  fill={\"#3CA6C1\"}\r\n                  d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n                ></path>\r\n                <path\r\n                  fill=\"#F7FCFF\"\r\n                  d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n                ></path>\r\n                <path\r\n                  fill=\"#D7E6EF\"\r\n                  d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n                ></path>\r\n                <path\r\n                  fill=\"#44394A\"\r\n                  d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n                ></path>\r\n              </svg>\r\n              <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n              <h5 className=\"mb-0\">Or</h5>\r\n              <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n                Choosen File\r\n              </h5>\r\n              {/* <input\r\n                style={styles.uploadFile}\r\n                className=\"uploadFile\"\r\n                type=\"file\"\r\n                multiple\r\n                onChange={handleFileSelect}\r\n              /> */}\r\n            </div>\r\n            <div className=\"mt-4\">\r\n              {selectedFiles.length > 0 && (\r\n                <ul className=\"p-0\" style={{ width: \"40%\" }}>\r\n                  {selectedFiles.map((file, i) => (\r\n                    <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                      {\" \"}\r\n                      <div className=\"d-flex align-items-center\">\r\n                        <UploadFileIcon />{\" \"}\r\n                        <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                        {/* <span className=\"ml-5\">\r\n                          {file.url ? (<EyeOutlined style={{ cursor: \"pointer\" }} onClick={() => window.open(file.url)} />) : null}\r\n                        </span> */}\r\n                      </div>\r\n                      <div>\r\n                        {\r\n                          file.url && <span className=\"ml-3 \" style={{\r\n                            cursor: \"pointer\"\r\n                          }} onClick={() => {\r\n                            window.open(file.url, '_blank')\r\n                          }}>\r\n                            <EyeOutlined />\r\n                          </span>\r\n                        }\r\n                        {/* <span\r\n                          style={{ cursor: \"pointer\" }}\r\n                          onClick={() => delUplFile(i)}\r\n                        >\r\n                          {\" \"}\r\n                          <CloseCircleOutlined />{\" \"}\r\n                        </span> */}\r\n                      </div>\r\n                      {/* <span\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() => delUplFile(i)}\r\n                      >\r\n                        {\" \"}\r\n                        <CloseCircleOutlined />{\" \"}\r\n                      </span> */}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </TabPane>\r\n        <TabPane\r\n          //   disabled={true}\r\n          tab={\r\n            <div className=\"d-flex justify-content-center\">\r\n              <UploadDocument /> <span className=\"ml-2\">Access</span>\r\n            </div>\r\n          }\r\n          key=\"4\"\r\n        >\r\n          <div className=\"border bg-white rounded p-3\">\r\n            {/* Tabs for Web App and Mobile App */}\r\n            <Tabs defaultActiveKey=\"1\">\r\n              {/* Web App Tab */}\r\n              <TabPane\r\n                tab={\r\n                  <div className=\"d-flex align-items-center justify-content-center\" style={{ gap: '5px' }}>\r\n                    Web App\r\n                  </div>\r\n                }\r\n                key=\"1\"\r\n              >\r\n                {/* Global Web App Select All Controls */}\r\n                <Row justify=\"end\" style={{ marginBottom: '16px' }}>\r\n                  <Col>\r\n                    <Button.Group size=\"small\">\r\n                      <Button onClick={() => handleWebAppGlobalSelectAll(true)}>Select All</Button>\r\n                      <Button onClick={() => handleWebAppGlobalSelectAll(false)}>Deselect All</Button>\r\n                    </Button.Group>\r\n                  </Col>\r\n                </Row>\r\n                <Row gutter={[16, 24]}>\r\n                  {/* Order Management */}\r\n                  <Col span={6}>\r\n                    <div\r\n                      style={{\r\n                        border: \"1px solid #d9d9d9\",\r\n                        borderRadius: \"8px\",\r\n                        padding: \"20px\",\r\n                        minHeight: '300px'\r\n                      }}\r\n                    >\r\n                      <Row justify=\"space-between\" align=\"middle\">\r\n                        <Title level={5}>Order Management</Title>\r\n                      </Row>\r\n                      <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                        <Col>\r\n                          <Button.Group size=\"small\">\r\n                            <Button onClick={() => handleOrderManagementSelectAll(true)}>All</Button>\r\n                            <Button onClick={() => handleOrderManagementSelectAll(false)}>None</Button>\r\n                          </Button.Group>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row justify=\"space-between\" align=\"middle\">\r\n                        {/* <Switch\r\n                          checked={orderManagement}\r\n                          onChange={(checked) => {\r\n                            setOrderManagement(checked)\r\n                            if(checked){\r\n                              setOrderManagementCheck((previos) => {\r\n                                return previos.map((elm) => {\r\n                                  return {\r\n                                    ...elm,\r\n                                    check: true\r\n                                  }\r\n                                })\r\n                              })\r\n                            }else{\r\n                              setOrderManagementCheck((previos) => {\r\n                                return previos.map((elm) => {\r\n                                  return {\r\n                                    ...elm,\r\n                                    check: false\r\n                                  }\r\n                                })\r\n                              })\r\n                            }\r\n                          }}\r\n                        /> */}\r\n                      </Row>\r\n                      <Divider />\r\n                      <div className=\"d-flex flex-column\">\r\n                        {orderManagementCheck.map((element, index) => \r\n                          renderPermissionCheckbox(element, index, 'order_management', setOrderManagementCheck)\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  {/* Inquiry Management */}\r\n                  <Col span={6}>\r\n                    <div\r\n                      style={{\r\n                        border: \"1px solid #d9d9d9\",\r\n                        borderRadius: \"8px\",\r\n                        padding: \"20px\",\r\n                        minHeight: '300px'\r\n                      }}\r\n                    >\r\n                      <Row justify=\"space-between\" align=\"middle\">\r\n                        <Title level={5}>Inquiry Management</Title>\r\n                      </Row>\r\n                      <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                        <Col>\r\n                          <Button.Group size=\"small\">\r\n                            <Button onClick={() => handleInquiryManagementSelectAll(true)}>All</Button>\r\n                            <Button onClick={() => handleInquiryManagementSelectAll(false)}>None</Button>\r\n                          </Button.Group>\r\n                        </Col>\r\n                      </Row>\r\n                      <Divider />\r\n                      <div className=\"d-flex flex-column\">\r\n                        {InquirymanagementCheck.map((element, index) => \r\n                          renderPermissionCheckbox(element, index, 'inquiry_management', setInquirymanagementCheck)\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  {/* Job Sites */}\r\n                  <Col span={6}>\r\n                    <div\r\n                      style={{\r\n                        border: \"1px solid #d9d9d9\",\r\n                        borderRadius: \"8px\",\r\n                        padding: \"20px\",\r\n                        minHeight: '300px'\r\n                      }}\r\n                    >\r\n                      <Row justify=\"space-between\" align=\"middle\">\r\n                        <Title level={5}>Job Sites</Title>\r\n                      </Row>\r\n                      <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                        <Col>\r\n                          <Button.Group size=\"small\">\r\n                            <Button onClick={() => handleJobSitesSelectAll(true)}>All</Button>\r\n                            <Button onClick={() => handleJobSitesSelectAll(false)}>None</Button>\r\n                          </Button.Group>\r\n                        </Col>\r\n                      </Row>\r\n                      <Divider />\r\n                      <div className=\"d-flex flex-column\">\r\n                        {jobSitesCheck.map((element, index) => \r\n                          renderPermissionCheckbox(element, index, 'job_sites', setJobSitesCheck)\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  {/* Machines and Sensors */}\r\n                  <Col span={6}>\r\n                    <div\r\n                      style={{\r\n                        border: \"1px solid #d9d9d9\",\r\n                        borderRadius: \"8px\",\r\n                        padding: \"20px\",\r\n                        minHeight: '300px'\r\n                      }}\r\n                    >\r\n                      <Row justify=\"space-between\" align=\"middle\">\r\n                        <Title level={5}>Machines and Sensors</Title>\r\n                      </Row>\r\n                      <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                        <Col>\r\n                          <Button.Group size=\"small\">\r\n                            <Button onClick={() => handleMachinesAndSensorsSelectAll(true)}>All</Button>\r\n                            <Button onClick={() => handleMachinesAndSensorsSelectAll(false)}>None</Button>\r\n                          </Button.Group>\r\n                        </Col>\r\n                      </Row>\r\n                      <Divider />\r\n                      <div className=\"d-flex flex-column\">\r\n                        {machinesAndSensorsCheck.map((element, index) => \r\n                          renderPermissionCheckbox(element, index, 'machines_and_sensors', setMachinesAndSensorsCheck)\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  {/* Operational Areas - NEW */}\r\n                  <Col span={6}>\r\n                      <div\r\n                          style={{\r\n                              border: \"1px solid #d9d9d9\",\r\n                              borderRadius: \"8px\",\r\n                              padding: \"20px\",\r\n                              minHeight: '300px'\r\n                          }}\r\n                      >\r\n                          <Row justify=\"space-between\" align=\"middle\">\r\n                              <Title level={5}>Operational Areas</Title>\r\n                          </Row>\r\n                          <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                              <Col>\r\n                                  <Button.Group size=\"small\">\r\n                                      <Button onClick={() => handleOperationalAreasSelectAll(true)}>All</Button>\r\n                                      <Button onClick={() => handleOperationalAreasSelectAll(false)}>None</Button>\r\n                                  </Button.Group>\r\n                              </Col>\r\n                          </Row>\r\n                          <Divider />\r\n                          <div className=\"d-flex flex-column\">\r\n                              {operationalAreasCheck.map((element, index) => \r\n                                  renderPermissionCheckbox(element, index, 'operational_areas', setOperationalAreasCheck)\r\n                              )}\r\n                          </div>\r\n                      </div>\r\n                  </Col>\r\n\r\n                  {/* User Management */}\r\n                  <Col span={6}>\r\n                      <div\r\n                          style={{\r\n                              border: \"1px solid #d9d9d9\",\r\n                              borderRadius: \"8px\",\r\n                              padding: \"20px\",\r\n                              minHeight: '300px'\r\n                          }}\r\n                      >\r\n                          <Row justify=\"space-between\" align=\"middle\">\r\n                              <Title level={5}>User Management</Title>\r\n                          </Row>\r\n                          <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                              <Col>\r\n                                  <Button.Group size=\"small\">\r\n                                      <Button onClick={() => handleUserManagementSelectAll(true)}>All</Button>\r\n                                      <Button onClick={() => handleUserManagementSelectAll(false)}>None</Button>\r\n                                  </Button.Group>\r\n                              </Col>\r\n                          </Row>\r\n                          <Divider />\r\n                          <div className=\"d-flex flex-column\">\r\n                              {userManagementCheck.map((element, index) => \r\n                                  renderPermissionCheckbox(element, index, 'user_management', setUserManagementCheck)\r\n                              )}\r\n                          </div>\r\n                      </div>\r\n                  </Col>\r\n\r\n                  {/* Technician Management */}\r\n                  <Col span={6}>\r\n                      <div\r\n                          style={{\r\n                              border: \"1px solid #d9d9d9\",\r\n                              borderRadius: \"8px\",\r\n                              padding: \"20px\",\r\n                              minHeight: '300px'\r\n                          }}\r\n                      >\r\n                          <Row justify=\"space-between\" align=\"middle\">\r\n                              <Title level={5}>Technician Management</Title>\r\n                          </Row>\r\n                          <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '8px' }}>\r\n                              <Col>\r\n                                  <Button.Group size=\"small\">\r\n                                      <Button onClick={() => handleTechnicianManagementSelectAll(true)}>All</Button>\r\n                                      <Button onClick={() => handleTechnicianManagementSelectAll(false)}>None</Button>\r\n                                  </Button.Group>\r\n                              </Col>\r\n                          </Row>\r\n                          <Divider />\r\n                          <div className=\"d-flex flex-column\">\r\n                              {technicianManagementCheck.map((element, index) => \r\n                                  renderPermissionCheckbox(element, index, 'technician_management', setTechnicianManagementCheck)\r\n                              )}\r\n                          </div>\r\n                      </div>\r\n                  </Col>\r\n              </Row>\r\n              </TabPane>\r\n\r\n              {/* Mobile App Tab */}\r\n              <TabPane\r\n                tab={\r\n                  <div className=\"d-flex align-items-center justify-content-center\" style={{ gap: '5px' }}>\r\n                    Mobile App\r\n                  </div>\r\n                }\r\n                key=\"2\"\r\n              >\r\n                {/* Global Mobile App Select All Controls */}\r\n                <Row justify=\"end\" style={{ marginBottom: '16px' }}>\r\n                  <Col>\r\n                    <Button.Group size=\"small\">\r\n                      <Button onClick={() => handleMobileAppSelectAll(true)}>Select All</Button>\r\n                      <Button onClick={() => handleMobileAppSelectAll(false)}>Deselect All</Button>\r\n                    </Button.Group>\r\n                  </Col>\r\n                </Row>\r\n                <Row gutter={[24, 24]} style={{ padding: '20px' }}>\r\n                  {dataMobileAppPer.map((item) => (\r\n                    <Col xs={24} sm={12} key={item.key}>\r\n                      {/* <SwitchCard title={item.title}\r\n                       \r\n                      /> */}\r\n                      <Card>\r\n                        <div  style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between'\r\n                      }}>\r\n                        <div>\r\n                          {item.title}\r\n                        </div>\r\n                        <div>\r\n                          <Switch\r\n                             checked={item.check}\r\n                             onChange={(checked) => {\r\n                               console.log(checked);\r\n                               setDataMobileAppPer((prev)=>{\r\n                                 return prev.map((elm)=>{\r\n                                   if(elm.key === item.key){\r\n                                     return {\r\n                                       ...elm,\r\n                                       check: checked\r\n                                     }\r\n                                   }else{\r\n                                     return elm\r\n                                   }\r\n                                 })\r\n                               })\r\n     \r\n                             }}\r\n                          />\r\n                        </div>\r\n                        </div>\r\n                      </Card>\r\n                    </Col>\r\n                  ))}\r\n                </Row>\r\n              </TabPane>\r\n            </Tabs>\r\n          </div>\r\n        </TabPane>\r\n        <TabPane \r\n          tab={\r\n            <div className=\"d-flex justify-content-center\">\r\n            <LocationIcon2 />{\" \"}\r\n            <span className=\"ml-2\">Jobsite</span>\r\n          </div>\r\n          }>  \r\n          <Card>\r\n            <div style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              gap:\"10px\"\r\n            }}>\r\n              <Select\r\n                onChange={(val) => {\r\n                  console.log(val);\r\n                  setJobSite(val)\r\n                }}\r\n                value={jobsite}\r\n              placeholder=\"Select Jobsite\" style={{\r\n                flex:1\r\n              }}>\r\n                {/* <Option value=\"1\">Select Jobsite</Option> */}\r\n                {\r\n                  unassignedJobSite.map((item) => {\r\n                    return <Option value={item.id}>{item.jobsite_name}</Option>\r\n                  })\r\n                }\r\n              </Select>\r\n              <Button\r\n                type=\"primary\"\r\n                onClick={()=>{\r\n                  onFinishSubmit()\r\n                }}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </div>\r\n            <Table dataSource={assignedJobSite} columns={column} />\r\n          </Card>\r\n\r\n          </TabPane>\r\n      </Tabs>\r\n      <Form.Item>\r\n        <div\r\n          style={{ gap: \"10px\" }}\r\n          className=\"mt-5 d-flex justify-content-end\"\r\n        >\r\n          {/* <Button\r\n            className=\"px-4 font-weight-semibold\"\r\n            htmlType=\"button\"\r\n            onClick={handleBackClick}\r\n          >\r\n            Back\r\n          </Button> */}\r\n         \r\n          {\r\n            activeTab==\"4\" &&\r\n            <Button\r\n            className=\"px-4 bg-primary font-weight-semibold text-white bg-info\"\r\n            htmlType=\"submit\"\r\n            onClick={() => {\r\n              onFinish();\r\n            }}\r\n          >\r\n            Save\r\n          </Button>}\r\n        </div>\r\n      </Form.Item>\r\n\r\n      <Modal\r\n        width={600}\r\n        footer={null}\r\n        visible={deactiveModalOpen}\r\n        onOk={DeactiveHandleOk}\r\n        onCancel={() => setIsDeactiveModalOpen(false)}\r\n      >\r\n        <div className=\"d-flex my-3 flex-column w-75\">\r\n          <h4 className=\"mb-4\">Sure you want to deactivate staff?</h4>\r\n          <h5>Staff ID #TC-1234 will be deleted from system</h5>\r\n        </div>\r\n        <div\r\n          style={{ gap: \"10px\" }}\r\n          className=\"mt-5 d-flex justify-content-end\"\r\n        >\r\n          <Button\r\n            className=\"px-4 font-weight-semibold\"\r\n            onClick={() => setIsDeactiveModalOpen(false)}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            className=\"px-4 font-weight-semibold text-white bg-info\"\r\n            onClick={() => {\r\n              if (mainStatus === \"Inactive\") {\r\n                sendStatus(\"Active\");\r\n              } else {\r\n                sendStatus(\"Inactive\");\r\n              }\r\n              setIsDeactiveModalOpen(false);\r\n              setSuccesmodaltext({\r\n                title: \"Staff Deactivated\",\r\n                text: \"Staff ID #TC-1234 deleted.\",\r\n              });\r\n              setSuccessModal(true);\r\n            }}\r\n          >\r\n            Yes, confirm\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        width={600}\r\n        footer={null}\r\n        visible={isChangeStudModalOpen}\r\n        onOk={changeStudHandleOk}\r\n        onCancel={() => setIsChangeStudModalOpen(false)}\r\n      >\r\n        <div className=\"d-flex my-3 flex-column w-75\">\r\n          <h4 className=\"mb-4\">Change Employee Status</h4>\r\n          <h5>Working Status</h5>\r\n          <Select\r\n            placeholder=\"Select\"\r\n            optionFilterProp=\"children\"\r\n            value={statu}\r\n            onChange={(val) => setStatu(val)}\r\n            filterOption={(input, option) =>\r\n              (option?.label ?? \"\").toLowerCase().includes(input.toLowerCase())\r\n            }\r\n            options={[\r\n              {\r\n                value: \"Active\",\r\n                label: \"Active\",\r\n              },\r\n              {\r\n                value: \"Inactive\",\r\n                label: \"Inactive\",\r\n              },\r\n              // {\r\n              //   value: \"terminated\",\r\n              //   label: \"Terminated\",\r\n              // },\r\n              // {\r\n              //   value: \"Contract_end\",\r\n              //   label: \"Contract end\",\r\n              // },\r\n            ]}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{ gap: \"10px\" }}\r\n          className=\"mt-5 d-flex justify-content-end\"\r\n        >\r\n          <Button\r\n            className=\"px-4 font-weight-semibold\"\r\n            onClick={() => setIsChangeStudModalOpen(false)}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            className=\"px-4 font-weight-semibold text-white bg-info\"\r\n            onClick={() => {\r\n              if (statu === \"\") {\r\n                message.error(`Please select status first !`);\r\n                return;\r\n              }\r\n              sendStatus(statu);\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        width={500}\r\n        footer={null}\r\n        visible={successModal}\r\n        onOk={successOk}\r\n        onCancel={successCancel}\r\n      >\r\n        <div className=\"d-flex my-3 align-items-center flex-column justify-content-center\">\r\n          {/* <CustomIcon svg={Verified} /> */}\r\n          <svg\r\n            width=\"65\"\r\n            height=\"64\"\r\n            viewBox=\"0 0 65 64\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M32.5 0C37.4636 0 42.1609 1.13082 46.358 3.14781C44.64 4.50697 43.0471 5.81176 41.5629 7.06762C38.7358 6.04009 35.6859 5.48012 32.5054 5.48012C25.1823 5.48012 18.5496 8.44852 13.7545 13.2491C8.95396 18.0496 5.98556 24.6769 5.98556 32C5.98556 39.3231 8.95396 45.9504 13.7545 50.7509C18.555 55.5515 25.1823 58.5199 32.5054 58.5199C39.8286 58.5199 46.4613 55.5515 51.2564 50.7509C56.0569 45.9504 59.0253 39.3231 59.0253 32C59.0253 30.2603 58.8568 28.5532 58.536 26.9059C59.9115 25.1118 61.3196 23.3231 62.7603 21.5508C63.8911 24.8236 64.5054 28.3411 64.5054 32C64.5054 40.8345 60.9227 48.8372 55.1327 54.6273C49.3427 60.4173 41.34 64 32.5054 64C23.6709 64 15.6682 60.4173 9.87819 54.6273C4.08274 48.8372 0.5 40.8345 0.5 32C0.5 23.1655 4.08274 15.1628 9.87275 9.37275C15.6628 3.58274 23.6655 0 32.5 0ZM17.5928 26.7428L25.3998 26.6395L25.9815 26.7917C27.5581 27.6996 29.0423 28.738 30.4286 29.9123C31.429 30.7604 32.3858 31.6847 33.2938 32.685C36.0936 28.178 39.0783 24.0408 42.2316 20.2351C45.6838 16.0652 49.3481 12.2813 53.1973 8.82909L53.9584 8.53551H62.4776L60.7596 10.4438C55.4806 16.3099 50.691 22.3717 46.3634 28.6239C42.0359 34.8814 38.165 41.3401 34.7236 47.9891L33.6526 50.055L32.6685 47.9511C30.8527 44.053 28.6781 40.4757 26.0848 37.279C23.4915 34.0822 20.4742 31.2443 16.9567 28.8304L17.5928 26.7428Z\"\r\n              fill=\"#00AB6F\"\r\n            />\r\n          </svg>\r\n          <h3 className=\"font-weight-bold mt-4\">{succesmodaltext.title}</h3>\r\n          <span className=\"text-center font-size-sm w-75 font-weight-semibold\">\r\n            {succesmodaltext.text}\r\n          </span>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/index.js",["1126","1127","1128","1129","1130","1131","1132","1133","1134"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  Space,\r\n  Avatar,\r\n  Dropdown,\r\n  Menu,\r\n  Input,\r\n  Button,\r\n  Popconfirm,\r\n  message,\r\n  Select,\r\n  Card,\r\n  Empty,\r\n  Checkbox,\r\n} from \"antd\";\r\nimport {\r\n  DeleteOutlined,\r\n  EditOutlined,\r\n  EyeOutlined,\r\n  MoreOutlined,\r\n  SearchOutlined,\r\n  ToolOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { CsvIcon } from \"assets/svg/icon\";\r\nimport Icon from \"@ant-design/icons/lib/components/Icon\";\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom\";\r\nimport { axiosInstance } from \"App\";\r\nimport moment from \"moment\";\r\nimport CardMachine from \"./Card/CardMachine\";\r\nimport SubMenu from \"antd/lib/menu/SubMenu\";\r\nimport { hasPermission } from 'utils/permissionUtils';\r\n\r\nconst MachineAndSensor = () => {\r\n  const history = useHistory();\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n   \r\n\r\n    fetchData();\r\n  }, []);\r\n  const fetchData = async (health = \"\", overall = \"\") => {\r\n    let params = [];\r\n\r\n    if (health !== \"\" && health !== \"all\") {\r\n      params.push(`health=${health}`);\r\n    }\r\n\r\n    if (overall !== \"\" && overall !== \"all\") {\r\n      params.push(`machine_status=${overall}`);\r\n    }\r\n\r\n   \r\n    let url = params.length ? `&${params.join(\"&\")}` : \"\";\r\n    try {\r\n      const response = await axiosInstance.get(`api/web/machines?customer_id=${localStorage.getItem(\"parent_id\")!=\"null\"? localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}${url}`);\r\n      if (response.status === 200) {\r\n        const responseData = response.data.items;\r\n        if (Array.isArray(responseData)) {\r\n          setData(responseData);\r\n        } else {\r\n          console.error(\"Unexpected response format:\", responseData);\r\n        }\r\n        // console.log(JSON.stringify(responseData));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const deleteRow = async (id) => {\r\n    console.log(id);\r\n    try {\r\n      const response = await axiosInstance.delete(\r\n        `api/admin/machines/${id}`\r\n      );\r\n      if (response.status === 200) {\r\n        message.success(\"Machine deleted successfully\");\r\n        setData((prevData) => prevData.filter((item) => item.id !== id));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting row:\", error);\r\n    }\r\n  };\r\n\r\n  const getMenu = (record) => (\r\n    <Menu>\r\n      <Menu.Item\r\n        key=\"edit\"\r\n        onClick={() =>\r\n          history.push(`/app/machine-and-sensors/machine-details/${record.id}`)\r\n        }\r\n      >\r\n        <EyeOutlined /> View Details\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key=\"viewSensors\"\r\n        onClick={() =>\r\n          history.push(`/app/machine-and-sensors/sensor-list/${record.id}`)\r\n        }\r\n      >\r\n        <EyeOutlined /> View Sensors\r\n      </Menu.Item>\r\n      {hasPermission('machines_and_sensors', 'Edit Machines and Sensors') && (\r\n        <Menu.Item\r\n          key=\"edit-machine\"\r\n          onClick={() =>\r\n            history.push(`/app/machine-and-sensors/edit/${record.id}`)\r\n          }\r\n        >\r\n          <EditOutlined /> Edit Details\r\n        </Menu.Item>\r\n      )}\r\n      {hasPermission('machines_and_sensors', 'Delete Machines and Sensors') && (\r\n        <Popconfirm\r\n          title={\"Are you sure you want to delete this item?\"}\r\n          description={\"This action cannot be undone.\"}\r\n          okText=\"Yes\"\r\n          cancelText=\"No\"\r\n          onConfirm={() => deleteRow(record.id)}\r\n        >\r\n          <Menu.Item key=\"delete\">\r\n            <span style={{ display: \"flex\", gap: \"8px\", alignItems: \"center\" }}>\r\n              <DeleteOutlined /> Delete\r\n            </span>\r\n          </Menu.Item>\r\n        </Popconfirm>\r\n      )}\r\n    </Menu>\r\n  );\r\n\r\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\r\n  const [overallStatus, setOverallStatus] = useState(\"all\");\r\n\r\n  const FilterMenu = (\r\n    <Menu mode=\"horizontal\">\r\n      {/* Status Filter */}\r\n      <SubMenu key=\"status\" title=\"Health Status\">\r\n        <Menu.Item key=\"status-all\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'all'}\r\n            onChange={() => {\r\n              setSelectedStatus('all');\r\n              fetchData(\"all\", overallStatus);\r\n            }}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        {/* Satisfactory, Warning ya Critical */}\r\n        <Menu.Item key=\"status-good\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'Good'}\r\n            onChange={() => {\r\n              setSelectedStatus('Good');\r\n              fetchData('Good', overallStatus);\r\n            }}\r\n          >\r\n            Good\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-satisfactory\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'Satisfactory'}\r\n            onChange={() => {\r\n              setSelectedStatus('Satisfactory');\r\n              fetchData('Satisfactory', overallStatus);\r\n            }}\r\n          >\r\n            Satisfactory\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-warning\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'Warning'}\r\n            onChange={() => {\r\n              setSelectedStatus('Warning');\r\n              fetchData('Warning', overallStatus);\r\n            }}\r\n          >\r\n            Warning\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"status-critical\">\r\n          <Checkbox\r\n            checked={selectedStatus === 'Critical'}\r\n            onChange={() => {\r\n              setSelectedStatus('Critical');\r\n              fetchData('Critical', overallStatus);\r\n            }}\r\n          >\r\n            Critical\r\n          </Checkbox>\r\n        </Menu.Item>\r\n      </SubMenu>\r\n\r\n      {/* Overall Status Filter */}\r\n      <SubMenu key=\"overall\" title=\"Overall Status\">\r\n        <Menu.Item key=\"overall-all\">\r\n          <Checkbox\r\n            checked={overallStatus === 'all'}\r\n            onChange={() => {\r\n              setOverallStatus('all');\r\n              fetchData(selectedStatus, 'all');\r\n            }}\r\n          >\r\n            All\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"overall-active\">\r\n          <Checkbox\r\n            checked={overallStatus === '1'}\r\n            onChange={() => {\r\n              setOverallStatus('1');\r\n              fetchData(selectedStatus, '1');\r\n            }}\r\n          >\r\n            Active\r\n          </Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"overall-inactive\">\r\n          <Checkbox\r\n            checked={overallStatus === '0'}\r\n            onChange={() => {\r\n              setOverallStatus('0');\r\n              fetchData(selectedStatus, '0');\r\n            }}\r\n          >\r\n            Inactive\r\n          </Checkbox>\r\n        </Menu.Item>\r\n\r\n      </SubMenu>\r\n            \r\n    </Menu>\r\n  );\r\n  return (\r\n    <div>\r\n      <h4>\r\n        <ToolOutlined /> Machine & Sensors\r\n      </h4>\r\n      <div className=\"d-flex justify-content-between mb-3\">\r\n        <div style={{ display: \"flex\" }}>\r\n          <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              onChange={(onSearch) => {}}\r\n              style={{ width: 200 }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space>\r\n          <Button\r\n            icon={<Icon component={CsvIcon} />}\r\n            className=\"d-flex align-items-center ml-2\"\r\n          >\r\n            Export\r\n          </Button>\r\n          {/* <Select placeholder=\"Select Area\" style={{ width: 200,margin:\"0 10px\" }} />\r\n          <Select placeholder=\"Select Jobsite\" style={{ width: 200 }} /> */}\r\n        </div>\r\n        {hasPermission('machines_and_sensors', 'Create New Machines and Sensors') && (\r\n          <div className=\"mb-2 d-flex align-items-center\">\r\n            <Button className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\">\r\n              <Link to={\"machine-and-sensors/add-new\"}>+ Add New Machines</Link>\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {\r\n        data.length > 0 ? (\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexWrap: \"wrap\",\r\n              gap: \"20px\",\r\n            }}\r\n          >\r\n            {data.map((item) => (\r\n              <CardMachine key={item.id} data={item} />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <Card>\r\n            <Empty />\r\n          </Card>\r\n        )\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MachineAndSensor;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/index.js",["1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194"],"import {\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  Checkbox,\r\n  DatePicker,\r\n  Divider,\r\n  Empty,\r\n  Input,\r\n  Modal,\r\n  Slider,\r\n  Space,\r\n  Table,\r\n  Tabs,\r\n  Tag,\r\n  Dropdown,\r\n  Menu,\r\n  message\r\n} from \"antd\";\r\nimport {\r\n  AlarmIcon,\r\n  CCTVIcon,\r\n  KW,\r\n  CsvIcon,\r\n  ErrorOutlineIcon,\r\n  ImagesIcon,\r\n  LifeCycleIcon,\r\n  MachineDetailIcon,\r\n  MachineIcon,\r\n  MachineModelIcon,\r\n  RepairReportIcon,\r\n  ReportIcon,\r\n  SensorIcon,\r\n  ServiceReportIcon,\r\n  SetAlarmIcon,\r\n  StepsGreyIcon,\r\n  StepsIcon,\r\n} from \"assets/svg/icon\";\r\nimport AnalysisReport from \"../../../../assets/images/Mask group (1).png\"\r\nimport ReportSerchIcon from \"assets/svg/greenSearch.png\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ProgressBar from \"./Progress\";\r\nimport { Select } from \"antd\";\r\nimport { Popover, Steps } from \"antd\";\r\nimport SeriesImage from \"assets/images/Mask group.png\"\r\nimport {\r\n  UserOutlined,\r\n  SolutionOutlined,\r\n  LoadingOutlined,\r\n  SmileOutlined,\r\n  SearchOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  MoreOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Link, useHistory } from \"react-router-dom/cjs/react-router-dom\";\r\nimport Icon from \"@ant-design/icons/lib/components/Icon\";\r\nimport { axiosInstance } from \"App\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport LineChart from \"components/shared-components/ChartWidget/LineChart\";\r\nimport BarChart from \"components/shared-components/ChartWidget/BarChart\";\r\nimport { API_BASE_URL } from \"constants/ApiConstant\";\r\nimport MachineSensorComponent from \"./MachineSensorComponent\";\r\n\r\nconst { Option } = Select;\r\nconst options = [\r\n  { label: \"Option 1\", value: \"option1\" },\r\n  { label: \"Option 2\", value: \"option2\" },\r\n  { label: \"Option 3\", value: \"option3\" },\r\n];\r\n\r\nconst { Step } = Steps;\r\nconst customDot = (dot, { status, index }) => (\r\n  <Popover\r\n    content={\r\n      <span>\r\n        step {index} status: {status}\r\n      </span>\r\n    }\r\n  >\r\n    {status == \"process\" ? <StepsIcon /> : <StepsGreyIcon />}\r\n    {/* {(status=='process'||status=='finish')?<StepsIcon/>:<StepsGreyIcon/>} */}\r\n  </Popover>\r\n);\r\nconst dataSource1 = [\r\n  {\r\n    key: '1',\r\n    srNo: '1',\r\n    serviceReport: 'Repair',\r\n    dateTime: '2024-03-14 10:00',\r\n    createdBy: 'John Doe',\r\n    report: 'The device was repaired successfully.',\r\n  },\r\n  {\r\n    key: '2',\r\n    srNo: '2',\r\n    serviceReport: 'Maintenance',\r\n    dateTime: '2024-03-14 11:30',\r\n    createdBy: 'Jane Smith',\r\n    report: 'Routine maintenance performed on equipment.',\r\n  },\r\n  {\r\n    key: '3',\r\n    srNo: '3',\r\n    serviceReport: 'Inspection',\r\n    dateTime: '2024-03-14 14:45',\r\n    createdBy: 'Alex Brown',\r\n    report: 'Inspected and identified issues with system.',\r\n  },\r\n];\r\nconst MachineDetails = () => {\r\n  // Check if current user is a free user (role id 5)\r\n  const userRole = parseInt(localStorage.getItem(\"role\"));\r\n  const isFreeUser = userRole === 5;\r\n  \r\n  const [alarmModal, setAlarmModal] = useState(false);\r\n  const [range, setRange] = useState([25, 56]);\r\n  const [generateReportModal, setGenerateReportModal] = useState(false);\r\n  const [repairReportModal, setRepairReportModal] = useState(false)\r\n  const [failureReportModal, setFailureReportModal] = useState(false)\r\n  const [alarmList, setAlarmList] = useState([])\r\n  const { id } = useParams();\r\n  const [machineId, setMachineId] = useState(null);\r\n  const [machineName, setMachineName] = useState(null);\r\n  const [serialNumber, setSerialNumber] = useState(null);\r\n  const [machineModel, setMachineModel] = useState(null);\r\n  const [manufacturer, setManufacturer] = useState(null);\r\n  const [kwHp, setKwHp] = useState(null);\r\n  const [frequency, setFrequency] = useState(null);\r\n  const [rpm, setRpm] = useState(null);\r\n  const [machinePictures, setMachinePictures] = useState([]);\r\n  // const [horizontalData, setHorizontalData] = useState([]);\r\n  const [AnalysisXData, setAnalysisXData] = useState([]);\r\n  const [modalStartDate, setModalStartDate] = useState(null);\r\n  const [modalEndDate, setModalEndDate] = useState(null);\r\n  const [AnalysisYData, setAnalysisYData] = useState([]);\r\n  const [AnalysisZData, setAnalysisZData] = useState([]);\r\n  // const [verticalData, setVerticalData] = useState([]);\r\n  // const [axialData, setAxialData] = useState([]);\r\n\r\n  const [mid_freq_acceleration_p2p_x, setMid_freq_acceleration_p2p_x] = useState([]);\r\n  const [mid_freq_acceleration_p2p_y, setMid_freq_acceleration_p2p_y] = useState([]);\r\n  const [mid_freq_acceleration_p2p_z, setMid_freq_acceleration_p2p_z] = useState([]);\r\n  const [high_freq_acceleration_p2p_x, setHigh_freq_acceleration_p2p_x] = useState([]);\r\n\r\n  const [mid_freq_displacement_x, setMid_freq_displacement_x] = useState([]);\r\n  const [mid_freq_displacement_y, setMid_freq_displacement_y] = useState([]);\r\n  const [mid_freq_displacement_z, setMid_freq_displacement_z] = useState([]);\r\n\r\n\r\n  const [mid_freq_velocity_x, setMid_freq_velocity_x] = useState([]);\r\n  const [mid_freq_velocity_y, setMid_freq_velocity_y] = useState([]);\r\n  const [mid_freq_velocity_z, setMid_freq_velocity_z] = useState([]);\r\n\r\n\r\n  const [mid_freq_env_x, setMid_freq_env_x] = useState([]);\r\n  const [mid_freq_env_y, setMid_freq_env_y] = useState([]);\r\n  const [mid_freq_env_z, setMid_freq_env_z] = useState([]);\r\n\r\n\r\n  const [inclination_x, setInclination_x] = useState([]);\r\n  const [inclination_y, setInclination_y] = useState([]);\r\n  const [inclination_z, setInclination_z] = useState([]);\r\n\r\n\r\n\r\n\r\n  const [tabKey, setTabKey] = useState(\"1\");\r\n\r\n\r\n\r\n\r\n  const history = useHistory();\r\n  const [graphType, setGraphType] = useState(\"mid_freq_displacement\");\r\n  const [motorServiceTemperature, setMotorServiceTemperature] = useState([]);\r\n  const [batteryPercentage, setBatteryPercentage] = useState([]);\r\n  const [batteryVoltage, setBatteryVoltage] = useState([]);\r\n  const [rssi, setRssi] = useState([]);\r\n  const [rawData, setRawData] = useState([]);\r\n  const [dateRangeModal, setDateRangeModal] = useState(false);\r\n  const [selectorDate, setSelectorDate] = useState(\"1\");\r\n  const [eventsData, setEventsData] = useState([])\r\n  const [currentEventsData, setCurrentEventsData] = useState([])\r\n  const [isReportsLoading, setIsReportsLoading] = useState(false)\r\n  const [alarmsPage, setAlarmsPage] = useState(false)\r\n  const [currentStep, setCurrentStep] = useState(0)\r\n  const [data, setData] = useState({});\r\n  const [sensorsData, setSensorsData] = useState([]);\r\n  const [selectedAlarm, setSelectedAlarm] = useState(null)\r\n  const [serviceReportData, setServiceReportData] = useState({\r\n    event_id: null,\r\n    job_reference: false,\r\n    receiving_and_delivery: false,\r\n  })\r\n  const [repairReportData, setRepairReportData] = useState({\r\n    event_id: false,\r\n    job_reference: false,\r\n    receiving_and_delivery: false,\r\n  })\r\n  const [failurePredictionReportData, setFailurePredictionReportData] = useState({\r\n    event_id: false,\r\n    job_reference: false,\r\n    receiving_and_delivery: false,\r\n  })\r\n  const [serviceReportList, setServiceReportList] = useState([])\r\n  const [repairReportList, setRepairReportList] = useState([])\r\n  const [failurePredictionReportList, setFailurePredictionReportList] = useState([])\r\n  const [serviceReportListOriginal, setServiceReportListOriginal] = useState([])\r\n  const [repairReportListOriginal, setRepairReportListOriginal] = useState([])\r\n  const [failurePredictionReportListOriginal, setFailurePredictionReportListOriginal] = useState([])\r\n  const [serviceReportSearch, setServiceReportSearch] = useState([])\r\n  const [repairReportSearch, setRepaireReportSearch] = useState([])\r\n  const [failurePredictionReportSearch, setFailurePredictionReportSearch] = useState([])\r\n  const [start_date, setStartDate] = useState(moment().subtract(1, 'days').format(\"YYYY-MM-DD hh:mm:ss\"))\r\n  const [end_date, setEndDate] = useState(moment().format(\"YYYY-MM-DD hh:mm:ss\"))\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const fetchData = async () => {\r\n    const response = await axiosInstance.get(`api/admin/machines/${id}`);\r\n    const res2 = await axiosInstance.get(`api/admin/machines/${id}/sensors`);\r\n    setSensorsData([...res2.data.items]);\r\n    // setSelectedAlarm(res2.data.items[0]?.sensor_id)\r\n    let tempDeviceId = ''\r\n    if(localStorage.getItem('deviceId')){\r\n      const tempSensor = res2.data.items.find(item => item.sensor_id == localStorage.getItem('deviceId'))\r\n      if(tempSensor){\r\n        setSelectedAlarm(localStorage.getItem('deviceId'))\r\n        tempDeviceId = localStorage.getItem('deviceId')\r\n      }else{\r\n        setSelectedAlarm(res2.data.items[0]?.sensor_id)\r\n        tempDeviceId = res2.data.items[0]?.sensor_id\r\n      }\r\n      localStorage.removeItem('deviceId')\r\n\r\n    }\r\n    else{\r\n      setSelectedAlarm(res2.data.items[0]?.sensor_id)\r\n      tempDeviceId = res2.data.items[0]?.sensor_id\r\n    }\r\n    localStorage.setItem('deviceId2', tempDeviceId)\r\n    let temp_start = ''\r\n    let temp_end = ''\r\n    if(localStorage.getItem('start_date')){\r\n      temp_start = localStorage.getItem('start_date')\r\n      localStorage.removeItem('start_date')\r\n      \r\n    }else{\r\n      temp_start = moment().subtract(1, 'days').format(\"YYYY-MM-DD hh:mm:ss\")\r\n\r\n    }\r\n\r\n    if(localStorage.getItem('end_date')){\r\n      temp_end = localStorage.getItem('end_date')\r\n      localStorage.removeItem('end_date')\r\n    }\r\n    else{\r\n      temp_end = moment().format(\"YYYY-MM-DD hh:mm:ss\")\r\n    }\r\n\r\n    if(localStorage.getItem('dateSelector')){\r\n      setSelectorDate(localStorage.getItem('dateSelector'))\r\n      localStorage.removeItem('dateSelector')\r\n    }\r\n\r\n\r\n    setStartDate(temp_start)\r\n    setEndDate(temp_end)\r\n\r\n    fetchSensorData(tempDeviceId, temp_start, temp_end);\r\n    // fetchSensorData(res2.data.items[0]?.sensor_id, moment().subtract(1, 'days').format(\"YYYY-MM-DD hh:mm:ss\"), moment().format(\"YYYY-MM-DD hh:mm:ss\"));\r\n    const data = response.data.item;\r\n    console.log(data);\r\n    setData(data);\r\n    setMachineId(data.id);\r\n    setMachineName(data.name);\r\n    setSerialNumber(data.serial_no);\r\n    setMachineModel(data.model);\r\n    setManufacturer(data.manufacturer);\r\n    setKwHp(data.kw_hp);\r\n    setFrequency(data.frequency);\r\n    setRpm(data.rpm);\r\n    setMachinePictures(data.pictures);\r\n  }\r\n\r\n  const download = async (sensor_id, start_date, end_date) => {\r\n    if (rawData.length == 0) {\r\n      message.error(\"No data found\")\r\n      return\r\n    }\r\n    let url = `${API_BASE_URL}/api/downloadMultipleRawFilesAndZipAndServe?machine_id=${id}&deviceID=${sensor_id}&start_date=${start_date}&end_date=${end_date}`\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  const fetchSensorData = async (sensor_id, start_date, end_date) => {\r\n    const response = await axiosInstance.get(`api/machine-data?machine_id=${id}&deviceID=${sensor_id}&start_date=${start_date}&end_date=${end_date}`);\r\n    // console.log(response.data);\r\n    const rawData = response.data.data;\r\n    setRawData(rawData);\r\n\r\n    setMid_freq_acceleration_p2p_x(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_acceleration_p2p_x) || 0,\r\n          extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n\r\n    setMid_freq_acceleration_p2p_y(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_acceleration_p2p_y) || 0,\r\n          extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n\r\n    setMid_freq_acceleration_p2p_z(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_acceleration_p2p_z) || 0,\r\n          extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setHigh_freq_acceleration_p2p_x(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.high_freq_acceleration_p2p_z) || 0,\r\n          extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n\r\n    setMid_freq_displacement_x(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_displacement_x) || 0,\r\n          extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n\r\n    setMid_freq_displacement_y(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_displacement_y) || 0,\r\n          extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setMid_freq_displacement_z(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_displacement_z) || 0,\r\n          extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setMid_freq_velocity_x(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_velocity_x) || 0,\r\n          extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setMid_freq_velocity_y(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_velocity_y) || 0,\r\n          extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n\r\n    setMid_freq_velocity_z(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_velocity_z) || 0,\r\n          extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setMid_freq_env_x(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_env_x) || 0,\r\n          extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setMid_freq_env_y(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_env_y) || 0,\r\n          extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setMid_freq_env_z(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.mid_freq_env_z) || 0,\r\n          extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setInclination_x(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.inclination_x) || 0,\r\n          extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setInclination_y(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.inclination_y) || 0,\r\n          extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n    setInclination_z(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.inclination_z) || 0,\r\n          extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n        }\r\n      })\r\n      return data\r\n    })\r\n\r\n\r\n\r\n    // setHorizontalData(() => {\r\n    //   const data = rawData.map((item) => {\r\n    //     return {\r\n    //       x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //       y: item.mid_freq_displacement_x\r\n    //     }\r\n    //   })\r\n    //   return data\r\n    // })\r\n    // setVerticalData(() => {\r\n    //   const data = rawData.map((item) => {\r\n    //     return {\r\n    //       x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //       y: item.mid_freq_displacement_y\r\n    //     }\r\n    //   })\r\n    //   return data\r\n    // })\r\n    // setAxialData(() => {\r\n    //   const data = rawData.map((item) => {\r\n    //     return {\r\n    //       x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //       y: item.mid_freq_displacement_z\r\n    //     }\r\n    //   })\r\n    //   return data\r\n    // })\r\n\r\n\r\n    setMotorServiceTemperature(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.temperature) || 0\r\n        }\r\n      })\r\n      return data\r\n    })\r\n    setBatteryPercentage(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.battery_percentage) || 0\r\n        }\r\n      })\r\n      return data\r\n    })\r\n    setBatteryVoltage(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.battery_voltage) || 0\r\n        }\r\n      })\r\n      return data\r\n    })\r\n    setRssi(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: moment(item.datetime).toDate(),\r\n          y: parseFloat(item.RSSI) || 0\r\n        }\r\n      })\r\n      return data\r\n    })\r\n    setAnalysisXData(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: Number(item.mid_freq_env_x),\r\n          y: item.mid_freq_displacement_x\r\n        }\r\n      })\r\n      return data\r\n    })\r\n    setAnalysisYData(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: Number(item.mid_freq_env_y),\r\n          y: item.mid_freq_displacement_y\r\n        }\r\n      })\r\n      return data\r\n    })\r\n    setAnalysisZData(() => {\r\n      const data = rawData.map((item) => {\r\n        return {\r\n          x: Number(item.mid_freq_env_z),\r\n          y: item.mid_freq_displacement_z\r\n        }\r\n      })\r\n      return data\r\n    })\r\n  }\r\n\r\n  const fetchEventsData = async () => {\r\n    const response = await axiosInstance.get(`api/admin/life-cycle-event/list?machine_id=${id}`);\r\n    // console.log(response.data.items)\r\n    let events_data = response.data.items?.reverse();\r\n    if (events_data) {\r\n      setEventsData(events_data)\r\n    }\r\n  }\r\n\r\n  const fetchReportsData = async () => {\r\n    setIsReportsLoading(true)\r\n    const response = await axiosInstance.get(`api/admin/reports/list?machine_id=${id}`);\r\n    let data = response.data.items;\r\n    // console.log(data)\r\n    let service_arr = [];\r\n    let repair_arr = [];\r\n    let failure_arr = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].report_type == 'Service') {\r\n        data[i] = { ...data[i], srNo: service_arr.length + 1 }\r\n        service_arr.push(data[i])\r\n      }\r\n      if (data[i].report_type == 'Repair') {\r\n        data[i] = { ...data[i], srNo: repair_arr.length + 1 }\r\n        repair_arr.push(data[i])\r\n      }\r\n      if (data[i].report_type == 'Failure Prediction') {\r\n        data[i] = { ...data[i], srNo: failure_arr.length + 1 }\r\n        failure_arr.push(data[i])\r\n      }\r\n    }\r\n\r\n    setServiceReportList(service_arr)\r\n    setServiceReportListOriginal(service_arr)\r\n    setIsReportsLoading(false)\r\n    setRepairReportList(repair_arr)\r\n    setRepairReportListOriginal(repair_arr)\r\n    setIsReportsLoading(false)\r\n    setFailurePredictionReportList(failure_arr)\r\n    setFailurePredictionReportListOriginal(failure_arr)\r\n    setIsReportsLoading(false)\r\n  }\r\n\r\n\r\n  const fetchAlarmsData = async () => {\r\n    const response = await axiosInstance.get(`api/admin/machines/${id}/sensors`);\r\n    let data = response.data.items;\r\n    console.log(data);\r\n    setAlarmList(data);\r\n  }\r\n  const fetchMachineHealthData = async () => {\r\n    const response = await axiosInstance.get(`api/admin/alarms/${id}/show`);\r\n    console.log(response.data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetchEventsData();\r\n    fetchReportsData();\r\n\r\n    // fetchAlarmsData();\r\n    if (localStorage.getItem('tab') == 'analysis') {\r\n      setTabKey(\"7\")\r\n      localStorage.removeItem('tab')\r\n    }\r\n    if(localStorage.getItem(\"tab\")==\"life-cycle\"){\r\n      setTabKey(\"3\")\r\n      localStorage.removeItem(\"tab\")\r\n    }\r\n    if (localStorage.getItem(\"graphType\")) {\r\n      setGraphType(localStorage.getItem(\"graphType\"))\r\n      localStorage.removeItem(\"graphType\")\r\n    }\r\n    // fetchMachineHealthData();\r\n  }, [])\r\n\r\n\r\n  const dataSource = [\r\n    {\r\n      key: \"1\",\r\n      srNo: \"1\",\r\n      sensorId: \"S1001\",\r\n      sensorName: \"Temperature Sensor\",\r\n      location: \"Room A\",\r\n      machineCondition: \"Normal\",\r\n      dateTime: \"2024-03-13 10:00:00\",\r\n    },\r\n    {\r\n      key: \"2\",\r\n      srNo: \"2\",\r\n      sensorId: \"S1002\",\r\n      sensorName: \"Pressure Sensor\",\r\n      location: \"Room B\",\r\n      machineCondition: \"Warning\",\r\n      dateTime: \"2024-03-13 10:05:00\",\r\n    },\r\n    {\r\n      key: \"3\",\r\n      srNo: \"3\",\r\n      sensorId: \"S1003\",\r\n      sensorName: \"Vibration Sensor\",\r\n      location: \"Room C\",\r\n      machineCondition: \"Critical\",\r\n      dateTime: \"2024-03-13 10:10:00\",\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      title: \"ID\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n    },\r\n\r\n    {\r\n      title: \"Sensor ID\",\r\n      dataIndex: \"machineSensor\",\r\n      key: \"sensor_id\",\r\n      render: (machineSensor) => <>{machineSensor.sensor_id}</>,\r\n    },\r\n    {\r\n      title: \"Sensor Name\",\r\n      dataIndex: \"machineSensor\",\r\n      key: \"sensor_name\",\r\n      render: (machineSensor) => <>{machineSensor.sensor_name}</>,\r\n    },\r\n    {\r\n      title: \"Location\",\r\n      dataIndex: \"machineSensor\",\r\n      key: \"sensor_location\",\r\n      render: (machineSensor) => <>{machineSensor.sensor_location}</>,\r\n    },\r\n    {\r\n      title: \"Machine Condition\",\r\n      dataIndex: \"machine_health\",\r\n      key: \"machine_health\",\r\n      // render: (machineCondition) => <>-</>,\r\n      render: (machine_health) => {\r\n        if (machine_health == \"Normal\") {\r\n          return <Tag color=\"green\">{machine_health}</Tag>;\r\n        } else if (machine_health == \"Warning\") {\r\n          return <Tag color=\"orange\">{machine_health}</Tag>;\r\n        } else {\r\n          return <Tag color=\"red\">{machine_health}</Tag>;\r\n        }\r\n      }\r\n      // render: (machineCondition) => <Tag color=\"green\">{machineCondition}</Tag>,\r\n    },\r\n    {\r\n      title: \"Date & Time\",\r\n      dataIndex: \"created_at\",\r\n      key: \"created_at\",\r\n      render: (row) => {\r\n        return <>{moment(row).format('DD-MM-YYYY, h:mm:ss A')}</>\r\n      }\r\n    },\r\n  ];\r\n  const handleFilterChange = (value) => {\r\n    // Handle filter change here\r\n    console.log(\"Selected filter:\", value);\r\n  };\r\n\r\n  const handleAnalysisChange = (e) => {\r\n    setGraphType(e);\r\n    // if (e === 'mid_freq_displacement') {\r\n    //   setHorizontalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_displacement_x\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setVerticalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_displacement_y\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setAxialData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_displacement_z\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n    // } else if (e === 'mid_freq_velocity') {\r\n    //   setHorizontalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_velocity_x\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setVerticalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_velocity_y\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setAxialData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_velocity_z\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n    // } else if (e === 'mid_freq_env') {\r\n    //   setHorizontalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_env_x\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setVerticalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_env_y\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setAxialData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_env_z\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n    // }\r\n    // else if (e === 'inclination') {\r\n    //   setHorizontalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.inclination_x\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setVerticalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.inclination_y\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setAxialData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.inclination_z\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n    // } else if (e === 'mid_freq_acceleration_p2p') {\r\n    //   setHorizontalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_acceleration_p2p_x\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setVerticalData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_acceleration_p2p_y\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n\r\n    //   setAxialData(() => {\r\n    //     const data = rawData.map((item) => {\r\n    //       return {\r\n    //         x: moment(item.datetime, \"YYYY-MM-DD HH:mm:ss\").toDate(),\r\n    //         y: item.mid_freq_acceleration_p2p_z\r\n    //       }\r\n    //     })\r\n    //     return data\r\n    //   })\r\n    // }\r\n  }\r\n  const columns_events = [\r\n    {\r\n      title: 'Event ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n      render: (item) => <div>#{item}</div>\r\n    },\r\n    {\r\n      title: 'Date Received',\r\n      dataIndex: 'created_at',\r\n      key: 'created_at',\r\n      render: (item) => <div>{moment(item).format('DD-MM-YYYY')}</div>\r\n    },\r\n    {\r\n      title: 'Date Requested',\r\n      dataIndex: 'created_at',\r\n      key: 'created_at',\r\n      render: (item) => <div>{moment(item).format('DD-MM-YYYY')}</div>\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render: (status) => (\r\n        <Tag color={status === 'Pending' ? 'yellow' : 'green'}>{status || 'Submitted'}</Tag>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getEventsMenu(record)} trigger={['click']}>\r\n            <MoreOutlined />\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  const columnsServiceReports = [\r\n    {\r\n      title: 'Sr No',\r\n      dataIndex: 'srNo',\r\n      key: 'srNo',\r\n    },\r\n    {\r\n      title: 'Service Report',\r\n      dataIndex: 'enabled_fields',\r\n      key: 'enabled_fields',\r\n      render: (text, record) => (\r\n        <>\r\n          {record.enabled_fields.map((e, i) => <span>{i > 0 ? ', ' : ''}{e}</span>)}\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Date & Time',\r\n      dataIndex: 'created_at',\r\n      key: 'created_at',\r\n      render: (text, record) => (\r\n        <>\r\n          <div>{moment(record.created_at).format('DD-MM-YYYY')}</div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Created By',\r\n      dataIndex: 'created_by',\r\n      key: 'created_by',\r\n      render: (text, record) => (\r\n        <>\r\n          <div>{record.created_by?.name}</div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Report',\r\n      dataIndex: 'report',\r\n      key: 'report',\r\n      render: (text, record) => (\r\n        <>\r\n          <Link to={`view-reports/${record.id}`}>\r\n            <span><ReportIcon /></span>\r\n          </Link>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  const columnsRepairReports = [\r\n    {\r\n      title: 'Sr No',\r\n      dataIndex: 'srNo',\r\n      key: 'srNo',\r\n    },\r\n    {\r\n      title: 'Repair Report',\r\n      dataIndex: 'enabled_fields',\r\n      key: 'enabled_fields',\r\n      render: (text, record) => (\r\n        <>\r\n          {record.enabled_fields.map((e, i) => <span>{i > 0 ? ', ' : ''}{e}</span>)}\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Date & Time',\r\n      dataIndex: 'created_at',\r\n      key: 'created_at',\r\n      render: (text, record) => (\r\n        <>\r\n          <div>{moment(record.created_at).format('DD-MM-YYYY')}</div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Created By',\r\n      dataIndex: 'created_by',\r\n      key: 'created_by',\r\n      render: (text, record) => (\r\n        <>\r\n          <div>{record.created_by?.name}</div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Report',\r\n      dataIndex: 'report',\r\n      key: 'report',\r\n      render: (text, record) => (\r\n        <>\r\n          <Link to={`view-reports/${record.id}`}>\r\n            <span><ReportIcon /></span>\r\n          </Link>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  const columnsFailurePredictionReports = [\r\n    {\r\n      title: 'Sr No',\r\n      dataIndex: 'srNo',\r\n      key: 'srNo',\r\n    },\r\n    {\r\n      title: 'Failure Prediction Report',\r\n      dataIndex: 'enabled_fields',\r\n      key: 'enabled_fields',\r\n      render: (text, record) => (\r\n        <>\r\n          {record.enabled_fields.map((e, i) => <span>{i > 0 ? ', ' : ''}{e}</span>)}\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Date & Time',\r\n      dataIndex: 'created_at',\r\n      key: 'created_at',\r\n      render: (text, record) => (\r\n        <>\r\n          <div>{moment(record.created_at).format('DD-MM-YYYY')}</div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Created By',\r\n      dataIndex: 'created_by',\r\n      key: 'created_by',\r\n      render: (text, record) => (\r\n        <>\r\n          <div>{record.created_by?.name}</div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Report',\r\n      dataIndex: 'report',\r\n      key: 'report',\r\n      render: (text, record) => (\r\n        <>\r\n          <Link to={`view-reports/${record.id}`}>\r\n            <span><ReportIcon /></span>\r\n          </Link>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  const items = [\r\n    {\r\n      label: (\r\n        <div className=\"d-flex align-items-center\">\r\n          <MachineIcon color={\"#3CA6C1\"} />\r\n          <span className=\"ml-2\">Sensors</span>\r\n        </div>\r\n      ),\r\n      key: 1,\r\n      children: (\r\n        <>\r\n          <MachineSensorComponent data={\r\n            sensorsData\r\n          }\r\n          id={id}\r\n          machine_name={machineName}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n    // {\r\n    //   label: (\r\n    //     <div className=\"d-flex align-items-center\">\r\n    //       <MachineIcon color={\"#3CA6C1\"} />\r\n    //       <span className=\"ml-2\">Machine Details</span>\r\n    //     </div>\r\n    //   ),\r\n    //   key: 1,\r\n    //   children: (\r\n    //     <>\r\n    //       <div className=\"d-flex\">\r\n    //         <div className=\"p-2\" style={{ width: \"60%\" }}>\r\n    //           <div\r\n    //             className=\"bg-white rounded border p-2\"\r\n    //             style={{ minHeight: \"500px\" }}\r\n    //           >\r\n    //             <div className=\"d-flex justify-content-between align-items-center\">\r\n    //               <div>\r\n    //                 <h5 className=\"m-0 d-flex\" style={{ gap: \"4px\" }}>\r\n    //                   <MachineDetailIcon /> Machine Details\r\n    //                 </h5>\r\n    //               </div>\r\n    //               <div\r\n    //                 style={{ gap: \"10px\" }}\r\n    //                 className=\"d-flex justify-content-end\"\r\n    //               >\r\n    //                 <Button\r\n    //                   className=\"px-4 font-weight-semibold\"\r\n    //                   onClick={() => {\r\n    //                     history.push(`/app/machine-and-sensors/sensor-list/${id}`)\r\n    //                   }}\r\n    //                 >\r\n    //                   View Sensors\r\n    //                 </Button>\r\n    //                 {/* <Button className=\"px-4 font-weight-semibold\" htmlType=\"button\">\r\n    //                         Save Draft\r\n    //                     </Button> */}\r\n    //                 {/* <Button\r\n    //                   className=\"px-4 font-weight-semibold text-white bg-primary\"\r\n    //                   onClick={() => {\r\n    //                     setAlarmModal(true);\r\n    //                   }}\r\n    //                 >\r\n    //                   Set Alarm Range\r\n    //                 </Button> */}\r\n    //               </div>\r\n    //             </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //             <div className=\"pb-3 mt-5\">\r\n    //               <div className=\"d-flex mb-3 justify-content-between align-items-center bg-grey\">\r\n    //                 <h5 className=\"m-0 py-1 px-2\">Machine ID</h5>\r\n    //                 <div>{machineId}</div>\r\n    //               </div>\r\n    //               <div className=\"d-flex mb-3 justify-content-between align-items-center\">\r\n    //                 <h5 className=\"m-0 py-1 px-2\">Machine Name</h5>\r\n    //                 <div>{machineName}</div>\r\n    //               </div>\r\n    //               <div className=\"d-flex mb-3 justify-content-between align-items-center bg-grey\">\r\n    //                 <h5 className=\"m-0 py-1 px-2\">Serial No</h5>\r\n    //                 <div>{serialNumber}</div>\r\n    //               </div>\r\n    //               {/* <div className=\"d-flex mb-3 justify-content-between align-items-center\">\r\n    //                 <h5 className=\"m-0 py-1 px-2\">Machine Model</h5>\r\n    //                 <div>{machineModel}</div>\r\n    //               </div>\r\n    //               <div className=\"d-flex mb-3 justify-content-between align-items-center bg-grey\">\r\n    //                 <h5 className=\"m-0 py-1 px-2\">Manufacturer</h5>\r\n    //                 <div>{manufacturer}</div>\r\n    //               </div> */}\r\n    //               <div className=\"d-flex mb-3 justify-content-between align-items-center\">\r\n    //                 <h5 className=\"m-0 py-1 px-2\">Kw/Hp </h5>\r\n    //                 <div>{kwHp}</div>\r\n    //               </div>\r\n    //               <div className=\"d-flex mb-3 justify-content-between align-items-center bg-grey\">\r\n    //                 <h5 className=\"m-0 py-1 px-2\">Frequency (Hz)</h5>\r\n    //                 <div>{frequency}</div>\r\n    //               </div>\r\n    //               <div className=\"d-flex mb-3 justify-content-between align-items-center\">\r\n    //                 <h5 className=\"m-0 py-1 px-2\">RPM</h5>\r\n    //                 <div>{rpm}</div>\r\n    //               </div>\r\n    //             </div>\r\n    //           </div>\r\n    //         </div>\r\n    //         <div style={{ width: \"40%\" }}>\r\n    //           <div style={{ height: \"50%\" }} className=\"p-2\">\r\n    //             <div className=\"bg-white rounded border p-2 \">\r\n    //               <div>\r\n    //                 <h5 className=\"m-0 d-flex\" style={{ gap: \"4px\" }}>\r\n    //                   <ImagesIcon /> Machine Pictures\r\n    //                 </h5>\r\n    //               </div>\r\n    //               {/* <div className=\"customDashedBorder\">\r\n    //                 <img\r\n    //                   src={\r\n    //                     \"https://images.unsplash.com/photo-1524514587686-e2909d726e9b?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\r\n    //                   }\r\n    //                   alt=\"...\"\r\n    //                 />\r\n    //               </div> */}\r\n    //               {\r\n    //                 machinePictures.map((item, index) => {\r\n    //                   return (\r\n    //                     <div className=\"customDashedBorder\" key={index}>\r\n    //                       <img\r\n    //                         src={item.file_url}\r\n    //                         alt=\"...\"\r\n    //                       />\r\n    //                     </div>\r\n    //                   )\r\n    //                 })\r\n    //               }\r\n    //             </div>\r\n    //           </div>\r\n    //           {/* <div style={{ height: \"50%\" }} className=\"p-2\">\r\n    //             <div className=\"bg-white rounded border p-2 h-100\">\r\n    //               <div>\r\n    //                 <h5 className=\"m-0 d-flex\" style={{ gap: \"4px\" }}>\r\n    //                   <CCTVIcon /> IP Camera\r\n    //                 </h5>\r\n    //               </div>\r\n    //               <div className=\"customDashedBorder\"></div>\r\n    //             </div>\r\n    //           </div> */}\r\n    //         </div>\r\n    //       </div>\r\n    //     </>\r\n    //   ),\r\n    // },\r\n    {\r\n      label: (\r\n        <div className=\"d-flex align-items-center\">\r\n          <AlarmIcon color={\"#3CA6C1\"} />\r\n          <span className=\"ml-2\">Alarms</span>\r\n        </div>\r\n      ),\r\n      key: 2,\r\n      children: (\r\n        <>\r\n          <div className=\"\">\r\n            <Table dataSource={alarmList} columns={columns} />\r\n          </div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      label: (\r\n        <div className=\"d-flex align-items-center\">\r\n          <LifeCycleIcon color={\"#3CA6C1\"} />\r\n          <span className=\"ml-2\">Life Cycle Management</span>\r\n        </div>\r\n      ),\r\n      key: 3,\r\n      children: (\r\n        <>\r\n          <div className=\"\">\r\n            <div className=\"d-flex justify-content-between\">\r\n              <div className=\"d-flex\" style={{ gap: \"10px\" }}>\r\n                <Button className=\"bg-primary text-white\"\r\n                  onClick={() => {\r\n                    localStorage.setItem('tab', 'life-cycle')\r\n                  }}\r\n                >\r\n                  <Link\r\n                    to={`/app/machine-and-sensors/machine-details/life-cycle-management/add-new-life-cycle-event/${id}`}\r\n                  >\r\n                    + Add New Event\r\n                  </Link>\r\n                </Button>\r\n                <Button>\r\n                  <Link\r\n                    to={`/app/machine-and-sensors/machine-details/sensor/view-past-event/${id}`}\r\n                    onClick={() => {\r\n                      localStorage.setItem('tab', 'life-cycle')\r\n                    }}\r\n                  >\r\n                    View Past Event\r\n                  </Link>\r\n                </Button>\r\n                {false && <Button>\r\n                  <Link\r\n                    to={`/app/machine-and-sensors/machine-details/sensor/misc-files/${2}`}\r\n                  >\r\n                    Misc File Upload\r\n                  </Link>\r\n                </Button>}\r\n              </div>\r\n              {/* <div className=\"d-flex justify-content-end\">\r\n                <Select\r\n                  showSearch\r\n                  style={{ width: 200 }}\r\n                  placeholder=\"Select Activity\"\r\n                  onChange={handleFilterChange}\r\n                >\r\n                  {options.map((option) => (\r\n                    <Option key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </div> */}\r\n            </div>\r\n            <div className=\"mt-3 bg-white rounded pt-4\" >\r\n              <div style={{ width: \"100%\", overflowX: \"auto\", paddingBottom: \"10px\" }}>\r\n                <Steps\r\n                  current={currentStep}\r\n                  style={{ marginTop: \"50px\", width: \"1000px\" }}\r\n                  progressDot={customDot}\r\n                >\r\n                  <Step\r\n                    title=\"Start of Machine LifeCycle\"\r\n                    icon={<UserOutlined />}\r\n                    description={<div className=\"d-flex flex-column\">\r\n                      <div>{moment(data.created_at).format('DD-MM-YYYY')}</div>\r\n                      <div>{moment(data.created_at).format('hh:mm A')}</div>\r\n                    </div>}\r\n                    onClick={() => {\r\n                      setCurrentStep(0);\r\n                      setCurrentEventsData([])\r\n                      setAlarmsPage(false)\r\n                    }}\r\n                  />\r\n                  <Step\r\n                    title=\"Alarms\"\r\n                    icon={<UserOutlined />}\r\n                    description={<div className=\"d-flex flex-column\">\r\n                      <div>{moment(data.created_at).format('DD-MM-YYYY')}</div>\r\n                      <div>{moment(data.created_at).format('hh:mm A')}</div>\r\n                    </div>}\r\n                    onClick={() => {\r\n                      setCurrentStep(1);\r\n                      // setCurrentEventsData([])\r\n                      setAlarmsPage(true)\r\n                    }}\r\n                  />\r\n\r\n                  {eventsData.map((event, index) => (\r\n                    <Step\r\n                      title={event.name || 'Event #' + event.id}\r\n                      icon={<UserOutlined />}\r\n                      description={<div className=\"d-flex flex-column\">\r\n                        <div>{moment(event.created_at).format('DD-MM-YYYY')}</div>\r\n                        <div>{moment(event.created_at).format('hh:mm A')}</div>\r\n                      </div>}\r\n                      onClick={() => {\r\n                        setCurrentStep(index + 2);\r\n                        setCurrentEventsData([eventsData[index]])\r\n                        setAlarmsPage(false)\r\n                      }}\r\n                    />\r\n                  ))}\r\n                  {/* <Step\r\n                  title=\"Lifecycle\"\r\n                  icon={<SolutionOutlined />}\r\n                  description=\"2nd Jan 2023,  4:00 pm\"\r\n                />\r\n                <Step\r\n                  title=\"Alarms\"\r\n                  icon={<LoadingOutlined />}\r\n                  description=\"3 Jan 2023,  4:00 pm\"\r\n                />\r\n                <Step\r\n                  title=\"Servicing\"\r\n                  icon={<SmileOutlined />}\r\n                  description=\"21 Jan 2023,  4:00 pm\"\r\n                />\r\n                <Step\r\n                  title=\"Alarm\"\r\n                  icon={<UserOutlined />}\r\n                  description=\"12th Feb 2023 4:00 pm\"\r\n                />\r\n                <Step\r\n                  title=\"Repair Works Done\"\r\n                  icon={<SolutionOutlined />}\r\n                  description=\"12th Feb 2023 4:00 pm\"\r\n                />\r\n                <Step\r\n                  title=\"Decommission\"\r\n                  icon={<LoadingOutlined />}\r\n                  description=\"12th Feb 2023 4:00 pm\"\r\n                /> */}\r\n                </Steps>\r\n              </div>\r\n              <div className=\"p-2 mt-2\">\r\n                {alarmsPage ? (\r\n                  <>\r\n                    <div className=\"\">\r\n                      <Table dataSource={alarmList} columns={columns} />\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  <Table dataSource={currentEventsData} columns={columns_events} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      label: (\r\n        <div className=\"d-flex align-items-center\">\r\n          <ServiceReportIcon />\r\n          <span className=\"ml-2\">Service Report</span>\r\n        </div>\r\n      ),\r\n      key: 4,\r\n      children: (\r\n        <>\r\n          <div className=\"\">\r\n            <div className=\"d-flex justify-content-between mb-3\">\r\n              <div className=\"\" style={{ display: \"flex\" }}>\r\n                <Space direction=\"vertical\">\r\n                  <Input\r\n                    placeholder=\"Search\"\r\n                    allowClear\r\n                    value={serviceReportSearch}\r\n                    onChange={(e) => {\r\n                      let search_value = e.target.value;\r\n                      setServiceReportSearch(search_value);\r\n                      if (search_value) {\r\n                        let reports = serviceReportListOriginal;\r\n                        reports = reports.filter(elem => {\r\n                          for (let item of elem.enabled_fields) {\r\n                            if (item.toUpperCase().includes(search_value.toUpperCase())) return true\r\n                            else return false\r\n                          }\r\n                        })\r\n                        setServiceReportList(reports)\r\n                      } else {\r\n                        setServiceReportList(serviceReportListOriginal);\r\n                      }\r\n                    }}\r\n                    style={{\r\n                      width: 200,\r\n                    }}\r\n                    prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n                  />\r\n                </Space>\r\n              </div>\r\n              <div className=\"mb-2 d-flex align-items-center\">\r\n                <Button\r\n                  onClick={() => setGenerateReportModal(true)}\r\n                  className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n                >\r\n                  Generate Report\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-3 bg-white rounded p-2\">\r\n              <div className=\"mt-2\">\r\n                {false ? (\r\n                  <>\r\n                    <hr />\r\n                    <Empty />\r\n                  </>\r\n                ) : (\r\n                  <Table loading={isReportsLoading} dataSource={serviceReportList} columns={columnsServiceReports} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      label: (\r\n        <div className=\"d-flex align-items-center\">\r\n          <RepairReportIcon />\r\n          <span className=\"ml-2\">Repair Report</span>\r\n        </div>\r\n      ),\r\n      key: 5,\r\n      children: (\r\n        <>\r\n          <div className=\"\">\r\n            <div className=\"d-flex justify-content-between mb-3\">\r\n              <div className=\"\" style={{ display: \"flex\" }}>\r\n                <Space direction=\"vertical\">\r\n                  <Input\r\n                    placeholder=\"Search\"\r\n                    allowClear\r\n                    value={repairReportSearch}\r\n                    onChange={(e) => {\r\n                      let search_value = e.target.value;\r\n                      setRepaireReportSearch(search_value);\r\n                      if (search_value) {\r\n                        let reports = repairReportListOriginal;\r\n                        reports = reports.filter(elem => {\r\n                          for (let item of elem.enabled_fields) {\r\n                            if (item.toUpperCase().includes(search_value.toUpperCase())) return true\r\n                            else return false\r\n                          }\r\n                        })\r\n                        setRepairReportList(reports)\r\n                      } else {\r\n                        setRepairReportList(repairReportListOriginal);\r\n                      }\r\n                    }}\r\n                    style={{\r\n                      width: 200,\r\n                    }}\r\n                    prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n                  />\r\n                </Space>\r\n              </div>\r\n              <div className=\"mb-2 d-flex align-items-center\">\r\n                <Button\r\n                  onClick={() => setRepairReportModal(true)}\r\n                  className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n                >\r\n                  {/* <Link to={'/app/notifications/add_notification'}> */}\r\n                  Generate Report\r\n                  {/* </Link> */}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-3 bg-white rounded p-2\">\r\n              <div className=\"mt-2\">\r\n                {false ? (\r\n                  <>\r\n                    <hr />\r\n                    <Empty />\r\n                  </>\r\n                ) : (\r\n                  <Table loading={isReportsLoading} dataSource={repairReportList} columns={columnsRepairReports} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      label: (\r\n        <div className=\"d-flex align-items-center\">\r\n          <ErrorOutlineIcon />\r\n          <span className=\"ml-2\">Failure Prediction Reports</span>\r\n        </div>\r\n      ),\r\n      key: 6,\r\n      children: (\r\n        <>\r\n          <div className=\"\">\r\n            <div className=\"d-flex justify-content-between mb-3\">\r\n              <div className=\"\" style={{ display: \"flex\" }}>\r\n                <Space direction=\"vertical\">\r\n                  <Input\r\n                    placeholder=\"Search\"\r\n                    allowClear\r\n                    value={failurePredictionReportSearch}\r\n                    onChange={(e) => {\r\n                      let search_value = e.target.value;\r\n                      setFailurePredictionReportSearch(search_value);\r\n                      if (search_value) {\r\n                        let reports = failurePredictionReportListOriginal;\r\n                        reports = reports.filter(elem => {\r\n                          for (let item of elem.enabled_fields) {\r\n                            if (item.toUpperCase().includes(search_value.toUpperCase())) return true\r\n                            else return false\r\n                          }\r\n                        })\r\n                        setFailurePredictionReportList(reports);\r\n                      } else {\r\n                        setFailurePredictionReportList(failurePredictionReportListOriginal);\r\n                      }\r\n                    }}\r\n                    style={{\r\n                      width: 200,\r\n                    }}\r\n                    prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n                  />\r\n                </Space>\r\n              </div>\r\n              <div className=\"mb-2 d-flex align-items-center\">\r\n                <Button\r\n                  onClick={() => setFailureReportModal(true)}\r\n                  className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n                >\r\n                  {/* <Link to={'/app/notifications/add_notification'}> */}\r\n                  Generate Report\r\n                  {/* </Link> */}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-3 bg-white rounded p-2\">\r\n              <div className=\"mt-2\">\r\n                {false ? (\r\n                  <>\r\n                    <hr />\r\n                    <Empty />\r\n                  </>\r\n                ) : (\r\n                  <Table loading={isReportsLoading} dataSource={failurePredictionReportList} columns={columnsFailurePredictionReports} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      ),\r\n    },\r\n    // Only show Analysis Report tab for non-free users\r\n    ...(!isFreeUser ? [{\r\n      label: (\r\n        <div className=\"d-flex align-items-center\">\r\n          <img src={AnalysisReport} alt=\"Analysis Report\" />\r\n          <span className=\"ml-2\">Analysis Report</span>\r\n        </div>\r\n      ),\r\n      key: 7,\r\n      children: (\r\n        <>\r\n          <Card>\r\n            <div style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              marginBottom: '20px',\r\n              gap: '15px'\r\n            }}>\r\n              <div><img src={SeriesImage} /></div>\r\n              <div style={{\r\n                fontWeight: 'bold',\r\n                fontSize: '16px'\r\n              }}>Analysis</div>\r\n              {/* <div>{moment().format(\"DD MMM YYYY HH:mm a\")}</div> */}\r\n              {/* <div >\r\n                <Button type=\"primary\" ghost onClick={() => { }}>Status Update</Button>\r\n              </div> */}\r\n              <div >\r\n                <Button type=\"primary\" disabled={rawData.length==0} loading={loading} onClick={() => {\r\n                  download(selectedAlarm, start_date, end_date)\r\n                }}>Accquire Raw Data</Button>\r\n              </div>\r\n              <div style={{\r\n                width: '300px'\r\n              }}><Select onChange={handleAnalysisChange} style={{\r\n                width: '100%'\r\n              }}\r\n                value={graphType}\r\n\r\n              >\r\n                  <Option value=\"mid_freq_displacement\">Displacement</Option>\r\n                  <Option value=\"mid_freq_acceleration_p2p\">Acceleration</Option>\r\n                  <Option value=\"mid_freq_velocity\">Velocity</Option>\r\n                  <Option value=\"inclination\">Inclination</Option>\r\n                  <Option value=\"mid_freq_env\">Frequency</Option>\r\n                </Select></div>\r\n\r\n              <div style={{\r\n                width: '200px'\r\n              }}>\r\n                <Select value={selectorDate} onChange={(e) => {\r\n                  if (e === \"Date Range\") {\r\n                    if (selectorDate == \"Date-Range\") {\r\n                      setDateRangeModal(true)\r\n                    } else {\r\n                      setDateRangeModal(true)\r\n                      setModalStartDate(null);\r\n                      setModalEndDate(null);\r\n                    }\r\n                    return;\r\n\r\n                  }\r\n                  setSelectorDate(e)\r\n                  if (e === \"1\") {\r\n                    fetchSensorData(selectedAlarm, moment().subtract(1, 'days').format('YYYY-MM-DD hh:mm:ss'), moment().format('YYYY-MM-DD hh:mm:ss'))\r\n                    setEndDate(moment().format('YYYY-MM-DD hh:mm:ss'))\r\n                    setStartDate(moment().subtract(1, 'days').format('YYYY-MM-DD hh:mm:ss'))\r\n\r\n                  } else if (e === \"7\") {\r\n                    fetchSensorData(selectedAlarm, moment().subtract(7, 'days').format('YYYY-MM-DD hh:mm:ss'), moment().format('YYYY-MM-DD hh:mm:ss'))\r\n                    setEndDate(moment().format('YYYY-MM-DD hh:mm:ss'))\r\n                    setStartDate(moment().subtract(7, 'days').format('YYYY-MM-DD hh:mm:ss'))\r\n                  } else if (e === \"30\") {\r\n                    fetchSensorData(selectedAlarm, moment().subtract(30, 'days').format('YYYY-MM-DD hh:mm:ss'), moment().format('YYYY-MM-DD hh:mm:ss'))\r\n                    setEndDate(moment().format('YYYY-MM-DD hh:mm:ss'))\r\n                    setStartDate(moment().subtract(30, 'days').format('YYYY-MM-DD hh:mm:ss'))\r\n                  } else if (e === \"60\") {\r\n                    fetchSensorData(selectedAlarm, moment().subtract(60, 'days').format('YYYY-MM-DD hh:mm:ss'), moment().format('YYYY-MM-DD hh:mm:ss'))\r\n                    setEndDate(moment().format('YYYY-MM-DD hh:mm:ss'))\r\n                    setStartDate(moment().subtract(60, 'days').format('YYYY-MM-DD hh:mm:ss'))\r\n                  }\r\n\r\n                }} style={{\r\n                  width: '100%'\r\n                }} >\r\n                  <Select.Option value=\"1\">1 Day</Select.Option>\r\n                  <Select.Option value=\"7\">7 Day</Select.Option>\r\n                  <Select.Option value=\"30\">30 Day</Select.Option>\r\n                  <Select.Option value=\"60\">60 Day</Select.Option>\r\n                  <Select.Option value={\"Date Range\"}>Date Range</Select.Option>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n            <div style={{\r\n              width: \"300px\",\r\n              marginBottom: \"30px\"\r\n            }}>\r\n              <Select value={selectedAlarm}\r\n                placeholder=\"Select Sensor\"\r\n                onChange={(e) => {\r\n                  setSelectedAlarm(e)\r\n                  // getSensorData(e)\r\n                  localStorage.setItem('deviceId2', e)\r\n                  fetchSensorData(e, start_date, end_date)\r\n                }}\r\n                style={{\r\n                  width: \"100%\"\r\n                }}>\r\n                {\r\n                  sensorsData.map((item) => {\r\n                    return (\r\n                      <Option value={item.sensor_id}>{item.sensor_type + \" #\" + (item.sensor_id_label!==null?item.sensor_id_label:item.sensor_id)}</Option>\r\n                    )\r\n                  })\r\n                }\r\n              </Select>\r\n            </div>\r\n            {/* <LineChart title=\"Horizontal Data\" series={horizontalData} label={\"Amplitude VS Time\"} />\r\n            <LineChart title=\"Vertical Data\" series={verticalData} label={\"Amplitude VS Time\"} />\r\n            <LineChart title=\"Axial Data\" series={axialData} label={\"Amplitude VS Time\"} /> */}\r\n            {\r\n              graphType === 'mid_freq_acceleration_p2p' && (\r\n                <>\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Acceleration P2P X\"} series={mid_freq_acceleration_p2p_x} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Acceleration P2P Y\"} series={mid_freq_acceleration_p2p_y} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Acceleration P2P Z\"} series={mid_freq_acceleration_p2p_z} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"High Frequency Acceleration P2P Z\"} series={high_freq_acceleration_p2p_x} label={\"Amplitude VS Time\"} />\r\n                </>\r\n\r\n              )\r\n            }\r\n            {\r\n              graphType === 'mid_freq_displacement' && (\r\n                <>\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Displacement X\"} series={mid_freq_displacement_x} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Displacement Y\"} series={mid_freq_displacement_y} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Displacement Z\"} series={mid_freq_displacement_z} label={\"Amplitude VS Time\"} />\r\n                </>\r\n              )\r\n            }\r\n            {\r\n              graphType === 'mid_freq_velocity' && (\r\n                <>\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Velocity X\"} series={mid_freq_velocity_x} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Velocity Y\"} series={mid_freq_velocity_y} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Velocity Z\"} series={mid_freq_velocity_z} label={\"Amplitude VS Time\"} />\r\n                </>\r\n              )\r\n            }\r\n            {\r\n              graphType === 'inclination' && (\r\n                <>\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Inclination X\"} series={inclination_x} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Inclination Y\"} series={inclination_y} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Inclination Z\"} series={inclination_z} label={\"Amplitude VS Time\"} />\r\n                </>\r\n              )\r\n            }\r\n            {\r\n              graphType === 'mid_freq_env' && (\r\n                <>\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Env X\"} series={mid_freq_env_x} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Env Y\"} series={mid_freq_env_y} label={\"Amplitude VS Time\"} />\r\n                  <LineChart graphType={graphType} dateSelector={selectorDate} disabled={rawData.length==0} deviceId={selectedAlarm} start_date={start_date} end_date={end_date} title={\"Mid Frequency Env Z\"} series={mid_freq_env_z} label={\"Amplitude VS Time\"} />\r\n                </>\r\n              )\r\n            }\r\n\r\n          </Card>\r\n          <LineChart dateSelector={selectorDate} title=\"Motor Service Temperature \" series={motorServiceTemperature} label={\"Celsius VS Time\"} />\r\n          <LineChart dateSelector={selectorDate} title=\"Voltage\" series={batteryVoltage} label={\"Voltage (v) VS Time\"} />\r\n          <LineChart dateSelector={selectorDate} title=\"Battery %\" series={batteryPercentage} label={\"Battery % VS Time\"} />\r\n          <LineChart dateSelector={selectorDate} title=\"RSSI (Received Signal Strength Indicator)\" series={rssi} label={\"RSSI (dBm) VS Time\"} />\r\n          {/* <BarChart title=\"Analysis (Frequency) - X Axis\" series={AnalysisXData} label={\"Amplitude VS Frequency (Hz)\"} />\r\n            <BarChart title=\"Analysis (Frequency) - Y Axis\" series={AnalysisYData} label={\"Amplitude VS Frequency (Hz)\"} />\r\n            <BarChart title=\"Analysis (Frequency) - Z Axis\" series={AnalysisZData} label={\"Amplitude VS Frequency (Hz)\"} /> */}\r\n        </>\r\n      ),\r\n    }] : []),\r\n  ];\r\n  const handleSliderChange = (value) => {\r\n    setRange(value);\r\n    console.log(value);\r\n  };\r\n\r\n  const getEventsMenu = (record) => (\r\n    <Menu>\r\n      <Menu.Item key=\"edit\" onClick={() => editLifecycleEvent(record.id)}>\r\n        <EditOutlined /> Edit\r\n      </Menu.Item>\r\n      <Menu.Item key=\"view\" onClick={() => deleteLifecycleEventHandler(record.id)}>\r\n        <DeleteOutlined /> Delete\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  const editLifecycleEvent = async (event_id) => {\r\n    history.push(`/app/machine-and-sensors/machine-details/life-cycle-management/edit-life-cycle-event/${event_id}`);\r\n  }\r\n\r\n  const deleteLifecycleEventHandler = async (event_id) => {\r\n    console.log(\"fetch called\")\r\n    const response = await axiosInstance.delete(`api/admin/life-cycle-event/${event_id}/delete`\r\n      // , { search: 'none' }\r\n    );\r\n    console.log(response.data.items)\r\n    let data = response.data;\r\n    if (data.status) {\r\n      message.success(\"Event deleted successfully\")\r\n      fetchData();\r\n    } else {\r\n      message.success(\"Event cannot be deleted\")\r\n    }\r\n  }\r\n\r\n  const generateServiceReport = async () => {\r\n    let enabled_fields = [];\r\n    if (serviceReportData.job_reference) enabled_fields.push('Job Reference');\r\n    if (serviceReportData.receiving_and_delivery) enabled_fields.push('Receiving & Delivery');\r\n    const response = await axiosInstance.post(`api/admin/reports/invoke`\r\n      , {\r\n        user_id: localStorage.getItem(\"user_id\"),\r\n        life_cycle_event_id: serviceReportData.event_id,\r\n        machine_id: +id,\r\n        report_type: 'Service',\r\n        enabled_fields: enabled_fields,\r\n        pdf_url: '',\r\n      }\r\n    );\r\n    if (response.data.status) {\r\n      message.success(\"Service Report generated successfully\")\r\n      fetchReportsData();\r\n      setGenerateReportModal(false);\r\n    } else {\r\n      message.error(\"Service Report cannot be generated\");\r\n    }\r\n  }\r\n\r\n  const generateRepairReport = async () => {\r\n    let enabled_fields = []\r\n    if (repairReportData.job_reference) enabled_fields.push('Job Reference');\r\n    if (repairReportData.receiving_and_delivery) enabled_fields.push('Receiving & Delivery');\r\n    const response = await axiosInstance.post(`api/admin/reports/invoke`\r\n      , {\r\n        user_id: localStorage.getItem(\"user_id\"),\r\n        life_cycle_event_id: repairReportData.event_id,\r\n        machine_id: +id,\r\n        report_type: 'Repair',\r\n        enabled_fields: enabled_fields,\r\n        pdf_url: '',\r\n      }\r\n    );\r\n    if (response.data.status) {\r\n      message.success(\"Repair Report generated successfully\")\r\n      fetchReportsData();\r\n      setRepairReportModal(false);\r\n    } else {\r\n      message.error(\"Repair Report cannot be generated\")\r\n    }\r\n  }\r\n\r\n  const generateFailurePredictionReport = async () => {\r\n    let enabled_fields = []\r\n    if (failurePredictionReportData.job_reference) enabled_fields.push('Job Reference');\r\n    if (failurePredictionReportData.receiving_and_delivery) enabled_fields.push('Receiving & Delivery');\r\n    const response = await axiosInstance.post(`api/admin/reports/invoke`\r\n      , {\r\n        user_id: localStorage.getItem(\"user_id\"),\r\n        life_cycle_event_id: failurePredictionReportData.event_id,\r\n        machine_id: +id,\r\n        report_type: 'Failure Prediction',\r\n        enabled_fields: enabled_fields,\r\n        pdf_url: '',\r\n      }\r\n    );\r\n    console.log(response)\r\n    console.log(response.data)\r\n    if (response.data.status) {\r\n      message.success(\"Failure Prediction Report generated successfully\")\r\n      fetchReportsData();\r\n      setFailureReportModal(false);\r\n    } else {\r\n      message.error(\"Failure Prediction Report cannot be generated\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"bg-white p-3\" style={{\r\n        height:\"35vh\"\r\n      }}>\r\n        <h4 className=\"d-flex align-items-center m-0\">\r\n          {\" \"}\r\n          <MachineIcon color={\"#72849A\"} />\r\n          <span\r\n            style={{\r\n              color: \"#6a6a6a\",\r\n              fontWeight: \"300\",\r\n            }}\r\n          >\r\n            {\" \"}\r\n            Machines & Sensor{\" \"}\r\n          </span>\r\n          / Machines Details{\" \"}\r\n        </h4>\r\n        <div\r\n          style={{ background: \"#FAFAFB\" }}\r\n          className=\"mb-4 rounded d-flex justify-content-between align-items-start w-100 p-3\"\r\n        >\r\n          <div\r\n            style={{ gap: \"5px\", width: \"100%\" }}\r\n            className=\"d-flex align-items-start w-100 justify-content-between\"\r\n          >\r\n            <div style={{ width: \"30%\" }}>\r\n              <div style={{ gap: \"10px\" }} className=\"d-flex align-items-top\">\r\n                <div>\r\n                  {/* <img\r\n                    style={{ borderRadius: \"50%\" }}\r\n                    height={40}\r\n                    width={40}\r\n                    src=\"https://images.unsplash.com/photo-1708616748538-bdd66d6a9e25?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\r\n                    alt=\"img\"\r\n                  /> */}\r\n                </div>\r\n                <div className=\"ml-1\" style={{ width: \"auto\" }}>\r\n                  <h5 className=\"m-0\">{data.name}</h5>\r\n                  <div className=\"d-flex align-items-center\">\r\n                    {/* Acme co | Pumping station 1 */}\r\n                    {data.user?.company_name || \"NA\"} | {data.job_site?.jobsite_name}\r\n                  </div>\r\n                </div>\r\n                {/* <div>\r\n                  <span className={`text-success`}>&#x2022; Online </span>\r\n                </div> */}\r\n              </div>\r\n              <div className=\"mt-3\">\r\n                <h5\r\n                  className=\"d-flex align-items-center\"\r\n                  style={{ gap: \"8px\" }}\r\n                >\r\n                  <SensorIcon /> {sensorsData.length} Sensors\r\n                </h5>\r\n                <h5\r\n                  className=\"d-flex align-items-center\"\r\n                  style={{ gap: \"8px\" }}\r\n                >\r\n                  <MachineIcon />\r\n                  M/C Id:{\" \"}\r\n                  <span className=\"font-weight-300\">{data.id}</span> |\r\n                  Serial no:\r\n                  <span className=\"font-weight-300\"> {data.serial_no} </span>{\" \"}\r\n                </h5>\r\n                <h5\r\n                  className=\"d-flex align-items-center\"\r\n                  style={{ gap: \"8px\" }}\r\n                >\r\n                  <MachineModelIcon /> Model:{\" \"}\r\n                  <span className=\"font-weight-300\">{data.model}</span> |\r\n                  Manufacturer:{\" \"}\r\n                  <span className=\"font-weight-300\">{data.manufacturer}</span>\r\n                </h5>\r\n                <h5\r\n                  className=\"d-flex align-items-center\"\r\n                  style={{ gap: \"8px\" }}\r\n                >\r\n                  <KW />\r\n                  Kw/Hp:{\" \"}\r\n                  <span className=\"font-weight-300\">\r\n                    {data.kw_hp ? data.kw_hp : \"N/A\"}\r\n                  </span>{\" \"}\r\n                  | Frequency: (Hz){\" \"}\r\n                  <span className=\"font-weight-300\">\r\n                    {data.frequency ? data.frequency : \"N/A\"}\r\n                  </span>{\" \"}\r\n                  | RPM:{\" \"}\r\n                  <span className=\"font-weight-300\">\r\n                    {data.rpm ? data.rpm : \"N/A\"}\r\n                  </span>\r\n                </h5>\r\n\r\n\r\n                {/* <div className=\"d-flex mb-3 justify-content-between align-items-center\">\r\n                    <h5 className=\"m-0 py-1 px-2\">Kw/Hp </h5>\r\n                    <div>{kwHp}</div>\r\n                  </div>\r\n                  <div className=\"d-flex mb-3 justify-content-between align-items-center bg-grey\">\r\n                    <h5 className=\"m-0 py-1 px-2\">Frequency (Hz)</h5>\r\n                    <div>{frequency}</div>\r\n                  </div>\r\n                  <div className=\"d-flex mb-3 justify-content-between align-items-center\">\r\n                    <h5 className=\"m-0 py-1 px-2\">RPM</h5>\r\n                    <div>{rpm}</div>\r\n                  </div> */}\r\n              </div>\r\n            </div>\r\n            <Divider style={{ height: \"150px\" }} type=\"vertical\" />\r\n            <div className=\"ml-4\" style={{ width: \"30%\" }}>\r\n              <div className=\"mt-2\">\r\n                <h5 className=\"mb-1\">Machine Status (ISO)</h5>\r\n                <ProgressBar progress={data.health_iso} statusRanges={data.status_ranges_iso}/>\r\n              </div>\r\n              <div className=\"mt-2\">\r\n                <h5 className=\"mb-1\">Machine Status (User Defined)</h5>\r\n                <ProgressBar progress={data.health} statusRanges={data.status_ranges_user_defined} />\r\n              </div>\r\n              {/* <div className=\"mt-2\">\r\n                <h5 className=\"mb-1\">Machine Status (AI)</h5>\r\n                <ProgressBar progress={10} />\r\n              </div> */}\r\n              <div className=\"mt-4 d-flex justify-content-between pr-5\">\r\n                <div className=\"d-flex align-items-center\">\r\n                  <span\r\n                    className=\"d-flex align-items-center justify-content-center mr-2\"\r\n                    style={{\r\n                      backgroundColor: \"#00A843\",\r\n                      color: \"white\",\r\n                      borderRadius: \"50%\",\r\n                      width: \"20px\",\r\n                      height: \"20px\",\r\n                    }}\r\n                  >\r\n                \r\n                  </span>{\" \"}\r\n                  Good\r\n                </div>\r\n                <div className=\"d-flex align-items-center\">\r\n                  <span\r\n                    className=\"d-flex align-items-center justify-content-center mr-2\"\r\n                    style={{\r\n                      backgroundColor: \"#FFCB21\",\r\n                      color: \"white\",\r\n                      borderRadius: \"50%\",\r\n                      width: \"20px\",\r\n                      height: \"20px\",\r\n                    }}\r\n                  >\r\n                 \r\n                  </span>{\" \"}\r\n                  Satisfactory\r\n                </div>\r\n                <div className=\"d-flex align-items-center\">\r\n                  <span\r\n                    className=\"d-flex align-items-center justify-content-center mr-2\"\r\n                    style={{\r\n                      backgroundColor: \"#FB8920\",\r\n                      color: \"white\",\r\n                      borderRadius: \"50%\",\r\n                      width: \"20px\",\r\n                      height: \"20px\",\r\n                    }}\r\n                  >\r\n                 \r\n                  </span>{\" \"}\r\n                  Warning\r\n                </div>\r\n                <div className=\"d-flex align-items-center\">\r\n                  <span\r\n                    className=\"d-flex align-items-center justify-content-center mr-2\"\r\n                    style={{\r\n                      backgroundColor: \"#F93737\",\r\n                      color: \"white\",\r\n                      borderRadius: \"50%\",\r\n                      width: \"20px\",\r\n                      height: \"20px\",\r\n                    }}\r\n                  >\r\n                 \r\n                  </span>{\" \"}\r\n                  Critical\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div style={{ width: \"40%\" }}>\r\n              <div style={{ height: \"50%\" }} className=\"p-2\">\r\n                <div className=\"bg-white rounded border p-2 \">\r\n                  <div>\r\n                    <h5 className=\"m-0 d-flex\" style={{ gap: \"4px\" }}>\r\n                      <ImagesIcon /> Machine Pictures\r\n                    </h5>\r\n                  </div>\r\n                  {/* <div className=\"customDashedBorder\">\r\n                    <img\r\n                      src={\r\n                        \"https://images.unsplash.com/photo-1524514587686-e2909d726e9b?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\r\n                      }\r\n                      alt=\"...\"\r\n                    />\r\n                  </div> */}\r\n                  <div style={{\r\n                    height: \"200px\",\r\n                    overflowY: \"auto\",\r\n                  }}>\r\n                    {\r\n                      machinePictures.map((item, index) => {\r\n                        return (\r\n                          <>\r\n                            <div className=\"customDashedBorder\" key={index}>\r\n                              <img\r\n                                src={item.file_url}\r\n                                alt=\"...\"\r\n                              />\r\n                            </div>\r\n                          </>\r\n                        )\r\n                      })\r\n                    }\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* <div style={{ height: \"50%\" }} className=\"p-2\">\r\n                <div className=\"bg-white rounded border p-2 h-100\">\r\n                  <div>\r\n                    <h5 className=\"m-0 d-flex\" style={{ gap: \"4px\" }}>\r\n                      <CCTVIcon /> IP Camera\r\n                    </h5>\r\n                  </div>\r\n                  <div className=\"customDashedBorder\"></div>\r\n                </div>\r\n              </div> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <SetAlarmIcon />{\" \"}\r\n            <span className=\"d-block ml-2\"> Set Alarm Range </span>\r\n          </div>\r\n        }\r\n        visible={alarmModal}\r\n        onCancel={() => setAlarmModal(false)}\r\n        footer={false}\r\n      >\r\n        <div>\r\n          <label>Min & Max Hertz </label>\r\n          <Slider\r\n            range\r\n            value={range}\r\n            onChange={handleSliderChange}\r\n            min={0}\r\n            max={100}\r\n            step={1}\r\n            tooltip={{\r\n              open: true,\r\n            }}\r\n            trackStyle={[{ backgroundColor: \"#3CA6C1\" }]}\r\n            railStyle={{ backgroundColor: \"#d6f1f7\" }}\r\n          />\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-3\">\r\n          <Button key=\"cancel\" onClick={() => setAlarmModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => setAlarmModal(false)}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <ServiceReportIcon />{\" \"}\r\n            <span className=\"d-block ml-2\">Service Report</span>\r\n          </div>\r\n        }\r\n        visible={generateReportModal}\r\n        onCancel={() => setGenerateReportModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div>\r\n          <div className=\"d-flex justify-content-start align-items-center\">\r\n            <h5 className=\"mr-2\">Event Id</h5>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Event\"\r\n              value={serviceReportData.event_id}\r\n              onChange={(value) => {\r\n                setServiceReportData((prevData) => {\r\n                  return {\r\n                    ...prevData,\r\n                    event_id: value\r\n                  }\r\n                })\r\n              }}\r\n            >\r\n              {eventsData.map((item, index) => {\r\n                return (\r\n                  <Option key={index} value={item.id}>{item.id}</Option>\r\n                )\r\n              })}\r\n            </Select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox value={serviceReportData.job_reference} onChange={() => {\r\n              setServiceReportData((prevData) => {\r\n                return {\r\n                  ...prevData,\r\n                  job_reference: !prevData.job_reference\r\n                }\r\n              })\r\n            }}>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Job Reference\r\n              </h5>\r\n            </Checkbox>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox value={serviceReportData.receiving_and_delivery} onChange={() => {\r\n              setServiceReportData((prevData) => {\r\n                return {\r\n                  ...prevData,\r\n                  receiving_and_delivery: !prevData.receiving_and_delivery\r\n                }\r\n              })\r\n            }}>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Receiving & Delivery\r\n              </h5>\r\n            </Checkbox>\r\n          </div>\r\n          {/* <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Machine Data\r\n              </h5>\r\n            </Checkbox>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Initial Conditions & Physical Inspection\r\n              </h5>\r\n            </Checkbox>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Stator winding electrical tests\r\n              </h5>\r\n            </Checkbox>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Auxiliaries Checks\r\n              </h5>\r\n            </Checkbox>\r\n          </div> */}\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-3\">\r\n          <Button key=\"cancel\" onClick={() => setGenerateReportModal(false)}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => generateServiceReport()}\r\n          >\r\n            Generate Report\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <RepairReportIcon />{\" \"}\r\n            <span className=\"d-block ml-2\">Repair Report</span>\r\n          </div>\r\n        }\r\n        visible={repairReportModal}\r\n        onCancel={() => setRepairReportModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div>\r\n          <div className=\"d-flex justify-content-start align-items-center\">\r\n            <h5 className=\"mr-2\">Event Id</h5>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Event\"\r\n              value={repairReportData.event_id}\r\n              onChange={(value) => {\r\n                setRepairReportData((prevData) => {\r\n                  return {\r\n                    ...prevData,\r\n                    event_id: value\r\n                  }\r\n                })\r\n              }}\r\n            >\r\n              {eventsData.map((item, index) => {\r\n                return (\r\n                  <Option key={index} value={item.id}>{item.id}</Option>\r\n                )\r\n              })}\r\n            </Select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox value={repairReportData.job_reference} onChange={() => {\r\n              setRepairReportData((prevData) => {\r\n                return {\r\n                  ...prevData,\r\n                  job_reference: !prevData.job_reference\r\n                }\r\n              })\r\n            }}>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Job Reference\r\n              </h5>\r\n            </Checkbox>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox value={repairReportData.receiving_and_delivery} onChange={() => {\r\n              setRepairReportData((prevData) => {\r\n                return {\r\n                  ...prevData,\r\n                  receiving_and_delivery: !prevData.receiving_and_delivery\r\n                }\r\n              })\r\n            }}>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Receiving & Delivery\r\n              </h5>\r\n            </Checkbox>\r\n          </div>\r\n          {/* <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Machine Data\r\n              </h5>\r\n            </Checkbox>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Report Date\"\r\n              onChange={(value) => {\r\n                console.log(`Selected date and time: ${value}`);\r\n                // You can perform any action you want with the selected date and time here\r\n              }}\r\n            >\r\n              <Option value=\"2023-06-02T10:00:24\">\r\n                02 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-04T10:00:24\">\r\n                04 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-05T10:00:24\">\r\n                05 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-06T10:00:24\">\r\n                06 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-08T10:00:24\">\r\n                08 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-10T10:00:24\">\r\n                10 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n            </Select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Initial Conditions & Physical Inspection\r\n              </h5>\r\n            </Checkbox>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Report Date\"\r\n              onChange={(value) => {\r\n                console.log(`Selected date and time: ${value}`);\r\n                // You can perform any action you want with the selected date and time here\r\n              }}\r\n            >\r\n              <Option value=\"2023-06-02T10:00:24\">\r\n                02 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-04T10:00:24\">\r\n                04 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-05T10:00:24\">\r\n                05 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-06T10:00:24\">\r\n                06 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-08T10:00:24\">\r\n                08 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-10T10:00:24\">\r\n                10 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n            </Select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Stator winding electrical tests\r\n              </h5>\r\n            </Checkbox>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Report Date\"\r\n              onChange={(value) => {\r\n                console.log(`Selected date and time: ${value}`);\r\n                // You can perform any action you want with the selected date and time here\r\n              }}\r\n            >\r\n              <Option value=\"2023-06-02T10:00:24\">\r\n                02 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-04T10:00:24\">\r\n                04 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-05T10:00:24\">\r\n                05 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-06T10:00:24\">\r\n                06 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-08T10:00:24\">\r\n                08 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-10T10:00:24\">\r\n                10 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n            </Select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Auxiliaries Checks\r\n              </h5>\r\n            </Checkbox>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Report Date\"\r\n              onChange={(value) => {\r\n                console.log(`Selected date and time: ${value}`);\r\n                // You can perform any action you want with the selected date and time here\r\n              }}\r\n            >\r\n              <Option value=\"2023-06-02T10:00:24\">\r\n                02 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-04T10:00:24\">\r\n                04 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-05T10:00:24\">\r\n                05 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-06T10:00:24\">\r\n                06 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-08T10:00:24\">\r\n                08 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-10T10:00:24\">\r\n                10 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n            </Select>\r\n          </div> */}\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-3\">\r\n          <Button key=\"cancel\" onClick={() => setRepairReportModal(false)}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => generateRepairReport()}\r\n          >\r\n            Generate Report\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <RepairReportIcon />{\" \"}\r\n            <span className=\"d-block ml-2\">Failure Prediction Report</span>\r\n          </div>\r\n        }\r\n        visible={failureReportModal}\r\n        onCancel={() => setFailureReportModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div>\r\n          <div className=\"d-flex justify-content-start align-items-center\">\r\n            <h5 className=\"mr-2\">Event Id</h5>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Event\"\r\n              value={failurePredictionReportData.event_id}\r\n              onChange={(value) => {\r\n                setFailurePredictionReportData((prevData) => {\r\n                  return {\r\n                    ...prevData,\r\n                    event_id: value\r\n                  }\r\n                })\r\n              }}\r\n            >\r\n              {eventsData.map((item, index) => {\r\n                return (\r\n                  <Option key={index} value={item.id}>{item.id}</Option>\r\n                )\r\n              })}\r\n            </Select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox value={failurePredictionReportData.job_reference} onChange={() => {\r\n              setFailurePredictionReportData((prevData) => {\r\n                return {\r\n                  ...prevData,\r\n                  job_reference: !prevData.job_reference\r\n                }\r\n              })\r\n            }}>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Job Reference\r\n              </h5>\r\n            </Checkbox>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox value={failurePredictionReportData.receiving_and_delivery} onChange={() => {\r\n              setFailurePredictionReportData((prevData) => {\r\n                return {\r\n                  ...prevData,\r\n                  receiving_and_delivery: !prevData.receiving_and_delivery\r\n                }\r\n              })\r\n            }}>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Receiving & Delivery\r\n              </h5>\r\n            </Checkbox>\r\n          </div>\r\n          {/* <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Machine Data\r\n              </h5>\r\n            </Checkbox>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Report Date\"\r\n              onChange={(value) => {\r\n                console.log(`Selected date and time: ${value}`);\r\n                // You can perform any action you want with the selected date and time here\r\n              }}\r\n            >\r\n              <Option value=\"2023-06-02T10:00:24\">\r\n                02 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-04T10:00:24\">\r\n                04 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-05T10:00:24\">\r\n                05 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-06T10:00:24\">\r\n                06 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-08T10:00:24\">\r\n                08 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-10T10:00:24\">\r\n                10 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n            </Select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Initial Conditions & Physical Inspection\r\n              </h5>\r\n            </Checkbox>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Report Date\"\r\n              onChange={(value) => {\r\n                console.log(`Selected date and time: ${value}`);\r\n                // You can perform any action you want with the selected date and time here\r\n              }}\r\n            >\r\n              <Option value=\"2023-06-02T10:00:24\">\r\n                02 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-04T10:00:24\">\r\n                04 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-05T10:00:24\">\r\n                05 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-06T10:00:24\">\r\n                06 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-08T10:00:24\">\r\n                08 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-10T10:00:24\">\r\n                10 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n            </Select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Stator winding electrical tests\r\n              </h5>\r\n            </Checkbox>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Report Date\"\r\n              onChange={(value) => {\r\n                console.log(`Selected date and time: ${value}`);\r\n                // You can perform any action you want with the selected date and time here\r\n              }}\r\n            >\r\n              <Option value=\"2023-06-02T10:00:24\">\r\n                02 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-04T10:00:24\">\r\n                04 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-05T10:00:24\">\r\n                05 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-06T10:00:24\">\r\n                06 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-08T10:00:24\">\r\n                08 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-10T10:00:24\">\r\n                10 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n            </Select>\r\n          </div>\r\n          <div className=\"d-flex justify-content-between report-modal-boxes\">\r\n            <Checkbox>\r\n              <h5 className=\"pl-2 m-0\">\r\n                <img src={ReportSerchIcon} alt=\"...\" /> Auxiliaries Checks\r\n              </h5>\r\n            </Checkbox>\r\n            <Select\r\n              id=\"dates\"\r\n              style={{ width: 200 }}\r\n              placeholder=\"Select Report Date\"\r\n              onChange={(value) => {\r\n                console.log(`Selected date and time: ${value}`);\r\n                // You can perform any action you want with the selected date and time here\r\n              }}\r\n            >\r\n              <Option value=\"2023-06-02T10:00:24\">\r\n                02 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-04T10:00:24\">\r\n                04 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-05T10:00:24\">\r\n                05 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-06T10:00:24\">\r\n                06 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-08T10:00:24\">\r\n                08 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n              <Option value=\"2023-06-10T10:00:24\">\r\n                10 Jun 2023, 10:00:24 AM\r\n              </Option>\r\n            </Select>\r\n          </div> */}\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-3\">\r\n          <Button key=\"cancel\" onClick={() => setFailureReportModal(false)}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => generateFailurePredictionReport(false)}\r\n          >\r\n            Generate Report\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n\r\n      <div className=\"customTableBackground\">\r\n        <Tabs activeKey={tabKey} onChange={(key) => setTabKey(key)}>\r\n          {items.map((item) => (\r\n            <Tabs.TabPane tab={item.label} key={item.key}>\r\n              {item.children}\r\n            </Tabs.TabPane>\r\n          ))}\r\n        </Tabs>\r\n      </div>\r\n\r\n      <Modal title=\"Date Range\" onOk={() => {\r\n        if (modalStartDate && modalEndDate) {\r\n          setDateRangeModal(false);\r\n          fetchSensorData(selectedAlarm, modalStartDate, modalEndDate);\r\n          setSelectorDate('Date-Range');\r\n          setStartDate(modalStartDate);\r\n          setEndDate(modalEndDate);\r\n        } else {\r\n          message.error(\"Please select date range\")\r\n        }\r\n      }} visible={dateRangeModal} onCancel={() => {\r\n        setDateRangeModal(false)\r\n        if (selectorDate === 'Date-Range') {\r\n\r\n        } else {\r\n          setModalStartDate(null);\r\n          setModalEndDate(null);\r\n        }\r\n      }} >\r\n        <div style={{\r\n          display: \"flex\",\r\n          // flexDirection: \"column\",\r\n          gap: \"10px\"\r\n        }}>\r\n\r\n          <DatePicker\r\n            format={\"DD-MM-YYYY\"}\r\n            style={{ width: \"100%\" }}\r\n            onChange={(date, dateString) => {\r\n              setModalStartDate(date ? moment(date).format(\"YYYY-MM-DD HH:mm:ss\") : null);\r\n            }}\r\n            value={modalStartDate ? moment(modalStartDate, \"YYYY-MM-DD hh:mm:ss\") : null}\r\n          />\r\n\r\n          <DatePicker\r\n            style={{ width: \"100%\" }}\r\n            format={\"DD-MM-YYYY\"}\r\n            onChange={(date, dateString) => {\r\n              setModalEndDate(date ? moment(date).format(\"YYYY-MM-DD HH:mm:ss\") : null);\r\n            }}\r\n            value={modalEndDate ? moment(modalEndDate, \"YYYY-MM-DD HH:mm:ss\") : null}\r\n          />\r\n\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MachineDetails;\r\n\r\n\r\n","/home/faizan/jd-works/customer-web-app/src/components/layout-components/NavSearch/SearchInput.js",[],"/home/faizan/jd-works/customer-web-app/src/utils/role.js",["1195","1196","1197","1198","1199","1200","1201","1202","1203"],"export const role = (val)=>{\r\n    if(val===1){\r\n        return \"Admin\"\r\n    }\r\n    else if(val==2){\r\n        return \"Staff\"\r\n    }\r\n    else if(val==3){\r\n        return \"Customer\"\r\n    } \r\n    else if(val==4){\r\n        return \"Workshop User\"\r\n    }\r\n    else if(val==5){\r\n        return \"Free User\"\r\n    }\r\n    else if(val==6){\r\n        return \"Technician\"\r\n    }else if(val==7){\r\n        return \"Customer Admin\"\r\n    }else if(val==8){\r\n        return \"Customer Manager\"\r\n    }else if(val==9){\r\n        return \"Customer User\"\r\n    }else{\r\n        return \"No Role\"\r\n    }\r\n}\r\n\r\nexport const Status = (val)=>{\r\n//     0 - Pending Approval\r\n// 1 - Approved\r\n// 2 - Rejected\r\n    if(val===0){\r\n       return {\r\n              status:\"Pending Approval\",\r\n              color:\"warning\"\r\n       }\r\n    }\r\n    else if(val===1){\r\n        return {\r\n            status:\"Approved\",\r\n            color:\"success\"\r\n        }\r\n    }\r\n    else if(val==2){\r\n        return{\r\n            status:\"Rejected\",\r\n            color:\"danger\"\r\n        }   \r\n    } \r\n   \r\n}","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/view-sensor/index.js",["1204","1205","1206","1207","1208","1209","1210","1211"],"import { DeleteOutlined, EditOutlined, MoreOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport Icon from '@ant-design/icons/lib/components/Icon';\r\nimport { Avatar, Button, Checkbox, Divider, Dropdown, Input, Menu, Popconfirm, Space, Table, Tag, message } from 'antd';\r\nimport SubMenu from 'antd/lib/menu/SubMenu';\r\nimport { axiosInstance } from 'App';\r\nimport { CsvIcon, FilterIcon, MachineSensorIcon } from 'assets/svg/icon';\r\nimport Filter from 'components/shared-components/Filter';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom/cjs/react-router-dom';\r\nimport moment from 'moment'\r\n// import { SensorListCSV } from 'constants/Headers';\r\n// import Csv from 'utils/Csv';\r\n\r\nconst ViewSensor = () => {\r\n  const { id } = useParams();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [selectedFilter, setSelectedFilter] = useState('all')\r\n  const [fetchData, setData] = useState([]);\r\n  const [csvData, setCSVData] = useState([])\r\n  const [header, setHeader] = useState({})\r\n  const [jobsite, setJobsite] = useState('')\r\n  const [searchText, setSearchText] = useState('');\r\n  const getData = async (search = \"\", filter = 'all') => {\r\n    let url = \"?\"\r\n    if(search != \"\") {\r\n      url += `search=${search}&`\r\n\r\n    }\r\n    //for 0 it is not handling\r\n    if((filter !== '' && filter != 'all')) {\r\n      url += `sensor_status=${filter}`\r\n    }\r\n    const response = await axiosInstance.get(`/api/web/machines/${id}/sensors${url}`);\r\n    // const response = await axiosInstance.get(`/api/web/machines/${id}/sensors?search=${search}` + (filter != 'all' ? `&status=${filter}` : \"\"));\r\n\r\n    setData(response.data.items);\r\n    setCSVData(response.data.items.map((item) => {\r\n      return {\r\n        id: item.id,\r\n        image: item.image,\r\n        sensor_id: item.sensor_id_label,\r\n        sensor_type: item.sensor_type,\r\n        sensor_name: item.sensor_name,\r\n        sensor_location: item.sensor_location,\r\n        updated_at: moment(item.updated_at).format(\"DD-MM-YYYY\"),\r\n        sensor_status: item.sensor_status ? 'Active' : 'Inactive',\r\n      }\r\n    }))\r\n    setHeader(response.data.item)\r\n    setJobsite(response.data.job_site?.jobsite_name)\r\n  };\r\n  useEffect(() => {\r\n\r\n    getData();\r\n  }, [])\r\n\r\n  const data = fetchData.map((value, i) => {\r\n    return {\r\n      key: value.id,\r\n      id: value.id,\r\n      image: value.image,\r\n      sensor_id: value.sensor_id_label,\r\n      sensor_type: value.sensor_type,\r\n      sensor_name: value.sensor_name,\r\n      location: value.sensor_location,\r\n      last_update_on: moment(value.updated_at).format(\"DD-MM-YYYY\"),\r\n      status: value.sensor_status,\r\n\r\n    }\r\n  })\r\n\r\n\r\n  // const data = [\r\n  //   {\r\n  //     id: 1,\r\n  //     image: 'https://images.unsplash.com/photo-1708616748538-bdd66d6a9e25?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n  //     sensor_id: '#VS-456866',\r\n  //     sensor_type: 'Vibratory Sensor ',\r\n  //     sensor_name: 'Industrial piezoelectric accelerometers',\r\n  //     location: 'Moto',\r\n  //     last_update_on: '2022-01-01',\r\n  //     status: true,\r\n  //   },\r\n  //   // Add more data entries as needed\r\n  // ];\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Sr No',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    {\r\n      // title: 'Image',\r\n      dataIndex: 'image',\r\n      key: 'image',\r\n      render: (text, record) => <Avatar src={text} alt={`Avatar for ${record.organization}`} />,\r\n    },\r\n    {\r\n      title: 'Sensor ID',\r\n      dataIndex: 'sensor_id',\r\n      key: 'sensor_id',\r\n    },\r\n    {\r\n      title: 'Sensor Type',\r\n      dataIndex: 'sensor_type',\r\n      key: 'sensor_type',\r\n    },\r\n    {\r\n      title: 'Sensor Name',\r\n      dataIndex: 'sensor_name',\r\n      key: 'sensor_name',\r\n    },\r\n    {\r\n      title: 'Loction',\r\n      dataIndex: 'location',\r\n      key: 'location',\r\n    },\r\n    {\r\n      title: 'Last Update On',\r\n      dataIndex: 'last_update_on',\r\n      key: 'last_update_on',\r\n      //   render: (active) => (active ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>),\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render: (active) => (active ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>),\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getMenu(record.id)} placement=\"bottomRight\" trigger={['hover']}>\r\n            <MoreOutlined />\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const onDeleteSensor = async (ids) => {\r\n    console.log('is', id);\r\n    try {\r\n      const response = await axiosInstance.delete(`/api/web/machines/${id}/sensors/${ids}`);\r\n      message.success('Sensor delete successfully!');\r\n      if (response.data.status) {\r\n        getData()\r\n      }\r\n    } catch (error) {\r\n      message.error('Failed to delete sensor. Please try again.');\r\n      console.error('Error:', error);\r\n    }\r\n  }\r\n  const getMenu = (record) => (\r\n    <Menu>\r\n      <Menu.Item key=\"edit\" >\r\n        <Link style={{ width: '100%', display: 'block', color: 'gray' }} to={`edit-sensor/${id}/${record}?machine_name=${header.machine_name}`} >\r\n          <EditOutlined /> Edit\r\n        </Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"delete\">\r\n        <Popconfirm\r\n          style={{ width: '100%', display: 'block', color: 'gray' }}\r\n          title=\"Are you sure to delete this sensor?\"\r\n          description=\"Are you sure to delete this sensor?\"\r\n          onConfirm={() => onDeleteSensor(record)}\r\n          onCancel={(e) => console.log('cancel', e)}\r\n          okText=\"Yes\"\r\n          cancelText=\"No\"\r\n        >\r\n          <div>\r\n\r\n            <DeleteOutlined /> Delete\r\n          </div>\r\n        </Popconfirm>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  const onFinish = (values) => {\r\n    console.log('Received values:', values);\r\n    // You can handle form submission logic here\r\n  };\r\n  var timeout = \"\"\r\n  const onSearch = (value) => {\r\n    setSearchText(value.target.value)\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => {\r\n      getData(value.target.value, selectedFilter)\r\n    }, 500)\r\n  }\r\n  const FilterMenu = (\r\n    <Menu mode=\"horizontal\" onChange={(e) => {\r\n      console.log(e)\r\n    }}>\r\n      <SubMenu key=\"item1\" title=\"Status\">\r\n        <Menu.Item key=\"subitem1\"\r\n\r\n        >\r\n          <Checkbox onChange={() => {\r\n            getData(searchText);\r\n            setSelectedFilter('all')\r\n          }} checked={\r\n            selectedFilter === 'all'\r\n          }>All</Checkbox>\r\n        </Menu.Item>{\" \"}\r\n        <Menu.Item key=\"subitem2\"\r\n\r\n        >\r\n          <Checkbox\r\n            onChange={() => {\r\n              getData(searchText, 1);\r\n              setSelectedFilter(1)\r\n            }}\r\n            checked={selectedFilter == 1}\r\n\r\n          >Active</Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"subitem3\"\r\n\r\n        >\r\n          <Checkbox onChange={() => {\r\n            getData(searchText, 0);\r\n            setSelectedFilter(0)\r\n          }}\r\n\r\n            checked={selectedFilter === 0}>Inactive</Checkbox>\r\n        </Menu.Item>\r\n      </SubMenu>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <div>\r\n      <div className='rounded bg-white p-3 mb-3'>\r\n\r\n        <h4> <MachineSensorIcon /><span style={{\r\n          color: '#6a6a6a',\r\n          fontWeight: '300'\r\n        }}> Machines </span>/ Sensor </h4>\r\n        <div\r\n          style={{ background: \"#FAFAFB\" }}\r\n          className=\"mb-4 rounded d-flex justify-content-between align-items-start w-100 p-3\"\r\n        >\r\n          <div\r\n            style={{ gap: \"10px\", width: \"80%\" }}\r\n            className=\"d-flex align-items-start p-3 w-100 justify-content-between\"\r\n          >\r\n            <div style={{ gap: \"10px\" }} className=\"d-flex align-items-top\">\r\n              <div>\r\n\r\n                <Avatar.Group\r\n                  size=\"large\"\r\n                  max={{\r\n                    count: 2,\r\n\r\n                  }}\r\n                >\r\n                  {\r\n                    header?.machine_images?.map((item) => {\r\n                      return <Avatar src={item} />\r\n                    })\r\n                  }\r\n\r\n                </Avatar.Group>\r\n                {/* <img style={{ borderRadius: '50%' }} height={40} width={40} src=\"https://images.unsplash.com/photo-1708616748538-bdd66d6a9e25?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\" alt=\"img\" /> */}\r\n              </div>\r\n              <div className='ml-4' style={{ width: \"auto\" }}>\r\n                <h5 className=\"m-0\">Machine Name</h5>\r\n                <div style={{ color: '#0D6CC9' }} className=\"d-flex align-items-center\">\r\n                  {header.machine_name}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <Divider style={{ height: \"60px\" }} type=\"vertical\" />\r\n            <div>\r\n              <div>\r\n                <h5 className=\"m-0\">Machine ID</h5>\r\n                <p className=\"m-0\">{\r\n                  header.machine_id\r\n                }</p>\r\n              </div>\r\n            </div>\r\n            <Divider style={{ height: \"60px\" }} type=\"vertical\" />\r\n            <div>\r\n              <div>\r\n                <h5 className=\"m-0\">Customer</h5>\r\n                <p className=\"m-0\"> {\r\n                  header.customer_name\r\n                }</p>\r\n              </div>\r\n            </div>\r\n            <Divider style={{ height: \"60px\" }} type=\"vertical\" />\r\n            <div>\r\n              <div>\r\n                <h5 className=\"m-0\">Jobsite</h5>\r\n                <p className=\"m-0\">\r\n                  {\r\n                    jobsite\r\n                  }\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <Divider style={{ height: \"60px\" }} type=\"vertical\" />\r\n            <div>\r\n              <div className='d-flex flex-column align-items-end'>\r\n                {/* <span style={{ color: 'white', padding: '3px 24px', borderRadius: '5px', background: '#00AB6F', fontWeight: '600', fontSize: '16px' }} className=''>Active</span> */}\r\n                {\r\n                  header.machine_status ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\r\n                }\r\n                <p className=''>{`Active Since ${moment(header.active_since).format(\"DD-MM-YYYY HH:mm\")}`}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex justify-content-between mb-3\">\r\n        <div className=\"\" style={{ display: \"flex\" }}>\r\n          <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              value={searchText}\r\n              onChange={onSearch}\r\n              style={{\r\n                width: 200,\r\n              }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space>\r\n          <Filter filters={FilterMenu}>\r\n            <Button\r\n              icon={<Icon component={FilterIcon} />}\r\n              className=\"d-flex align-items-center ml-2\"\r\n            >\r\n              Filters\r\n            </Button>\r\n          </Filter>\r\n          {/* <Csv data={csvData} filename='sensor-list' header={SensorListCSV} /> */}\r\n        </div>\r\n        <div className=\"mb-2 d-flex align-items-center\">\r\n          <Button\r\n            onClick={() => history.goBack()}\r\n            className=\"ml-3 d-flex align-items-center rounded font-weight-semibold px-4\"\r\n          >\r\n            Back\r\n          </Button>\r\n          <Button\r\n            // onClick={showModal}\r\n            className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n          >\r\n            <Link to={`add-new/${id}?machine_name=${header.machine_name}`}>\r\n              + Add New</Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Table\r\n          // rowKey='id'\r\n          // rowSelection={{\r\n          //   selectedRowKeys,\r\n          //   onChange: (selectedRowKeys, selectedRows) => {\r\n          //     setSelectedRowKeys(selectedRowKeys);\r\n          //   }\r\n          // }} \r\n          columns={columns} dataSource={data} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ViewSensor\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/view-past-event/index.js",["1212","1213","1214","1215"],"import { EyeOutlined, MoreOutlined, SearchOutlined, ToolOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons'\r\nimport Icon from '@ant-design/icons/lib/components/Icon'\r\nimport { Button, Dropdown, Input, Menu, message, Space, Table, Tag } from 'antd'\r\nimport { CsvIcon } from 'assets/svg/icon'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom'\r\nimport { useHistory, useParams } from 'react-router-dom/cjs/react-router-dom.min'\r\nimport { axiosInstance } from \"App\";\r\nimport { render } from '@testing-library/react'\r\nimport moment from 'moment'\r\n\r\nconst data = [\r\n  {\r\n    eventId: 'EV001',\r\n    dateReceived: '2024-03-13',\r\n    dateRequested: '2024-03-10',\r\n    status: 'Pending',\r\n    \r\n  },\r\n  {\r\n    eventId: 'EV002',\r\n    dateReceived: '2024-03-12',\r\n    dateRequested: '2024-03-11',\r\n    status: 'Submitted',\r\n    \r\n  },\r\n  // Add more data as needed\r\n];\r\n\r\nconst ViewPasEvent = () => {\r\n    const history = useHistory()\r\n    const param = useParams();\r\n    const [eventsData, setEventsData] = useState([])\r\n    const goback = ()=>{\r\n        history.goBack();\r\n    }\r\n    const columns = [\r\n        {\r\n          title: 'Event ID',\r\n          dataIndex: 'id',\r\n          key: 'id',\r\n          render: (item) => <div>#{item}</div>\r\n        },\r\n        {\r\n          title: 'Name',\r\n          dataIndex: 'name',\r\n          key: 'name',\r\n          render: (name) => <div>{name || 'Unnamed Event'}</div>\r\n        },\r\n        {\r\n          title: 'Date Received',\r\n          dataIndex: 'created_at',\r\n          key: 'created_at',\r\n          render: (item) => <div>{moment(item).format('DD-MM-YYYY')}</div>\r\n        },\r\n        {\r\n          title: 'Date Requested',\r\n          dataIndex: 'created_at',\r\n          key: 'created_at',\r\n          render: (item) => <div>{moment(item).format('DD-MM-YYYY')}</div>\r\n        },\r\n        {\r\n          title: 'Status',\r\n          dataIndex: 'status',\r\n          key: 'status',\r\n          render: (status) => (\r\n            <Tag color={status === 'Pending' ? 'yellow' : 'green'}>{status || 'Submitted'}</Tag>\r\n          ),\r\n        },\r\n        {\r\n          title: 'Action',\r\n          key: 'action',\r\n          render: (text, record) => (\r\n            <Space size=\"middle\">\r\n              <Dropdown overlay={getMenu(record)} trigger={['hover']}>\r\n                <MoreOutlined />\r\n              </Dropdown>\r\n            </Space>\r\n          ),\r\n        },\r\n      ];\r\n      const getMenu = (record) => (\r\n        <Menu>\r\n          <Menu.Item key=\"edit\" onClick={() => editLifecycleEvent(record.id)}>\r\n            <EditOutlined /> Edit\r\n          </Menu.Item>\r\n          <Menu.Item key=\"view\" onClick={() => deleteLifecycleEventHandler(record.id)}>\r\n            <DeleteOutlined /> Delete\r\n          </Menu.Item>\r\n        </Menu>\r\n      );\r\n\r\n    const editLifecycleEvent = async (event_id) => {\r\n      history.push(`/app/machine-and-sensors/machine-details/life-cycle-management/edit-life-cycle-event/${event_id}`);\r\n    }\r\n\r\n    const deleteLifecycleEventHandler = async (event_id) => {\r\n      console.log(\"fetch called\")\r\n      const response = await axiosInstance.delete(`api/admin/life-cycle-event/${event_id}/delete`\r\n        // , { search: 'none' }\r\n      );\r\n      console.log(response.data.items)\r\n      let data = response.data;\r\n      if(data.status) {\r\n        message.success(\"Event deleted successfully\")\r\n        fetchData();\r\n      } else {\r\n        message.success(\"Event cannot be deleted\")\r\n      }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      const response = await axiosInstance.get(`api/admin/life-cycle-event/list?machine_id=${param.id}`);\r\n      let data = response.data.items;\r\n      if(data) {\r\n        setEventsData([\r\n          ...data\r\n        ])\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      fetchData()\r\n    }, [])\r\n    \r\n  return (\r\n    <div>\r\n         <h4> <ToolOutlined /><span style={{\r\n                color: '#6a6a6a',\r\n                fontWeight: '300'\r\n            }}> Machine & Sensors / Sensors</span> / Past Analysis </h4>\r\n      <div className=\"d-flex justify-content-between mb-3 mt-4\">\r\n        <div className=\"\" style={{ display: \"flex\" }}>\r\n          <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              onChange={(text)=>{}}\r\n              style={{\r\n                width: 200,\r\n              }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space>\r\n          <Button icon={<Icon component={CsvIcon}/>} className=\"d-flex align-items-center ml-2\" >Export</Button>\r\n        </div>\r\n        <div className=\"mb-2 d-flex align-items-center\">\r\n          <Button\r\n            onClick={goback}\r\n            className=\"ml-3 d-flex align-items-center rounded font-weight-semibold px-4\"\r\n          >\r\n           Back\r\n          </Button>\r\n          <Button\r\n            // onClick={showModal}\r\n            className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n          >\r\n            <Link to={`/app/machine-and-sensors/machine-details/life-cycle-management/add-new-life-cycle-event/${param.id}`}>\r\n              + Add New Event</Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div className='mt-3'>\r\n      <Table columns={columns} dataSource={eventsData} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ViewPasEvent\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/misc-files/index.js",["1216","1217","1218","1219"],"import { EyeOutlined, MoreOutlined, SearchOutlined, ToolOutlined } from '@ant-design/icons'\r\nimport Icon from '@ant-design/icons/lib/components/Icon'\r\nimport { Avatar, Button, Dropdown, Input, Menu, Space, Table, Tag } from 'antd'\r\nimport { CsvIcon, ReportIcon } from 'assets/svg/icon'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom'\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min'\r\n\r\nconst MiscFiles = () => {\r\n  const history = useHistory()\r\n  const goback = () => {\r\n    history.goBack();\r\n  }\r\n  const columns = [\r\n    {\r\n      title: 'Sr No',\r\n      dataIndex: 'srNo',\r\n      key: 'srNo',\r\n    },\r\n    {\r\n      title: 'Misc File ID',\r\n      dataIndex: 'miscFileId',\r\n      key: 'miscFileId',\r\n    },\r\n    {\r\n      title: 'Machine',\r\n      dataIndex: 'machine',\r\n      key: 'machine',\r\n      render: (machine) => {\r\n        return <>\r\n          <Avatar\r\n            src={\r\n              \"https://images.unsplash.com/photo-1708616748538-bdd66d6a9e25?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\r\n            }\r\n            alt={`Avatar for`}\r\n          /> <span className='ml-2'>{machine}</span>\r\n        </>\r\n      }\r\n    },\r\n    {\r\n      title: 'Uploaded On',\r\n      dataIndex: 'uploadedOn',\r\n      key: 'uploadedOn',\r\n    },\r\n    {\r\n      title: 'Upload By',\r\n      dataIndex: 'uploadBy',\r\n      key: 'uploadBy',\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <>\r\n          <span><ReportIcon /></span>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  const getMenu = (record) => (\r\n    <Menu>\r\n      <Menu.Item key=\"view\" onClick={() => console.log(record.id)}>\r\n        <EyeOutlined /> View Detail\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n  const data = [\r\n    {\r\n      srNo: 1,\r\n      miscFileId: 'MISC001',\r\n      machine: 'Machine A',\r\n      uploadedOn: '2024-03-13',\r\n      uploadBy: 'John Doe',\r\n      status: 'Pending',\r\n    },\r\n    {\r\n      srNo: 2,\r\n      miscFileId: 'MISC002',\r\n      machine: 'Machine B',\r\n      uploadedOn: '2024-03-12',\r\n      uploadBy: 'Jane Doe',\r\n      status: 'Completed',\r\n    },\r\n    // Add more data as needed\r\n  ];\r\n  return (\r\n    <div>\r\n      <h4> <ToolOutlined /><span style={{\r\n        color: '#6a6a6a',\r\n        fontWeight: '300'\r\n      }}></span> /  Misc Files </h4>\r\n      <div className=\"d-flex justify-content-between mb-3 mt-4\">\r\n        <div className=\"\" style={{ display: \"flex\" }}>\r\n          <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              onChange={(text) => { }}\r\n              style={{\r\n                width: 200,\r\n              }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space>\r\n          <Button icon={<Icon component={CsvIcon} />} className=\"d-flex align-items-center ml-2\" >Export</Button>\r\n        </div>\r\n        <div className=\"mb-2 d-flex align-items-center\">\r\n          <Button\r\n            onClick={goback}\r\n            className=\"ml-3 d-flex align-items-center rounded font-weight-semibold px-4\"\r\n          >\r\n            Back\r\n          </Button>\r\n          <Button\r\n            // onClick={showModal}\r\n            className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n          >\r\n            <Link to={`/app/machine-and-sensors/machine-details/sensor/misc-files/${2}/add-new`}>\r\n              + Add New</Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div className='mt-3'>\r\n        <Table columns={columns} dataSource={data} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MiscFiles\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/misc-files/add-new/index.js",["1220","1221","1222","1223","1224"],"import React, { useState } from 'react'\r\nimport { Form, Input, Select, Radio, Row, Col, Button, Switch } from 'antd';\r\nimport { MachineIcon, UploadFileIcon } from 'assets/svg/icon';\r\nimport { CloseCircleOutlined, ToolOutlined } from '@ant-design/icons';\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\r\nconst { Option } = Select;\r\nconst AddNewMisc = () => {\r\n  const history = useHistory();\r\n  const [form] = Form.useForm();\r\n    let styles = {\r\n        files: {\r\n          listStyle: \"none\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"space-between\",\r\n          gap: \"13px\",\r\n          border: \"1px solid lightblue\",\r\n          padding: \"10px\",\r\n          borderRadius: \"9px\",\r\n          background: \"#0093ff0a\",\r\n        },\r\n        uploadFile: {\r\n          position: \"absolute\",\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          opacity: 0,\r\n        },\r\n    \r\n        // Add the new styles here:\r\n    \r\n        \".uploadFile::-webkit-file-upload-button\": {\r\n          visibility: \"hidden\",\r\n        },\r\n    \r\n        \".uploadFile::before\": {\r\n          content: \"'Drag & Drop'\",\r\n          display: \"inline-block\",\r\n          padding: \"10px\",\r\n          border: \"1px solid #ccc\",\r\n          borderRadius: \"4px\",\r\n          cursor: \"pointer\",\r\n        },\r\n    \r\n        \".uploadFile:hover::before\": {\r\n          backgroundColor: \"#ccc\",\r\n        },\r\n      };\r\n    const [machineStatus, setMachineStatus] = useState(false)\r\n    const [selectedFiles, setSelectedFiles] = useState([]);\r\n    const onFinish = (values) => {\r\n        console.log('Form values:', values);\r\n        // Add logic to handle form submission\r\n      };\r\n    function handleFileSelect(event) {\r\n        const fileList = event.target.files;\r\n        const newSelectedFiles = [];\r\n        for (let i = 0; i < fileList.length; i++) {\r\n          newSelectedFiles.push(fileList[i]);\r\n        }\r\n        //   console.log(selectedFiles)\r\n        setSelectedFiles([...selectedFiles, newSelectedFiles[0]]);\r\n      }\r\n    const delUplFile = (i) => {\r\n        let AfterDeleteFile = selectedFiles.filter((elem, index) => {\r\n          return index !== i;\r\n        });\r\n        setSelectedFiles(AfterDeleteFile);\r\n      };\r\n    function handleBackClick() {\r\n        // if (activeTab > 1 && activeTab <= 7) {\r\n        //   let actnum = Number(activeTab) - 1;\r\n        //   setActiveTab(actnum.toString());\r\n        // }\r\n        history.goBack();\r\n    }\r\n  return (\r\n    <div>\r\n         <h4> <ToolOutlined /><span style={{\r\n                color: '#6a6a6a',\r\n                fontWeight: '300'\r\n            }}> Machine & Sensors / Life Cycle Management / Misc Files</span> /  Add New </h4>\r\n      <Form\r\n      labelCol={{ span: 24 }}\r\n      wrapperCol={{ span: 24 }}\r\n      onFinish={onFinish}\r\n      form={form}\r\n      name=\"control-hooks\"\r\n    >\r\n      <div className=\"border rounded p-3 bg-white\">\r\n      <Row gutter={16}>\r\n        <Col span={12}>\r\n          <h5>Machine</h5>\r\n          <h4>Centrifugal Pump</h4>\r\n        </Col>\r\n      </Row>\r\n      <Row className='mt-3' gutter={16}>\r\n        \r\n      </Row>\r\n\r\n      <Row gutter={16}>\r\n      <Col span={12}>\r\n          <Form.Item label=\"Select Sensor\" name=\"sensor\" rules={[\r\n                                            { required: false, message: \"Please Select sensor\" },\r\n                                        ]}>\r\n            <Select>\r\n              <Option value=\"sensor1\">sensor 1</Option>\r\n              <Option value=\"sensor2\">sensor 2</Option>\r\n              {/* Add more options as needed */}\r\n            </Select>\r\n          </Form.Item>\r\n        </Col>\r\n       \r\n        <Col span={12}>\r\n          <Form.Item label=\"Sensor Location\" name=\"sensor_location\" rules={[\r\n                                            { required: false, message: \"Please enter Sensor Location\" },\r\n                                        ]}>\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={16}>\r\n      <Col span={24}>\r\n        <h5 className='m-0 mt-2'>\r\n        Upload Files \r\n        </h5>\r\n      <div className=\" p-3\">\r\n              <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"64\"\r\n                  height=\"64\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 64 64\"\r\n                >\r\n                  <path\r\n                    fill={\"#3CA6C1\"}\r\n                    d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n                  ></path>\r\n                  <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n                  <path\r\n                    fill={\"#3CA6C1\"}\r\n                    d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n                  ></path>\r\n                  <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n                  <path\r\n                    fill={\"#3CA6C1\"}\r\n                    d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n                  ></path>\r\n                  <path\r\n                    fill=\"#F7FCFF\"\r\n                    d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n                  ></path>\r\n                  <path\r\n                    fill=\"#D7E6EF\"\r\n                    d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n                  ></path>\r\n                  <path\r\n                    fill=\"#44394A\"\r\n                    d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n                  ></path>\r\n                </svg>\r\n                <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                <h5 className=\"mb-0\">Or</h5>\r\n                <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n                  Click here to upload\r\n                </h5>\r\n                <input\r\n                  style={styles.uploadFile}\r\n                  className=\"uploadFile\"\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileSelect}\r\n                />\r\n              </div>\r\n              <div className=\"mt-4\">\r\n                {selectedFiles.length > 0 && (\r\n                  <ul className=\"p-0\" style={{ width: \"40%\" }}>\r\n                    {selectedFiles.map((file, i) => (\r\n                      <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                        {\" \"}\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <UploadFileIcon />{\" \"}\r\n                          <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                        </div>\r\n                        <span\r\n                          style={{ cursor: \"pointer\" }}\r\n                          onClick={() => delUplFile(i)}\r\n                        >\r\n                          {\" \"}\r\n                          <CloseCircleOutlined />{\" \"}\r\n                        </span>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n              </div>\r\n            </div>\r\n        </Col>\r\n      </Row>\r\n\r\n\r\n      {/* <Form.Item wrapperCol={{ span: 24 }}>\r\n        <Button className='bg-primary text-white' type=\"submit\">Submit</Button>\r\n      </Form.Item> */}\r\n      </div>\r\n      <Form.Item>\r\n                    <div\r\n                        style={{ gap: \"10px\" }}\r\n                        className=\"mt-5 d-flex justify-content-end\"\r\n                    >\r\n                        <Button\r\n                            className=\"px-4 font-weight-semibold\"\r\n                            htmlType=\"button\"\r\n                            onClick={handleBackClick}\r\n                        >\r\n                            Back\r\n                        </Button>\r\n                        {/* <Button className=\"px-4 font-weight-semibold\" htmlType=\"button\">\r\n                            Save Draft\r\n                        </Button> */}\r\n                        <Button\r\n                            className=\"px-4 font-weight-semibold text-white bg-primary\"\r\n                            htmlType=\"submit\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </div>\r\n                </Form.Item>\r\n    </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddNewMisc\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/index.js",["1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319","1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Collapse, DatePicker, Form, Input, message, Modal, Radio, Select, Space } from \"antd\";\r\nimport { useHistory, useParams } from 'react-router-dom/cjs/react-router-dom';\r\nimport Konva from 'konva';\r\nimport ReportSerchIcon from \"assets/svg/greenSearch.png\";\r\nimport {\r\n  DeleteOutlined,\r\n  EditOutlined,\r\n  HistoryOutlined,\r\n  PlusOutlined,\r\n  CloseCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  EditColorIcon,\r\n  RemarkIcon,\r\n  ViewDetailsIcon,\r\n  UploadFileIcon,\r\n  ImagesIcon,\r\n  ConnectorResistIcon,\r\n  WhiteImageIcon,\r\n  AuxilleryChecksIcon,\r\n  MachineIcon,\r\n} from \"assets/svg/icon\";\r\nimport { Table } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport EditModal from \"./Stator Resistance/EditModal\";\r\nimport EditThermistor from \"./Stator Resistance/AuxiliaryCheckEdits/EditThermistor\";\r\nimport EditSIModal from './Stator-Insulation/EditSIModal'\r\nimport SRUpload from \"./Stator Resistance/SRUpload\";\r\nimport SIUpload from \"./Stator-Insulation/SIUpload\";\r\nimport RRUpload from \"./Rotor-Resistance/RRUpload\";\r\nimport EditRRModal from \"./Rotor-Resistance/EditRRModal\";\r\nimport EditRIModal from \"./Rotor-Insulation/EditRIModal\";\r\nimport EditPolarizationIndexModal from \"./Polarization-Index/EditPolarizationIndexModal\";\r\nimport EditSCModal from \"./Surge-Compression/EditSCModal\";\r\nimport EditPT_100 from \"./Stator Resistance/AuxiliaryCheckEdits/EditPT_100\";\r\nimport EditBrake from \"./Stator Resistance/AuxiliaryCheckEdits/EditBrake\";\r\nimport EditOthers from \"./Stator Resistance/AuxiliaryCheckEdits/EditOthers\";\r\nimport EditStatorResistance from \"./Stator-Insulation/Stator_winding_electrical_tests/EditStatorResistance\";\r\nimport EditStatorInsulation from \"./Stator-Insulation/Stator_winding_electrical_tests/EditStatorInsulation\";\r\nimport FreeLoadTest from \"./Free-Load-Test/FreeLoadTest\";\r\nimport EditFreeLoadTest from \"./Free-Load-Test/EditFreeLoadTest\";\r\nimport MechanicalInspection from \"./Mechanical_Inspection/MechanicalInspection\";\r\nimport RotatorShaftRunout from \"./Rotator-Shaft-Runout/RotatorShaftRunout\";\r\nimport FreeVolumeCheck from \"./Free-Volume-Check/FreeVolumeCheck\";\r\nimport FlamePathDimension from \"./Flame-Path-Dimension/FlamePathDimension\";\r\nimport MiscelleneousReport from \"./MiscellenousReport/MiscelleneousReport\";\r\nimport moment from \"moment\";\r\nimport AuxiliariesChecks from \"./Auxiliaries-Checks/AuxiliariesChecks\";\r\nimport StatorWindingElectricalTests from \"./Stator-Winding-Electrical-Tests/StatorWindingElectricalTests\";\r\nimport VibrationTests from \"./Vibration-Tests/VibrationTests\";\r\nimport EditVibrationTests from \"./Vibration-Tests/EditVibrationTests\";\r\nimport { axiosInstance } from \"App\";\r\nimport marker_images from \"./marker_images\";\r\nimport { UploadImage } from \"utils/Upload\";\r\nimport { set } from \"lodash\";\r\nimport UploadPhotos from \"./Upload-Photos/UploadPhotos\";\r\n\r\n\r\n\r\nlet styles = {\r\n  files: {\r\n    listStyle: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    gap: \"13px\",\r\n    border: \"1px solid lightblue\",\r\n    padding: \"10px\",\r\n    borderRadius: \"9px\",\r\n    background: \"#0093ff0a\",\r\n  },\r\n  uploadFile: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    opacity: 0,\r\n  },\r\n\r\n  // Add the new styles here:\r\n\r\n  \".uploadFile::-webkit-file-upload-button\": {\r\n    visibility: \"hidden\",\r\n  },\r\n\r\n  \".uploadFile::before\": {\r\n    content: \"'Drag & Drop'\",\r\n    display: \"inline-block\",\r\n    padding: \"10px\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  \".uploadFile:hover::before\": {\r\n    backgroundColor: \"#ccc\",\r\n  },\r\n};\r\nconst data3 = [\r\n  {\r\n    key: \"1\",\r\n    srNo: 1,\r\n    dateReceived: \"2024-03-18\",\r\n    receivedBy: \"John\",\r\n    dateRequested: \"2024-03-15\",\r\n    dateDelivery: \"2024-03-20\",\r\n    deliveredBy: \"Jane\",\r\n  },\r\n  {\r\n    key: \"2\",\r\n    srNo: 2,\r\n    dateReceived: \"2024-03-19\",\r\n    receivedBy: \"Alice\",\r\n    dateRequested: \"2024-03-16\",\r\n    dateDelivery: \"2024-03-21\",\r\n    deliveredBy: \"Bob\",\r\n  },\r\n  // Add more data as needed\r\n];\r\n\r\n\r\n\r\n\r\n// dateReceived: \"\",\r\n//       receivedBy: \"\",\r\n//       dateRequested: \"\",\r\n//       dateDelivery: \"\",\r\n//       deliveredBy: \"\"\r\n\r\nconst columns3 = [\r\n  {\r\n    title: \"Sr No\",\r\n    dataIndex: \"srNo\",\r\n    key: \"srNo\",\r\n  },\r\n  {\r\n    title: \"Date Received\",\r\n    dataIndex: \"dateReceived\",\r\n    key: \"dateReceived\",\r\n    render:(text,record)=>(\r\n      text? moment(text).format(\"DD-MM-YYYY\"):\"\"\r\n    )\r\n  },\r\n  {\r\n    title: \"Received By\",\r\n    dataIndex: \"receivedBy\",\r\n    key: \"receivedBy\",\r\n  },\r\n  {\r\n    title: \"Date Requested\",\r\n    dataIndex: \"dateRequested\",\r\n    key: \"dateRequested\",\r\n    render:(text,record)=>(\r\n     text? moment(text).format(\"DD-MM-YYYY\"):\"\"\r\n    )\r\n  },\r\n  {\r\n    title: \"Date Delivery\",\r\n    dataIndex: \"dateDelivery\",\r\n    key: \"dateDelivery\",\r\n    render:(text,record)=>(\r\n     text? moment(text).format(\"DD-MM-YYYY\"):null\r\n    )\r\n  },\r\n  {\r\n    title: \"Delivered By\",\r\n    dataIndex: \"deliveredBy\",\r\n    key: \"deliveredBy\",\r\n  },\r\n];\r\nconst columns4 = [\r\n  {\r\n    title: \"Sr No\",\r\n    dataIndex: \"srNo\",\r\n    key: \"srNo\",\r\n  },\r\n  {\r\n    title: \"Title\",\r\n    dataIndex: \"title\",\r\n    key: \"title\",\r\n  },\r\n  {\r\n    title: \"Data\",\r\n    dataIndex: \"data\",\r\n    key: \"data\",\r\n    render: (text, record) => (\r\n       text.includes(\"-\")? text.split(\"-\")[0]+text.split(\"-\")[1]: text\r\n    )\r\n  },\r\n];\r\n\r\n\r\nconst columns1 = [\r\n  {\r\n    title: \"Sr No\",\r\n    dataIndex: \"srNo\",\r\n    key: \"srNo\",\r\n  },\r\n  {\r\n    title: \"Quote/Job Ref\",\r\n    dataIndex: \"quote_job_ref\",\r\n    key: \"quoteJobRef\",\r\n  },\r\n  {\r\n    title: \"PO Ref\",\r\n    dataIndex: \"po_ref\",\r\n    key: \"poRef\",\r\n  },\r\n  {\r\n    title: \"Customer\",\r\n    dataIndex: \"customer\",\r\n    key: \"customer\",\r\n  },\r\n  {\r\n    title: \"Sales\",\r\n    dataIndex: \"sales\",\r\n    key: \"sales\",\r\n  },\r\n];\r\nconst { Panel } = Collapse;\r\nconst text = `\r\n  A dog is a type of domesticated animal.\r\n  Known for its loyalty and faithfulness,\r\n  it can be found as a welcome guest in many households across the world.\r\n`;\r\nconst AddNewLifeCycleEvent = () => {\r\n  const [form] =Form.useForm();\r\n  const history = useHistory();\r\n  const param = useParams();\r\n  const [jobRefModal, setJobRefModal] = useState(false);\r\n  const [SCEditModal, setSCEditModal] = useState(false)\r\n  const [SIEditModal, setSIEditModal] = useState(false);\r\n  const [SREditModal, setSREditModal] = useState(false);\r\n  const [SRUploadForm, setSRUploadForm] = useState(false);\r\n  const [SIUploadForm, setSIUploadForm] = useState(false);\r\n  const [RRUploadForm, setRRUploadForm] = useState(false);\r\n  const [RREditModal, setRREditModal] = useState(false);\r\n  const [RIEditModal, setRIEditModal] = useState(false);\r\n  const [PIEditModal, setPIEditModal] = useState(false);\r\n  const [modalName, setModalName] = useState(\"\");\r\n  const [eventName, setEventName] = useState(\"\");\r\n  // console.log(\"Modal name: \" + modalName);\r\n  const [auxileryChecksHeater, setAuxileryChecksHeater] = useState({})\r\n  const [auxileryChecksThermistor, setAuxileryChecksThermistor] = useState({})\r\n  const [auxileryChecksThermostate, setAuxileryChecksThermostate] = useState({})\r\n  const [auxileryCheckspt_100, setAuxileryCheckspt_100] = useState({})\r\n  const [auxileryChecksBrake, setAuxileryChecksBrake] = useState({})\r\n  const [auxileryChecksOther, setAuxileryChecksOther] = useState({})\r\n  const [initialeditModal, setInitialeditModal] = useState(false);\r\n  const {Option} = Select;\r\n  //inital and physical inspection\r\n  const [initialModalForm, setInitialModalForm] = useState({});\r\n  const [initialModalFormdata, setInitialModalFormdata] = useState({});\r\n\r\n\r\n  const [receiveAndDeliver, setReceiveAndDeliver] = useState(false);\r\n  const [machineDataModal, setMachineDataModal] = useState(false);\r\n  const [machineUploadModal, setMachineUploadModal] = useState(false);\r\n  const [initialcondUploaModal, setInitialcondUploaModal] = useState(false);\r\n  const [initialConditionUploaModal, setInitialConditionUploaModal] = useState(false); // for Initial condition and physical condition section\r\n  const [initialcondVibrationUploaModal, setInitialcondVibrationUploaModal] = useState(false); // for vibration test section\r\n  const [uploadModal, setUploadModal] = useState(false)\r\n  const [uploadImageType, setUploadImageType] = useState('')\r\n\r\n  const [selectedFiles1, setSelectedFiles1] = useState([]);\r\n  const [selectedImages, setSelectedImages] = useState([]);\r\n  const [selectedImages1, setSelectedImages1] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n \r\n  const [statorWindingGlobaldata, setStatorWindingGlobaldata] = useState({});\r\n  const [statorInsulationdata, setStatorInsulationdata] = useState({});\r\n  const [statorRotarResistData, setStatorRotarResistData] = useState({});\r\n  const [statorRotorInsulationData, setStatorRotorInsulationData] = useState(\r\n    {}\r\n  );\r\n  const [statorPolarizationIndexData, setStatorPolarizationIndexData] =\r\n    useState({});\r\n  const [statorSurgeCompressionData, setStatorSurgeCompressionData] = useState({})\r\n  const [remarksModalForGeneralProcess, setRemarksModalForGeneralProcess] = useState(false);\r\n  const [funcState, setFuncState] = useState(\"\");\r\n  const [funcState2,setFuncState2] = useState(\"\");\r\n  const [remarks, setRemarks] = useState(\"\");\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [machineId, setMachineId] = useState(false);\r\n\r\n\r\n\r\n  const [receiveAndDelData, setReceiveAndDelData] = useState({});\r\n  // receive and delivery\r\n  const [receiveAndDeliverData, setReceiveAndDeliverData] = useState([\r\n    {\r\n      srNo: 1,\r\n      dateReceived: \"\",\r\n      receivedBy: \"\",\r\n      dateRequested: \"\",\r\n      dateDelivery: \"\",\r\n      deliveredBy: \"\"\r\n    }\r\n  ])\r\n\r\n\r\n  //Proccess Control State\r\n  const [generalProcess, setGeneralProcess] = useState({\r\n    onsite_inspection: {\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    onsite_dismantling: {\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_receiving_inspection: {\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_electrical_test_and_free_run_test: {\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_disassemble_motor: {\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_mechanical_checks: {\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_clean_parts: {\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_bake_stator_in_oven: {\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_varnish_and_bake: {\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n  });\r\n  const [rewinding, setRewinding] = useState({\r\n    ws_check_winding_dimension:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\" \r\n    },\r\n    ws_cut_winding:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    } ,\r\n    ws_burn_out_in_heat_cleaning_oven:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_lamination_core_test:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    } ,\r\n    ws_reStack_lamination:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    } ,\r\n    ws_rewind_main_stator:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    } ,\r\n    ws_tig_soldering:{\r\n      operator: \"\", \r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\" \r\n    } ,\r\n    ws_in_progress_test_on_winding_before_varnish:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    } ,\r\n    ws_pre_heat_before_varnish:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    } ,\r\n    ws_varnish_and_bake_in_oven:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    } \r\n  })\r\n\r\n  const [assemblyAndFinalTest,setAssemblyAndFinalTest] = useState({\r\n    ws_dynamic_balancing_of_rotor:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\" \r\n    },\r\n    ws_recondition_of_housing_journal:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_electrical_test_before_assembly:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_mechanical_check_before_assembly:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_re_assemble_bearings:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_re_assemble_motor:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_res_assemble_seals:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_final_test_and_inspection_after_overhauling:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_painting:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    ws_packaging:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    }\r\n  })\r\n\r\n  const [deliverToSite,setDeliverToSite] = useState({\r\n    onsite_installation_and_alignment:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n    onsite_commissioning:{\r\n      operator: \"\",\r\n      start_date: \"\",\r\n      completion_date: \"\",\r\n      remarks: \"\"\r\n    },\r\n  })\r\n\r\n  const [otherProcessControl,setOtherProcessControl] = useState({\r\n      responsiblePerson:\"\",\r\n      date:\"\"\r\n  })\r\n\r\n\r\n  //parts renewal\r\n  const [partsRenewal,setPartsRenewal] = useState([])\r\n  const [partsRenewalModal,setPartsRenewalModal] = useState(false)\r\n  const columns = [\r\n    {\r\n      title: \"Sr No\",\r\n      dataIndex: \"srNo\",\r\n      key: \"srNo\",\r\n    },\r\n    {\r\n      title: \"Item\",\r\n      dataIndex: \"item\",\r\n      key: \"item\",\r\n    },\r\n    {\r\n      title: \"Spec\",\r\n      dataIndex: \"spec\",\r\n      key: \"spec\",\r\n    },\r\n    {\r\n      title: \"Qty\",\r\n      dataIndex: \"qty\",\r\n      key: \"qty\",\r\n    },\r\n    {\r\n      title: \"Remarks\",\r\n      dataIndex: \"remarks\",\r\n      key: \"remarks\",\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      // dataIndex: \"action\",\r\n      render: (action) => {\r\n        return (\r\n          <>\r\n            <Button className=\"bg-danger text-white\"\r\n              onClick={() => {\r\n                setPartsRenewal(partsRenewal.filter((item) => item.srNo !== action.srNo));\r\n              }}\r\n            >\r\n              <DeleteOutlined />\r\n            </Button>\r\n          </>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const onFinishParts = (values) => {\r\n    setPartsRenewal([...partsRenewal, {\r\n      srNo: partsRenewal.length + 1,\r\n      item: values.item,\r\n      spec: values.spec,\r\n      qty: values.qty,\r\n      remarks: values.remarks\r\n    }]);\r\n    form.resetFields();\r\n    setPartsRenewalModal(false)\r\n  }\r\n\r\n  const [machineDataUnit, setMachineDataUnit] = useState({\r\n    power:\"KW\",\r\n    voltage:\"V\",\r\n    current:\"A\",\r\n    sec_voltage:\"V\",\r\n    sec_current:\"A\",\r\n    frequency:\"Hz\",\r\n    speed:\"rpm\",\r\n  })\r\n  \r\n\r\n  //free volume checks\r\n  const [freeVolumeData, setFreeVolumeData] = useState([\r\n    {\r\n      key: \"1\",\r\n      srNo: 1,\r\n      title: \"Frame - V1- Motor body / Stator\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Motor Frame inner dia 'a'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Motor Core length 'b'\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Motor Core Length 'f'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Remark\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"2\",\r\n      srNo: 2,\r\n      title: \"Frame - V2- Lead Connection Chamber\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Width\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Breadth\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Height\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Remark\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"3\",\r\n      srNo: 3,\r\n      title: \"Terminal Box - V3- Rectangular box\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"T-box internal width 'w'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"T-box internal breadth 'b'\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"T-box internal height 'h'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"4\",\r\n      srNo: 4,\r\n      title: \"Terminal Box -V4- Circular box\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"T-Box internal width 'w'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"T-Box internal breadth 'h'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"5\",\r\n      srNo: 5,\r\n      title: \"Auxiliary box - V5- Rectangular box\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"T-Box internal width 'w'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"T-box internal breadth 'b'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"6\",\r\n      srNo: 6,\r\n      title: \"Auxiliary box - V6- Circular box\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"T-box internal width 'w'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"T-box internal breadth 'h'\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n  ])\r\n\r\n  //flame path \r\n  const [flamePathData, setFlamePathData] = useState([\r\n    {\r\n      key: \"1\",\r\n      srNo: 1,\r\n      title: \"Position A\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"2\",\r\n      srNo: 2,\r\n      title: \"Position B\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"3\",\r\n      srNo: 3,\r\n      title: \"Position C\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"4\",\r\n      srNo: 4,\r\n      title: \"Position C1\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"5\",\r\n      srNo: 5,\r\n      title: \"Position D\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"6\",\r\n      srNo: 6,\r\n      title: \"Position E\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"7\",\r\n      srNo: 7,\r\n      title: \"Position E1\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"8\",\r\n      srNo: 8,\r\n      title: \"Position G\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"9\",\r\n      srNo: 9,\r\n      title: \"Position H\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"10\",\r\n      srNo: 10,\r\n      title: \"Position J\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"11\",\r\n      srNo: 11,\r\n      title: \"Position K\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"12\",\r\n      srNo: 12,\r\n      title: \"Position L\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"13\",\r\n      srNo: 13,\r\n      title: \"Position M\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"14\",\r\n      srNo: 14,\r\n      title: \"Position N\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"15\",\r\n      srNo: 15,\r\n      title: \"Position P\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Chamber Volume\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Flame Path Length\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Maximum permissible gap\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 4,\r\n              name: \"Logically larger diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 5,\r\n              name: \"Logically smaller diameter\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 6,\r\n              name: \"Gap\",\r\n              check: null,\r\n              value: \"\"\r\n          }, \r\n          {\r\n              key: 7,\r\n              name: \"Acceptable to standard\",\r\n              check: null,\r\n              value: \"\"\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"16\",\r\n      srNo: 16,\r\n      title: \"Position P1\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Flange surface and flatness checked and acceptable\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"17\",\r\n      srNo: 17,\r\n      title: \"Position L1\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Flange surface and flatness checked and acceptable\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"18\",\r\n      srNo: 18,\r\n      title: \"Position M1\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Flange surface and flatness checked and acceptable\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"19\",\r\n      srNo: 19,\r\n      title: \"Position K1\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Flange surface and flatness checked and acceptable\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"20\",\r\n      srNo: 20,\r\n      title: \"Position M2\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Number of threads engaged\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Thread\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 3,\r\n              name: \"Condition acceptable to Standard\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"21\",\r\n      srNo: 21,\r\n      title: \"Position R\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n  ])\r\n\r\n\r\n  //rotar shaft runout\r\n  const [rotatorShaftData, setRotatorShaftData] = useState([\r\n    {\r\n      key: \"1\",\r\n      srNo: 1,\r\n      title: \"Position 1\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Name\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Length\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"A\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"B\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"C\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"D\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"2\",\r\n      srNo: 2,\r\n      title: \"Position 2\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Name\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Length\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"A\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"B\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"C\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"D\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"3\",\r\n      srNo: 3,\r\n      title: \"Position 3\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Name\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Length\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"A\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"B\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"C\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"D\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"4\",\r\n      srNo: 4,\r\n      title: \"Position 4\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Name\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Length\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"A\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"B\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"C\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"D\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"5\",\r\n      srNo: 5,\r\n      title: \"Position 5\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Name\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Diameter\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Length\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"A\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"B\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"C\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"D\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n  ])\r\n\r\n  //mechanical inspection\r\n  const [mechanicalInspectionData, setMechanicalInspectionData] = useState([\r\n    {\r\n      key: \"1\",\r\n      srNo: 1,\r\n      title: \"Bearing Journal DE\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"A-A`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"B-B`\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"C-C`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"2\",\r\n      srNo: 2,\r\n      title: \"Bearing Journal NDE\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"A-A`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"B-B`\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"C-C`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"3\",\r\n      srNo: 3,\r\n      title: \"Bearing Housing DE\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"A-A`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"B-B`\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"C-C`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"4\",\r\n      srNo: 4,\r\n      title: \"Bearing Housing NDE\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"A-A`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"B-B`\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"C-C`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"5\",\r\n      srNo: 5,\r\n      title: \"Other\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"A-A`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"B-B`\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"C-C`\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n  ])\r\n\r\n  //stator winding \r\n  const [statorWindingData, setStatorWindingData] = useState([\r\n    {\r\n      key: \"1\",\r\n      srNo: 1,\r\n      title: \"Stator Resistance\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"U1-U2\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"U-V\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"V1-V2\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"U-W\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"W1-W2\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"V-W\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"Checked by\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Instrument\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 9,\r\n              name: \"Date\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 10,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"2\",\r\n      srNo: 2,\r\n      title: \"Stator Insulation\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"UVW-E\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"U-E\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"V-E\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"W-E\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"U-V\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"V-W\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"U-W\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Test Volt\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 9,\r\n              name: \"Checked by\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 10,\r\n              name: \"Instrument\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 11,\r\n              name: \"Date\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 12,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"3\",\r\n      srNo: 3,\r\n      title: \"Rotor Resistance\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"K-L\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"K-M\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"L-M\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Checked by\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"Instrument\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"Date\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"4\",\r\n      srNo: 4,\r\n      title: \"Rotor Insulation\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"KLM-E\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"K-E\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"L-E\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"M-E\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"Test Volt\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"Checked by\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"Instrument\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Date\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 9,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"5\",\r\n      srNo: 5,\r\n      title: \"Polarization  Index\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Ins 1 min\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Ins 10 min\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"PI\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Test Volt\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"Checked by\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"Instrument\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"Date\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"6\",\r\n      srNo: 6,\r\n      title: \"Surge Compression\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"U-V\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"U-W\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"V-W\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Test Volt\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"Checked by\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"Instrument\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"Date\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n  ])\r\n\r\n  //auxiliaries checks\r\n  const [auxiliariesChecksData, setAuxiliariesChecksData] = useState([\r\n    {\r\n      key: \"1\",\r\n      srNo: 1,\r\n      title: \"Heater\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Insulation\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Result\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Resistance\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Result\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"Test Volt\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"2\",\r\n      srNo: 2,\r\n      title: \"Thermistor\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Resistance\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Result\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 3,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"3\",\r\n      srNo: 3,\r\n      title: \"Thermostat\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Resistance\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Result\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 3,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"4\",\r\n      srNo: 4,\r\n      title: \"PT-100\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Resistance\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Result\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 3,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"5\",\r\n      srNo: 5,\r\n      title: \"Brake\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Insulation\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Result\",\r\n              check: null,\r\n              value: \"\",\r\n          }, \r\n          {\r\n              key: 3,\r\n              name: \"Resistance\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 4,\r\n              name: \"Result\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 5,\r\n              name: \"Test Volt\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 6,\r\n              name: \"Act Volt\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 7,\r\n              name: \"DC Volt\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 8,\r\n              name: \"Current\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 9,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n    {\r\n      key: \"6\",\r\n      srNo: 6,\r\n      title: \"Other Tests\",\r\n      photos: [],\r\n      data: [\r\n          {\r\n              key: 1,\r\n              name: \"Test records\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n          {\r\n              key: 2,\r\n              name: \"Remarks\",\r\n              check: null,\r\n              value: \"\",\r\n          },\r\n      ],\r\n    },\r\n  ])\r\n\r\n  \r\n\r\n  //machineData\r\n  const [otherMachineData, setOtherMachineData] = useState({\r\n    remarks: \"\",\r\n    checkedBy: \"\",\r\n    date:\"\"\r\n  })\r\n  const [machineData, setMachineData] = useState([\r\n  {\r\n    key: \"1\",\r\n    srNo: 1,\r\n    title: \"Equipment\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"2\",\r\n    srNo: 2,\r\n    title: \"Tag No\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"3\",\r\n    srNo: 3,\r\n    title: \"Manufacturer\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"4\",\r\n    srNo: 4,\r\n    title: \"Serial No\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"5\",\r\n    srNo: 5,\r\n    title: \"Model\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"6\",\r\n    srNo: 6,\r\n    title: \"Frame Size\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"7\",\r\n    srNo: 7,\r\n    title: \"Power\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"8\",\r\n    srNo: 8,\r\n    title: \"Voltage\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"9\",\r\n    srNo: 9,\r\n    title: \"Current\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"10\",\r\n    srNo: 10,\r\n    title: \"Sec Voltage\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"11\",\r\n    srNo: 11,\r\n    title: \"Sec Current\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"12\",\r\n    srNo: 12,\r\n    title: \"Phase\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"13\",\r\n    srNo: 13,\r\n    title: \"Frequency\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"14\",\r\n    srNo: 14,\r\n    title: \"Pole\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"15\",\r\n    srNo: 15,\r\n    title: \"Speed\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"16\",\r\n    srNo: 16,\r\n    title: \"Power Factor\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"17\",\r\n    srNo: 17,\r\n    title: \"Insulation Class\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"18\",\r\n    srNo: 18,\r\n    title: \"IP\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"19\",\r\n    srNo: 19,\r\n    title: \"Ex-Proof Type\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"20\",\r\n    srNo: 20,\r\n    title: \"Ex-Proof Cert\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"21\",\r\n    srNo: 21,\r\n    title: \"DE Bearing\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"22\",\r\n    srNo: 22,\r\n    title: \"NDE Bearing\",\r\n    data: \"\",\r\n  },\r\n  {\r\n    key: \"23\",\r\n    srNo: 23,\r\n    title: \"Colour\",\r\n    data: \"\",\r\n  },\r\n  ])\r\n  \r\n\r\n  //initial conditions and physical inspection\r\n  const [initialConditionsAndPhysicalInspection, setInitialConditionAndPhysicalInspection] = useState({\r\n    completedUnit:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    stator:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    rotor:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    coupling:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    pulley:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    impeller:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    t_box:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    t_box_cover:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    power_cable:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    terminal_board:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    connector:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    cooling_fan_cover:{\r\n     check: null,\r\n      value: \"\"\r\n    },\r\n    cooling_fan:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    blower:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    pump:{\r\n     check: null,\r\n      value: \"\"\r\n    },\r\n    brake:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    gear_box:{\r\n      check: null,\r\n      value: \"\"\r\n    } ,\r\n    de_seal:{\r\n      check: null,\r\n      value: \"\"\r\n    },\r\n    nde_seal:{\r\n       check: null,\r\n      value: \"\"\r\n    },\r\n    nde_washer:{\r\n     check: null,\r\n      value: \"\"\r\n    },\r\n\r\n    de_washer:{\r\n     check: null,\r\n      value: \"\"\r\n    },\r\n    de_circlip:{\r\n       check: null,\r\n      value: \"\"\r\n    },\r\n    nde_circlip:{\r\n       check: null,\r\n      value: \"\"\r\n    },\r\n    others:{\r\n        check: null,\r\n      value: \"\"\r\n    },\r\n    \r\n})\r\nconst [otherInitialData, setOtherInitialData] = useState({\r\n  remarks: \"\",\r\n  checkedBy: \"\",\r\n  date:\"\" \r\n})\r\n\r\nconst [miscelleneousReportData, setMiscelleneousReportData] = useState([])\r\n\r\n//free load test\r\nconst [selectedImages2, setSelectedImages2] = useState([]);\r\nconst [freeLoadTestModal, setFreeLoadTestModal] = useState(false)\r\nconst [freeLoadData, setFreeLoadData] = useState({\r\n  stator_volt:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  frequency:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  current_l1:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  current_l2:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  current_l3:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  connection:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  speed:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  rotation:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  de_temp:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  nde_temp:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  position:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  time:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n\r\n})\r\n\r\n//free load test\r\nconst [selectedImages3, setSelectedImages3] = useState([]);\r\nconst [selectedImageTemp, setSelectedImageTemp] = useState('');\r\nconst [vibrationTestModal, setVibrationTestModal] = useState(false)\r\nconst [vibrationData, setVibrationData] = useState({\r\n  point_1:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  point_2:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  point_3:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  point_4:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  point_5:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  point_6:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  de_bearing:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  nde_bearing:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  others:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n  remarks:{\r\n    check: null,\r\n    value: \"\"\r\n  },\r\n\r\n})\r\n\r\n\r\nconst [jobReference, setJobReference] = useState([\r\n  {\r\n    srNo: 1,\r\n    quote_job_ref: \"\",\r\n    po_ref: \"\",\r\n    customer: \"\",\r\n    sales: \"\",   \r\n  }\r\n])\r\n\r\nconst data2= {\r\n  processControl: {\r\n    generalProcess: generalProcess,\r\n    rewinding: rewinding,\r\n    assemblyAndFinalTest: assemblyAndFinalTest,\r\n    deliverToSite: deliverToSite,\r\n    otherProcessControl: otherProcessControl\r\n  },\r\n  partsRenewal: partsRenewal,\r\n  jobReference: jobReference,\r\n  receiveAndDeliverData: receiveAndDeliverData,\r\n  machineData: {\r\n    machineData,\r\n    otherMachineData,\r\n    imagesData: selectedImages\r\n  },\r\n  initialConditionsAndPhysicalInspection: {\r\n    initialConditionsAndPhysicalInspection,\r\n    otherInitialData,\r\n    imagesData: selectedImages1\r\n  },\r\n  statorWindingData: statorWindingData,\r\n  auxiliariesChecksData: auxiliariesChecksData,\r\n  freeLoadData: {\r\n    freeLoadData,\r\n    imagesData: selectedImages2\r\n  },\r\n  vibrationData: {\r\n    vibrationData,\r\n    imagesData: selectedImages3\r\n  },\r\n  mechanicalInspectionData: mechanicalInspectionData,\r\n  rotatorShaftData: rotatorShaftData,\r\n  freeVolumeData: freeVolumeData,\r\n  flamePathData: flamePathData,\r\n  miscelleneousReport: miscelleneousReportData\r\n}\r\n\r\n\r\nconst returnClass = (value) => {\r\n  if (value === 1) {\r\n    return \"green-radio\";\r\n  } else if (value === 2) {\r\n    return \"red-radio\";\r\n  } else if (value === 3) {\r\n    return \"grey-radio\";\r\n  }\r\n}\r\n\r\n  const [radiodata, setRadiodata] = useState({\r\n    quote_job_ref: \"\",\r\n  });\r\n  const [data, setData] = useState({});\r\n\r\n\r\n\r\n  const handleRadioChnge = (name, e) => {\r\n    const value = e.target.value;\r\n  \r\n    // Update radiodata state\r\n    setRadiodata((prevRadiodata) => ({\r\n      ...prevRadiodata,\r\n      [name]: value !== \"\" ? true : false,\r\n    }));\r\n  \r\n    // Update data state\r\n    setData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  \r\n    console.log(name, value);\r\n    console.log(radiodata, data); // Note: Logs may not show immediate updates due to React state batching\r\n  };\r\n  \r\n  const handleRadio1Chnge = (name, e) => {\r\n    const value = e.target.value;\r\n  \r\n    // Update receiveAndDelData state\r\n    setReceiveAndDelData((prevReceiveAndDelData) => ({\r\n      ...prevReceiveAndDelData,\r\n      [name]: value !== \"\" && value !== null,\r\n    }));\r\n  \r\n    // Update data state\r\n    setData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n\r\n  };\r\n  \r\n  const handleRadio2Chnge = (name, e) => {\r\n    console.log(name, e.target.value);\r\n    setInitialModalFormdata((prevData) => ({\r\n    ...prevData,\r\n    [name]: e.target.value,\r\n  }));\r\n  };\r\n\r\n  function handleFileSelect(event) {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    //   console.log(selectedFiles)\r\n    // setSelectedImages([...selectedImages, newSelectedFiles[0]]);\r\n\r\n    if(!newSelectedFiles[0]) return;\r\n    \r\n    const file = newSelectedFiles[0];\r\n    const fsize = file.size;\r\n    const file_1 = Math.round((fsize / 1024));\r\n    if (file_1 > 1024) {\r\n      message.error(\"Seleted Image Size is too big\");\r\n      return\r\n    }\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = function (e) {\r\n      let image_src = e.target.result;\r\n      // console.log(image_src);\r\n      if(image_src) {\r\n        setSelectedImageTemp(image_src);\r\n        UploadImageMarkingKonva(image_src, imageMarkings);\r\n      }\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n  const delUplFile = (i) => {\r\n    let AfterDeleteFile = selectedImages.filter((elem, index) => {\r\n      return index !== i;\r\n    });\r\n    setSelectedImages(AfterDeleteFile);\r\n  };\r\n\r\n  function handleFileSelect1(event) {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    // setSelectedImages1([...selectedImages1, newSelectedFiles[0]]);\r\n    \r\n    if(!newSelectedFiles[0]) return;\r\n    \r\n    const file = newSelectedFiles[0];\r\n    const fsize = file.size;\r\n    const file_1 = Math.round((fsize / 1024));\r\n    if (file_1 > 1024) {\r\n      message.error(\"Seleted Image Size is too big\");\r\n      return\r\n    }\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = function (e) {\r\n      let image_src = e.target.result;\r\n      // console.log(image_src);\r\n      if(image_src) {\r\n        setSelectedImageTemp(image_src);\r\n        UploadImageMarkingKonva(image_src, imageMarkings);\r\n      }\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n  const delUplFile1 = (i) => {\r\n    let AfterDeleteFile = selectedImages1.filter((elem, index) => {\r\n      return index !== i;\r\n    });\r\n    setSelectedImages1(AfterDeleteFile);\r\n  };\r\n\r\n  function handleFileSelect2(event) {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    // setSelectedImages2([...selectedFiles1, newSelectedFiles[0]]);\r\n\r\n    if(!newSelectedFiles[0]) return;\r\n\r\n    const file = newSelectedFiles[0];\r\n    const fsize = file.size;\r\n    const file_1 = Math.round((fsize / 1024));\r\n    if (file_1 > 1024) {\r\n      message.error(\"Seleted Image Size is too big\");\r\n      return\r\n    }\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = function (e) {\r\n      let image_src = e.target.result;\r\n      if(image_src) {\r\n        setSelectedImageTemp(image_src);\r\n        UploadImageMarkingKonva(image_src, imageMarkings);\r\n      }\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n  const delUplFile2 = (i) => {\r\n    let AfterDeleteFile = selectedImages2.filter((elem, index) => {\r\n      return index !== i;\r\n    });\r\n    setSelectedImages2(AfterDeleteFile);\r\n  };\r\n\r\n  function handleFileSelectVibrationTest(event) {\r\n    const fileList = event.target.files;\r\n    const newSelectedFiles = [];\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      newSelectedFiles.push(fileList[i]);\r\n    }\r\n    // setSelectedImages3([...selectedFiles1, newSelectedFiles[0]]);\r\n    \r\n    // new logic\r\n    if(!newSelectedFiles[0]) return;\r\n    \r\n    const file = newSelectedFiles[0];\r\n    const fsize = file.size;\r\n    const file_1 = Math.round((fsize / 1024));\r\n    if (file_1 > 1024) {\r\n      message.error(\"Seleted Image Size is too big\");\r\n      return\r\n    }\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = function (e) {\r\n      let image_src = e.target.result;\r\n      if(image_src) {\r\n        setSelectedImageTemp(image_src);\r\n        UploadImageMarkingKonva(image_src, imageMarkings);\r\n      }\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n  const delUplFile3 = (i) => {\r\n    let AfterDeleteFile = selectedImages3.filter((elem, index) => {\r\n      return index !== i;\r\n    });\r\n    setSelectedImages3(AfterDeleteFile);\r\n  };\r\n\r\n  const delSubUploadedPhoto = (i, type) => {\r\n    let img_section = type.split(' ~ ')[0];\r\n    let img_subsection = type.split(' ~ ')[1];\r\n    // console.log(i, type)\r\n    if(img_section == 'Flame-Path') {\r\n      let index = flamePathData.findIndex((e) => e.title == img_subsection)\r\n      // let all_data = flamePathData\r\n      // all_data[index].photos = all_data[index].photos.filter((e, ind) => ind !== i);\r\n      setFlamePathData((prevData) => {\r\n        return prevData.map((el,ind) => {\r\n          return {\r\n            ...el,\r\n            photos: ind == index ? el.photos.filter((e, ind) => ind !== i) : el.photos\r\n          }\r\n        })\r\n      });\r\n    }\r\n    if(img_section == 'Free-Volume') {\r\n      let index = freeVolumeData.findIndex((e) => e.title == img_subsection)\r\n      // let all_data = freeVolumeData\r\n      // all_data[index].photos = freeVolumeData[index].photos.filter((e, ind) => ind !== i);\r\n      setFreeVolumeData((prevData) => {\r\n        return prevData.map((el,ind) => {\r\n          return {\r\n            ...el,\r\n            photos: ind == index ? el.photos.filter((e, ind) => ind !== i) : el.photos\r\n          }\r\n        })\r\n      });\r\n    }\r\n    if(img_section == 'Rotor-Shaft') {\r\n      let index = rotatorShaftData.findIndex((e) => e.title == img_subsection)\r\n      // let all_data = rotatorShaftData\r\n      // all_data[index].photos = all_data[index].photos.filter((e, ind) => ind !== i);\r\n      setRotatorShaftData((prevData) => {\r\n        return prevData.map((el,ind) => {\r\n          return {\r\n            ...el,\r\n            photos: ind == index ? el.photos.filter((e, ind) => ind !== i) : el.photos\r\n          }\r\n        })\r\n      });\r\n    }\r\n    if(img_section == 'Mechanical-Inspection') {\r\n      let index = mechanicalInspectionData.findIndex((e) => e.title == img_subsection)\r\n      // let all_data = mechanicalInspectionData\r\n      // all_data[index].photos = all_data[index].photos.filter((e, ind) => ind !== i);\r\n      setMechanicalInspectionData((prevData) => {\r\n        return prevData.map((el,ind) => {\r\n          return {\r\n            ...el,\r\n            photos: ind == index ? el.photos.filter((e, ind) => ind !== i) : el.photos\r\n          }\r\n        })\r\n      });\r\n    }\r\n    if(img_section == 'Auxiliary-Checks') {\r\n      let index = auxiliariesChecksData.findIndex((e) => e.title == img_subsection)\r\n      // let all_data = auxiliariesChecksData\r\n      // all_data[index].photos = all_data[index].photos.filter((e, ind) => ind !== i);\r\n      setAuxiliariesChecksData((prevData) => {\r\n        return prevData.map((el,ind) => {\r\n          return {\r\n            ...el,\r\n            photos: ind == index ? el.photos.filter((e, ind) => ind !== i) : el.photos\r\n          }\r\n        })\r\n      });\r\n    }\r\n    if(img_section == 'Stator-Winding') {\r\n      let index = statorWindingData.findIndex((e) => e.title == img_subsection)\r\n      // let all_data = statorWindingData\r\n      // all_data[index].photos = all_data[index].photos.filter((e, ind) => ind !== i);\r\n      setStatorWindingData((prevData) => {\r\n        return prevData.map((el,ind) => {\r\n          return {\r\n            ...el,\r\n            photos: ind == index ? el.photos.filter((e, ind) => ind !== i) : el.photos\r\n          }\r\n        })\r\n      });\r\n    }\r\n  };\r\n\r\n  const uploadButton = (\r\n    <div style={{ width: \"200px\" }}>\r\n      <PlusOutlined />\r\n      <div\r\n        style={{\r\n          marginTop: 8,\r\n        }}\r\n      >\r\n        Profile Picture\r\n      </div>\r\n    </div>\r\n  );\r\n  const onRadioChange = (e) => {\r\n    console.log(\"radio checked\", e.target.value);\r\n    setInitialModalForm((prevForm) => ({\r\n      ...prevForm,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const statorWindingGlobalRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setStatorWindingGlobaldata({\r\n        ...statorWindingGlobaldata,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setStatorWindingGlobaldata({\r\n        ...statorWindingGlobaldata,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n    console.log(radiodata, data);\r\n  };\r\n  const auxilleryHeaterRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setAuxileryChecksHeater({\r\n        ...auxileryChecksHeater,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setAuxileryChecksHeater({\r\n        ...auxileryChecksHeater,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n    console.log(radiodata, data);\r\n  };\r\n  const auxilleryThermistorRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setAuxileryChecksThermistor({\r\n        ...auxileryChecksThermistor,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n\r\n      setAuxileryChecksThermistor({\r\n        ...auxileryChecksThermistor,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n    console.log(radiodata, data);\r\n  };\r\n  const auxilleryThermostateRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setAuxileryChecksThermostate({\r\n        ...auxileryChecksThermostate,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setAuxileryChecksThermostate({\r\n        ...auxileryChecksThermostate,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n    console.log(radiodata, data);\r\n  };\r\n  const auxillerypt_100RadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setAuxileryCheckspt_100({\r\n        ...auxileryCheckspt_100,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setAuxileryCheckspt_100({\r\n        ...auxileryCheckspt_100,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n    console.log(radiodata, data);\r\n  };\r\n  const auxilleryBrakeRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setAuxileryChecksBrake({\r\n        ...auxileryChecksBrake,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setAuxileryChecksBrake({\r\n        ...auxileryChecksBrake,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n    console.log(radiodata, data);\r\n  };\r\n  const auxilleryOtherRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setAuxileryChecksOther({\r\n        ...auxileryChecksOther,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setAuxileryChecksOther({\r\n        ...auxileryChecksOther,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n    console.log(radiodata, data);\r\n  };\r\n  const statorInsulationRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setStatorInsulationdata({\r\n        ...statorInsulationdata,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setStatorInsulationdata({\r\n        ...statorInsulationdata,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n  };\r\n  const rotarRasistRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setStatorRotarResistData({\r\n        ...statorRotarResistData,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setStatorRotarResistData({\r\n        ...statorRotarResistData,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n  };\r\n  const rotarInsulationRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setStatorRotorInsulationData({\r\n        ...statorRotorInsulationData,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setStatorRotorInsulationData({\r\n        ...statorRotorInsulationData,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n  };\r\n  const polarizationIndexRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setStatorPolarizationIndexData({\r\n        ...statorPolarizationIndexData,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setStatorPolarizationIndexData({\r\n        ...statorPolarizationIndexData,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n  };\r\n  const surgeCompressionRadioChange = (name, e) => {\r\n    if (e.target.value == \"\" || e.target.value == null) {\r\n      setStatorSurgeCompressionData({\r\n        ...statorSurgeCompressionData,\r\n        [name]: { checked: false, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    } else {\r\n      setStatorSurgeCompressionData({\r\n        ...statorSurgeCompressionData,\r\n        [name]: { checked: true, value: e.target.value },\r\n      });\r\n      // setData({\r\n      //   ...data,\r\n      //   [name]: e.target.value,\r\n      // });\r\n    }\r\n  };\r\n\r\n  const setImagesData = async (type) => {\r\n    let imageData = [];\r\n    if(type == 'Vibration-Test') {\r\n      imageData = data2.vibrationData.imagesData;\r\n    } else if(type == 'Free-Load') {\r\n      imageData = data2.freeLoadData.imagesData;\r\n    } else if(type == 'Initial-Condition') {\r\n      imageData = data2.initialConditionsAndPhysicalInspection.imagesData;\r\n    } else if(type == 'Machine-Data') {\r\n      imageData = data2.machineData.imagesData;\r\n    }\r\n\r\n    const images = imageData.map(async (image) => {\r\n      let url = image.url;\r\n      if(url.includes('base64')) {\r\n        const base64sign = image.url;\r\n        const base64Data = base64sign.replace(/^data:image\\/\\w+;base64,/, \"\");\r\n        const blob = new Blob([Uint8Array.from(atob(base64Data), c => c.charCodeAt(0))], { type: 'image/png' });\r\n        const file = new File([blob], \"uploaded_image.png\", { type: 'image/png' });\r\n        url = await UploadImage(file);\r\n      }\r\n      let url_unmodified = image.url_unmodified;\r\n      if(url_unmodified.includes('base64')) {\r\n        const base64sign2 = image.url_unmodified;\r\n        const base64Data2 = base64sign2.replace(/^data:image\\/\\w+;base64,/, \"\");\r\n        const blob2 = new Blob([Uint8Array.from(atob(base64Data2), c => c.charCodeAt(0))], { type: 'image/png' });\r\n        const file2 = new File([blob2], \"uploaded_image.png\", { type: 'image/png' });\r\n        url_unmodified = await UploadImage(file2);\r\n      }\r\n      let img = await Promise.all(url, url_unmodified);\r\n      if(img) {\r\n        return {\r\n          ...image,\r\n          url: url,\r\n          url_unmodified: url_unmodified\r\n        }\r\n      }\r\n    })\r\n    let imgs = await Promise.all(images);\r\n    if(imgs) {\r\n      console.log(imgs)\r\n      // data2.vibrationData.imagesData = imgs;\r\n      if(type == 'Vibration-Test') {\r\n        imageData = data2.vibrationData.imagesData = imgs;\r\n      } else if(type == 'Free-Load') {\r\n        imageData = data2.freeLoadData.imagesData = imgs;\r\n      } else if(type == 'Initial-Condition') {\r\n        imageData = data2.initialConditionsAndPhysicalInspection.imagesData = imgs;\r\n      } else if(type == 'Machine-Data') {\r\n        imageData = data2.machineData.imagesData = imgs;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  const setSubsectionImagesData = async (type) => {\r\n    let imageData = [];\r\n    let all_data = []\r\n    if(type.includes('Flame-Path')) {\r\n      all_data = flamePathData;\r\n    }\r\n    if(type.includes('Free-Volume')) {\r\n      all_data = freeVolumeData;\r\n    }\r\n    if(type.includes('Rotor-Shaft')) {\r\n      all_data = rotatorShaftData;\r\n    }\r\n    if(type.includes('Mechanical-Inspection')) {\r\n      all_data = mechanicalInspectionData;\r\n    }\r\n    if(type.includes('Auxiliary-Checks')) {\r\n      all_data = auxiliariesChecksData;\r\n    }\r\n    if(type.includes('Stator-Winding')) {\r\n      all_data = statorWindingData;\r\n    }\r\n\r\n    for(let i=0; i < all_data.length; i++) {\r\n      imageData = all_data[i].photos\r\n      const images = imageData.map(async (image) => {\r\n        let url = image.url;\r\n        if(url.includes('base64')) {\r\n          const base64sign = image.url;\r\n          const base64Data = base64sign.replace(/^data:image\\/\\w+;base64,/, \"\");\r\n          const blob = new Blob([Uint8Array.from(atob(base64Data), c => c.charCodeAt(0))], { type: 'image/png' });\r\n          const file = new File([blob], \"uploaded_image.png\", { type: 'image/png' });\r\n          url = await UploadImage(file);\r\n        }\r\n        let url_unmodified = image.url_unmodified;\r\n        if(url_unmodified.includes('base64')) {\r\n          const base64sign2 = image.url_unmodified;\r\n          const base64Data2 = base64sign2.replace(/^data:image\\/\\w+;base64,/, \"\");\r\n          const blob2 = new Blob([Uint8Array.from(atob(base64Data2), c => c.charCodeAt(0))], { type: 'image/png' });\r\n          const file2 = new File([blob2], \"uploaded_image.png\", { type: 'image/png' });\r\n          url_unmodified = await UploadImage(file2);\r\n        }\r\n        let img = await Promise.all(url, url_unmodified);\r\n        if(img) {\r\n          return {\r\n            ...image,\r\n            url: url,\r\n            url_unmodified: url_unmodified\r\n          }\r\n        }\r\n      })\r\n      let imgs = await Promise.all(images);\r\n      if(imgs) {\r\n        all_data[i].photos = imgs\r\n      } else {\r\n        return false\r\n      }\r\n    }\r\n    if(type.includes('Flame-Path')) {\r\n      setFlamePathData(all_data);\r\n    }\r\n    if(type.includes('Free-Volume')) {\r\n      setFreeVolumeData(all_data);\r\n    }\r\n    if(type.includes('Rotor-Shaft')) {\r\n      setRotatorShaftData(all_data);\r\n    }\r\n    if(type.includes('Mechanical-Inspection')) {\r\n      setMechanicalInspectionData(all_data);\r\n    }\r\n    if(type.includes('Auxiliary-Checks')) {\r\n      setAuxiliariesChecksData(all_data);\r\n    }\r\n    if(type.includes('Stator-Winding')) {\r\n      setStatorWindingData(all_data);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const onFinishHandler = async () => {\r\n    let imgs_convert_check1 = await setImagesData('Vibration-Test');\r\n    let imgs_convert_check2 = await setImagesData('Free-Load');\r\n    let imgs_convert_check3 = await setImagesData('Initial-Condition');\r\n    let imgs_convert_check4 = await setImagesData('Machine-Data');\r\n    let imgs_convert_check5 = await setSubsectionImagesData('Flame-Path');\r\n    let imgs_convert_check6 = await setSubsectionImagesData('Free-Volume');\r\n    let imgs_convert_check7 = await setSubsectionImagesData('Rotor-Shaft');\r\n    let imgs_convert_check8 = await setSubsectionImagesData('Mechanical-Inspection');\r\n    let imgs_convert_check9 = await setSubsectionImagesData('Auxiliary-Checks');\r\n    let imgs_convert_check10 = await setSubsectionImagesData('Stator-Winding');\r\n    if(!imgs_convert_check1 \r\n      || !imgs_convert_check2\r\n      || !imgs_convert_check3 \r\n      || !imgs_convert_check4\r\n      || !imgs_convert_check5\r\n      || !imgs_convert_check6\r\n      || !imgs_convert_check7\r\n      || !imgs_convert_check8\r\n      || !imgs_convert_check9\r\n      || !imgs_convert_check10\r\n    ) {\r\n      return\r\n    }\r\n    try {\r\n        let url = `/api/admin/life-cycle-event/store`;\r\n        if(isEdit) {\r\n          url = `/api/admin/life-cycle-event/${param.id}/update`\r\n          const resp = await axiosInstance.put(url, {\r\n              id: isEdit ? param.id : null,\r\n              machine_id: isEdit ? machineId : param.id,\r\n              name: eventName,\r\n              process_control: JSON.stringify(data2.processControl),\r\n              parts_renewal: JSON.stringify(data2.partsRenewal),\r\n              job_reference: JSON.stringify(data2.jobReference),\r\n              receive_and_deliver_data: JSON.stringify(data2.receiveAndDeliverData),\r\n              machine_data: JSON.stringify(data2.machineData),\r\n              initial_conditions_and_physical_inspection: JSON.stringify(data2.initialConditionsAndPhysicalInspection),\r\n              stator_winding_data: JSON.stringify(data2.statorWindingData),\r\n              auxiliaries_checks_data: JSON.stringify(data2.auxiliariesChecksData),\r\n              free_load_data: JSON.stringify(data2.freeLoadData),\r\n              mechanical_inspection_data: JSON.stringify(data2.mechanicalInspectionData),\r\n              rotator_shaft_data: JSON.stringify(data2.rotatorShaftData),\r\n              free_volume_data: JSON.stringify(data2.freeVolumeData),\r\n              flame_path_data: JSON.stringify(data2.flamePathData),\r\n              vibration_test_data: JSON.stringify(data2.vibrationData),\r\n              miscelleneous_report: JSON.stringify(data2.miscelleneousReport),\r\n  \r\n              // date: moment().format('YYYY-MM-DD'),\r\n              last_updated_at: moment().format('YYYY-MM-DD')\r\n          })\r\n          const response = resp.data;\r\n          console.log(response)\r\n          if(response.status) {\r\n            message.success(\"Lifecycle Event updated successfully\");\r\n            setTimeout(() => {\r\n              history.goBack()\r\n            }, 500);\r\n          }\r\n        } else {\r\n          const resp = await axiosInstance.post(url, {\r\n              id: isEdit ? param.id : null,\r\n              machine_id: isEdit ? machineId : param.id,\r\n              name: eventName,\r\n              process_control: JSON.stringify(data2.processControl),\r\n              parts_renewal: JSON.stringify(data2.partsRenewal),\r\n              job_reference: JSON.stringify(data2.jobReference),\r\n              receive_and_deliver_data: JSON.stringify(data2.receiveAndDeliverData),\r\n              machine_data: JSON.stringify(data2.machineData),\r\n              initial_conditions_and_physical_inspection: JSON.stringify(data2.initialConditionsAndPhysicalInspection),\r\n              stator_winding_data: JSON.stringify(data2.statorWindingData),\r\n              auxiliaries_checks_data: JSON.stringify(data2.auxiliariesChecksData),\r\n              free_load_data: JSON.stringify(data2.freeLoadData),\r\n              mechanical_inspection_data: JSON.stringify(data2.mechanicalInspectionData),\r\n              rotator_shaft_data: JSON.stringify(data2.rotatorShaftData),\r\n              free_volume_data: JSON.stringify(data2.freeVolumeData),\r\n              flame_path_data: JSON.stringify(data2.flamePathData),\r\n              vibration_test_data: JSON.stringify(data2.vibrationData),\r\n              miscelleneous_report: JSON.stringify(data2.miscelleneousReport),\r\n  \r\n              // date: moment().format('YYYY-MM-DD'),\r\n              // last_updated_at: moment().format('YYYY-MM-DD')\r\n          })\r\n          const response = resp.data;\r\n          if(response.status) {\r\n            message.success(\"Lifecycle Event added successfully\");\r\n            setTimeout(() => {\r\n              history.goBack()\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n    } catch (error) {\r\n        const errorResponse = error.response.data.data;\r\n          if (errorResponse && errorResponse.error) {\r\n            const errorMessage = errorResponse.error[0]; \r\n            message.warn(errorMessage);\r\n          }\r\n    }\r\n  }\r\n\r\n  const fetchData = async () => {\r\n    console.log(\"fetch called\")\r\n    const response = await axiosInstance.get(`api/admin/life-cycle-event/${param.id}/show`);\r\n    console.log(response)\r\n    let data = response.data.item;\r\n    if(data) {\r\n      setMachineId(data.machine_id)\r\n      setEventName(data.name || \"\")\r\n      \r\n      // processControl\r\n      let gen_keys = Object.keys(data.process_control.generalProcess);\r\n      let gen_data = {}\r\n      for(let key of gen_keys) {\r\n        gen_data[key] = {\r\n          ...data.process_control.generalProcess[key], \r\n          start_date: data.process_control.generalProcess[key].start_date ? moment(data.process_control.generalProcess[key].start_date) : null, \r\n          completion_date: data.process_control.generalProcess[key].completion_date ? moment(data.process_control.generalProcess[key].completion_date) : null\r\n        }\r\n      }\r\n      setGeneralProcess(gen_data);\r\n      // console.log(gen_data)\r\n\r\n      let rew_keys = Object.keys(data.process_control.rewinding);\r\n      let rew_data = {}\r\n      for(let key of rew_keys) {\r\n        rew_data[key] = {\r\n          ...data.process_control.rewinding[key], \r\n          start_date: data.process_control.rewinding[key].start_date ? moment(data.process_control.rewinding[key].start_date) : null, \r\n          completion_date: data.process_control.rewinding[key].completion_date ? moment(data.process_control.rewinding[key].completion_date) : null\r\n        }\r\n      }\r\n      setRewinding(rew_data);\r\n      // console.log(rew_data)\r\n\r\n      let asm_keys = Object.keys(data.process_control.assemblyAndFinalTest);\r\n      let asm_data = {}\r\n      for(let key of asm_keys) {\r\n        asm_data[key] = {\r\n          ...data.process_control.assemblyAndFinalTest[key], \r\n          start_date: data.process_control.assemblyAndFinalTest[key].start_date ? moment(data.process_control.assemblyAndFinalTest[key].start_date) : null, \r\n          completion_date: data.process_control.assemblyAndFinalTest[key].completion_date ? moment(data.process_control.assemblyAndFinalTest[key].completion_date) : null\r\n        }\r\n      }\r\n      setAssemblyAndFinalTest(asm_data);\r\n      // console.log(asm_data)\r\n\r\n      let dts_keys = Object.keys(data.process_control.deliverToSite);\r\n      let dts_data = {}\r\n      for(let key of dts_keys) {\r\n        dts_data[key] = {\r\n          ...data.process_control.deliverToSite[key], \r\n          start_date: data.process_control.deliverToSite[key].start_date ? moment(data.process_control.deliverToSite[key].start_date) : null, \r\n          completion_date: data.process_control.deliverToSite[key].completion_date ? moment(data.process_control.deliverToSite[key].completion_date) : null\r\n        }\r\n      }\r\n      setDeliverToSite(dts_data);\r\n      // console.log(dts_data)\r\n\r\n      let oth_data = {\r\n        ...data.process_control.otherProcessControl, \r\n        date: data.process_control.otherProcessControl.date ? moment(data.process_control.otherProcessControl.date) : null, \r\n      }\r\n      setOtherProcessControl(oth_data);\r\n      // console.log(oth_data)\r\n      // setOtherProcessControl(data.process_control.otherProcessControl)\r\n      \r\n      // parts renewal, job reference, & recieve and deliver data\r\n      setPartsRenewal(data.parts_renewal)\r\n      setJobReference(data.job_reference)\r\n      setReceiveAndDeliverData(data.receive_and_deliver_data.map((item, index) => {\r\n        return {\r\n            ...item, \r\n            dateReceived: item.dateReceived ? moment(item.dateReceived) : null,\r\n            dateRequested: item.dateRequested ? moment(item.dateRequested) : null,\r\n            dateDelivery: item.dateDelivery ? moment(item.dateDelivery) : null,\r\n        }\r\n      }));\r\n\r\n      // machineData\r\n      setMachineData(data.machine_data.machineData)\r\n      setOtherMachineData({\r\n        ...data.machine_data.otherMachineData, \r\n        date: data.machine_data.otherMachineData.date ? moment(data.machine_data.otherMachineData.date) : null,\r\n      });\r\n      setSelectedImages(data.machine_data.imagesData || []);\r\n\r\n      // Initial Conditions And Physical Inspection\r\n      setInitialConditionAndPhysicalInspection(data.initial_conditions_and_physical_inspection.initialConditionsAndPhysicalInspection)\r\n      setOtherInitialData({\r\n        ...data.initial_conditions_and_physical_inspection.otherInitialData, \r\n        date: data.initial_conditions_and_physical_inspection.otherInitialData.date ? moment(data.initial_conditions_and_physical_inspection.otherInitialData.date) : null,\r\n      });\r\n      setSelectedImages1(data.initial_conditions_and_physical_inspection.imagesData || []);\r\n\r\n      setStatorWindingData(data.stator_winding_data.map((e, index) => {\r\n        return {\r\n          ...data.stator_winding_data[index], \r\n          data: data.stator_winding_data[index].data.map((el) => {\r\n            return {\r\n              ...el,\r\n              value: el.name == 'Date' && el.value ? moment(el.value) : el.value\r\n            }\r\n          }),\r\n        }\r\n      }));\r\n\r\n      setAuxiliariesChecksData(data.auxiliaries_checks_data)\r\n      setMechanicalInspectionData(data.mechanical_inspection_data)\r\n      setRotatorShaftData(data.rotator_shaft_data)\r\n      setFreeVolumeData(data.free_volume_data)\r\n      setFlamePathData(data.flame_path_data)\r\n      setMiscelleneousReportData(data.miscelleneous_report)\r\n\r\n      setFreeLoadData(data.free_load_data.freeLoadData)\r\n      setSelectedImages2(data.free_load_data.imagesData || []);\r\n      setVibrationData(data.vibration_test_data.vibrationData)\r\n      setSelectedImages3(data.vibration_test_data.imagesData || []);\r\n    }\r\n  }\r\n\r\n  // canvas variables\r\n  let width = null;\r\n  let height = null;\r\n  let stage = null;\r\n  let layer = null;\r\n  // let container_width = null;\r\n  // let container_height = null;\r\n  const [editImageId, setEditImageId] = useState(null)\r\n  const [layerTemp, setLayerTemp] = useState(null)\r\n  const [imageMarkings, setImageMarkings] = useState([]);\r\n\r\n  // canvas markings setup\r\n  const UploadImageMarkingKonva = (image_url, image_markings)=> {\r\n    // if(!initialcondVibrationUploaModal) {\r\n    //   console.log(\"edit return modal\")\r\n    //   return\r\n    // }\r\n    if(!image_url) {\r\n      console.log(\"edit return image\")\r\n      return\r\n    }\r\n    if(stage) {\r\n      console.log(\"edit return stage\")\r\n      return\r\n    }\r\n\r\n    let container = \"upload_image_marking_canvas_container\";\r\n    let container_elem = document.getElementById(\"upload_image_marking_canvas_container\");\r\n    console.log(initialcondVibrationUploaModal)\r\n    \r\n    const tempImageContainer = new Image();\r\n    tempImageContainer.id = 'canvas_temp_image';\r\n    tempImageContainer.style.height = `200px`;\r\n    tempImageContainer.src = image_url;\r\n    \r\n    document.body.appendChild(tempImageContainer);\r\n    tempImageContainer.onload = function () {\r\n      // console.log(\"image loaded\")\r\n      container_elem.style.width = document.getElementById(\"canvas_temp_image\").clientWidth + 'px';\r\n      container_elem.style.height = '200px';\r\n      tempImageContainer.remove();\r\n    }\r\n    setTimeout(() => {\r\n      // let cont_width = container_elem.clientWidth;\r\n      // let cont_height = container_elem.clientHeight;\r\n      // setContainerWidth(cont_width);\r\n      // setContainerHeight(cont_height);\r\n      width = container_elem.clientWidth;\r\n      height = container_elem.clientHeight;\r\n\r\n      stage = new Konva.Stage({\r\n        // container: 'upload_image_marking_canvas_container',\r\n        container: container,\r\n        width: container_elem.clientWidth,\r\n        height: container_elem.clientHeight,\r\n      });\r\n      \r\n      layer = new Konva.Layer();\r\n      setLayerTemp(layer);\r\n      stage.add(layer);\r\n\r\n      generateImageMarkingPoints(image_url, image_markings);\r\n    }, 500);\r\n  }\r\n\r\n  const generateImageMarkingPoints = async (uploaded_image, imageMarkings) => {\r\n    if(layer) {\r\n      layer.removeChildren();\r\n    } else {\r\n      layer = layerTemp;\r\n      if(!layer) {\r\n        console.log(\"layer cannot update!\")\r\n      } else {\r\n        layer.removeChildren();\r\n      }\r\n    }\r\n    if(!uploaded_image) {\r\n      return\r\n    }\r\n    \r\n    let container_elem = document.getElementById(\"upload_image_marking_canvas_container\");\r\n    let width_current = container_elem.clientWidth;\r\n    let height_current = container_elem.clientHeight;\r\n    \r\n    Konva.Image.fromURL(uploaded_image, image => {\r\n      image.setAttrs({\r\n        width: width_current,\r\n        height: height_current,\r\n      })\r\n      layer.add(image);\r\n      layer.draw();\r\n      \r\n      for (let index = 0; index < imageMarkings.length; index++) {\r\n        let image_url = marker_images[index];\r\n\r\n        Konva.Image.fromURL(image_url, image => {\r\n          image.setAttrs({\r\n            x: width_current * imageMarkings[index].width_percentage,\r\n            y: height_current * imageMarkings[index].height_percentage,\r\n            scaleX: height_current / 275,\r\n            scaleY: height_current / 275,\r\n          });\r\n          image.draggable(true);\r\n          layer.add(image);\r\n          layer.draw();\r\n\r\n          image.on('mouseover', function () {\r\n            document.body.style.cursor = 'pointer';\r\n          });\r\n          image.on('mouseout', function () {\r\n            document.body.style.cursor = 'default';\r\n          });\r\n          image.on('dragend', (e) => {\r\n            setImageMarkings((prevCheckInMarkings) => {\r\n              return prevCheckInMarkings.map((item, i) => {\r\n                if (i === index) {\r\n                  return {\r\n                    ...item,\r\n                    width_percentage: e.target.attrs.x / width_current,\r\n                    height_percentage: e.target.attrs.y / height_current,\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              })\r\n            })\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  const addImageMarking = (image_url) => {\r\n    let check_in_marks = [...imageMarkings];\r\n    check_in_marks.push({ width_percentage: 0.5, height_percentage: 0.5, text: '' });\r\n    setImageMarkings(check_in_marks)\r\n\r\n    if(check_in_marks.length){\r\n      generateImageMarkingPoints(image_url, check_in_marks);\r\n    }\r\n  }\r\n\r\n  const removeImageMarking = (index) => {\r\n    let check_in_marks = [...imageMarkings];\r\n    check_in_marks = check_in_marks.filter((item, i) => i !== index);\r\n    setImageMarkings(check_in_marks)\r\n\r\n    generateImageMarkingPoints(selectedImageTemp, check_in_marks);\r\n  }\r\n\r\n  const SaveUploadedImageData = (type) => {\r\n    let container_elem = document.getElementById(\"upload_image_marking_canvas_container\");\r\n    let width_current = container_elem.clientWidth;\r\n    let height_current = container_elem.clientHeight;\r\n  \r\n    // Create a temporary container for the new stage\r\n    const tempContainer = document.createElement('div');\r\n    tempContainer.style.width = `${width_current}px`;\r\n    tempContainer.style.height = `${height_current}px`;\r\n    tempContainer.style.position = 'absolute';\r\n    tempContainer.style.left = '-9999px';  // Hide it off-screen\r\n    document.body.appendChild(tempContainer);\r\n  \r\n    // Create a temporary Konva stage and layer\r\n    const tempStage = new Konva.Stage({\r\n      container: tempContainer,\r\n      width: width_current,\r\n      height: height_current\r\n    });\r\n    const tempLayer = layerTemp\r\n    tempStage.add(tempLayer);\r\n  \r\n    // add image and markings to temporary layer\r\n    Konva.Image.fromURL(selectedImageTemp, image => {\r\n      image.setAttrs({\r\n        width: width_current,\r\n        height: height_current,\r\n      })\r\n      tempLayer.add(image);\r\n      tempLayer.draw();\r\n      console.log(tempLayer)\r\n      \r\n      for (let index = 0; index < imageMarkings.length; index++) {\r\n        let image_url = marker_images[index];\r\n        Konva.Image.fromURL(image_url, image => {\r\n          image.setAttrs({\r\n            x: width_current * imageMarkings[index].width_percentage,\r\n            y: height_current * imageMarkings[index].height_percentage,\r\n            scaleX: height_current / 275,\r\n            scaleY: height_current / 275,\r\n          });\r\n          image.draggable(true);\r\n          tempLayer.add(image);\r\n          tempLayer.draw();\r\n  \r\n          image.on('mouseover', function () {\r\n            document.body.style.cursor = 'pointer';\r\n          });\r\n          image.on('mouseout', function () {\r\n            document.body.style.cursor = 'default';\r\n          });\r\n          image.on('dragend', (e) => {\r\n            setImageMarkings((prevCheckInMarkings) => {\r\n              return prevCheckInMarkings.map((item, i) => {\r\n                if (i === index) {\r\n                  return {\r\n                    ...item,\r\n                    width_percentage: e.target.attrs.x / width_current,\r\n                    height_percentage: e.target.attrs.y / height_current,\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              })\r\n            })\r\n          });\r\n        });\r\n      }\r\n    });\r\n    \r\n    let all_images = [];\r\n    if(type == 'Vibration-Test') {\r\n      all_images = selectedImages3;\r\n    }\r\n    if(type == 'Free-Load') {\r\n      all_images = selectedImages2;\r\n    }\r\n    if(type == 'Initial-Condition') {\r\n      all_images = selectedImages1;\r\n    }\r\n    if(type == 'Machine-Data') {\r\n      all_images = selectedImages;\r\n    }\r\n    let ind = null;\r\n    if(type.includes('~')) {\r\n      let temp_type = type.split(' ~ ');\r\n      if(temp_type[0] == 'Flame-Path') {\r\n        all_images = flamePathData.find((e)=> e.title == temp_type[1]).photos;\r\n        ind = flamePathData.findIndex((e)=> e.title == temp_type[1]);\r\n      }\r\n      if(temp_type[0] == 'Free-Volume') {\r\n        all_images = freeVolumeData.find((e)=> e.title == temp_type[1]).photos;\r\n        ind = freeVolumeData.findIndex((e)=> e.title == temp_type[1]);\r\n      }\r\n      if(temp_type[0] == 'Rotor-Shaft') {\r\n        all_images = rotatorShaftData.find((e)=> e.title == temp_type[1]).photos;\r\n        ind = rotatorShaftData.findIndex((e)=> e.title == temp_type[1]);\r\n      }\r\n      if(temp_type[0] == 'Mechanical-Inspection') {\r\n        all_images = mechanicalInspectionData.find((e)=> e.title == temp_type[1]).photos;\r\n        ind = mechanicalInspectionData.findIndex((e)=> e.title == temp_type[1]);\r\n      }\r\n      if(temp_type[0] == 'Auxiliary-Checks') {\r\n        all_images = auxiliariesChecksData.find((e)=> e.title == temp_type[1]).photos;\r\n        ind = auxiliariesChecksData.findIndex((e)=> e.title == temp_type[1]);\r\n      }\r\n      if(temp_type[0] == 'Stator-Winding') {\r\n        all_images = statorWindingData.find((e)=> e.title == temp_type[1]).photos;\r\n        ind = statorWindingData.findIndex((e)=> e.title == temp_type[1]);\r\n      }\r\n    }\r\n    // Convert the stage to a data URL\r\n    setTimeout(() => {\r\n      tempStage.toDataURL({\r\n        callback: (dataUrl) => {\r\n          document.body.removeChild(tempContainer);\r\n          if(editImageId) {\r\n            let newImages = all_images.map((image, index) => {\r\n              if(image.id === editImageId) {\r\n                return {\r\n                  id: image.id,\r\n                  url: dataUrl,\r\n                  url_unmodified: image.url_unmodified,\r\n                  image_markings: imageMarkings,\r\n                }\r\n              } else {\r\n                return image\r\n              }\r\n            })\r\n            if(type == 'Vibration-Test') {\r\n              setSelectedImages3(newImages);\r\n            }\r\n            if(type == 'Free-Load') {\r\n              setSelectedImages2(newImages);\r\n            }\r\n            if(type == 'Initial-Condition') {\r\n              setSelectedImages1(newImages);\r\n            }\r\n            if(type == 'Machine-Data') {\r\n              setSelectedImages(newImages);\r\n            }\r\n            if(type.includes('~')) {\r\n              let temp_type = type.split(' ~ ');\r\n              if(temp_type[0] == 'Flame-Path') {\r\n                setFlamePathData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = newImages\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Free-Volume') {\r\n                setFreeVolumeData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = newImages\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Rotor-Shaft') {\r\n                setRotatorShaftData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = newImages\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Mechanical-Inspection') {\r\n                setMechanicalInspectionData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = newImages\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Auxiliary-Checks') {\r\n                setAuxiliariesChecksData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = newImages\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Stator-Winding') {\r\n                setStatorWindingData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = newImages\r\n                  return data\r\n                })\r\n              }\r\n            }\r\n          } else {\r\n            if(type == 'Vibration-Test') {\r\n              setSelectedImages3([...all_images, {\r\n                id: dataUrl.slice(22, 122),\r\n                url: dataUrl,\r\n                url_unmodified: selectedImageTemp,\r\n                image_markings: imageMarkings\r\n              }]);\r\n            }\r\n            if(type == 'Free-Load') {\r\n              setSelectedImages2([...all_images, {\r\n                id: dataUrl.slice(22, 122),\r\n                url: dataUrl,\r\n                url_unmodified: selectedImageTemp,\r\n                image_markings: imageMarkings\r\n              }]);\r\n            }\r\n            if(type == 'Initial-Condition') {\r\n              setSelectedImages1([...all_images, {\r\n                id: dataUrl.slice(22, 122),\r\n                url: dataUrl,\r\n                url_unmodified: selectedImageTemp,\r\n                image_markings: imageMarkings\r\n              }]);\r\n            }\r\n            if(type == 'Machine-Data') {\r\n              setSelectedImages([...all_images, {\r\n                id: dataUrl.slice(22, 122),\r\n                url: dataUrl,\r\n                url_unmodified: selectedImageTemp,\r\n                image_markings: imageMarkings\r\n              }]);\r\n            }\r\n            if(type.includes('~')) {\r\n              let temp_type = type.split(' ~ ');\r\n              if(temp_type[0] == 'Flame-Path') {\r\n                setFlamePathData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = [...data[+ind].photos, {\r\n                    id: dataUrl.slice(22, 122),\r\n                    url: dataUrl,\r\n                    url_unmodified: selectedImageTemp,\r\n                    image_markings: imageMarkings\r\n                  }]\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Free-Volume') {\r\n                setFreeVolumeData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = [...data[+ind].photos, {\r\n                    id: dataUrl.slice(22, 122),\r\n                    url: dataUrl,\r\n                    url_unmodified: selectedImageTemp,\r\n                    image_markings: imageMarkings\r\n                  }]\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Rotor-Shaft') {\r\n                setRotatorShaftData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = [...data[+ind].photos, {\r\n                    id: dataUrl.slice(22, 122),\r\n                    url: dataUrl,\r\n                    url_unmodified: selectedImageTemp,\r\n                    image_markings: imageMarkings\r\n                  }]\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Mechanical-Inspection') {\r\n                setMechanicalInspectionData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = [...data[+ind].photos, {\r\n                    id: dataUrl.slice(22, 122),\r\n                    url: dataUrl,\r\n                    url_unmodified: selectedImageTemp,\r\n                    image_markings: imageMarkings\r\n                  }]\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Auxiliary-Checks') {\r\n                setAuxiliariesChecksData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = [...data[+ind].photos, {\r\n                    id: dataUrl.slice(22, 122),\r\n                    url: dataUrl,\r\n                    url_unmodified: selectedImageTemp,\r\n                    image_markings: imageMarkings\r\n                  }]\r\n                  return data\r\n                })\r\n              }\r\n              if(temp_type[0] == 'Stator-Winding') {\r\n                setStatorWindingData((prev) => {\r\n                  let data = prev;\r\n                  data[+ind].photos = [...data[+ind].photos, {\r\n                    id: dataUrl.slice(22, 122),\r\n                    url: dataUrl,\r\n                    url_unmodified: selectedImageTemp,\r\n                    image_markings: imageMarkings\r\n                  }]\r\n                  return data\r\n                })\r\n              }\r\n            }\r\n          }\r\n          resetImageData();\r\n        }\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  const convertImageToBase64 = async (imageUrl, markings) => {\r\n    console.log(\"Image URL:\", imageUrl);\r\n    try {\r\n      const response = await fetch(imageUrl, { mode: \"cors\" }); // Ensure CORS is allowed\r\n      const blob = await response.blob(); // Convert response to Blob\r\n      const reader = new FileReader();\r\n  \r\n      reader.readAsDataURL(blob);\r\n      reader.onloadend = () => {\r\n        let base64 = reader.result;\r\n        if(base64) {\r\n            UploadImageMarkingKonva(base64, markings);\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error fetching image:\", error);\r\n    }\r\n  };\r\n\r\n\r\n  const resetImageData = () => {\r\n    setSelectedImageTemp(null);\r\n    setImageMarkings([]);\r\n    // generateImageMarkingPoints(null, []);\r\n    stage = null;\r\n    layer = null;\r\n    let container_elem = document.getElementById(\"upload_image_marking_canvas_container\");\r\n    container_elem.style.width = '100px';\r\n    container_elem.style.height = '100px';\r\n    setEditImageId(null);\r\n    setUploadModal(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let isEditingEvent = window.location.href.includes('edit-life-cycle-event') ? true : false;\r\n\r\n    if(isEditingEvent) {\r\n      setIsEdit(true)\r\n      fetchData();\r\n    }\r\n  }, [])\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"d-flex align-items-center m-0 mb-2\">\r\n          {\" \"}\r\n          <MachineIcon color={\"#72849A\"} />\r\n          <span\r\n            style={{\r\n              color: \"#6a6a6a\",\r\n              fontWeight: \"300\",\r\n              marginLeft: '5px'\r\n            }}\r\n          >\r\n            {\" \"}\r\n            Machines & Sensor{\" \"}\r\n          </span>\r\n          <span style={{color: \"#6a6a6a\", fontWeight: \"300\",}}>{\" \"}/ Life Cycle Management{\" \"}/</span>\r\n          {isEdit ? \" Edit\":\" Add New\"} Life Cycle Event{\" \"}\r\n      </h4>\r\n      \r\n      <div className=\"mb-4\">\r\n        <label className=\"form-label\">Event Name</label>\r\n        <Input\r\n          placeholder=\"Enter event name\"\r\n          value={eventName}\r\n          onChange={(e) => setEventName(e.target.value)}\r\n          style={{ maxWidth: '400px' }}\r\n        />\r\n      </div>\r\n\r\n      <SRUpload SRUploadForm={SRUploadForm} setSRUploadForm={setSRUploadForm} />\r\n      <SIUpload SIUploadForm={SIUploadForm} setSIUploadForm={setSIUploadForm} />\r\n      <RRUpload RRUploadForm={RRUploadForm} setRRUploadForm={setRRUploadForm} />\r\n      <EditRRModal RREditModal={RREditModal} setRREditModal={setRREditModal} />\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <EditColorIcon />{\" \"}\r\n            <span className=\"d-block ml-2\"> Edit Details </span>\r\n          </div>\r\n        }\r\n        visible={jobRefModal}\r\n        onCancel={() => setJobRefModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"green-radio\">\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={radiodata?.quote_job_ref}>\r\n              Quote/Job Ref\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.quote_job_ref}\r\n              onChange={(e) => handleRadioChnge(\"quote_job_ref\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={radiodata?.po_ref}>\r\n              PO Ref\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.po_ref}\r\n              onChange={(e) => handleRadioChnge(\"po_ref\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={radiodata?.customer}>\r\n              Customer\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.customer}\r\n              onChange={(e) => handleRadioChnge(\"customer\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={radiodata?.sales}>\r\n              Sales\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.sales}\r\n              onChange={(e) => handleRadioChnge(\"sales\", e)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => setJobRefModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              setJobRefModal(false);\r\n              setJobReference([\r\n                {\r\n                  srNo: 1,\r\n                  quote_job_ref: data.quote_job_ref,\r\n                  po_ref: data.po_ref,\r\n                  customer: data.customer,\r\n                  sales: data.sales,\r\n                },\r\n              ]);\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <EditColorIcon />{\" \"}\r\n            <span className=\"d-block ml-2\"> Edit Details </span>\r\n          </div>\r\n        }\r\n        visible={receiveAndDeliver}\r\n        onCancel={() => setReceiveAndDeliver(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"green-radio\">\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.dateReceived}\r\n            >\r\n              Date Received\r\n            </Radio>\r\n            <DatePicker\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Select Date\"\r\n              value={data?.dateReceived}\r\n              onChange={(value) =>\r\n                handleRadio1Chnge(\"dateReceived\", { target: { value: value } })\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.receivedBy}\r\n            >\r\n              Received By\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.receivedBy}\r\n              onChange={(e) => handleRadio1Chnge(\"receivedBy\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.dateRequested}\r\n            >\r\n              Date Requested\r\n            </Radio>\r\n            <DatePicker\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Select Date\"\r\n              value={data?.dateRequested}\r\n              onChange={(value) =>\r\n                handleRadio1Chnge(\"dateRequested\", { target: { value: value } })\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.dateDelivery}\r\n            >\r\n              Date Delivery\r\n            </Radio>\r\n            <DatePicker\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Select Date\"\r\n              value={data?.dateDelivery}\r\n              onChange={(value) =>\r\n                handleRadio1Chnge(\"dateDelivery\", { target: { value: value } })\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.deliveredBy}\r\n            >\r\n              Delivered By\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.deliveredBy}\r\n              onChange={(e) => handleRadio1Chnge(\"deliveredBy\", e)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => setReceiveAndDeliver(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              setReceiveAndDeliver(false)\r\n              setReceiveAndDeliverData([\r\n                {\r\n                  srNo: 1,\r\n                  dateReceived: data.dateReceived,\r\n                  receivedBy: data.receivedBy,\r\n                  dateRequested: data.dateRequested,\r\n                  dateDelivery: data.dateDelivery,\r\n                  deliveredBy: data.deliveredBy\r\n                }\r\n              ])\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <EditColorIcon />{\" \"}\r\n            <span className=\"d-block ml-2\"> Edit Details </span>\r\n          </div>\r\n        }\r\n        visible={machineDataModal}\r\n        onCancel={() => setMachineDataModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"green-radio\">\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.equipment}\r\n            >\r\n              Equipment\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.equipment}\r\n              onChange={(e) => handleRadio1Chnge(\"equipment\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.tag_no}>\r\n              Tag No\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.tag_no}\r\n              onChange={(e) => handleRadio1Chnge(\"tag_no\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.manufacture}\r\n            >\r\n              Manufacture\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.manufacture}\r\n              onChange={(e) => handleRadio1Chnge(\"manufacture\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.serial_no}\r\n            >\r\n              Serial No\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.serial_no}\r\n              onChange={(e) => handleRadio1Chnge(\"serial_no\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.model}>\r\n              Model\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.model}\r\n              onChange={(e) => handleRadio1Chnge(\"model\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.frame_size}\r\n            >\r\n              Frame Size\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.frame_size}\r\n              onChange={(e) => handleRadio1Chnge(\"frame_size\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.power}>\r\n              Power\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.power}\r\n              onChange={(e) => handleRadio1Chnge(\"power\", e)}\r\n              addonAfter={\r\n                <Select value={machineDataUnit?.power}\r\n                onChange={(e)=>{\r\n                  setMachineDataUnit({\r\n                    ...machineDataUnit,\r\n                    power: e\r\n                  })\r\n                }}\r\n                style={{ width: 70 }}>\r\n                  <Option value=\"HP\">HP</Option>\r\n                  <Option value=\"KW\">KW</Option>\r\n                </Select>\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio\r\n              style={{ width: \"30%\" }}\r\n              checked={receiveAndDelData?.voltage}\r\n            >\r\n              Voltage\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.voltage}\r\n              onChange={(e) => handleRadio1Chnge(\"voltage\", e)}\r\n              addonAfter={\r\n                <Select value={machineDataUnit?.voltage}\r\n                onChange={(e)=>{\r\n                  setMachineDataUnit({\r\n                    ...machineDataUnit,\r\n                    voltage: e\r\n                  })\r\n                }}\r\n                style={{ width: 70 }}>\r\n                  <Option value=\"V\">V</Option>\r\n                </Select>\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.current}>\r\n              Current\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.current}\r\n              onChange={(e) => handleRadio1Chnge(\"current\", e)}\r\n              addonAfter={\r\n                <Select value={machineDataUnit?.current}\r\n                onChange={(e)=>{\r\n                  setMachineDataUnit({\r\n                    ...machineDataUnit,\r\n                    current: e\r\n                  })\r\n                }}\r\n                style={{ width: 70 }}>\r\n                  <Option value=\"A\">A</Option>\r\n                </Select>\r\n              } \r\n            />\r\n            </div>\r\n\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.sec_voltage}>\r\n              Sec Voltage\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.sec_voltage}\r\n              onChange={(e) => handleRadio1Chnge(\"sec_voltage\", e)}\r\n              addonAfter={\r\n                <Select value={machineDataUnit?.sec_voltage}\r\n                onChange={(e)=>{\r\n                  setMachineDataUnit({\r\n                    ...machineDataUnit,\r\n                    sec_voltage: e\r\n                  })\r\n                }}\r\n                style={{ width: 70 }}>\r\n                  <Option value=\"V\">V</Option>\r\n                </Select>\r\n              }\r\n            />\r\n            </div>\r\n\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.sec_current}>\r\n              Sec Current\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.sec_current}\r\n              onChange={(e) => handleRadio1Chnge(\"sec_current\", e)}\r\n              addonAfter={\r\n                <Select value={machineDataUnit?.sec_current}\r\n                onChange={(e)=>{\r\n                  setMachineDataUnit({\r\n                    ...machineDataUnit,\r\n                    sec_current: e\r\n                  })\r\n                }}\r\n                style={{ width: 70 }}>\r\n                  <Option value=\"A\">A</Option>\r\n                </Select>\r\n              }\r\n            />\r\n\r\n              </div>\r\n\r\n              <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.phase}>\r\n              Phase\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.phase}\r\n              onChange={(e) => handleRadio1Chnge(\"phase\", e)}\r\n            />\r\n            </div>\r\n\r\n\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.frequency}>\r\n              Frequency\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.frequency}\r\n              onChange={(e) => handleRadio1Chnge(\"frequency\", e)}\r\n              addonAfter={\r\n                <Select value={machineDataUnit?.frequency}\r\n                onChange={(e)=>{\r\n                  setMachineDataUnit({\r\n                    ...machineDataUnit,\r\n                    frequency: e\r\n                  })\r\n                }}\r\n                style={{ width: 70 }}>\r\n                  <Option value=\"Hz\">Hz</Option>\r\n                </Select>\r\n              }\r\n            />\r\n            </div> \r\n\r\n\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.pole}>\r\n              Pole\r\n            </Radio>\r\n\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.pole}\r\n              onChange={(e) => handleRadio1Chnge(\"pole\", e)}\r\n            />\r\n            </div>\r\n\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.speed}>\r\n              Speed\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.speed}\r\n              onChange={(e) => handleRadio1Chnge(\"speed\", e)}\r\n              addonAfter={\r\n                <Select value={machineDataUnit?.speed}\r\n                onChange={(e)=>{\r\n                  setMachineDataUnit({\r\n                    ...machineDataUnit,\r\n                    speed: e\r\n                  })\r\n                }}\r\n                style={{ width: 70 }}>\r\n                  <Option value=\"rpm\">rpm</Option>\r\n                </Select>\r\n              }\r\n            />\r\n            </div>  \r\n              {/* Power factor  */}\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.power_factor}>\r\n              Power Factor\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.power_factor}\r\n              onChange={(e) => handleRadio1Chnge(\"power_factor\", e)}\r\n            />\r\n            </div>\r\n\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n            <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.insulation_class}>\r\n              Insulation Class\r\n            </Radio>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={data?.insulation_class}\r\n              onChange={(e) => handleRadio1Chnge(\"insulation_class\", e)}\r\n            />\r\n\r\n            </div>\r\n\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n              <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.ip}>\r\n                IP\r\n              </Radio>\r\n              <Input\r\n                style={{ width: \"70%\" }}\r\n                placeholder=\"Type here...\"\r\n                value={data?.ip}\r\n                onChange={(e) => handleRadio1Chnge(\"ip\", e)}\r\n              />\r\n              </div>\r\n\r\n              <div className=\"mb-4 d-flex justify-content-between\">\r\n              <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.ex_proof_type}>\r\n                Ex Proof Type\r\n              </Radio>\r\n              <Input\r\n                style={{ width: \"70%\" }}\r\n                placeholder=\"Type here...\"\r\n                value={data?.ex_proof_type}\r\n                onChange={(e) => handleRadio1Chnge(\"ex_proof_type\", e)}\r\n              />\r\n              </div>\r\n\r\n\r\n              <div className=\"mb-4 d-flex justify-content-between\">\r\n              <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.ex_proof_cert}>\r\n                Ex Proof Cert\r\n              </Radio>\r\n              <Input\r\n                style={{ width: \"70%\" }}\r\n                placeholder=\"Type here...\"\r\n                value={data?.ex_proof_cert}\r\n                onChange={(e) => handleRadio1Chnge(\"ex_proof_cert\", e)}\r\n              />\r\n              </div>\r\n\r\n              <div className=\"mb-4 d-flex justify-content-between\">\r\n              <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.de_bearing}>\r\n                DE Bearing\r\n              </Radio>\r\n              <Input\r\n                style={{ width: \"70%\" }}\r\n                placeholder=\"Type here...\"\r\n                value={data?.de_bearing}\r\n                onChange={(e) => handleRadio1Chnge(\"de_bearing\", e)}\r\n              />\r\n              </div>\r\n\r\n              <div className=\"mb-4 d-flex justify-content-between\">\r\n              <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.nde_bearing}>\r\n                NDE Bearing\r\n              </Radio>\r\n              <Input\r\n                style={{ width: \"70%\" }}\r\n                placeholder=\"Type here...\"\r\n                value={data?.nde_bearing}\r\n                onChange={(e) => handleRadio1Chnge(\"nde_bearing\", e)}\r\n              />\r\n              </div>\r\n\r\n\r\n              <div className=\"mb-4 d-flex justify-content-between\">\r\n              <Radio style={{ width: \"30%\" }} checked={receiveAndDelData?.color}>\r\n                Color\r\n              </Radio>\r\n              <Input\r\n                style={{ width: \"70%\" }}\r\n                placeholder=\"Type here...\"\r\n                value={data?.color}\r\n                onChange={(e) => handleRadio1Chnge(\"color\", e)}\r\n              />\r\n              </div>\r\n\r\n\r\n\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => setMachineDataModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              setMachineDataModal(false)\r\n             setMachineData([\r\n                {\r\n                  key: \"1\",\r\n                  srNo: 1,\r\n                  title: \"Equipment\",\r\n                  data: data?.equipment,\r\n                },\r\n                {\r\n                  key: \"2\",\r\n                  srNo: 2,\r\n                  title: \"Tag No\",\r\n                  data: data?.tag_no,\r\n                },\r\n                {\r\n                  key: \"3\",\r\n                  srNo: 3,\r\n                  title: \"Manufacturer\",\r\n                  data: data?.manufacture,\r\n                },\r\n                {\r\n                  key: \"4\",\r\n                  srNo: 4,\r\n                  title: \"Serial No\",\r\n                  data: data?.serial_no,\r\n                },\r\n                {\r\n                  key: \"5\",\r\n                  srNo: 5,\r\n                  title: \"Model\",\r\n                  data: data?.model,\r\n                },\r\n                {\r\n                  key: \"6\",\r\n                  srNo: 6,\r\n                  title: \"Frame Size\",\r\n                  data: data?.frame_size,\r\n                },\r\n                {\r\n                  key: \"7\",\r\n                  srNo: 7,\r\n                  title: \"Power\",\r\n                  data: data?.power+\"-\"+machineDataUnit?.power,\r\n                },\r\n                {\r\n                  key: \"8\",\r\n                  srNo: 8,\r\n                  title: \"Voltage\",\r\n                  data: data?.voltage+\"-\"+machineDataUnit?.voltage,\r\n                },\r\n                {\r\n                  key: \"9\",\r\n                  srNo: 9,\r\n                  title: \"Current\",\r\n                  data: data?.current+\"-\"+machineDataUnit?.current,\r\n                },\r\n                {\r\n                  key: \"10\",\r\n                  srNo: 10,\r\n                  title: \"Sec Voltage\",\r\n                  data: data?.sec_voltage+\"-\"+machineDataUnit?.sec_voltage,\r\n                },\r\n                {\r\n                  key: \"11\",\r\n                  srNo: 11,\r\n                  title: \"Sec Current\",\r\n                  data: data?.sec_current+\"-\"+machineDataUnit?.sec_current,\r\n                },\r\n                {\r\n                  key: \"12\",\r\n                  srNo: 12,\r\n                  title: \"Phase\",\r\n                  data: data?.phase,   \r\n                },\r\n                {\r\n                  key: \"13\",\r\n                  srNo: 13,\r\n                  title: \"Frequency\",\r\n                  data: data?.frequency+\"-\"+machineDataUnit?.frequency,\r\n                },\r\n                {\r\n                  key: \"14\",\r\n                  srNo: 14,\r\n                  title: \"Pole\",\r\n                  data: data?.pole,\r\n                },\r\n                {\r\n                  key: \"15\",\r\n                  srNo: 15,\r\n                  title: \"Speed\",\r\n                  data: data?.speed+\"-\"+machineDataUnit?.speed,\r\n                },\r\n                {\r\n                  key: \"16\",\r\n                  srNo: 16,\r\n                  title: \"Power Factor\",\r\n                  data: data?.power_factor,   \r\n                },\r\n                {\r\n                  key: \"17\",\r\n                  srNo: 17,\r\n                  title: \"Insulation Class\",\r\n                  data: data?.insulation_class,\r\n                },\r\n                {\r\n                  key: \"18\",\r\n                  srNo: 18,\r\n                  title: \"IP\",\r\n                  data: data?.ip,\r\n                },\r\n                {\r\n                  key: \"19\",\r\n                  srNo: 19,\r\n                  title: \"Ex-Proof Type\",\r\n                  data: data?.ex_proof_type,\r\n                },\r\n                {\r\n                  key: \"20\",\r\n                  srNo: 20,\r\n                  title: \"Ex-Proof Cert\",\r\n                  data: data?.ex_proof_cert,\r\n                },\r\n                {\r\n                  key: \"21\",\r\n                  srNo: 21,\r\n                  title: \"DE Bearing\",\r\n                  data: data?.de_bearing,\r\n                },\r\n                {\r\n                  key: \"22\",\r\n                  srNo: 22,\r\n                  title: \"NDE Bearing\",\r\n                  data: data?.nde_bearing,\r\n                },\r\n                {\r\n                  key: \"23\",\r\n                  srNo: 23,\r\n                  title: \"Colour\",\r\n                  data: data?.color,\r\n                },\r\n              ])\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <EditColorIcon />{\" \"}\r\n            <span className=\"d-block ml-2\"> Edit Details </span>\r\n          </div>\r\n        }\r\n        visible={initialeditModal}\r\n        onCancel={() => setInitialeditModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"\">\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"completed_unit\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.completed_unit}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Completed Unit</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.completed_unit}\r\n              onChange={(e) => handleRadio2Chnge(\"completed_unit\", e)}\r\n            />\r\n          </div>      \r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"stator\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.stator}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Stator</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.stator}\r\n              onChange={(e) => handleRadio2Chnge(\"stator\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"rotor\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.rotor}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Rotor</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.rotor}\r\n              onChange={(e) => handleRadio2Chnge(\"rotor\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"coupling\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.coupling}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Coupling</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.coupling}\r\n              onChange={(e) => handleRadio2Chnge(\"coupling\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"pulley\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.pulley}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Pulley</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.pulley}\r\n              onChange={(e) => handleRadio2Chnge(\"pulley\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"impeller\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.impeller}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Impeller</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.impeller}\r\n              onChange={(e) => handleRadio2Chnge(\"impeller\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"t_box\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.t_box}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>T-Box</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.t_box}\r\n              onChange={(e) => handleRadio2Chnge(\"t_box\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"t_box_cover\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.t_box_cover}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>T-Box Cover</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.t_box_cover}\r\n              onChange={(e) => handleRadio2Chnge(\"t_box_cover\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"power_cable\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.power_cable}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Power Cable</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.power_cable}\r\n              onChange={(e) => handleRadio2Chnge(\"power_cable\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"terminal_board\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.terminal_board}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Terminal Board</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.terminal_board}\r\n              onChange={(e) => handleRadio2Chnge(\"terminal_board\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"connector\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.connector}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Connector</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.connector}\r\n              onChange={(e) => handleRadio2Chnge(\"connector\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"cooling_fan_cover\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.cooling_fan_cover}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Cooling Fan Cover</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.cooling_fan_cover}\r\n              onChange={(e) => handleRadio2Chnge(\"cooling_fan_cover\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"cooling_fan\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.cooling_fan}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Cooling Fan</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.cooling_fan}\r\n              onChange={(e) => handleRadio2Chnge(\"cooling_fan\", e)}\r\n            />\r\n          </div>\r\n\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"blower\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.blower}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Blower</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.blower}\r\n              onChange={(e) => handleRadio2Chnge(\"blower\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"pump\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.pump}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Pump</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.pump}\r\n              onChange={(e) => handleRadio2Chnge(\"pump\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"brake\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.brake}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Brake</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.brake}\r\n              onChange={(e) => handleRadio2Chnge(\"brake\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"gear_box\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.gear_box}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Gear Box</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.gear_box}\r\n              onChange={(e) => handleRadio2Chnge(\"gear_box\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"de_seal\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.de_seal}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>DE Seal</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.de_seal}\r\n              onChange={(e) => handleRadio2Chnge(\"de_seal\", e)}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"nde_seal\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.nde_seal}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>NDE Seal</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.nde_seal}\r\n              onChange={(e) => handleRadio2Chnge(\"nde_seal\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"nde_washer\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.nde_washer}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>NDE Washer</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.nde_washer}\r\n              onChange={(e) => handleRadio2Chnge(\"nde_washer\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"de_washer\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.de_washer}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>DE Washer</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.de_washer}\r\n              onChange={(e) => handleRadio2Chnge(\"de_washer\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"de_circlip\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.de_circlip}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>DE Circlip</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.de_circlip}\r\n              onChange={(e) => handleRadio2Chnge(\"de_circlip\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"nde_circlip\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.nde_circlip}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>NDE Circlip</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.nde_circlip}\r\n              onChange={(e) => handleRadio2Chnge(\"nde_circlip\", e)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"others\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.others}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Others</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.others}\r\n              onChange={(e) => handleRadio2Chnge(\"others\", e)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => setInitialeditModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              // console.log(initialModalFormdata, initialModalForm);\r\n              setInitialeditModal(false);\r\n              setInitialConditionAndPhysicalInspection({\r\n                completedUnit:{\r\n                  value: initialModalFormdata?.completed_unit,\r\n                  check: initialModalForm?.completed_unit\r\n                },\r\n                stator:{\r\n                  value: initialModalFormdata?.stator,\r\n                  check: initialModalForm?.stator\r\n                },\r\n                rotor:{\r\n                  value: initialModalFormdata?.rotor,\r\n                  check: initialModalForm?.rotor\r\n                },\r\n                coupling:{\r\n                  value: initialModalFormdata?.coupling,\r\n                  check: initialModalForm?.coupling\r\n                },\r\n                pulley:{\r\n                  value: initialModalFormdata?.pulley,\r\n                  check: initialModalForm?.pulley\r\n                },\r\n                impeller:{\r\n                  value: initialModalFormdata?.impeller,\r\n                  check: initialModalForm?.impeller\r\n                },\r\n                t_box:{\r\n                  value: initialModalFormdata?.t_box,\r\n                  check: initialModalForm?.t_box\r\n                },\r\n                t_box_cover:{\r\n                  value: initialModalFormdata?.t_box_cover,\r\n                  check: initialModalForm?.t_box_cover\r\n                } ,\r\n                power_cable:{\r\n                  value: initialModalFormdata?.power_cable,\r\n                  check: initialModalForm?.power_cable\r\n                },\r\n                terminal_board:{\r\n                  value: initialModalFormdata?.terminal_board,\r\n                  check: initialModalForm?.terminal_board\r\n                },\r\n                connector:{\r\n                  value: initialModalFormdata?.connector,\r\n                  check: initialModalForm?.connector\r\n                },\r\n                cooling_fan_cover:{\r\n                  value: initialModalFormdata?.cooling_fan_cover,\r\n                  check: initialModalForm?.cooling_fan_cover \r\n                },\r\n                cooling_fan:{\r\n                  value: initialModalFormdata?.cooling_fan,\r\n                  check: initialModalForm?.cooling_fan\r\n                },\r\n                blower:{\r\n                  value: initialModalFormdata?.blower,\r\n                  check: initialModalForm?.blower\r\n                },\r\n                pump:{\r\n                  value: initialModalFormdata?.pump,\r\n                  check: initialModalForm?.pump\r\n                },\r\n                brake:{\r\n                  value: initialModalFormdata?.brake,\r\n                  check: initialModalForm?.brake\r\n                },\r\n                gear_box:{\r\n                  value: initialModalFormdata?.gear_box,\r\n                  check: initialModalForm?.gear_box\r\n                },\r\n                de_seal:{\r\n                  value: initialModalFormdata?.de_seal,\r\n                  check: initialModalForm?.de_seal\r\n                },\r\n                nde_seal:{\r\n                  value: initialModalFormdata?.nde_seal,\r\n                  check: initialModalForm?.nde_seal\r\n                },\r\n                nde_washer:{\r\n                  value: initialModalFormdata?.nde_washer,\r\n                  check: initialModalForm?.nde_washer\r\n                },\r\n                de_washer:{\r\n                  value: initialModalFormdata?.de_washer,\r\n                  check: initialModalForm?.de_washer\r\n                },\r\n                de_circlip:{\r\n                  value: initialModalFormdata?.de_circlip,\r\n                  check: initialModalForm?.de_circlip\r\n                },\r\n                nde_circlip:{\r\n                  value: initialModalFormdata?.nde_circlip,\r\n                  check: initialModalForm?.nde_circlip\r\n                },\r\n                others:{\r\n                  value: initialModalFormdata?.others,\r\n                  check: initialModalForm?.others\r\n                }\r\n                \r\n              })\r\n\r\n\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <EditColorIcon />{\" \"}\r\n            <span className=\"d-block ml-2\"> Edit Details </span>\r\n          </div>\r\n        }\r\n        visible={freeLoadTestModal}\r\n        onCancel={() => setFreeLoadTestModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"\">\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"stator_volt\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.stator_volt}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Stator Volt</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.stator_volt}\r\n              onChange={(e) => handleRadio2Chnge(\"stator_volt\", e)}\r\n            />\r\n          </div>      \r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"frequency\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.frequency}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Frequency</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.frequency}\r\n              onChange={(e) => handleRadio2Chnge(\"frequency\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"current_l1\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.current_l1}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Currrent L1</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.current_l1}\r\n              onChange={(e) => handleRadio2Chnge(\"current_l1\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"current_l2\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.current_l2}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Currrent L2</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.current_l2}\r\n              onChange={(e) => handleRadio2Chnge(\"current_l2\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"current_l3\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.current_l3}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Currrent L3</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.current_l3}\r\n              onChange={(e) => handleRadio2Chnge(\"current_l3\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"connection\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.connection}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Connection</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.connection}\r\n              onChange={(e) => handleRadio2Chnge(\"connection\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"speed\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.speed}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Speed</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.speed}\r\n              onChange={(e) => handleRadio2Chnge(\"speed\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"rotation\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.rotation}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Rotation</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.rotation}\r\n              onChange={(e) => handleRadio2Chnge(\"rotation\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"de_temp\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.de_temp}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>DE Temp</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.de_temp}\r\n              onChange={(e) => handleRadio2Chnge(\"de_temp\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"nde_temp\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.nde_temp}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>NDE Temp</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.nde_temp}\r\n              onChange={(e) => handleRadio2Chnge(\"nde_temp\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"position\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.position}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Position</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.position}\r\n              onChange={(e) => handleRadio2Chnge(\"position\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"time\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.time}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Time</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.time}\r\n              onChange={(e) => handleRadio2Chnge(\"time\", e)}\r\n            />\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => setFreeLoadTestModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              // console.log(initialModalFormdata, initialModalForm);\r\n              setFreeLoadTestModal(false);\r\n              setFreeLoadData({\r\n                  ...freeLoadData,\r\n                  stator_volt:{\r\n                    check: initialModalForm?.stator_volt,\r\n                    value:  initialModalFormdata?.stator_volt\r\n                  },\r\n                  frequency:{\r\n                    check: initialModalForm?.frequency,\r\n                    value: initialModalFormdata?.frequency\r\n                  },\r\n                  current_l1:{\r\n                    check: initialModalForm?.current_l1,\r\n                    value: initialModalFormdata?.current_l1 \r\n                  },\r\n                  current_l2:{\r\n                    check: initialModalForm?.current_l2,\r\n                    value: initialModalFormdata?.current_l2\r\n                  },\r\n                  current_l3:{\r\n                    check: initialModalForm?.current_l3,\r\n                    value: initialModalFormdata?.current_l3 \r\n                  },\r\n                  connection:{\r\n                    check: initialModalForm?.connection,\r\n                    value: initialModalFormdata?.connection\r\n                  },\r\n                  speed:{\r\n                    check: initialModalForm?.speed,\r\n                    value: initialModalFormdata?.speed\r\n                  },\r\n                  rotation:{\r\n                    check: initialModalForm?.rotation,\r\n                    value: initialModalFormdata?.rotation\r\n                  },\r\n                  de_temp:{\r\n                    check: initialModalForm?.de_temp,\r\n                    value: initialModalFormdata?.de_temp\r\n                  },\r\n                  nde_temp:{\r\n                    check: initialModalForm?.nde_temp,\r\n                    value: initialModalFormdata?.nde_temp\r\n                  },\r\n                  position:{\r\n                    check: initialModalForm?.position,\r\n                    value: initialModalFormdata?.position\r\n                  },\r\n                  time:{\r\n                    check: initialModalForm?.time,\r\n                    value: initialModalFormdata?.time\r\n                  },\r\n           \r\n                \r\n                \r\n              })\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n\r\n      {/* Vibration test edit modal */}\r\n      {vibrationTestModal && <EditVibrationTests vibrationTestModal={vibrationTestModal} setVibrationTestModal={setVibrationTestModal}\r\n      onRadioChange={onRadioChange} handleRadio2Chnge={handleRadio2Chnge} initialModalForm={initialModalForm} \r\n      initialModalFormdata={initialModalFormdata} setVibrationData={setVibrationData} vibrationData={vibrationData}\r\n      setInitialModalFormdata={setInitialModalFormdata}\r\n      />}\r\n\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <ImagesIcon /> <span className=\"d-block ml-2\"> Upload Photos - Machine Data</span>\r\n          </div>\r\n        }\r\n        visible={machineUploadModal}\r\n        onCancel={() => setMachineUploadModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"border bg-white rounded p-3 mt-4\">\r\n          {!selectedImageTemp && <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"64\"\r\n              height=\"64\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 64 64\"\r\n            >\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n              ></path>\r\n              <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n              ></path>\r\n              <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#F7FCFF\"\r\n                d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#D7E6EF\"\r\n                d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#44394A\"\r\n                d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n              ></path>\r\n            </svg>\r\n            <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n            <h5 className=\"mb-0\">Or</h5>\r\n            <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n              Choosen File\r\n            </h5>\r\n            <input\r\n              style={styles.uploadFile}\r\n              className=\"uploadFile\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              multiple={false}\r\n              onChange={handleFileSelect}\r\n            />\r\n          </div>}\r\n\r\n          <div className=\"mt-4\">\r\n            {false && selectedFiles.length > 0 && (\r\n              <ul className=\"p-0\" style={{ width: \"40%\" }}>\r\n                {selectedFiles.map((file, i) => (\r\n                  <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                    {\" \"}\r\n                    <div className=\"d-flex align-items-center\">\r\n                      <UploadFileIcon />{\" \"}\r\n                      <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                    </div>\r\n                    <span\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => delUplFile(i)}\r\n                    >\r\n                      {\" \"}\r\n                      <CloseCircleOutlined />{\" \"}\r\n                    </span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n\r\n          <div className=\"d-flex justify-content-between p-2\">\r\n              <div id=\"upload_image_marking_canvas_container\" \r\n              className=\"d-flex justify-content-start\"></div>\r\n\r\n              {selectedImageTemp && \r\n                <div>\r\n                    {imageMarkings.map((tag_data, index) => (\r\n                        <div className=\"d-flex justify-content-end mb-1\">\r\n                            <Input \r\n                              value={tag_data.text}\r\n                              onChange={(e) => {\r\n                                  tag_data.text = e.target.value;\r\n                                  setImageMarkings((prevData) => {\r\n                                    const newData = prevData.map((data, i) => {\r\n                                      if (i === index) {\r\n                                          return tag_data\r\n                                        } else {\r\n                                          return data\r\n                                        }\r\n                                    })\r\n                                    return newData\r\n                                  });\r\n                              }}\r\n                              placeholder=\"Enter text...\" \r\n                            />\r\n                            <Button key=\"remove\" size=\"small\" className=\"ml-2\" type=\"danger\" onClick={() => removeImageMarking(index)}><DeleteOutlined /></Button>\r\n                        </div>\r\n                    ))\r\n                    }\r\n                    <Button key=\"add\" onClick={() => addImageMarking(selectedImageTemp)}>Add Marking</Button>\r\n                </div>\r\n              }\r\n            </div>\r\n            {selectedImageTemp && \r\n              <div><Button key=\"delete\" className=\"mt-1 ml-2\" onClick={() => {\r\n                resetImageData();\r\n              }}\r\n              >Remove Photo</Button></div>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => setMachineUploadModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              if(!selectedImageTemp) {\r\n                message.error(\"Please select an image to save\");\r\n                return\r\n              }\r\n              SaveUploadedImageData('Machine-Data');\r\n              setMachineUploadModal(false);\r\n              // console.log(selectedFiles);\r\n              // const images = [];\r\n\r\n              // for (let i = 0; i < selectedFiles.length; i++) {\r\n              //   const file = selectedFiles[i];\r\n              //   const reader = new FileReader();\r\n\r\n              //   reader.onload = (e) => {\r\n              //     images.push(e.target.result);\r\n              //     if (images.length === selectedFiles.length) {\r\n              //       setSelectedImages(images);\r\n              //     }\r\n              //   };\r\n\r\n              //   reader.readAsDataURL(file);\r\n              // }\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <ImagesIcon /> <span className=\"d-block ml-2\"> Upload Photos - Initial Conditions & Physical Inspection</span>\r\n          </div>\r\n        }\r\n        visible={initialConditionUploaModal}\r\n        onCancel={() => {\r\n          resetImageData();\r\n          setInitialConditionUploaModal(false)\r\n        }}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"border bg-white rounded p-3 mt-4\">\r\n          {!selectedImageTemp && <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"64\"\r\n              height=\"64\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 64 64\"\r\n            >\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n              ></path>\r\n              <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n              ></path>\r\n              <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#F7FCFF\"\r\n                d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#D7E6EF\"\r\n                d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#44394A\"\r\n                d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n              ></path>\r\n            </svg>\r\n            <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n            <h5 className=\"mb-0\">Or</h5>\r\n            <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n              Choosen File\r\n            </h5>\r\n            <input\r\n              style={styles.uploadFile}\r\n              className=\"uploadFile\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              multiple={false}\r\n              onChange={handleFileSelect1}\r\n            />\r\n          </div>}\r\n\r\n          <div className=\"mt-4\">\r\n            <div className=\"d-flex justify-content-between p-2\">\r\n              <div id=\"upload_image_marking_canvas_container\" \r\n              className=\"d-flex justify-content-start\"></div>\r\n\r\n              {selectedImageTemp && \r\n                <div>\r\n                    {imageMarkings.map((tag_data, index) => (\r\n                        <div className=\"d-flex justify-content-end mb-1\">\r\n                            <Input \r\n                              value={tag_data.text}\r\n                              onChange={(e) => {\r\n                                  tag_data.text = e.target.value;\r\n                                  setImageMarkings((prevData) => {\r\n                                    const newData = prevData.map((data, i) => {\r\n                                      if (i === index) {\r\n                                          return tag_data\r\n                                        } else {\r\n                                          return data\r\n                                        }\r\n                                    })\r\n                                    return newData\r\n                                  });\r\n                              }}\r\n                              placeholder=\"Enter text...\" \r\n                            />\r\n                            <Button key=\"remove\" size=\"small\" className=\"ml-2\" type=\"danger\" onClick={() => removeImageMarking(index)}><DeleteOutlined /></Button>\r\n                        </div>\r\n                    ))\r\n                    }\r\n                    <Button key=\"add\" onClick={() => addImageMarking(selectedImageTemp)}>Add Marking</Button>\r\n                </div>\r\n              }\r\n            </div>\r\n            {selectedImageTemp && \r\n              <div><Button key=\"delete\" className=\"mt-1 ml-2\" onClick={() => {\r\n                resetImageData();\r\n              }}\r\n              >Remove Photo</Button></div>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => {\r\n            resetImageData();\r\n            setInitialConditionUploaModal(false);\r\n          }}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              if(!selectedImageTemp) {\r\n                message.error(\"Please select an image to save\");\r\n                return\r\n              }\r\n              SaveUploadedImageData('Initial-Condition');\r\n              setInitialConditionUploaModal(false);\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      \r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <ImagesIcon /> <span className=\"d-block ml-2\"> Upload Photos - Free Load Test</span>\r\n          </div>\r\n        }\r\n        visible={initialcondUploaModal}\r\n        onCancel={() => {\r\n          resetImageData();\r\n          setInitialcondUploaModal(false)\r\n        }}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"border bg-white rounded p-3 mt-4\">\r\n          {!selectedImageTemp && <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"64\"\r\n              height=\"64\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 64 64\"\r\n            >\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n              ></path>\r\n              <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n              ></path>\r\n              <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#F7FCFF\"\r\n                d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#D7E6EF\"\r\n                d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#44394A\"\r\n                d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n              ></path>\r\n            </svg>\r\n            <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n            <h5 className=\"mb-0\">Or</h5>\r\n            <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n              Choosen File\r\n            </h5>\r\n            <input\r\n              style={styles.uploadFile}\r\n              className=\"uploadFile\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              multiple={false}\r\n              onChange={handleFileSelect2}\r\n            />\r\n          </div>}\r\n\r\n          <div className=\"mt-4\">\r\n            {false && selectedImages2.length > 0 && (\r\n              <ul className=\"p-0\" style={{ width: \"40%\" }}>\r\n                {selectedImages2.map((file, i) => (\r\n                  <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                    {\" \"}\r\n                    <div className=\"d-flex align-items-center\">\r\n                      <UploadFileIcon />{\" \"}\r\n                      <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                    </div>\r\n                    <span\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => delUplFile2(i)}\r\n                    >\r\n                      {\" \"}\r\n                      <CloseCircleOutlined />{\" \"}\r\n                    </span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n\r\n            <div className=\"d-flex justify-content-between p-2\">\r\n              <div id=\"upload_image_marking_canvas_container\" \r\n              className=\"d-flex justify-content-start\"></div>\r\n\r\n              {selectedImageTemp && \r\n                <div>\r\n                    {imageMarkings.map((tag_data, index) => (\r\n                        <div className=\"d-flex justify-content-end mb-1\">\r\n                            <Input \r\n                              value={tag_data.text}\r\n                              onChange={(e) => {\r\n                                  tag_data.text = e.target.value;\r\n                                  setImageMarkings((prevData) => {\r\n                                    const newData = prevData.map((data, i) => {\r\n                                      if (i === index) {\r\n                                          return tag_data\r\n                                        } else {\r\n                                          return data\r\n                                        }\r\n                                    })\r\n                                    return newData\r\n                                  });\r\n                              }}\r\n                              placeholder=\"Enter text...\" \r\n                            />\r\n                            <Button key=\"remove\" size=\"small\" className=\"ml-2\" type=\"danger\" onClick={() => removeImageMarking(index)}><DeleteOutlined /></Button>\r\n                        </div>\r\n                    ))\r\n                    }\r\n                    <Button key=\"add\" onClick={() => addImageMarking(selectedImageTemp)}>Add Marking</Button>\r\n                </div>\r\n              }\r\n            </div>\r\n            {selectedImageTemp && \r\n              <div><Button key=\"delete\" className=\"mt-1 ml-2\" onClick={() => {\r\n                resetImageData();\r\n              }}\r\n              >Remove Photo</Button></div>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => {\r\n            resetImageData();\r\n            setInitialcondUploaModal(false);\r\n          }}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              if(!selectedImageTemp) {\r\n                message.error(\"Please select an image to save\");\r\n                return\r\n              }\r\n              SaveUploadedImageData('Free-Load');\r\n              setInitialcondUploaModal(false);\r\n\r\n              // const images = [];\r\n              // for (let i = 0; i < selectedImages2.length; i++) {\r\n              //   const file = selectedImages2[i];\r\n              //   const reader = new FileReader();\r\n\r\n              //   reader.onload = (e) => {\r\n              //     images.push(e.target.result);\r\n              //     if (images.length === selectedImages2.length) {\r\n              //       setSelectedImages2(images);\r\n              //     }\r\n              //   };\r\n              //   reader.readAsDataURL(file);\r\n              // }\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <ImagesIcon /> <span className=\"d-block ml-2\"> Upload Photos - Vibration Tests</span>\r\n          </div>\r\n        }\r\n        visible={initialcondVibrationUploaModal}\r\n        onCancel={() => {\r\n          resetImageData();\r\n          setInitialcondVibrationUploaModal();\r\n        }}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"border bg-white rounded p-3 mt-4\">\r\n          {!selectedImageTemp && <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"64\"\r\n              height=\"64\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 64 64\"\r\n            >\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n              ></path>\r\n              <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n              ></path>\r\n              <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#F7FCFF\"\r\n                d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#D7E6EF\"\r\n                d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#44394A\"\r\n                d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n              ></path>\r\n            </svg>\r\n            <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n            <h5 className=\"mb-0\">Or</h5>\r\n            <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n              Choosen File\r\n            </h5>\r\n            <input\r\n              style={styles.uploadFile}\r\n              className=\"uploadFile\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              multiple={false}\r\n              onChange={handleFileSelectVibrationTest}\r\n            />\r\n          </div>}\r\n          <div className=\"mt-0\">\r\n            {false && selectedImages3.length > 0 && (\r\n              <ul className=\"p-0\" style={{ width: \"40%\" }}>\r\n                {selectedImages3.map((file, i) => (\r\n                  <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                    {\" \"}\r\n                    <div className=\"d-flex align-items-center\">\r\n                      <UploadFileIcon />{\" \"}\r\n                      <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                    </div>\r\n                    <span\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => delUplFile3(i)}\r\n                    >\r\n                      {\" \"}\r\n                      <CloseCircleOutlined />{\" \"}\r\n                    </span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n\r\n            <div className=\"d-flex justify-content-between p-2\">\r\n              <div id=\"upload_image_marking_canvas_container\" \r\n              className=\"d-flex justify-content-start\"></div>\r\n\r\n              {selectedImageTemp && \r\n                <div>\r\n                    {imageMarkings.map((tag_data, index) => (\r\n                        <div className=\"d-flex justify-content-end mb-1\">\r\n                            <Input \r\n                              value={tag_data.text}\r\n                              onChange={(e) => {\r\n                                  tag_data.text = e.target.value;\r\n                                  setImageMarkings((prevData) => {\r\n                                    const newData = prevData.map((data, i) => {\r\n                                      if (i === index) {\r\n                                          return tag_data\r\n                                        } else {\r\n                                          return data\r\n                                        }\r\n                                    })\r\n                                    return newData\r\n                                  });\r\n                              }}\r\n                              placeholder=\"Enter text...\" \r\n                            />\r\n                            <Button key=\"remove\" size=\"small\" className=\"ml-2\" type=\"danger\" onClick={() => removeImageMarking(index)}><DeleteOutlined /></Button>\r\n                        </div>\r\n                    ))\r\n                    }\r\n                    <Button key=\"add\" onClick={() => addImageMarking(selectedImageTemp)}>Add Marking</Button>\r\n                </div>\r\n              }\r\n            </div>\r\n            {selectedImageTemp && \r\n              <div><Button key=\"delete\" className=\"mt-1 ml-2\" onClick={() => {\r\n                resetImageData();\r\n              }}\r\n              >Remove Photo</Button></div>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => {\r\n            resetImageData();\r\n            setInitialcondVibrationUploaModal(false);\r\n          }}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={async () => {\r\n              if(!selectedImageTemp) {\r\n                message.error(\"Please select an image to save\");\r\n                return\r\n              }\r\n              SaveUploadedImageData('Vibration-Test');\r\n              setInitialcondVibrationUploaModal(false);\r\n\r\n              // const images = [];\r\n              // for (let i = 0; i < selectedImages3.length; i++) {\r\n              //   const file = selectedImages3[i];\r\n              //   const reader = new FileReader();\r\n\r\n              //   reader.onload = (e) => {\r\n              //     images.push(e.target.result);\r\n              //     if (images.length === selectedImages3.length) {\r\n              //       setSelectedImages3(images);\r\n              //     }\r\n              //   };\r\n\r\n              //   reader.readAsDataURL(file);\r\n              // }\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n\r\n      {uploadModal && <UploadPhotos setUploadModal={setUploadModal} \r\n        uploadModal={uploadModal} setSelectedImageTemp={setSelectedImageTemp} \r\n        selectedImageTemp={selectedImageTemp} setImageMarkings={setImageMarkings} \r\n        imageMarkings={imageMarkings} setEditImageId={setEditImageId} \r\n        uploadImageType={uploadImageType} SaveUploadedImageData={SaveUploadedImageData}\r\n        layerTemp={layerTemp} setLayerTemp={setLayerTemp}\r\n        stage={stage} layer={layer}\r\n        />}\r\n\r\n      <EditSIModal SIEditModal={SIEditModal} setSIEditModal={setSIEditModal} />\r\n      {/* <EditModal model={\"heater\"} SREditModal={SREditModal} setSREditModal={setSREditModal} /> */}\r\n      {modalName === \"heater\" && <EditModal SREditModal={SREditModal} setSREditModal={setSREditModal} />}\r\n      {modalName === \"thermistor\" && <EditThermistor SREditModal={SREditModal} setSREditModal={setSREditModal} />}\r\n      {modalName === \"thermostat\" && <EditThermistor SREditModal={SREditModal} setSREditModal={setSREditModal} />}\r\n      {modalName === \"PT_100\" && <EditPT_100 SREditModal={SREditModal} setSREditModal={setSREditModal} />}\r\n      {modalName === \"brake\" && <EditBrake SREditModal={SREditModal} setSREditModal={setSREditModal} />}\r\n      {modalName === \"others\" && <EditOthers SREditModal={SREditModal} setSREditModal={setSREditModal} />}\r\n      {modalName === \"statorResistance\" && <EditStatorResistance SREditModal={SREditModal} setSREditModal={setSREditModal} />}\r\n      {modalName === \"statorInsulation\" && <EditStatorInsulation SIEditModal={SIEditModal} setSIEditModal={setSIEditModal} />}\r\n      {modalName === \"FreeLoadTest\" && <EditFreeLoadTest SREditModal={SREditModal} setSREditModal={setSIEditModal} />}\r\n      <EditRIModal RIEditModal={RIEditModal} setRIEditModal={setRIEditModal} />\r\n      <EditPolarizationIndexModal PIEditModal={PIEditModal} setPIEditModal={setPIEditModal} />\r\n      <EditSCModal SCEditModal={SCEditModal} setSCEditModal={setSCEditModal} />\r\n      <div className=\"custom-full-width\">\r\n        <Space direction=\"vertical\">\r\n          <Collapse\r\n            expandIconPosition={\"end\"}\r\n            onChange={(data) => console.log(data)}\r\n            className=\"mb-3\"\r\n          >\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Process Control\r\n                </>\r\n              }\r\n              key=\"1\"\r\n            >\r\n              <div className=\"normal-header-color\">\r\n                <Collapse\r\n                  expandIconPosition={\"end\"}\r\n                  // onChange={(data) => console.log(data)}\r\n                  className=\"mb-3\"\r\n                >\r\n                  <Panel\r\n                    header={\r\n                      <>\r\n                        General Process\r\n                        {/* <Button className=\"bg-primary text-white customEditButton\">\r\n                          <EditOutlined /> Edit\r\n                        </Button> */}\r\n                      </>\r\n                    }\r\n                    key=\"1\"\r\n                  >\r\n                    {/* <div className=\"d-flex justify-content-end pr-4\">\r\n                    <Button className=\"bg-primary text-white\"><EditOutlined /> Edit</Button>\r\n                  </div> */}\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}></div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Operator(OP)</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Date Start</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Date Completed</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <h5 className=\"text-gray-light\">Remarks</h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>Onsite Inspection</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input value={\r\n                            generalProcess?.onsite_inspection?.operator\r\n                          }\r\n\r\n                            onChange={(e) => {\r\n                              setGeneralProcess({\r\n                                ...generalProcess,\r\n                                onsite_inspection: {\r\n                                  ...generalProcess.onsite_inspection,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                            placeholder=\"Operator\" />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={\r\n                              generalProcess?.onsite_inspection?.start_date\r\n                            }\r\n\r\n                            onChange={(e) => {\r\n                              setGeneralProcess({\r\n                                ...generalProcess,\r\n                                onsite_inspection: {\r\n                                  ...generalProcess.onsite_inspection,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={\r\n                              generalProcess?.onsite_inspection?.completion_date\r\n                            }\r\n\r\n                            onChange={(e) => {\r\n                              setGeneralProcess({\r\n                                ...generalProcess,\r\n                                onsite_inspection: {\r\n                                  ...generalProcess.onsite_inspection,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"onsite_inspection\");\r\n                              setFuncState2(\"general_process\");\r\n                              setRemarks(generalProcess?.onsite_inspection?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>Onsite Dismantling</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\"\r\n                            value={\r\n                              generalProcess?.onsite_dismantling?.operator\r\n                            }\r\n\r\n                            onChange={(e) => {\r\n                              setGeneralProcess({\r\n                                ...generalProcess,\r\n                                onsite_dismantling: {\r\n                                  ...generalProcess.onsite_dismantling,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={\r\n                              generalProcess?.onsite_dismantling?.start_date\r\n                            }\r\n\r\n                            onChange={(e) => {\r\n                              setGeneralProcess({\r\n                                ...generalProcess,\r\n                                onsite_dismantling: {\r\n                                  ...generalProcess.onsite_dismantling,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          // onChange={(date) => console.log(date)}\r\n                           />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={\r\n                              generalProcess?.onsite_dismantling?.completion_date\r\n                            }\r\n\r\n                            onChange={(e) => {\r\n                              setGeneralProcess({\r\n                                ...generalProcess,\r\n                                onsite_dismantling: {\r\n                                  ...generalProcess.onsite_dismantling,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"onsite_dismantling\");\r\n                              setFuncState2(\"general_process\");\r\n                              setRemarks(generalProcess?.onsite_dismantling?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Receiving Inspection</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\"\r\n                              value={generalProcess?.ws_receiving_inspection?.operator}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_receiving_inspection: {\r\n                                    ...generalProcess.ws_receiving_inspection,\r\n                                    operator: e.target.value,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                              value={generalProcess?.ws_receiving_inspection?.start_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_receiving_inspection: {\r\n                                    ...generalProcess.ws_receiving_inspection,\r\n                                    start_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                              value={generalProcess?.ws_receiving_inspection?.completion_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_receiving_inspection: {\r\n                                    ...generalProcess.ws_receiving_inspection,\r\n                                    completion_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_receiving_inspection\");\r\n                              setFuncState2(\"general_process\");\r\n                              setRemarks(generalProcess?.ws_receiving_inspection?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Electrical Test and Free Run Test</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                              value={generalProcess?.ws_electrical_test?.operator}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_electrical_test: {\r\n                                    ...generalProcess.ws_electrical_test,\r\n                                    operator: e.target.value,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                              value={generalProcess?.ws_electrical_test?.start_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_electrical_test: {\r\n                                    ...generalProcess.ws_electrical_test,\r\n                                    start_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                              value={generalProcess?.ws_electrical_test?.completion_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_electrical_test: {\r\n                                    ...generalProcess.ws_electrical_test,\r\n                                    completion_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_electrical_test\");\r\n                              setFuncState2(\"general_process\");\r\n                              setRemarks(generalProcess?.ws_electrical_test?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Disassemble Motor</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                              value={generalProcess?.ws_disassemble_motor?.operator}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_disassemble_motor: {\r\n                                    ...generalProcess.ws_disassemble_motor,\r\n                                    operator: e.target.value,\r\n                                  },\r\n                                });\r\n                              }}\r\n\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                              value={generalProcess?.ws_disassemble_motor?.start_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_disassemble_motor: {\r\n                                    ...generalProcess.ws_disassemble_motor,\r\n                                    start_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker value={generalProcess?.ws_disassemble_motor?.completion_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_disassemble_motor: {\r\n                                    ...generalProcess.ws_disassemble_motor,\r\n                                    completion_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_disassemble_motor\");\r\n                              setFuncState2(\"general_process\");\r\n                              setRemarks(generalProcess?.ws_disassemble_motor?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Mechanical Checks</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\"\r\n                              value={generalProcess?.ws_mechanical_checks?.operator}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_mechanical_checks: {\r\n                                    ...generalProcess.ws_mechanical_checks,\r\n                                    operator: e.target.value,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                              value={generalProcess?.ws_mechanical_checks?.start_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_mechanical_checks: {\r\n                                    ...generalProcess.ws_mechanical_checks,\r\n                                    start_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                              value={generalProcess?.ws_mechanical_checks?.completion_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_mechanical_checks: {\r\n                                    ...generalProcess.ws_mechanical_checks,\r\n                                    completion_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_mechanical_checks\");\r\n                              setFuncState2(\"general_process\");\r\n                              setRemarks(generalProcess?.ws_mechanical_checks?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Clean Parts</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\"\r\n                              value={generalProcess?.ws_clean_parts?.operator}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_clean_parts: {\r\n                                    ...generalProcess.ws_clean_parts,\r\n                                    operator: e.target.value,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                              value={generalProcess?.ws_clean_parts?.start_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_clean_parts: {\r\n                                    ...generalProcess.ws_clean_parts,\r\n                                    start_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                              value={generalProcess?.ws_clean_parts?.completion_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_clean_parts: {\r\n                                    ...generalProcess.ws_clean_parts,\r\n                                    completion_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_clean_parts\");\r\n                              setFuncState2(\"general_process\");\r\n                              setRemarks(generalProcess?.ws_clean_parts?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Bake stator in oven</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\"\r\n                              value={generalProcess?.ws_bake_stator_in_oven?.operator}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_bake_stator_in_oven: {\r\n                                    ...generalProcess.ws_bake_stator_in_oven,\r\n                                    operator: e.target.value,\r\n                                  },\r\n                                });\r\n                              }} \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                              value={generalProcess?.ws_bake_stator_in_oven?.start_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_bake_stator_in_oven: {\r\n                                    ...generalProcess.ws_bake_stator_in_oven,\r\n                                    start_date: e,\r\n                                  },\r\n                                });\r\n                              }}     \r\n\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                              value={generalProcess?.ws_bake_stator_in_oven?.completion_date}\r\n                              onChange={(e) => {\r\n                                setGeneralProcess({\r\n                                  ...generalProcess,\r\n                                  ws_bake_stator_in_oven: {\r\n                                    ...generalProcess.ws_bake_stator_in_oven,\r\n                                    completion_date: e,\r\n                                  },\r\n                                });\r\n                              }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_bake_stator_in_oven\");\r\n                              setFuncState2(\"general_process\");\r\n                              setRemarks(generalProcess?.ws_bake_stator_in_oven?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Varnish and Bake</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={generalProcess?.ws_varnish_and_bake?.operator}\r\n                            onAbort={(e)=>{\r\n                              setGeneralProcess({\r\n                                ...generalProcess,\r\n                                ws_varnish_and_bake: {\r\n                                  ...generalProcess.ws_varnish_and_bake,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={generalProcess?.ws_varnish_and_bake?.start_date}\r\n                            onChange={(e) => {\r\n                              setGeneralProcess({\r\n                                ...generalProcess,\r\n                                ws_varnish_and_bake: {\r\n                                  ...generalProcess.ws_varnish_and_bake,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={generalProcess?.ws_varnish_and_bake?.completion_date}\r\n                            onChange={(e) => {\r\n                              setGeneralProcess({\r\n                                ...generalProcess,\r\n                                ws_varnish_and_bake: {\r\n                                  ...generalProcess.ws_varnish_and_bake,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                            \r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_varnish_and_bake\");\r\n                              setFuncState2(\"general_process\");\r\n                              setRemarks(generalProcess?.ws_varnish_and_bake?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Panel>\r\n                </Collapse>\r\n                <Collapse className=\"mb-3\">\r\n                  <Panel\r\n                    header={\r\n                      <>\r\n                        Rewinding\r\n                        {/* <Button className=\"bg-primary text-white customEditButton\">\r\n                          <EditOutlined /> Edit\r\n                        </Button> */}\r\n                      </>\r\n                    }\r\n                    key=\"1\"\r\n                  >\r\n                    {/* <div className=\"d-flex justify-content-end pr-4\">\r\n                    <Button className=\"bg-primary text-white\"><EditOutlined /> Edit</Button>\r\n                  </div> */}\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}></div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Operator(OP)</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Date Start</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Date Completed</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <h5 className=\"text-gray-light\">Remarks</h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Check winding dimension/connection</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\"\r\n                            value={rewinding?.ws_check_winding_dimension?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_check_winding_dimension: {\r\n                                  ...rewinding.ws_check_winding_dimension,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_check_winding_dimension?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_check_winding_dimension: {\r\n                                  ...rewinding.ws_check_winding_dimension,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_check_winding_dimension?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_check_winding_dimension: {\r\n                                  ...rewinding.ws_check_winding_dimension,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_check_winding_dimension\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_check_winding_dimension?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Cut winding</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={rewinding?.ws_cut_winding?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_cut_winding: {\r\n                                  ...rewinding.ws_cut_winding,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_cut_winding?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_cut_winding: {\r\n                                  ...rewinding.ws_cut_winding,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_cut_winding?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_cut_winding: {\r\n                                  ...rewinding.ws_cut_winding,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_cut_winding\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_cut_winding?.remarks);\r\n                            }}\r\n                          \r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Burn out in heat cleaning oven</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={rewinding?.ws_burn_out_in_heat_cleaning_oven?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_burn_out_in_heat_cleaning_oven: {\r\n                                  ...rewinding.ws_burn_out_in_heat_cleaning_oven,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_burn_out_in_heat_cleaning_oven?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_burn_out_in_heat_cleaning_oven: {\r\n                                  ...rewinding.ws_burn_out_in_heat_cleaning_oven,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_burn_out_in_heat_cleaning_oven?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_burn_out_in_heat_cleaning_oven: {\r\n                                  ...rewinding.ws_burn_out_in_heat_cleaning_oven,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_burn_out_in_heat_cleaning_oven\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_burn_out_in_heat_cleaning_oven?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Lamination core test</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={rewinding?.ws_lamination_core_test?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_lamination_core_test: {\r\n                                  ...rewinding.ws_lamination_core_test,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_lamination_core_test?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_lamination_core_test: {\r\n                                  ...rewinding.ws_lamination_core_test,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_lamination_core_test?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_lamination_core_test: {\r\n                                  ...rewinding.ws_lamination_core_test,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_lamination_core_test\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_lamination_core_test?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Re-stack lamination (if required)</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={rewinding?.ws_re_stack_lamination?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_re_stack_lamination: {\r\n                                  ...rewinding.ws_re_stack_lamination,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_re_stack_lamination?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_re_stack_lamination: {\r\n                                  ...rewinding.ws_re_stack_lamination,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={rewinding?.ws_re_stack_lamination?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_re_stack_lamination: {\r\n                                  ...rewinding.ws_re_stack_lamination,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_re_stack_lamination\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_re_stack_lamination?.remarks);\r\n                            }}\r\n                            \r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Rewind Main Stator/Brake Coil</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={rewinding?.ws_rewind_main_stator_brake_coil?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_rewind_main_stator_brake_coil: {\r\n                                  ...rewinding.ws_rewind_main_stator_brake_coil,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_rewind_main_stator_brake_coil?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_rewind_main_stator_brake_coil: {\r\n                                  ...rewinding.ws_rewind_main_stator_brake_coil,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={rewinding?.ws_rewind_main_stator_brake_coil?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_rewind_main_stator_brake_coil: {\r\n                                  ...rewinding.ws_rewind_main_stator_brake_coil,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_rewind_main_stator_brake_coil\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_rewind_main_stator_brake_coil?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS TIG/Soldering</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={rewinding?.ws_tig_soldering?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_tig_soldering: {\r\n                                  ...rewinding.ws_tig_soldering,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_tig_soldering?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_tig_soldering: {\r\n                                  ...rewinding.ws_tig_soldering,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                           />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_tig_soldering?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_tig_soldering: {\r\n                                  ...rewinding.ws_tig_soldering,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_tig_soldering\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_tig_soldering?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS In-Progress test on winding before varnish</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={rewinding?.ws_in_progress_test_on_winding_before_varnish?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_in_progress_test_on_winding_before_varnish: {\r\n                                  ...rewinding.ws_in_progress_test_on_winding_before_varnish,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_in_progress_test_on_winding_before_varnish?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_in_progress_test_on_winding_before_varnish: {\r\n                                  ...rewinding.ws_in_progress_test_on_winding_before_varnish,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                           />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_in_progress_test_on_winding_before_varnish?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_in_progress_test_on_winding_before_varnish: {\r\n                                  ...rewinding.ws_in_progress_test_on_winding_before_varnish,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}    \r\n                                \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_in_progress_test_on_winding_before_varnish\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_in_progress_test_on_winding_before_varnish?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Pre-Heat before Varnish</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={rewinding?.ws_pre_heat_before_varnish?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_pre_heat_before_varnish: {\r\n                                  ...rewinding.ws_pre_heat_before_varnish,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_pre_heat_before_varnish?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_pre_heat_before_varnish: {\r\n                                  ...rewinding.ws_pre_heat_before_varnish,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_pre_heat_before_varnish?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_pre_heat_before_varnish: {\r\n                                  ...rewinding.ws_pre_heat_before_varnish,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_pre_heat_before_varnish\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_pre_heat_before_varnish?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Varnish and Bake in oven</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\"\r\n                            value={rewinding?.ws_varnish_and_bake_in_oven?.operator}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_varnish_and_bake_in_oven: {\r\n                                  ...rewinding.ws_varnish_and_bake_in_oven,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={rewinding?.ws_varnish_and_bake_in_oven?.start_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_varnish_and_bake_in_oven: {\r\n                                  ...rewinding.ws_varnish_and_bake_in_oven,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={rewinding?.ws_varnish_and_bake_in_oven?.completion_date}\r\n                            onChange={(e) => {\r\n                              setRewinding({\r\n                                ...rewinding,\r\n                                ws_varnish_and_bake_in_oven: {\r\n                                  ...rewinding.ws_varnish_and_bake_in_oven,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_varnish_and_bake_in_oven\");\r\n                              setFuncState2(\"rewinding\");\r\n                              setRemarks(rewinding?.ws_varnish_and_bake_in_oven?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Panel>\r\n                </Collapse>\r\n                <Collapse className=\"mb-3\">\r\n                  <Panel\r\n                    header={\r\n                      <>\r\n                        Assembly and Final Test\r\n                        {/* <Button className=\"bg-primary text-white customEditButton\">\r\n                          <EditOutlined /> Edit\r\n                        </Button> */}\r\n                      </>\r\n                    }\r\n                    key=\"1\"\r\n                  >\r\n                    {/* <div className=\"d-flex justify-content-end pr-4\">\r\n                    <Button className=\"bg-primary text-white\"><EditOutlined /> Edit</Button>\r\n                  </div> */}\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}></div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Operator(OP)</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Date Start</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Date Completed</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <h5 className=\"text-gray-light\">Remarks</h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Dynamic Balancing of rotor</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\"\r\n                            value={assemblyAndFinalTest?.ws_dynamic_balancing_of_rotor?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_dynamic_balancing_of_rotor: {\r\n                                  ...assemblyAndFinalTest.ws_dynamic_balancing_of_rotor,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={assemblyAndFinalTest?.ws_dynamic_balancing_of_rotor?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_dynamic_balancing_of_rotor: {\r\n                                  ...assemblyAndFinalTest.ws_dynamic_balancing_of_rotor,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={assemblyAndFinalTest?.ws_dynamic_balancing_of_rotor?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_dynamic_balancing_of_rotor: {\r\n                                  ...assemblyAndFinalTest.ws_dynamic_balancing_of_rotor,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_dynamic_balancing_of_rotor\");\r\n                              setFuncState2(\"assembly_and_final_test\");\r\n                              setRemarks(assemblyAndFinalTest?.ws_dynamic_balancing_of_rotor?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Recondition of Housing Journal</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\"\r\n                            value={assemblyAndFinalTest?.ws_recondition_of_housing_journal?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_recondition_of_housing_journal: {\r\n                                  ...assemblyAndFinalTest.ws_recondition_of_housing_journal,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_recondition_of_housing_journal?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_recondition_of_housing_journal: {\r\n                                  ...assemblyAndFinalTest.ws_recondition_of_housing_journal,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_recondition_of_housing_journal?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_recondition_of_housing_journal: {\r\n                                  ...assemblyAndFinalTest.ws_recondition_of_housing_journal,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_recondition_of_housing_journal\");\r\n                              setFuncState2(\"assembly_and_final_test\");\r\n                              setRemarks(assemblyAndFinalTest?.ws_recondition_of_housing_journal?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Electrical Test before Assembly</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={assemblyAndFinalTest?.ws_electrical_test_before_assembly?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_electrical_test_before_assembly: {\r\n                                  ...assemblyAndFinalTest.ws_electrical_test_before_assembly,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_electrical_test_before_assembly?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_electrical_test_before_assembly: {\r\n                                  ...assemblyAndFinalTest.ws_electrical_test_before_assembly,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={assemblyAndFinalTest?.ws_electrical_test_before_assembly?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_electrical_test_before_assembly: {\r\n                                  ...assemblyAndFinalTest.ws_electrical_test_before_assembly,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_electrical_test_before_assembly\");\r\n                              setFuncState2(\"assembly_and_final_test\");\r\n                              setRemarks(assemblyAndFinalTest?.ws_electrical_test_before_assembly?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Mechanical Check before Assembly</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={assemblyAndFinalTest?.ws_mechanical_check_before_assembly?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_mechanical_check_before_assembly: {\r\n                                  ...assemblyAndFinalTest.ws_mechanical_check_before_assembly,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_mechanical_check_before_assembly?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_mechanical_check_before_assembly: {\r\n                                  ...assemblyAndFinalTest.ws_mechanical_check_before_assembly,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_mechanical_check_before_assembly?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_mechanical_check_before_assembly: {\r\n                                  ...assemblyAndFinalTest.ws_mechanical_check_before_assembly,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_mechanical_check_before_assembly\");\r\n                              setFuncState2(\"assembly_and_final_test\");\r\n                              setRemarks(assemblyAndFinalTest?.ws_mechanical_check_before_assembly?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Re-assemble Bearings</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={assemblyAndFinalTest?.ws_re_assemble_bearings?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_re_assemble_bearings: {\r\n                                  ...assemblyAndFinalTest.ws_re_assemble_bearings,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_re_assemble_bearings?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_re_assemble_bearings: {\r\n                                  ...assemblyAndFinalTest.ws_re_assemble_bearings,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_re_assemble_bearings?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_re_assemble_bearings: {\r\n                                  ...assemblyAndFinalTest.ws_re_assemble_bearings,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_re_assemble_bearings\");\r\n                              setFuncState2(\"assembly_and_final_test\");\r\n                              setRemarks(assemblyAndFinalTest?.ws_re_assemble_bearings?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Re-assemble Motor</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={assemblyAndFinalTest?.ws_re_assemble_motor?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_re_assemble_motor: {\r\n                                  ...assemblyAndFinalTest.ws_re_assemble_motor,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_re_assemble_motor?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_re_assemble_motor: {\r\n                                  ...assemblyAndFinalTest.ws_re_assemble_motor,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={assemblyAndFinalTest?.ws_re_assemble_motor?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_re_assemble_motor: {\r\n                                  ...assemblyAndFinalTest.ws_re_assemble_motor,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_re_assemble_motor\");\r\n                              setFuncState2(\"assembly_and_final_test\");\r\n                              setRemarks(assemblyAndFinalTest?.ws_re_assemble_motor?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Re-assemble Seals</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={assemblyAndFinalTest?.ws_re_assemble_seals?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_re_assemble_seals: {\r\n                                  ...assemblyAndFinalTest.ws_re_assemble_seals,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_re_assemble_seals?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_re_assemble_seals: {\r\n                                  ...assemblyAndFinalTest.ws_re_assemble_seals,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={assemblyAndFinalTest?.ws_re_assemble_seals?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_re_assemble_seals: {\r\n                                  ...assemblyAndFinalTest.ws_re_assemble_seals,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_re_assemble_seals\");\r\n                              setFuncState2(\"assembly_and_final_test\");\r\n                              setRemarks(assemblyAndFinalTest?.ws_re_assemble_seals?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Final Test and Inspection after Overhauling</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={assemblyAndFinalTest?.ws_final_test_and_inspection_after_overhauling?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_final_test_and_inspection_after_overhauling: {\r\n                                  ...assemblyAndFinalTest.ws_final_test_and_inspection_after_overhauling,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                            \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_final_test_and_inspection_after_overhauling?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_final_test_and_inspection_after_overhauling: {\r\n                                  ...assemblyAndFinalTest.ws_final_test_and_inspection_after_overhauling,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_final_test_and_inspection_after_overhauling?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_final_test_and_inspection_after_overhauling: {\r\n                                  ...assemblyAndFinalTest.ws_final_test_and_inspection_after_overhauling,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_final_test_and_inspection_after_overhauling\");\r\n                              setFuncState2(\"assembly_and_final_test\");\r\n                              setRemarks(assemblyAndFinalTest?.ws_final_test_and_inspection_after_overhauling?.remarks);\r\n                            }}\r\n                          \r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Painting</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={assemblyAndFinalTest?.ws_painting?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_painting: {\r\n                                  ...assemblyAndFinalTest.ws_painting,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_painting?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_painting: {\r\n                                  ...assemblyAndFinalTest.ws_painting,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={assemblyAndFinalTest?.ws_painting?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_painting: {\r\n                                  ...assemblyAndFinalTest.ws_painting,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\"\r\n                          onClick={() => {\r\n                            setRemarksModalForGeneralProcess(true);\r\n                            setFuncState(\"ws_painting\");\r\n                            setFuncState2(\"assembly_and_final_test\");\r\n                            setRemarks(assemblyAndFinalTest?.ws_painting?.remarks);\r\n                          }}\r\n                        \r\n                        >\r\n                          <Button className=\"bg-primary text-white\">\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>WS Packaging</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={assemblyAndFinalTest?.ws_packaging?.operator}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_packaging: {\r\n                                  ...assemblyAndFinalTest.ws_packaging,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_packaging?.start_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_packaging: {\r\n                                  ...assemblyAndFinalTest.ws_packaging,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          \r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={assemblyAndFinalTest?.ws_packaging?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setAssemblyAndFinalTest({\r\n                                ...assemblyAndFinalTest,\r\n                                ws_packaging: {\r\n                                  ...assemblyAndFinalTest.ws_packaging,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"ws_packaging\");\r\n                              setFuncState2(\"assembly_and_final_test\");\r\n                              setRemarks(assemblyAndFinalTest?.ws_packaging?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Panel>\r\n                </Collapse>\r\n                <Collapse className=\"mb-3\">\r\n                  <Panel\r\n                    header={\r\n                      <>\r\n                        Deliver to Site{\" \"}\r\n                        {/* <Button className=\"bg-primary text-white customEditButton\">\r\n                          <EditOutlined /> Edit\r\n                        </Button> */}\r\n                      </>\r\n                    }\r\n                    key=\"1\"\r\n                  >\r\n                    {/* <div className=\"d-flex justify-content-end pr-4\">\r\n                    <Button className=\"bg-primary text-white\"><EditOutlined /> Edit</Button>\r\n                  </div> */}\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}></div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Operator(OP)</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Date Start</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <h5 className=\"text-gray-light\">Date Completed</h5>\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <h5 className=\"text-gray-light\">Remarks</h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>Onsite Installation and Alignment</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={deliverToSite?.onsite_installation_and_alignment?.operator}\r\n                            onChange={(e)=>{\r\n                              setDeliverToSite({\r\n                                ...deliverToSite,\r\n                                onsite_installation_and_alignment: {\r\n                                  ...deliverToSite.onsite_installation_and_alignment,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={deliverToSite?.onsite_installation_and_alignment?.start_date}\r\n                            onChange={(e)=>{\r\n                              setDeliverToSite({\r\n                                ...deliverToSite,\r\n                                onsite_installation_and_alignment: {\r\n                                  ...deliverToSite.onsite_installation_and_alignment,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={deliverToSite?.onsite_installation_and_alignment?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setDeliverToSite({\r\n                                ...deliverToSite,\r\n                                onsite_installation_and_alignment: {\r\n                                  ...deliverToSite.onsite_installation_and_alignment,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"onsite_installation_and_alignment\");\r\n                              setFuncState2(\"deliver_to_site\");\r\n                              setRemarks(deliverToSite?.onsite_installation_and_alignment?.remarks);\r\n                            }}\r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-between my-3\">\r\n                      <div className=\"\" style={{ width: \"40%\" }}>\r\n                        <h5>Onsite Commissioning</h5>\r\n                      </div>\r\n                      <div className=\"d-flex\" style={{ width: \"60%\" }}>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <Input placeholder=\"Operator\" \r\n                            value={deliverToSite?.onsite_commissioning?.operator}\r\n                            onChange={(e)=>{\r\n                              setDeliverToSite({\r\n                                ...deliverToSite,\r\n                                onsite_commissioning: {\r\n                                  ...deliverToSite.onsite_commissioning,\r\n                                  operator: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker\r\n                            value={deliverToSite?.onsite_commissioning?.start_date}\r\n                            onChange={(e)=>{\r\n                              setDeliverToSite({\r\n                                ...deliverToSite,\r\n                                onsite_commissioning: {\r\n                                  ...deliverToSite.onsite_commissioning,\r\n                                  start_date: e,\r\n                                },\r\n                              });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-start pl-3\">\r\n                          <DatePicker \r\n                            value={deliverToSite?.onsite_commissioning?.completion_date}\r\n                            onChange={(e)=>{\r\n                              setDeliverToSite({\r\n                                ...deliverToSite,\r\n                                onsite_commissioning: {\r\n                                  ...deliverToSite.onsite_commissioning,\r\n                                  completion_date: e,\r\n                                },\r\n                              });\r\n                            }}  \r\n                            />\r\n                        </div>\r\n                        <div className=\"w-25 d-flex justify-content-center pl-3\">\r\n                          <Button className=\"bg-primary text-white\"\r\n                            onClick={() => {\r\n                              setRemarksModalForGeneralProcess(true);\r\n                              setFuncState(\"onsite_commissioning\");\r\n                              setFuncState2(\"deliver_to_site\");\r\n                              setRemarks(deliverToSite?.onsite_commissioning?.remarks);\r\n                            }}\r\n                            \r\n                          >\r\n                            <RemarkIcon />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Panel>\r\n                </Collapse>\r\n                <div className=\"d-flex mb-3\">\r\n                  <div style={{ width: \"25%\" }}>\r\n                    <h5>Responsible Person (RP)</h5>\r\n                  </div>\r\n                  <div style={{ width: \"75%\" }}>\r\n                    <Input placeholder=\"type here...\"\r\n                      value={otherProcessControl?.responsiblePerson}\r\n                      onChange={(e) => {\r\n                        setOtherProcessControl({\r\n                          ...otherProcessControl,\r\n                          responsiblePerson: e.target.value,\r\n                        });\r\n                      }}\r\n                    \r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"d-flex mb-3\">\r\n                  <div style={{ width: \"25%\" }}>\r\n                    <h5>Date</h5>\r\n                  </div>\r\n                  <div style={{ width: \"75%\" }}>\r\n                    <DatePicker className=\"w-100\" \r\n                      value={\r\n                        otherProcessControl?.date\r\n                        \r\n                      }\r\n                      onChange={(e) => {\r\n                        setOtherProcessControl({\r\n                          ...otherProcessControl,\r\n                          date: e,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Parts Renewal List\r\n                </>\r\n              }\r\n              key=\"2\"\r\n            >\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4 className=\"d-flex align-items-center\">\r\n                  {\" \"}\r\n                  <ViewDetailsIcon /> View Details{\" \"}\r\n                  <span\r\n                    style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                    className=\"font-weight-300 ml-2\"\r\n                  >\r\n                    {\" \"}\r\n                    <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                  </span>{\" \"}\r\n                </h4>\r\n                <Button className=\"bg-primary text-white\"\r\n                  onClick={()=>{\r\n                    setPartsRenewalModal(true);\r\n                  }}\r\n                >+</Button>\r\n              </div>\r\n              <div className=\"grey-table mt-3\">\r\n                <Table\r\n                  className=\"border rounded\"\r\n                  columns={columns}\r\n                  dataSource={partsRenewal}\r\n                />\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Job reference\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4 className=\"d-flex align-items-center\">\r\n                  {\" \"}\r\n                  <ViewDetailsIcon /> View Details{\" \"}\r\n                  <span\r\n                    style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                    className=\"font-weight-300 ml-2\"\r\n                  >\r\n                    {\" \"}\r\n                    {/* <HistoryOutlined /> Last updated an hour ago{\" \"} */}\r\n                  </span>{\" \"}\r\n                </h4>\r\n                <Button\r\n                  className=\"bg-primary text-white\"\r\n                  onClick={() => {\r\n                    \r\n                    setJobRefModal(true)\r\n                    const data2 = {\r\n                      quote_job_ref: jobReference[0].quote_job_ref,\r\n                      po_ref:jobReference[0]?.po_ref,\r\n                      customer:jobReference[0]?.customer,\r\n                      sales:jobReference[0]?.sales\r\n                    }\r\n\r\n                    // setData({\r\n                    //   quote_job_ref: \"12321 \",\r\n                    //   po_ref:\"\",\r\n                    //   customer:\"\",\r\n                    //   sales:\"\"  \r\n                    // })\r\n                    handleRadioChnge(\"quote_job_ref\", {\r\n                      target: {\r\n                        value: data2.quote_job_ref\r\n                      }\r\n                    })\r\n                    handleRadioChnge(\"customer_po\", {\r\n                      target: {\r\n                        value: data2.po_ref\r\n                      }\r\n                    })\r\n                    handleRadioChnge(\"customer\", {\r\n                      target: {\r\n                        value: data2.customer\r\n                      }\r\n                    })\r\n                    handleRadioChnge(\"sales\", {\r\n                      target: {\r\n                        value: data2.sales\r\n                      }\r\n                    }) \r\n\r\n\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  <EditOutlined /> Edit\r\n                </Button>\r\n              </div>\r\n              <div className=\"grey-table mt-3\">\r\n                <Table\r\n                  className=\"border rounded\"\r\n                  columns={columns1}\r\n                  dataSource={jobReference}\r\n                />\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Receiving & Delivery\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4 className=\"d-flex align-items-center\">\r\n                  {\" \"}\r\n                  <ViewDetailsIcon /> View Details{\" \"}\r\n                  <span\r\n                    style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                    className=\"font-weight-300 ml-2\"\r\n                  >\r\n                    {\" \"}\r\n                    <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                  </span>{\" \"}\r\n                </h4>\r\n                <Button\r\n                  className=\"bg-primary text-white\"\r\n                  onClick={() => {\r\n                    setReceiveAndDeliver(true)\r\n                    const data2 = {\r\n                      dateReceived:  receiveAndDeliverData[0].dateReceived,\r\n                      receivedBy: receiveAndDeliverData[0].receivedBy,\r\n                      dateRequested:  receiveAndDeliverData[0].dateRequested,\r\n                      dateDelivery: receiveAndDeliverData[0].dateDelivery,\r\n                      deliveredBy:  receiveAndDeliverData[0].deliveredBy,\r\n                      \r\n                    }\r\n                    handleRadio1Chnge(\"dateReceived\", {\r\n                      target: {\r\n                        value: data2.dateReceived\r\n                      }\r\n                    })\r\n                    handleRadio1Chnge(\"receivedBy\", {\r\n                      target: {\r\n                        value: data2.receivedBy\r\n                      }\r\n                    })\r\n                    handleRadio1Chnge(\"dateRequested\", {\r\n                      target: {\r\n                        value: data2.dateRequested\r\n                      }\r\n                    })\r\n                    handleRadio1Chnge(\"dateDelivery\", {\r\n                      target: {\r\n                        value: data2.dateDelivery\r\n                      }\r\n                    })\r\n                    handleRadio1Chnge(\"deliveredBy\", {\r\n                      target: {\r\n                        value: data2.deliveredBy\r\n                      }\r\n                    })\r\n\r\n\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  <EditOutlined /> Edit\r\n                </Button>\r\n              </div>\r\n              <div className=\"grey-table mt-3\">\r\n                <Table\r\n                  className=\"border rounded\"\r\n                  columns={columns3}\r\n                  dataSource={receiveAndDeliverData}\r\n                />\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Machine Data\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4 className=\"d-flex align-items-center\">\r\n                  {\" \"}\r\n                  <ViewDetailsIcon /> View Details{\" \"}\r\n                  <span\r\n                    style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                    className=\"font-weight-300 ml-2\"\r\n                  >\r\n                    {\" \"}\r\n                    <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                  </span>{\" \"}\r\n                </h4>\r\n                <div>\r\n                  <Button onClick={() => {\r\n                    // setMachineUploadModal(true)\r\n                    setUploadModal(true);\r\n                    setUploadImageType('Machine-Data');\r\n                    }}>\r\n                    {\" \"}\r\n                    Upload Photos\r\n                  </Button>\r\n                  <Button\r\n                    className=\"bg-primary text-white ml-2\"\r\n                    onClick={() => {\r\n                      setMachineDataModal(true)\r\n                     \r\n                      handleRadio1Chnge(\"equipment\", {\r\n                        target: {\r\n                          value: machineData[0].data\r\n                        }\r\n                      })\r\n                      \r\n\r\n                      handleRadio1Chnge(\"tag_no\",{\r\n                        target: {\r\n                          value: machineData[1].data\r\n                        }\r\n                      })\r\n\r\n                      handleRadio1Chnge(\"manufacture\",{\r\n                        target: {\r\n                          value: machineData[2].data\r\n                        }\r\n                      })\r\n\r\n                      handleRadio1Chnge(\"serial_no\",{\r\n                        target: {\r\n                          value: machineData[3].data\r\n                        }\r\n                      })\r\n\r\n                      handleRadio1Chnge(\"model\",{\r\n                        target: {\r\n                          value: machineData[4].data\r\n                        }\r\n                      })\r\n                      handleRadio1Chnge(\"frame_size\",{\r\n                        target: {\r\n                          value: machineData[5].data\r\n                        }\r\n                      })\r\n\r\n                      handleRadio1Chnge(\"power\",{\r\n                        target: {\r\n                          value: machineData[6].data.split(\"-\")[0]\r\n                        }\r\n                      })\r\n                      setMachineDataUnit((machineDataUnit) => ({\r\n                        ...machineDataUnit,\r\n                        power: machineData[6]?.data?.split(\"-\")[1] || \"\", // Add null/undefined checks and a fallback value\r\n                      }));\r\n\r\n                      handleRadio1Chnge(\"voltage\",{\r\n                        target: {\r\n                          value:  machineData[7].data.split(\"-\")[0]\r\n                        }\r\n                      })\r\n                      setMachineDataUnit((machineDataUnit) => ({\r\n                        ...machineDataUnit,\r\n                        voltage: machineData[7]?.data?.split(\"-\")[1] || \"\", // Add null/undefined checks and a fallback value\r\n                      }));\r\n\r\n                      handleRadio1Chnge(\"current\",{\r\n                        target: {\r\n                          value: machineData[8].data.split(\"-\")[0]\r\n                        }\r\n                      })\r\n                      setMachineDataUnit((machineDataUnit) => ({\r\n                        ...machineDataUnit,\r\n                        current: machineData[8]?.data?.split(\"-\")[1] || \"\", // Add null/undefined checks and a fallback value\r\n                      }));\r\n\r\n                      handleRadio1Chnge(\"sec_voltage\",{\r\n                        target: {\r\n                          value: machineData[9].data.split(\"-\")[0]\r\n                        }\r\n                      })\r\n                      setMachineDataUnit((machineDataUnit) => ({\r\n                        ...machineDataUnit,\r\n                        sec_voltage: machineData[9]?.data?.split(\"-\")[1] || \"\", // Add null/undefined checks and a fallback value\r\n                      }));\r\n\r\n                      handleRadio1Chnge(\"sec_current\",{\r\n                        target: {\r\n                          value: machineData[10].data.split(\"-\")[0]\r\n                        }\r\n                      }) \r\n\r\n                      setMachineDataUnit((machineDataUnit) => ({\r\n                        ...machineDataUnit,\r\n                        sec_current: machineData[10]?.data?.split(\"-\")[1] || \"\", // Add null/undefined checks and a fallback value\r\n                      }))\r\n\r\n\r\n                      handleRadio1Chnge(\"phase\",{\r\n                        target: {\r\n                          value: machineData[11].data\r\n                        }\r\n                      })\r\n\r\n\r\n                      handleRadio1Chnge(\"frequency\",{\r\n                        target: {\r\n                          value: machineData[12].data.split(\"-\")[0]\r\n                        }\r\n                      })\r\n\r\n                      setMachineDataUnit((machineDataUnit) => ({\r\n                        ...machineDataUnit,\r\n                        frequency: machineData[12]?.data?.split(\"-\")[1] || \"\", // Add null/undefined checks and a fallback value\r\n                      }))\r\n                      \r\n                      handleRadio1Chnge(\"pole\",{\r\n                        target: {\r\n                          value: machineData[13].data\r\n                        }\r\n                      })\r\n\r\n                      handleRadio1Chnge(\"speed\",{\r\n                        target: {\r\n                          value: machineData[14].data?.split(\"-\")[0]\r\n                        }\r\n                      })\r\n\r\n                      setMachineDataUnit((machineDataUnit) => ({\r\n                        ...machineDataUnit,\r\n                        speed: machineData[14]?.data?.split(\"-\")[1] || \"\", // Add null/undefined checks and a fallback value \r\n                      }))\r\n\r\n                      handleRadio1Chnge(\"power_factor\",{\r\n                        target: {\r\n                          value: machineData[15].data\r\n                        }\r\n                      })\r\n\r\n                      handleRadio1Chnge(\"insulation_class\",{\r\n                        target: {\r\n                          value: machineData[16].data\r\n                        }\r\n                      })\r\n\r\n                      handleRadio1Chnge(\"ip\",{\r\n                        target: {\r\n                          value: machineData[17].data\r\n                        }\r\n                      })\r\n\r\n                     handleRadio1Chnge(\"ex_proof_type\",{\r\n                        target: {\r\n                          value: machineData[18].data\r\n                        }\r\n                     })\r\n\r\n                     handleRadio1Chnge(\"ex_proof_cert\",{\r\n                        target: {\r\n                          value: machineData[19].data\r\n                        }\r\n                     })\r\n\r\n                      handleRadio1Chnge(\"de_bearing\",{\r\n                        target: {\r\n                          value: machineData[20].data\r\n                        }\r\n                      })\r\n\r\n                      handleRadio1Chnge(\"nde_bearing\",{\r\n                        target: {\r\n                          value: machineData[21].data\r\n                        }\r\n                      })\r\n\r\n\r\n                      handleRadio1Chnge(\"color\",{\r\n                        target: {\r\n                          value: machineData[22].data\r\n                        }\r\n                      })\r\n\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    <EditOutlined /> Edit\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\"grey-table mt-3\">\r\n                <Table\r\n                  className=\"border rounded\"\r\n                  pagination={{\r\n                    pageSize: 25,\r\n                  }}\r\n                  columns={columns4}\r\n                  dataSource={machineData}\r\n                />\r\n                <div className=\"mt-5\">\r\n                  <h5>Remarks</h5>\r\n                  <TextArea\r\n                    value={otherMachineData?.remarks}\r\n                    onChange={(e) => {\r\n                      setOtherMachineData({\r\n                        ...otherMachineData,\r\n                        remarks: e.target.value,\r\n                      });\r\n                    }}\r\n                  rows={5} cols={16} placeholder=\"Type Here...\" />\r\n                </div>\r\n                <div className=\"mt-5 d-flex justify-content-between\">\r\n                  <div className=\"d-flex justify-content-between w-50 align-items-center pr-4\">\r\n                    <h5 className=\"w-50\">Checked By</h5>\r\n                    <Input\r\n                      value={otherMachineData?.checkedBy}\r\n                      onChange={(e) => {\r\n                        setOtherMachineData({\r\n                          ...otherMachineData,\r\n                          checkedBy: e.target.value,\r\n                        });\r\n                      }}\r\n                    className=\"\" placeholder=\"Add Operator Name\" />\r\n                  </div>\r\n                  <div className=\"d-flex justify-content-between w-50 align-items-center pl-4\">\r\n                    <h5 className=\"mr-3\">Date</h5>\r\n                    <DatePicker\r\n                      value={otherMachineData?.date}\r\n                      format={'DD-MM-YYYY'}\r\n                      onChange={(e) => {\r\n                        setOtherMachineData({\r\n                          ...otherMachineData,\r\n                          date: e,\r\n                        });\r\n                      }}\r\n                    className=\"w-50\" />\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-5\">\r\n                  <h5>Uploaded Photos</h5>\r\n                  <div className=\"dashed-border p-2\">\r\n                    {false && selectedImages.map((image, index) => (\r\n                      <img\r\n                        key={index}\r\n                        src={image}\r\n                        alt={`Image ${index}`}\r\n                        style={{\r\n                          width: \"200px\",\r\n                          height: \"200px\",\r\n                          marginRight: \"10px\",\r\n                        }}\r\n                      />\r\n                    ))}\r\n                    {selectedImages.map((image, index) => (\r\n                      <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                          <div className='w-75 d-flex flex-column align-items-start'>\r\n                              <img\r\n                                  src={image.url}\r\n                                  alt={`Image ${index}`}\r\n                                  style={{\r\n                                  height: \"200px\",\r\n                                  marginRight: \"10px\",\r\n                                }}\r\n                              />\r\n                                  <div className='diflex justify-content-start'>\r\n                                      <Button type='primary' className='mt-2' onClick={() => {\r\n                                          setEditImageId(image.id);\r\n                                          // setMachineUploadModal(true);\r\n                                          setUploadModal(true);\r\n                                          setUploadImageType('Machine-Data');\r\n                                          setSelectedImageTemp(image.url_unmodified);\r\n                                          setImageMarkings(image.image_markings);\r\n                                          if(image.url_unmodified.includes('http')) {\r\n                                              convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                          } else {\r\n                                            setTimeout(() => {\r\n                                              UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                            }, 500);\r\n                                          }\r\n                                        }}>\r\n                                            {\" \"}\r\n                                            Edit Photo\r\n                                      </Button>\r\n                      \r\n                                      <Button className='mt-2 ml-2' onClick={() => {\r\n                                          delUplFile(index)\r\n                                      }}>\r\n                                          {\" \"}\r\n                                          Delete Photo\r\n                                      </Button>\r\n                                   </div>\r\n                          </div>\r\n                          <div>\r\n                              <h4>Markings</h4>\r\n                              {image.image_markings.length > 0 ?\r\n                                  image.image_markings.map((marking, index) => (\r\n                                  marking.text && <div key={index}>\r\n                                      <b>{index+1}. </b>{marking.text}\r\n                                  </div>))\r\n                                  : <div><i>No Markings Added</i></div>\r\n                              }\r\n                          </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Initial Conditions & Physical Inspection\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h4 className=\"d-flex align-items-center\">\r\n                  {\" \"}\r\n                  <ViewDetailsIcon /> View Details{\" \"}\r\n                  <span\r\n                    style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                    className=\"font-weight-300 ml-2\"\r\n                  >\r\n                    {\" \"}\r\n                    <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                  </span>{\" \"}\r\n                </h4>\r\n                <div>\r\n                  <Button onClick={() => {\r\n                      // setInitialConditionUploaModal(true);\r\n                      setUploadModal(true);\r\n                      setUploadImageType('Initial-Condition');\r\n                    }}>\r\n                    {\" \"}\r\n                    Upload Photos\r\n                  </Button>\r\n                  <Button\r\n                    className=\"bg-primary text-white ml-2\"\r\n                    onClick={() =>{\r\n                      setInitialeditModal(true)\r\n                        setInitialModalFormdata((prev)=>{\r\n                          return {\r\n                            ...prev,\r\n                            completed_unit: initialConditionsAndPhysicalInspection.completedUnit.value,\r\n                            stator: initialConditionsAndPhysicalInspection.stator.value,\r\n                            rotor: initialConditionsAndPhysicalInspection.rotor.value,\r\n                            coupling: initialConditionsAndPhysicalInspection.coupling.value,\r\n                            pulley: initialConditionsAndPhysicalInspection.pulley.value,\r\n                            impeller: initialConditionsAndPhysicalInspection.impeller.value, \r\n                            t_box: initialConditionsAndPhysicalInspection.t_box.value,\r\n                            t_box_cover: initialConditionsAndPhysicalInspection.t_box_cover.value,\r\n                            power_cable: initialConditionsAndPhysicalInspection.power_cable.value,\r\n                            terminal_board: initialConditionsAndPhysicalInspection.terminal_board.value,\r\n                            connector: initialConditionsAndPhysicalInspection.connector.value,\r\n                            cooling_fan_cover: initialConditionsAndPhysicalInspection.cooling_fan_cover.value,\r\n                            cooling_fan: initialConditionsAndPhysicalInspection.cooling_fan.value,\r\n                            blower: initialConditionsAndPhysicalInspection.blower.value,\r\n                            pump: initialConditionsAndPhysicalInspection.pump.value,  \r\n                            brake: initialConditionsAndPhysicalInspection.brake.value,  \r\n                            gear_box: initialConditionsAndPhysicalInspection.gear_box.value,  \r\n                            de_seal: initialConditionsAndPhysicalInspection.de_seal.value,  \r\n                            nde_seal: initialConditionsAndPhysicalInspection.nde_seal.value,  \r\n                            nde_washer: initialConditionsAndPhysicalInspection.nde_washer.value,  \r\n                            de_washer: initialConditionsAndPhysicalInspection.de_washer.value,  \r\n                            nde_circlip: initialConditionsAndPhysicalInspection.nde_circlip.value,  \r\n                            de_circlip: initialConditionsAndPhysicalInspection.de_circlip.value,  \r\n                            others: initialConditionsAndPhysicalInspection.others.value,\r\n                          }\r\n                        })\r\n\r\n                        setInitialModalForm((prev)=>{\r\n                          return {\r\n                            ...prev,\r\n                            completed_unit: initialConditionsAndPhysicalInspection.completedUnit.check,\r\n                            stator: initialConditionsAndPhysicalInspection.stator.check,\r\n                            rotor: initialConditionsAndPhysicalInspection.rotor.check,\r\n                            coupling: initialConditionsAndPhysicalInspection.coupling.check,\r\n                            pulley: initialConditionsAndPhysicalInspection.pulley.check,\r\n                            impeller: initialConditionsAndPhysicalInspection.impeller.check,\r\n                            t_box: initialConditionsAndPhysicalInspection.t_box.check,\r\n                            t_box_cover: initialConditionsAndPhysicalInspection.t_box_cover.check,\r\n                            power_cable: initialConditionsAndPhysicalInspection.power_cable.check,\r\n                            terminal_board: initialConditionsAndPhysicalInspection.terminal_board.check,\r\n                            connector: initialConditionsAndPhysicalInspection.connector.check,\r\n                            cooling_fan_cover: initialConditionsAndPhysicalInspection.cooling_fan_cover.check,\r\n                            cooling_fan: initialConditionsAndPhysicalInspection.cooling_fan.check,\r\n                            blower: initialConditionsAndPhysicalInspection.blower.check,\r\n                            pump: initialConditionsAndPhysicalInspection.pump.check,\r\n                            brake: initialConditionsAndPhysicalInspection.brake.check,\r\n                            gear_box: initialConditionsAndPhysicalInspection.gear_box.check,\r\n                            de_seal: initialConditionsAndPhysicalInspection.de_seal.check,\r\n                            nde_seal: initialConditionsAndPhysicalInspection.nde_seal.check,\r\n                            nde_washer: initialConditionsAndPhysicalInspection.nde_washer.check,\r\n                            de_washer: initialConditionsAndPhysicalInspection.de_washer.check,\r\n                            nde_circlip: initialConditionsAndPhysicalInspection.nde_circlip.check,\r\n                            de_circlip: initialConditionsAndPhysicalInspection.de_circlip.check,\r\n                            others: initialConditionsAndPhysicalInspection.others.check,   \r\n                          }\r\n                        })\r\n\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    <EditOutlined /> Edit\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\" mt-4 mb-5\">\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                  style={{ width: \"30%\" }}\r\n                  disabled\r\n                  className={returnClass(initialConditionsAndPhysicalInspection?.completedUnit?.check)}\r\n                  checked={initialConditionsAndPhysicalInspection?.completedUnit?.check}\r\n                >\r\n                  Completed Unit\r\n                </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.completedUnit?.value}\r\n                    // value={data?.completed_unit}\r\n                    // onChange={(e) => handleRadio1Chnge(\"completed_unit\", e)}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.stator?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.stator?.check}\r\n                  >\r\n                    Stator\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.stator?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.rotor?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.rotor?.check}  \r\n                  >\r\n                    Rotor\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.rotor?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.coupling?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.coupling?.check} \r\n                  >\r\n                    Coupling\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.coupling?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.pulley?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.pulley?.check} \r\n                  >\r\n                    Pulley\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.pulley?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.impeller?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.impeller?.check} \r\n                  >\r\n                    Impeller\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.impeller?.value} \r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.t_box?.check)} \r\n                    checked={initialConditionsAndPhysicalInspection?.t_box?.check} \r\n                  >\r\n                    T-Box\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.t_box?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.t_box_cover?.check)} \r\n                    checked={initialConditionsAndPhysicalInspection?.t_box_cover?.check} \r\n                  >\r\n                    T-Box Cover\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.t_box_cover?.value} \r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.power_cable?.check)}   \r\n                    checked={initialConditionsAndPhysicalInspection?.power_cable?.check}\r\n                  >\r\n                    Power Cable\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.power_cable?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.terminal_board?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.terminal_board?.check}  \r\n                  >\r\n                    Terminal Board\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.terminal_board?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.connector?.check)} \r\n                    checked={initialConditionsAndPhysicalInspection?.connector?.check} \r\n                  >\r\n                    Connector\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.connector?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.cooling_fan_cover?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.cooling_fan_cover?.check} \r\n                  >\r\n                    Cooling Fan Cover\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.cooling_fan_cover?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.cooling_fan?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.cooling_fan?.check} \r\n                  >\r\n                    Cooling Fan\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.cooling_fan?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.blower?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.blower?.check} \r\n                  >\r\n                    Blower\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.blower?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.pump?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.pump?.check} \r\n                  >\r\n                    Pump\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.pump?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.brake?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.brake?.check} \r\n                  >\r\n                    Brake\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.brake?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.gear_box?.check)} \r\n                    checked={initialConditionsAndPhysicalInspection?.gear_box?.check} \r\n                  >\r\n                    Gear Box\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.gear_box?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.de_seal?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.de_seal?.check}\r\n                  >\r\n                    DE Seal\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.de_seal?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.nde_seal?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.nde_seal?.check} \r\n                  >\r\n                    NDE Seal\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.nde_seal?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.nde_washer?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.nde_washer?.check} \r\n                  >\r\n                    NDE Washer\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.nde_washer?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.de_washer?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.de_washer?.check}   \r\n\r\n                  >\r\n                    DE Washer\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.de_washer?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.de_circlip?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.de_circlip?.check}\r\n                  >\r\n                    DE Circlip\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.de_circlip?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.nde_circlip?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.nde_circlip?.check}\r\n                  >\r\n                    NDE Circlip\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.nde_circlip?.value}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-4 d-flex justify-content-between\">\r\n                  <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    className={returnClass(initialConditionsAndPhysicalInspection?.others?.check)}\r\n                    checked={initialConditionsAndPhysicalInspection?.others?.check}\r\n                  >\r\n                    Others\r\n                  </Radio>\r\n                  <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={initialConditionsAndPhysicalInspection?.others?.value}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"mt-5\">\r\n                  <h5>Remarks</h5>\r\n                  <TextArea\r\n                    value={otherInitialData?.remarks}\r\n                    onChange={(e) => {\r\n                      setOtherInitialData({\r\n                        ...otherInitialData,\r\n                        remarks: e.target.value,\r\n                      });\r\n                    }}\r\n                  rows={5} cols={16} placeholder=\"Type Here...\" />\r\n                </div>\r\n                <div className=\"mt-5 d-flex justify-content-between\">\r\n                  <div className=\"d-flex justify-content-between w-50 align-items-center pr-4\">\r\n                    <h5 className=\"w-50\">Checked By</h5>\r\n                    <Input\r\n                      value={otherInitialData?.checkedBy}\r\n                      onChange={(e) => {\r\n                        setOtherInitialData({\r\n                          ...otherInitialData,\r\n                          checkedBy: e.target.value,\r\n                        });\r\n                      }}\r\n                    className=\"\" placeholder=\"Add Operator Name\" />\r\n                  </div>\r\n                  <div className=\"d-flex justify-content-between w-50 align-items-center pl-4\">\r\n                    <h5 className=\"mr-3\">Date</h5>\r\n                    <DatePicker\r\n                      value={otherInitialData?.date}\r\n                      format={'DD-MM-YYYY'}\r\n                      onChange={(e) => {\r\n                        setOtherInitialData({\r\n                          ...otherInitialData,\r\n                          date: e,\r\n                        });\r\n                      }}\r\n                    className=\"w-50\" />\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-5\">\r\n                  <h5>Uploaded Photos</h5>\r\n                  <div className=\"dashed-border p-2\">\r\n                    {false && selectedImages1.map((image, index) => (\r\n                      <img\r\n                        key={index}\r\n                        src={image}\r\n                        alt={`Image ${index}`}\r\n                        style={{\r\n                          width: \"200px\",\r\n                          height: \"200px\",\r\n                          marginRight: \"10px\",\r\n                        }}\r\n                      />\r\n                    ))}\r\n                    \r\n                    {selectedImages1.map((image, index) => (\r\n                      <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                          <div className='w-75 d-flex flex-column align-items-start'>\r\n                              <img\r\n                                  src={image.url}\r\n                                  alt={`Image ${index}`}\r\n                                  style={{\r\n                                  height: \"200px\",\r\n                                  marginRight: \"10px\",\r\n                                }}\r\n                              />\r\n                                  <div className='diflex justify-content-start'>\r\n                                      <Button type='primary' className='mt-2' onClick={() => {\r\n                                          setEditImageId(image.id);\r\n                                          // setInitialConditionUploaModal(true);\r\n                                          setUploadModal(true);\r\n                                          setUploadImageType('Initial-Condition');\r\n                                          setSelectedImageTemp(image.url_unmodified);\r\n                                          setImageMarkings(image.image_markings);\r\n                                          if(image.url_unmodified.includes('http')) {\r\n                                              convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                          } else {\r\n                                            setTimeout(() => {\r\n                                              UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                            }, 500);\r\n                                          }\r\n                                        }}>\r\n                                            {\" \"}\r\n                                            Edit Photo\r\n                                      </Button>\r\n                      \r\n                                      <Button className='mt-2 ml-2' onClick={() => {\r\n                                          delUplFile1(index)\r\n                                      }}>\r\n                                          {\" \"}\r\n                                          Delete Photo\r\n                                      </Button>\r\n                                   </div>\r\n                          </div>\r\n                          <div>\r\n                              <h4>Markings</h4>\r\n                              {image.image_markings.length > 0 ?\r\n                                  image.image_markings.map((marking, index) => (\r\n                                    marking.text && <div key={index}>\r\n                                      <b>{index+1}. </b>{marking.text}\r\n                                  </div>\r\n                                  ))\r\n                                  : <div><i>No Markings Added</i></div>\r\n                              }\r\n                          </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Stator winding electrical tests\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <StatorWindingElectricalTests \r\n                setStatorWindingData={setStatorWindingData} \r\n                statorWindingData={statorWindingData}\r\n\r\n                setUploadModal={setUploadModal}\r\n                setUploadImageType={setUploadImageType}\r\n                setSelectedImageTemp={setSelectedImageTemp}\r\n                selectedImageTemp={selectedImageTemp}\r\n                setImageMarkings={setImageMarkings}\r\n                imageMarkings={imageMarkings}\r\n                UploadImageMarkingKonva={UploadImageMarkingKonva}\r\n                setEditImageId={setEditImageId}\r\n                delSubUploadedPhoto={delSubUploadedPhoto}\r\n              />\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Auxiliaries Checks\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <AuxiliariesChecks \r\n                auxiliariesChecksData={auxiliariesChecksData} \r\n                setAuxiliariesChecksData={setAuxiliariesChecksData}\r\n\r\n                setUploadModal={setUploadModal}\r\n                setUploadImageType={setUploadImageType}\r\n                setSelectedImageTemp={setSelectedImageTemp}\r\n                selectedImageTemp={selectedImageTemp}\r\n                setImageMarkings={setImageMarkings}\r\n                imageMarkings={imageMarkings}\r\n                UploadImageMarkingKonva={UploadImageMarkingKonva}\r\n                setEditImageId={setEditImageId}\r\n                delSubUploadedPhoto={delSubUploadedPhoto}\r\n              />\r\n            </Panel>\r\n          </Collapse>\r\n\r\n          <FreeLoadTest \r\n            initialcondUploaModal={initialcondUploaModal} \r\n            setInitialcondUploaModal={setInitialcondUploaModal}\r\n            setInitialeditModal={setFreeLoadTestModal} \r\n            freeLoadData={freeLoadData}\r\n            initialModalFormdata={initialModalFormdata}\r\n            setInitialModalFormdata={setInitialModalFormdata}\r\n            initialModalForm={initialModalForm}\r\n            setInitialModalForm={setInitialModalForm}                  \r\n            setFreeLoadData={setFreeLoadData}\r\n            returnClass={returnClass}\r\n            selectedImages2={selectedImages2}\r\n\r\n            setSelectedImageTemp={setSelectedImageTemp}\r\n            setImageMarkings={setImageMarkings}\r\n            UploadImageMarkingKonva={UploadImageMarkingKonva}\r\n            setEditImageId={setEditImageId}\r\n            delUplFile2={delUplFile2}\r\n            setUploadModal={setUploadModal}\r\n            setUploadImageType={setUploadImageType}\r\n          />\r\n\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Vibration Tests\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <VibrationTests \r\n                initialcondVibrationUploaModal={initialcondVibrationUploaModal} \r\n                setInitialcondVibrationUploaModal={setInitialcondVibrationUploaModal}\r\n\r\n                initialModalFormdata={initialModalFormdata}\r\n                setInitialModalFormdata={setInitialModalFormdata}\r\n                initialModalForm={initialModalForm}\r\n                setInitialModalForm={setInitialModalForm}\r\n                returnClass={returnClass}\r\n\r\n                selectedImages3={selectedImages3}\r\n                vibrationData={vibrationData}\r\n                setInitialeditModal={setVibrationTestModal} \r\n                setVibrationData={setVibrationData}\r\n\r\n                setSelectedImageTemp={setSelectedImageTemp}\r\n                selectedImageTemp={selectedImageTemp}\r\n                setImageMarkings={setImageMarkings}\r\n                imageMarkings={imageMarkings}\r\n                UploadImageMarkingKonva={UploadImageMarkingKonva}\r\n                setEditImageId={setEditImageId}\r\n                delUplFile3={delUplFile3}\r\n                setUploadModal={setUploadModal}\r\n                setUploadImageType={setUploadImageType}\r\n              />\r\n            </Panel>\r\n          </Collapse>\r\n\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Mechanical Inspections\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <MechanicalInspection \r\n                mechanicalInspectionData={mechanicalInspectionData} \r\n                setMechanicalInspectionData={setMechanicalInspectionData} \r\n\r\n                setUploadModal={setUploadModal}\r\n                setUploadImageType={setUploadImageType}\r\n                setSelectedImageTemp={setSelectedImageTemp}\r\n                selectedImageTemp={selectedImageTemp}\r\n                setImageMarkings={setImageMarkings}\r\n                imageMarkings={imageMarkings}\r\n                UploadImageMarkingKonva={UploadImageMarkingKonva}\r\n                setEditImageId={setEditImageId}\r\n                delSubUploadedPhoto={delSubUploadedPhoto}\r\n              />\r\n            </Panel>\r\n          </Collapse>\r\n\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Rotor shaft runout\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <RotatorShaftRunout \r\n                rotatorShaftData={rotatorShaftData} \r\n                setRotatorShaftData={setRotatorShaftData} \r\n\r\n                setUploadModal={setUploadModal}\r\n                setUploadImageType={setUploadImageType}\r\n                setSelectedImageTemp={setSelectedImageTemp}\r\n                selectedImageTemp={selectedImageTemp}\r\n                setImageMarkings={setImageMarkings}\r\n                imageMarkings={imageMarkings}\r\n                UploadImageMarkingKonva={UploadImageMarkingKonva}\r\n                setEditImageId={setEditImageId}\r\n                delSubUploadedPhoto={delSubUploadedPhoto}\r\n              />\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Free volume checks (for explosive proof motor)\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <FreeVolumeCheck \r\n                freeVolumeData={freeVolumeData} \r\n                setFreeVolumeData={setFreeVolumeData} \r\n\r\n                setUploadModal={setUploadModal}\r\n                setUploadImageType={setUploadImageType}\r\n                setSelectedImageTemp={setSelectedImageTemp}\r\n                selectedImageTemp={selectedImageTemp}\r\n                setImageMarkings={setImageMarkings}\r\n                imageMarkings={imageMarkings}\r\n                UploadImageMarkingKonva={UploadImageMarkingKonva}\r\n                setEditImageId={setEditImageId}\r\n                delSubUploadedPhoto={delSubUploadedPhoto}\r\n              />\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Flame path Dimension Checks\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <FlamePathDimension \r\n                flamePathData={flamePathData} \r\n                setFlamePathData={setFlamePathData}\r\n\r\n                setUploadModal={setUploadModal}\r\n                setUploadImageType={setUploadImageType}\r\n                setSelectedImageTemp={setSelectedImageTemp}\r\n                selectedImageTemp={selectedImageTemp}\r\n                setImageMarkings={setImageMarkings}\r\n                imageMarkings={imageMarkings}\r\n                UploadImageMarkingKonva={UploadImageMarkingKonva}\r\n                setEditImageId={setEditImageId}\r\n                delSubUploadedPhoto={delSubUploadedPhoto}\r\n              />\r\n            </Panel>\r\n          </Collapse>\r\n          <Collapse className=\"mb-3\">\r\n            <Panel\r\n              header={\r\n                <>\r\n                  <img src={ReportSerchIcon} alt=\"...\" />\r\n                  Miscellaneous Report Upload\r\n                </>\r\n              }\r\n              key=\"3\"\r\n            >\r\n              <MiscelleneousReport miscelleneousReportData={miscelleneousReportData} setMiscelleneousReportData={setMiscelleneousReportData} />\r\n            </Panel>\r\n          </Collapse>\r\n        </Space>\r\n      </div>\r\n\r\n      <div\r\n        style={{ gap: \"10px\" }}\r\n        className=\"mt-3 d-flex justify-content-end\"\r\n      >\r\n          <Button\r\n              className=\"px-4 font-weight-semibold\"\r\n              htmlType=\"button\"\r\n              onClick={() => {history.goBack()}}\r\n          >\r\n              Back\r\n          </Button>\r\n\r\n          <Button\r\n              className=\"px-4 font-weight-semibold text-white bg-primary\"\r\n              onClick={() => {onFinishHandler()}}\r\n          >\r\n              Save\r\n          </Button>\r\n      </div>\r\n      <Modal title=\"Remarks\" visible={remarksModalForGeneralProcess} onOk={\r\n        () => {\r\n          if(funcState2==='general_process'){\r\n            setGeneralProcess({\r\n              ...generalProcess,\r\n              [funcState]: {\r\n                ...generalProcess[funcState],\r\n                remarks: remarks\r\n              }\r\n            })\r\n          }else if(funcState2=='rewinding'){\r\n            setRewinding({\r\n              ...rewinding,\r\n              [funcState]: {\r\n                ...rewinding[funcState],\r\n                remarks: remarks\r\n              }\r\n            })\r\n          }else if(funcState2===\"assembly_and_final_test\"){\r\n            setAssemblyAndFinalTest({\r\n              ...assemblyAndFinalTest,\r\n              [funcState]: {\r\n                ...assemblyAndFinalTest[funcState],\r\n                remarks: remarks\r\n              }\r\n            })\r\n          }else if(funcState2 ===\"deliver_to_site\"){\r\n            setDeliverToSite({\r\n              ...deliverToSite,\r\n              [funcState]: {\r\n                ...deliverToSite[funcState],\r\n                remarks: remarks\r\n              }\r\n            })\r\n          }\r\n          setRemarksModalForGeneralProcess(false)\r\n          setFuncState(\"\");\r\n          setFuncState2(\"\");\r\n        }\r\n      } onCancel={() => {\r\n        setFuncState(\"\");\r\n        setFuncState2(\"\");\r\n        setRemarksModalForGeneralProcess(false)\r\n      }}>\r\n        <Form >\r\n          <Form.Item label=\"Remarks\" \r\n          // name={\"remarks\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input your Remarks!\",\r\n              }\r\n            ]}\r\n          >\r\n            <Input.TextArea\r\n              value={remarks}\r\n              onChange={(e) => {\r\n                setRemarks(e.target.value)\r\n              }}\r\n              rows={4} />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n      <Modal title=\"Parts Renewal List\" visible={partsRenewalModal} \r\n      onOk={() => {\r\n        form.submit();\r\n\r\n        // setPartsRenewalModal(false)\r\n      }}\r\n      onCancel={() => {\r\n        setPartsRenewalModal(false)\r\n      }}>\r\n        <Form\r\n          name=\"basic\"\r\n          layout=\"vertical\"       \r\n          form={form}\r\n          onFinish={onFinishParts}\r\n          // onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item label=\"Item\" name={\"item\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input your Item!\",\r\n              }\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item label=\"Spec\" name={\"spec\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input your Spec!\",\r\n              }\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Quantity\" name={\"qty\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input your Quantity!\",\r\n              }\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item label=\"Remarks\" name={\"remarks\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input your Remarks!\",\r\n              }\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item> \r\n\r\n        </Form>\r\n\r\n        </Modal>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNewLifeCycleEvent;\r\n","/home/faizan/jd-works/customer-web-app/src/components/util-components/Icon/index.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/technician-management/index.js",["1339","1340","1341","1342","1343","1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364"],"import { Button, Menu, Modal, Select, Rate, Switch, Divider, message, Dropdown, Table, Checkbox, Popconfirm } from \"antd\";\r\nimport { Space, Tag } from 'antd';\r\nimport { BellOutlined, EditOutlined, EyeOutlined, MoreOutlined, SearchOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport Icon from '@ant-design/icons';\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useState } from \"react\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { AudioOutlined } from '@ant-design/icons';\r\nimport { Input } from 'antd';\r\nimport Filter from \"components/shared-components/Filter\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { CsvIcon, FilterIcon } from \"assets/svg/icon\";\r\nimport { axiosInstance } from \"App\";\r\nimport CalendarIcon from \"assets/calendar.png\"\r\nimport moment from \"moment\";\r\nimport SubMenu from \"antd/lib/menu/SubMenu\";\r\nimport { CountryContext } from \"CountryContext\";\r\nimport { TechnicianMangementCsv } from \"constants/Headers\";\r\nimport Csv from \"utils/Csv\";\r\nimport ConfirmModal from \"components/shared-components/ConfirmModal\";\r\n\r\n\r\nfunction TechnicianManagement() {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchText, setSearchText] = useState('');\r\n  const [selectedFilter, setSelectedFilter] = useState('all');\r\n  const [modalVisible2, setModalVisible2] = useState(false);\r\n  const [deleteId, setDeleteId] = useState(null);\r\n  const { countryList } = useContext(CountryContext);\r\n  const [data, setData] = useState([\r\n    \r\n    \r\n  ])\r\n\r\n  const handleYesConfirmation = () => {\r\n    deleteRow(deleteId);\r\n    setModalVisible2(false);\r\n  }\r\n  const [csvData, setCSVData] = useState([]);\r\n  const getMenu = (record) => (\r\n    <Menu>\r\n      <Menu.Item key=\"edit\" onClick={() => {\r\n        history.push(`/app/technician-management/edit/${record}`)\r\n      }}>\r\n        <EditOutlined /> Edit\r\n      </Menu.Item>\r\n      {/* <Menu.Item key=\"delete\" onClick={() => handleDelete(record.key)}>\r\n        <DeleteOutlined /> Delete\r\n      </Menu.Item> */}\r\n        {/* <Popconfirm\r\n        title={\"Are you sure you want to delete this item?\"}\r\n        description={\"This action cannot be undone.\"}\r\n        okText=\"Yes\"\r\n        cancelText=\"No\"\r\n        onConfirm={() => deleteRow(record)}\r\n      > */}\r\n        <Menu.Item key=\"delete\"\r\n        onClick={()=>{\r\n          setModalVisible2(true)\r\n          setDeleteId(record)\r\n        }}\r\n        >\r\n          <span style={{ display: \"flex\", gap: \"8px\", alignItems: \"center\" }}>\r\n            <DeleteOutlined /> Delete\r\n          </span>\r\n        </Menu.Item>\r\n      {/* </Popconfirm> */}\r\n    </Menu>\r\n  );\r\n\r\n  \r\n  const deleteRow = async (id) => {\r\n    console.log(id);\r\n    try {\r\n      const response = await axiosInstance.delete(\r\n        `api/web/technician/${id}/delete`\r\n      );\r\n      if (response.status === 200) {\r\n        message.success(\"Technician deleted successfully\");\r\n        setData((prevData) => prevData.filter((item) => item.id !== id));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting row:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSwitchChange = (checked, key) => {\r\n    // Add logic for handling the switch change\r\n    console.log(`Notification with key ${key} is now ${checked ? 'Active' : 'Inactive'}`);\r\n  };\r\n\r\n  const showModal = () => {\r\n    setIsModalOpen(true);\r\n    // handleOk()\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setTimeout(() => {\r\n      setIsModalOpen(false);\r\n    }, 10000);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n  const columns = [\r\n    {\r\n        title:\"Id\",\r\n        dataIndex:\"id\",\r\n    },\r\n    {\r\n      dataIndex:\"profile_pic\",\r\n      render: (text, record) => (\r\n        <>\r\n          <img src={record.profile_pic} style={{width: '20px', height: '20px', borderRadius: '50%'}} />\r\n        </>\r\n      )\r\n    },\r\n    {\r\n        title:\"Technician Name\",\r\n        dataIndex:\"name\",\r\n    },\r\n    {\r\n        title:\"Gender\",\r\n        dataIndex:\"gender\",\r\n        render: (text, record) => (\r\n          <>\r\n            {text==1?\"Male\":\"Female\"}\r\n          </>\r\n        ) \r\n    },\r\n    {\r\n      title:\"Nationality\",\r\n      dataIndex:\"nationality\",\r\n      render:(text, record) => (\r\n        text? countryList.find((country) => country.id === text)?.name : \"-\"\r\n      )\r\n    },\r\n    // {\r\n    //     title:\"Nationality\",\r\n    //     dataIndex:\"nationality\",\r\n    // },\r\n    {\r\n        title:\"Mobile Number\",\r\n        dataIndex:\"phone_no\",\r\n        render: (text, record) => (\r\n          <>\r\n            {record.phone_code+\" \"+text}\r\n          </>\r\n        )\r\n    },\r\n    {\r\n        title:\"Email ID\",\r\n        dataIndex:\"email\",\r\n    },\r\n    {\r\n      title:\"Job Assigned\",\r\n      dataIndex:\"order_counts\"\r\n    },\r\n    {\r\n      title:\"Active Jobs\",\r\n      dataIndex:\"active_order_counts\"\r\n    },\r\n    {\r\n        title:\"Status\",\r\n        dataIndex:\"status\",\r\n        render: (text, record) => (\r\n          <>\r\n            {text==1?<Tag color=\"green\">Active</Tag>:<Tag color=\"red\">Inactive</Tag>}\r\n          </>\r\n        )\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n          <Space size=\"middle\">\r\n            <Dropdown overlay={getMenu(record.id)} placement=\"bottomRight\" trigger={['hover']}>\r\n              <MoreOutlined />\r\n            </Dropdown>\r\n          </Space>\r\n        ),\r\n      },\r\n]\r\n\r\n\r\n\r\n  const handleView = (key) => {\r\n    // Add logic for editing a notification\r\n    history.push(`order-management/order-details/${key}`, { myCustomState: 'Hello from MyComponent' });\r\n  };\r\n\r\n  const handleDelete = (key) => {\r\n    // Add logic for deleting a notification\r\n    console.log('Delete notification with key:', key);\r\n  };\r\n  var timeout = \"\"\r\n  const onSearch = (value) => {\r\n    setSearchText(value.target.value)\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => {\r\n      getOrderList(value.target.value, selectedFilter)\r\n    }, 500)\r\n  }\r\n  const FilterMenu = (\r\n    <Menu mode=\"horizontal\" onChange={(e) => {\r\n      console.log(e)\r\n    }}>\r\n      <SubMenu key=\"item1\" title=\"Status\">\r\n        <Menu.Item key=\"subitem1\"\r\n\r\n        >\r\n          <Checkbox onChange={() => {\r\n            getOrderList(searchText);\r\n            setSelectedFilter('all')\r\n          }} checked={\r\n            selectedFilter === 'all'\r\n          }>All</Checkbox>\r\n        </Menu.Item>{\" \"}\r\n        <Menu.Item key=\"subitem2\"\r\n\r\n        >\r\n          <Checkbox\r\n            onChange={() => {\r\n              getOrderList(searchText, 1);\r\n              setSelectedFilter(1)\r\n            }}\r\n            checked={selectedFilter == 1}\r\n\r\n          >Active</Checkbox>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"subitem3\"\r\n\r\n        >\r\n          <Checkbox onChange={() => {\r\n            getOrderList(searchText, 0);\r\n            setSelectedFilter(0)\r\n          }}\r\n\r\n            checked={selectedFilter === 0}>Inactive</Checkbox>\r\n        </Menu.Item>\r\n      </SubMenu>\r\n    </Menu>\r\n  );\r\n\r\n  const getOrderList = async (search = \"\", filter = 'all') => {\r\n    // let url = `?search=${search}`\r\n    let url = `?customer_id=${localStorage.getItem(\"parent_id\")!=\"null\"? localStorage.getItem(\"parent_id\"):localStorage.getItem(\"user_id\")}&search=${search}`\r\n\r\n    //for 0 it is not handling\r\n    if((filter !== '' && filter != 'all')) {\r\n      url += `&status=${filter}`\r\n    }\r\n    setLoading(true);\r\n    const res1 = await axiosInstance.get(`api/web/technician/list${url}`);\r\n    console.log('res1', res1);\r\n    setData(res1.data.items);\r\n    setLoading(false);\r\n\r\n    setCSVData(res1.data.items.map((item)=>{\r\n      return {\r\n        id: item.id,\r\n        name: item.name,\r\n        created_at: moment(item.created_at).format('DD-MM-YYYY'),\r\n        gender: item.gender == 1 ? 'Male':'Female',\r\n        phone_no: item.phone_code + ' ' + item.phone_no,\r\n        email: item?.email,\r\n        status: item.status===1?\"Active\":\"Inactive\",\r\n      }\r\n    }))\r\n    // setData(res1.data.items.map((elm) => {\r\n    //   return {\r\n    //     id: elm.id,\r\n    //     name: elm.company_name,\r\n    //     jobSite: elm.jobsite,\r\n    //     machine: 'Excavator',\r\n    //     faults: 'Engine Failure',\r\n    //     orderDate: moment(elm.created_at).format('YYYY-MM-DD'),\r\n    //     technicianAssigned: 'Technician 1',\r\n    //     status: true,\r\n    //   }\r\n    // }));\r\n  }\r\n  useEffect(() => {\r\n    getOrderList();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {/* <div>\r\n        <Tabs activeKey={key} onChange={setKey} tabBarExtraContent={key===\"1\"?operations:operationsTwo}>\r\n          {items.map((item) => (\r\n            <Tabs.TabPane tab={item.label} key={item.key}>\r\n              {item.children}\r\n            </Tabs.TabPane>\r\n          ))}\r\n        </Tabs>\r\n      </div> */}\r\n      <h4> <SettingOutlined /> Technician Management</h4>\r\n      <div className=\"d-flex justify-content-between mb-3\">\r\n        <div className=\"\" style={{ display: \"flex\" }}>\r\n          <Space direction=\"vertical\">\r\n            <Input\r\n              placeholder=\"Search\"\r\n              allowClear\r\n              onChange={onSearch}\r\n              style={{\r\n                width: 200,\r\n              }}\r\n              prefix={<SearchOutlined style={{ marginRight: 8 }} />}\r\n            />\r\n          </Space>\r\n          <Filter filters={FilterMenu}>\r\n            <Button\r\n              icon={<Icon component={FilterIcon} />}\r\n              className=\"d-flex align-items-center ml-2\"\r\n            >\r\n              Filters\r\n            </Button>\r\n          </Filter>\r\n          {/* <Button icon={<Icon component={CsvIcon} />} className=\"d-flex align-items-center ml-2\" >Export</Button> */}\r\n          {/* <Button className=\"d-flex align-items-center ml-2\">\r\n            <img src={CalendarIcon} className=\"mr-2\" alt=\"Calendar Icon\" /> Schedule\r\n          </Button> */}\r\n          <Csv header={TechnicianMangementCsv} data={csvData} filename={\"Technicians List\"} />\r\n        </div>\r\n        <div className=\"mb-2 d-flex align-items-center\">\r\n          <Button\r\n            // onClick={showModal}\r\n            className=\"ml-3 bg-primary d-flex align-items-center rounded text-white font-weight-semibold px-4\"\r\n          >\r\n            <Link to={'/app/technician-management/addNew'}>\r\n              + Add New</Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n      <Table\r\n        // rowKey='id'\r\n        // rowSelection={{\r\n        //   selectedRowKeys,\r\n        //   onChange: (selectedRowKeys, selectedRows) => {\r\n        //     setSelectedRowKeys(selectedRowKeys);\r\n        //   }\r\n        // }} \r\n        loading={loading}\r\n        columns={columns} dataSource={data} />\r\n    </div>\r\n    <ConfirmModal\r\n        deleteConfirmationModal={modalVisible2}\r\n        setDeleteConfirmationModal={setModalVisible2}\r\n        handleYesConfirmation={handleYesConfirmation}\r\n        msg={'Do you want to delete this Technician?'}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default TechnicianManagement\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TravelerRemarks.js",["1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380"],"import { Button, Card, Divider, Input, message, Upload } from 'antd'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport React, { useEffect, useState } from 'react'\r\nimport TravelerRemarksReply from './TravelerRemarksReply'\r\nimport TraverlerRemarksReplyContainer from './TraverlerRemarksReplyContainer'\r\nimport { InboxOutlined, UploadOutlined } from '@ant-design/icons'\r\nimport Dragger from 'antd/lib/upload/Dragger'\r\nimport { axiosInstance } from 'App'\r\n\r\nfunction TravelerRemarks({ id, remarksArray, getRemarks, remarksModal, setRemarksModal, remarksReply, setRemarksReply, remarksReplying, setRemarksReplying,imageUrl,setImageUrl }) {\r\n    const BASE_URL = '';\r\n    const [remarks, setRemarks] = useState('')\r\n    // console.log()\r\n\r\n    const [remarksArrayFinal, setRemarksArrayFinal] = useState(remarksArray)\r\n\r\n\r\n\r\n\r\n    const handleChange = (info) => {\r\n        console.log(info)\r\n        setImageUrl([info.fileList[info.fileList.length-1]])\r\n    }\r\n\r\n\r\n\r\n    const handlePreview = (file) => {\r\n        if (file.originFileObj) {\r\n            const fileUrl = URL.createObjectURL(file.originFileObj);\r\n            window.open(fileUrl, '_blank');\r\n        } else {\r\n            window.open(file.url, '_blank');\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    const postRemarks = async () => {\r\n        if (remarks.trim() === '') {\r\n            message.error('Please enter remarks')\r\n            return\r\n        }\r\n      \r\n        try {\r\n            const response = await axiosInstance.post(`/api/web/inquiries/${id}/comments`, {\r\n                // content: remarks,\r\n                // inquiryId: id,\r\n                comment: remarks,\r\n                parent_id: remarksReplying,\r\n                // type: 'TRAVELER',\r\n                // filePath: imageUrl.length>0?imageUrl[0].response.data.location:null\r\n            })\r\n            setRemarks('')\r\n            // setImageUrl([])\r\n            getRemarks()\r\n            message.success('Remarks posted successfully')\r\n            setRemarksModal(false) \r\n        }catch(err){\r\n            console.log(err);\r\n            message.error('Error while posting remarks')\r\n        }\r\n\r\n\r\n   \r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <h3>Remarks</h3>\r\n            <Divider />\r\n\r\n            <div>\r\n                <div>Add Remarks</div>\r\n                <Input.TextArea value={remarks} onChange={(e) => {\r\n                    setRemarks(e.target.value)\r\n                }} style={{\r\n                    resize: 'none'\r\n                }} rows={4} />\r\n            </div>\r\n        \r\n            <div style={{\r\n                textAlign: 'right',\r\n                marginTop: '10px'\r\n            }}>\r\n                <Button onClick={() => {\r\n                    postRemarks()\r\n                }} type=\"primary\">Save</Button>\r\n            </div>\r\n\r\n\r\n            \r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TravelerRemarks\r\n\r\n\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TravelerRemarksLabel.js",["1381","1382","1383","1384","1385","1386","1387","1388"],"import { Button, Card, Divider, Empty, Input, message } from 'antd'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport React, { useEffect, useState } from 'react'\r\n// import TravelerRemarksReply from './TravelerRemarksReply'\r\nimport TraverlerRemarksReplyContainer from './TraverlerRemarksReplyContainer'\r\nimport TravelerRemarksReplyLabel from './TravelerRemarksReplyLabel'\r\n\r\nfunction TravelerRemarksLabel({ id, remarksArray, getRemarks, hide, remarksModal, setRemarksModal, labelRemarksReply, setLabelRemarksReply, remarksReplying, setRemarksReplying }) {\r\n\r\n\r\n    return (\r\n        <div style={{\r\n            width: '100%',\r\n        }}>\r\n\r\n\r\n\r\n            <Card>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    gap: '17px',\r\n                    width: '100%'\r\n                }}>\r\n                    {\r\n                        remarksArray.length != 0 ? remarksArray.map((item, index) => {\r\n                            return (\r\n                                <div key={index} style={{\r\n                                    backgroundColor: labelRemarksReply[index] ? '#F7F7F7' : 'white',\r\n                                    padding: '10px',\r\n                                    borderRadius: '10px',\r\n                                }}>\r\n                                    <div style={{\r\n                                        display: \"flex\",\r\n                                        alignItems: \"center\",\r\n                                        gap: \"10px\"\r\n                                    }}>\r\n                                        <div style={{\r\n                                            fontSize: '16px',\r\n                                            fontWeight: 500,\r\n                                            color: 'black'\r\n                                        }}>{item.user?.name}</div>\r\n                                        <div style={{\r\n                                            fontSize: '12px',\r\n                                            color: 'gray'\r\n                                        }}>{moment(item.created_at).format('DD MMM YYYY hh:mm a')}</div>\r\n                                    </div>\r\n                                    {/* {item.filePath ?\r\n                                        <div style={{\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                            gap: '10px',\r\n                                            // boxShadow: '0px 0px 5px 0px rgba(0,0,0,0.1)',\r\n                                            width: '40%',\r\n\r\n                                        }}>\r\n                                            {\r\n                                                item.filePath.split('.').pop() === 'pdf' ? <> <a style={{\r\n                                                    textDecoration: 'underline',\r\n                                                    color: '#2EA3F2',\r\n                                                    fontWeight: 700,\r\n                                                    cursor: 'pointer',\r\n                                                    // padding: '10px'\r\n                                                }} href={item.filePath} target=\"_blank\" rel=\"noreferrer\">PDF</a>   <Card style={{\r\n\r\n\r\n                                                }}>\r\n                                                        {item.content}\r\n                                                    </Card>\r\n                                                </>\r\n                                                    : <><img src={item.filePath} alt=\"file\" style={{ width: \"200px\", height: 'auto' }} />\r\n                                                        <Card style={{\r\n\r\n\r\n                                                        }}>\r\n                                                            {item.content}\r\n                                                        </Card>\r\n                                                    </>\r\n                                            }\r\n\r\n                                        </div> */}\r\n                                        {/* : */}\r\n                                        <div>{item.content}</div>\r\n                                        {/* } */}\r\n                                    <div style={{\r\n                                        display: 'flex',\r\n                                        gap: '10px',\r\n                                        color: 'gray',\r\n                                        alignItems: 'center'\r\n                                    }}>\r\n                                        <div onClick={() => {\r\n\r\n                                            setRemarksReplying(item.id)\r\n                                            setRemarksModal(true);\r\n\r\n\r\n                                        }} style={{\r\n                                            textDecoration: 'underline',\r\n                                            color: '#2EA3F2',\r\n                                            fontWeight: 700,\r\n                                            cursor: 'pointer'\r\n                                        }}>Reply</div>\r\n                                        <div style={{\r\n                                            width: '8px',\r\n                                            height: '8px',\r\n                                            backgroundColor: '#E7E7E7',\r\n                                            borderRadius: '50%'\r\n                                        }}></div>\r\n                                        <div> {item.editedLogs.length} Replies</div>\r\n                                        <TravelerRemarksReplyLabel index={index} editedLogs={item.editedLogs} id={item.id} labelRemarksReply={labelRemarksReply} setLabelRemarksReply={setLabelRemarksReply} />\r\n                                    </div>\r\n                                    <TraverlerRemarksReplyContainer index={index} editedLogs={item.editedLogs} id={item.id} remarksReply={labelRemarksReply} setRemarksReply={setLabelRemarksReply} />\r\n\r\n                                </div>\r\n                            )\r\n                        }) : <Empty description=\"No Remarks\" />\r\n                    }\r\n                </div>\r\n            </Card>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TravelerRemarksLabel","/home/faizan/jd-works/customer-web-app/src/utils/Upload.js",[],"/home/faizan/jd-works/customer-web-app/src/components/shared-components/Filter.js",["1389","1390","1391","1392"],"import { Button, Dropdown, Menu, Checkbox } from \"antd\";\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nconst Filter = (props) => {\r\n  return (\r\n    <Dropdown overlay={props.filters} placement=\"bottomLeft\">\r\n      {props.children}\r\n    </Dropdown>\r\n  );\r\n};\r\nexport default Filter;","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/MachineSensorComponent.js",["1393"],"import React from 'react';\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\r\nimport { message } from 'antd';\r\n\r\nfunction MachineSensorComponent({ data,id,machine_name }) {\r\n    // Check if current user is a free user (role id 5)\r\n    const userRole = parseInt(localStorage.getItem(\"role\"));\r\n    const isFreeUser = userRole === 5;\r\n    \r\n    const totalSlots = Math.max(5, data.length);\r\n    const emptySlots = totalSlots - data.length;\r\n    const allSlots = [...data, ...Array(emptySlots).fill(null)];\r\n    const emptySlotsCount = [...Array(1).fill(null)];\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flexWrap: 'wrap',\r\n                // justifyContent: 'space-between',\r\n                gap: '10px',\r\n                padding: '20px',\r\n                maxHeight:'33vh',\r\n                overflowY: 'auto',\r\n                backgroundColor: '#fff',\r\n            }}\r\n        >\r\n            {allSlots.map((item, index) => {\r\n                const isData = item !== null;\r\n                const bgColor = isData ? '#4688E4' : '#666'; // blue or grey\r\n                const textColor = isData ? '#fff' : '#ddd';\r\n\r\n                return (\r\n                    <div\r\n                        key={index}\r\n                        style={{\r\n                            width: '19%',\r\n                            border: `10px solid ${bgColor}`,\r\n                            borderRadius: '8px',\r\n                            cursor: 'pointer'\r\n                            //   padding: '10px',\r\n\r\n                        }}\r\n                    >\r\n                        <h4 style={{\r\n                            color: '#fff',\r\n                            background: bgColor\r\n                        }}>\r\n                            JD Sensor {index + 1}\r\n                        </h4>\r\n                        <div style={{ fontSize: '12px', color: '#333', padding: '4px' }}>\r\n                            <h4>\r\n                                {isData ? item.sensor_name : 'No Data Available'}\r\n                            </h4>\r\n                            <p>Vibration Intensity: {isData ? item.vibration : ''}</p>\r\n                            <p>Battery Life: {isData ? item.battery : ''}</p>\r\n                            <p>Temperature: {isData ? item.temperature : ''}</p>\r\n                            <p>Updated Time: {isData ? item.updatedAt : ''}</p>\r\n\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                display: 'flex',\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                marginBottom: '10px',\r\n                                gap: '5px'\r\n                            }}\r\n                        >\r\n                            {!isData ? (\r\n                                <button\r\n                                    onClick={()=>{\r\n                                        history.push(`/app/machine-and-sensors/sensor-list/add-new/${id}?machine_name=${machine_name}`);\r\n                                    }}\r\n                                    style={{\r\n                                        backgroundColor: bgColor,\r\n                                        color: textColor,\r\n                                        border: 'none',\r\n                                        borderRadius: '4px',\r\n                                        padding: '6px 4px',\r\n                                        cursor: 'pointer',\r\n                                        marginTop: '10px',\r\n                                        width: '90%',\r\n                                        margin: 'auto',\r\n                                    }}\r\n                                >\r\n                                    Add Sensor\r\n                                </button>\r\n                            ) : (\r\n                                <>\r\n                                    <button\r\n                                        onClick={()=>{\r\n                                            if (isFreeUser) {\r\n                                                message.info(\"Advanced sensor analysis is available for premium users. You can still access basic analysis through the chart data points.\");\r\n                                            }\r\n                                            history.push(`/app/machine-and-sensors/sensor-analysis/${id}/${item.sensor_id}`);\r\n                                        }}\r\n                                        style={{\r\n                                            backgroundColor: isFreeUser ? '#f0f0f0' : bgColor,\r\n                                            color: isFreeUser ? '#999' : textColor,\r\n                                            border: 'none',\r\n                                            borderRadius: '4px',\r\n                                            padding: '4px 2px',\r\n                                            cursor: 'pointer',\r\n                                            marginTop: '10px',\r\n                                            width: '45%',\r\n                                            fontSize: '11px',\r\n                                            position: 'relative'\r\n                                        }}\r\n                                        title={isFreeUser ? \"Limited features for free users\" : \"Access full sensor analysis\"}\r\n                                    >\r\n                                        Analysis {isFreeUser && '⚠️'}\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={()=>{\r\n                                            history.push(`/app/machine-and-sensors/sensor-list/edit-sensor/${id}/${item.id}?machine_name=${machine_name}`);\r\n                                        }}\r\n                                        style={{\r\n                                            backgroundColor: bgColor,\r\n                                            color: textColor,\r\n                                            border: 'none',\r\n                                            borderRadius: '4px',\r\n                                            padding: '4px 2px',\r\n                                            cursor: 'pointer',\r\n                                            marginTop: '10px',\r\n                                            width: '45%',\r\n                                            fontSize: '11px'\r\n                                        }}\r\n                                    >\r\n                                        Edit\r\n                                    </button>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })}\r\n\r\n            {\r\n                allSlots.length > 5 ?\r\n                    <div\r\n\r\n                        style={{\r\n                            width: '19%',\r\n                            border: `10px solid #666`,\r\n                            borderRadius: '8px',\r\n                            cursor: 'pointer'\r\n                            //   padding: '10px',\r\n\r\n                        }}\r\n                    >\r\n                        <h4 style={{\r\n                            color: '#fff',\r\n                            background: '#666'\r\n                        }}>\r\n                            JD Sensor {allSlots.length + 1}\r\n                        </h4>\r\n                        <div style={{ fontSize: '12px', color: '#333', padding: '4px' }}>\r\n                            <h4>\r\n                                {'No Data Available'}\r\n                            </h4>\r\n                            <p>Vibration Intensity:</p>\r\n                            <p>Battery Life: </p>\r\n                            <p>Temperature: </p>\r\n                            <p>Updated Time: </p>\r\n                        </div>\r\n                         <div\r\n                            style={{\r\n                                display: 'flex',\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                marginBottom: '10px',\r\n                            }}\r\n                        >\r\n                        <button\r\n                                onClick={()=>{\r\n                                     history.push(`/app/machine-and-sensors/sensor-list/add-new/${id}?machine_name=${machine_name}`);\r\n                                }}\r\n                                style={{\r\n                                    backgroundColor:  '#666',\r\n                                    color:  '#ddd',\r\n                                    border: 'none',\r\n                                    borderRadius: '4px',\r\n                                    padding: '6px 4px',\r\n                                    cursor: 'pointer' ,\r\n                                    marginTop: '10px',\r\n                                    width: '50%',\r\n                                    margin: 'auto',\r\n                                }}\r\n                            >\r\n                                Add Sensor\r\n                            </button>\r\n                            </div>\r\n                    </div>\r\n                    : <></>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MachineSensorComponent;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/Progress.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/Card/CardMachine.js",["1394","1395","1396","1397","1398","1399","1400"],"import { Avatar, Card, Divider, Tag } from 'antd'\r\nimport React from 'react'\r\nimport MeterIcon from \"assets/Machine/Frame 1171275245.png\"\r\nimport Machine from \"assets/Machine/Avatar.png\"\r\nimport Address from \"assets/Machine/Frame 367.png\"\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min'\r\nimport VibrationIcon from \"assets/Frame 1171275235.png\"\r\nimport moment from 'moment'\r\nimport Gauge from './Gauge'\r\n\r\n\r\nfunction CardMachine({data}) {\r\n    const history = useHistory();\r\n    return (\r\n        <>\r\n            <Card \r\n            style={{\r\n                width: \"32%\",\r\n                cursor: \"pointer\",\r\n            }}\r\n                onClick={() => {\r\n                    history.push(\"/app/machine-and-sensors/machine-details/\"+data.id)\r\n                }}\r\n            >\r\n                <div style={{\r\n                    display: \"flex\",\r\n                    gap:\"10px\"\r\n                }}>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        color: \"#8C8E8F\",\r\n                        alignItems: \"center\",\r\n                        flexDirection: \"column\",\r\n                        width:\"40%\"\r\n                    }}>\r\n                        <div style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            borderRadius: \"50%\",\r\n                            // border: \"1px solid #000\",\r\n                        }}>\r\n                            <div>\r\n                                <Gauge value={data.health}/>\r\n                            </div>\r\n                        {/* <img src={MeterIcon} /> */}\r\n                        </div>\r\n                        <div style={{\r\n\r\n                            fontSize: \"12px\"\r\n                        }}>Machine Health</div>\r\n                        <div style={{\r\n\r\n                            fontSize: \"10px\"\r\n                        }} >*updated on {moment(data.updated_at).format(\"DD MMM YYYY\")}</div>\r\n                    </div>\r\n                    <div style={{\r\n                      width:\"60%\"\r\n                    }}>\r\n                        <div style={{\r\n                            display:\"flex\",\r\n                            justifyContent:\"space-between\",\r\n                            alignItems:\"flex-end\"\r\n                        }}>\r\n                            <div>\r\n                                <div style={{\r\n                                    fontSize:\"20px\",\r\n                                    fontWeight:\"bold\",\r\n                                    color:\"#000\"\r\n                                }}>{\r\n                                    data?.name\r\n                                }</div>\r\n                                <div style={{\r\n                                    fontSize:\"12px\",\r\n\r\n                                }}>#{data.id}</div>\r\n                            </div>\r\n                            {/* <div style={{\r\n                                height:\"70px\",\r\n                                width:\"70px\",\r\n                            }}>\r\n                                <img style={{\r\n                                    height:\"100%\",\r\n                                    width:\"100%\",\r\n                                    objectFit:\"cover\",\r\n                                }} src={data?.pictures[0]?.file_path}/>\r\n                            </div> */}\r\n                        </div>\r\n                        <div style={{\r\n                            display:\"flex\",\r\n                            gap:\"10px\",\r\n                            alignItems:\"center\"\r\n                        }}>\r\n                                <div>  <img src={Address}/></div>\r\n                                <div>{data?.job_site?.jobsite_name}</div>\r\n                        </div>\r\n                        <div\r\n                        onClick={(e) => {\r\n                            history.push(\"/app/machine-and-sensors/machine-details/sensors/\"+data.id)\r\n                            e.stopPropagation();\r\n                        }}\r\n                        style={{\r\n                            display:\"flex\",\r\n                            justifyContent:\"flex-end\"\r\n                        }}>\r\n                            <img src={VibrationIcon}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardMachine","/home/faizan/jd-works/customer-web-app/src/views/app-views/dashboard/CardInfo/CardInfo.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/marker_images.js",[],"/home/faizan/jd-works/customer-web-app/src/components/shared-components/ConfirmModal.js",[],"/home/faizan/jd-works/customer-web-app/src/utils/CountrySelector.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Upload-Photos/UploadPhotos.js",["1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415"],"import React, {useState} from 'react'\r\nimport { Button, Collapse, DatePicker, Form, Input, message, Modal, Radio, Select, Space } from \"antd\";\r\nimport { useHistory, useParams } from 'react-router-dom/cjs/react-router-dom';\r\nimport Konva from 'konva';\r\nimport ReportSerchIcon from \"assets/svg/greenSearch.png\";\r\nimport {\r\n  DeleteOutlined,\r\n  CloseCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  UploadFileIcon,\r\n  ImagesIcon,\r\n} from \"assets/svg/icon\";\r\nimport marker_images from \"../marker_images\";\r\n\r\nlet styles = {\r\n  files: {\r\n    listStyle: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    gap: \"13px\",\r\n    border: \"1px solid lightblue\",\r\n    padding: \"10px\",\r\n    borderRadius: \"9px\",\r\n    background: \"#0093ff0a\",\r\n  },\r\n  uploadFile: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    opacity: 0,\r\n  },\r\n\r\n  \".uploadFile::-webkit-file-upload-button\": {\r\n    visibility: \"hidden\",\r\n  },\r\n\r\n  \".uploadFile::before\": {\r\n    content: \"'Drag & Drop'\",\r\n    display: \"inline-block\",\r\n    padding: \"10px\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  \".uploadFile:hover::before\": {\r\n    backgroundColor: \"#ccc\",\r\n  },\r\n};\r\n\r\nconst UploadPhotos = ({\r\n        imageMarkings,\r\n        setImageMarkings,\r\n        selectedImageTemp,\r\n        setSelectedImageTemp,\r\n        // UploadImageMarkingKonva,\r\n        // setEditImageId,\r\n        // editImageId,\r\n        setEditImageId,\r\n        stage,\r\n        layer,\r\n\r\n\r\n        uploadModal,\r\n        setUploadModal,\r\n        modalType,\r\n        SaveUploadedImageData,\r\n        uploadImageType,\r\n        setLayerTemp,\r\n        layerTemp,\r\n  }) => {\r\n\r\n  // canvas variables\r\n  let width = null;\r\n  let height = null;\r\n\r\n  // canvas markings setup\r\n  const UploadImageMarkingKonva = (image_url, image_markings)=> {\r\n    if(!image_url) {\r\n      console.log(\"edit return image url\")\r\n      return\r\n    }\r\n    if(stage) {\r\n      console.log(\"edit return stage\")\r\n      return\r\n    }\r\n\r\n    let container = \"upload_image_marking_canvas_container\";\r\n    let container_elem = document.getElementById(\"upload_image_marking_canvas_container\");\r\n    \r\n    const tempImageContainer = new Image();\r\n    tempImageContainer.id = 'canvas_temp_image';\r\n    tempImageContainer.style.height = `200px`;\r\n    tempImageContainer.src = image_url;\r\n    \r\n    document.body.appendChild(tempImageContainer);\r\n    tempImageContainer.onload = function () {\r\n      // console.log(\"image loaded\")\r\n      container_elem.style.width = document.getElementById(\"canvas_temp_image\").clientWidth + 'px';\r\n      container_elem.style.height = '200px';\r\n      tempImageContainer.remove();\r\n    }\r\n    setTimeout(() => {\r\n      // setContainerWidth(container_elem.clientWidth);\r\n      // setContainerHeight(container_elem.clientHeight);\r\n      width = container_elem.clientWidth;\r\n      height = container_elem.clientHeight;\r\n\r\n      stage = new Konva.Stage({\r\n        container: container,\r\n        width: container_elem.clientWidth,\r\n        height: container_elem.clientHeight,\r\n      });\r\n      \r\n      layer = new Konva.Layer();\r\n      setLayerTemp(layer);\r\n      stage.add(layer);\r\n\r\n      generateImageMarkingPoints(image_url, image_markings);\r\n    }, 500);\r\n  }\r\n\r\n  const generateImageMarkingPoints = async (uploaded_image, imageMarkings) => {\r\n    if(layer) {\r\n      layer.removeChildren();\r\n    } else {\r\n      layer = layerTemp;\r\n      if(!layer) {\r\n        console.log(\"layer cannot update!\")\r\n      } else {\r\n        layer.removeChildren();\r\n      }\r\n    }\r\n    if(!uploaded_image) {\r\n      return\r\n    }\r\n    \r\n    let container_elem = document.getElementById(\"upload_image_marking_canvas_container\");\r\n    let width_current = container_elem.clientWidth;\r\n    let height_current = container_elem.clientHeight;\r\n    \r\n    Konva.Image.fromURL(uploaded_image, image => {\r\n      image.setAttrs({\r\n        width: width_current,\r\n        height: height_current,\r\n      })\r\n      layer.add(image);\r\n      layer.draw();\r\n      \r\n      for (let index = 0; index < imageMarkings.length; index++) {\r\n        let image_url = marker_images[index];\r\n\r\n        Konva.Image.fromURL(image_url, image => {\r\n          image.setAttrs({\r\n            x: width_current * imageMarkings[index].width_percentage,\r\n            y: height_current * imageMarkings[index].height_percentage,\r\n            scaleX: height_current / 275,\r\n            scaleY: height_current / 275,\r\n          });\r\n          image.draggable(true);\r\n          layer.add(image);\r\n          layer.draw();\r\n\r\n          image.on('mouseover', function () {\r\n            document.body.style.cursor = 'pointer';\r\n          });\r\n          image.on('mouseout', function () {\r\n            document.body.style.cursor = 'default';\r\n          });\r\n          image.on('dragend', (e) => {\r\n            setImageMarkings((prevCheckInMarkings) => {\r\n              return prevCheckInMarkings.map((item, i) => {\r\n                if (i === index) {\r\n                  return {\r\n                    ...item,\r\n                    width_percentage: e.target.attrs.x / width_current,\r\n                    height_percentage: e.target.attrs.y / height_current,\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              })\r\n            })\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  const addImageMarking = (image_url) => {\r\n    let check_in_marks = [...imageMarkings];\r\n    check_in_marks.push({ width_percentage: 0.5, height_percentage: 0.5, text: '' });\r\n    setImageMarkings(check_in_marks)\r\n\r\n    if(check_in_marks.length){\r\n      generateImageMarkingPoints(image_url, check_in_marks);\r\n    }\r\n  }\r\n\r\n  const removeImageMarking = (index) => {\r\n    let check_in_marks = [...imageMarkings];\r\n    check_in_marks = check_in_marks.filter((item, i) => i !== index);\r\n    setImageMarkings(check_in_marks)\r\n\r\n    generateImageMarkingPoints(selectedImageTemp, check_in_marks);\r\n  }\r\n\r\n  function handleFileSelection(event) {\r\n      const fileList = event.target.files;\r\n      const newSelectedFiles = [];\r\n      for (let i = 0; i < fileList.length; i++) {\r\n        newSelectedFiles.push(fileList[i]);\r\n      }\r\n  \r\n      if(!newSelectedFiles[0]) return;\r\n  \r\n      const file = newSelectedFiles[0];\r\n      const fsize = file.size;\r\n      const file_1 = Math.round((fsize / 1024));\r\n      if (file_1 > 1024) {\r\n        message.error(\"Seleted Image Size is too big\");\r\n        return\r\n      }\r\n      const reader = new FileReader();\r\n  \r\n      reader.onload = function (e) {\r\n        let image_src = e.target.result;\r\n        if(image_src) {\r\n          setSelectedImageTemp(image_src);\r\n          UploadImageMarkingKonva(image_src, imageMarkings);\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n  }\r\n\r\n  const resetImageData = () => {\r\n    setSelectedImageTemp(null);\r\n    setImageMarkings([]);\r\n    let container_elem = document.getElementById(\"upload_image_marking_canvas_container\");\r\n    container_elem.style.width = '10px';\r\n    container_elem.style.height = '10px';\r\n    setEditImageId(null);\r\n  }\r\n  \r\n  return (\r\n    <>\r\n        <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <ImagesIcon /> <span className=\"d-block ml-2\"> Upload Photos {modalType}</span>\r\n          </div>\r\n        }\r\n        visible={uploadModal}\r\n        onCancel={() => {\r\n          resetImageData();\r\n          setUploadModal(false);\r\n        }}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"border bg-white rounded p-3 mt-4\">\r\n          {!selectedImageTemp && <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"64\"\r\n              height=\"64\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 64 64\"\r\n            >\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n              ></path>\r\n              <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n              ></path>\r\n              <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n              <path\r\n                fill={\"#3CA6C1\"}\r\n                d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#F7FCFF\"\r\n                d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#D7E6EF\"\r\n                d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n              ></path>\r\n              <path\r\n                fill=\"#44394A\"\r\n                d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n              ></path>\r\n            </svg>\r\n            <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n            <h5 className=\"mb-0\">Or</h5>\r\n            <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n              Choosen File\r\n            </h5>\r\n            <input\r\n              style={styles.uploadFile}\r\n              className=\"uploadFile\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              multiple={false}\r\n              onChange={handleFileSelection}\r\n            />\r\n          </div>}\r\n          \r\n          <div className=\"mt-0\">\r\n            <div className=\"d-flex justify-content-between p-2\">\r\n              <div id=\"upload_image_marking_canvas_container\" \r\n              className=\"d-flex justify-content-start\"></div>\r\n\r\n              {selectedImageTemp && \r\n                <div>\r\n                    {imageMarkings.map((tag_data, index) => (\r\n                        <div className=\"d-flex justify-content-end mb-1\">\r\n                            <Input \r\n                              value={tag_data.text}\r\n                              onChange={(e) => {\r\n                                  tag_data.text = e.target.value;\r\n                                  setImageMarkings((prevData) => {\r\n                                    const newData = prevData.map((data, i) => {\r\n                                      if (i === index) {\r\n                                          return tag_data\r\n                                        } else {\r\n                                          return data\r\n                                        }\r\n                                    })\r\n                                    return newData\r\n                                  });\r\n                              }}\r\n                              placeholder=\"Enter text...\" \r\n                            />\r\n                            <Button key=\"remove\" size=\"small\" className=\"ml-2\" type=\"danger\" onClick={() => removeImageMarking(index)}><DeleteOutlined /></Button>\r\n                        </div>\r\n                    ))\r\n                    }\r\n                    <Button key=\"add\" onClick={() => addImageMarking(selectedImageTemp)}>Add Marking</Button>\r\n                </div>\r\n              }\r\n            </div>\r\n            {selectedImageTemp && \r\n              <div><Button key=\"delete\" className=\"mt-1 ml-2\" onClick={() => {\r\n                resetImageData();\r\n              }}\r\n              >Remove Photo</Button></div>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => {\r\n            resetImageData();\r\n            setUploadModal(false);\r\n          }}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={async () => {\r\n              if(!selectedImageTemp) {\r\n                message.error(\"Please select an image to save\");\r\n                return\r\n              }\r\n              SaveUploadedImageData(uploadImageType);\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UploadPhotos","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Vibration-Tests/VibrationTests.js",["1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429","1430"],"import React, {useState} from 'react';\r\nimport { Collapse, Radio, Input, Button, DatePicker } from 'antd';\r\nimport { HistoryOutlined, EditOutlined } from '@ant-design/icons';\r\nimport { AuxilleryChecksIcon } from 'assets/svg/icon';\r\nimport { WhiteImageIcon } from 'assets/svg/icon';\r\nimport ReportSerchIcon from \"assets/svg/greenSearch.png\";\r\nimport { ConnectorResistIcon } from 'assets/svg/icon';\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { ViewDetailsIcon } from 'assets/svg/icon';\r\nimport UploadPhotos from '../Upload-Photos/UploadPhotos';\r\n// import AuxilleryChecksIcon from \"assets/svg/icon\";\r\n// import WhiteImageIcon from './WhiteImageIcon';\r\n\r\nconst VibrationTests = ({\r\n  setInitialeditModal,\r\n  setInitialModalFormdata,\r\n  setInitialModalForm,\r\n  vibrationData,\r\n  setVibrationData,\r\n  setInitialcondVibrationUploaModal,\r\n  selectedImages3,\r\n  returnClass,\r\n  selectedImageTemp,\r\n  setSelectedImageTemp,\r\n  imageMarkings,\r\n  setImageMarkings,\r\n  UploadImageMarkingKonva,\r\n  setEditImageId,\r\n  delUplFile3,\r\n  setUploadModal,\r\n  setUploadImageType\r\n}) => {\r\n    const convertImageToBase64 = async (imageUrl, markings) => {\r\n        try {\r\n            const response = await fetch(imageUrl, { mode: \"cors\" }); // Ensure CORS is allowed\r\n            const blob = await response.blob(); // Convert response to Blob\r\n            const reader = new FileReader();\r\n            \r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n            let base64 = reader.result;\r\n            if(base64) {\r\n                UploadImageMarkingKonva(base64, markings);\r\n            }\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error fetching image:\", error);\r\n        }\r\n    };\r\n\r\n  return (\r\n    <>\r\n        <div className=\"d-flex justify-content-between\">\r\n            <h4 className=\"d-flex align-items-center\">\r\n            {\" \"}\r\n            <ViewDetailsIcon /> View Details{\" \"}\r\n            <span\r\n                style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                className=\"font-weight-300 ml-2\"\r\n            >\r\n                {\" \"}\r\n                <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n            </span>{\" \"}\r\n            </h4>\r\n            <div>\r\n            <Button onClick={() => {\r\n                    // setInitialcondVibrationUploaModal(true);\r\n                    setUploadModal(true);\r\n                    setUploadImageType('Vibration-Test');\r\n                }}>\r\n                {\" \"}\r\n                Upload Photos\r\n            </Button>\r\n            <Button\r\n                className=\"bg-primary text-white ml-2\"\r\n                onClick={() => {\r\n                setInitialeditModal(true);\r\n                setInitialModalFormdata((prev) => {\r\n                    return {\r\n                    ...prev,\r\n                    point_1: vibrationData?.point_1?.value \r\n                    ? [vibrationData?.point_1.value.split('-')[0], vibrationData?.point_1.value.split('-')[1]]\r\n                    : ['', 'mm/s'],\r\n                    point_2: vibrationData?.point_2?.value \r\n                    ? [vibrationData?.point_2.value.split('-')[0], vibrationData?.point_2.value.split('-')[1]]\r\n                    : ['', 'mm/s'],\r\n                    point_3: vibrationData?.point_3?.value \r\n                    ? [vibrationData?.point_3.value.split('-')[0], vibrationData?.point_3.value.split('-')[1]]\r\n                    : ['', 'mm/s'],\r\n                    point_4: vibrationData?.point_4?.value \r\n                    ? [vibrationData?.point_4.value.split('-')[0], vibrationData?.point_4.value.split('-')[1]]\r\n                    : ['', 'mm/s'],\r\n                    point_5: vibrationData?.point_5?.value \r\n                    ? [vibrationData?.point_5.value.split('-')[0], vibrationData?.point_5.value.split('-')[1]]\r\n                    : ['', 'mm/s'],\r\n                    point_6: vibrationData?.point_6?.value \r\n                    ? [vibrationData?.point_6.value.split('-')[0], vibrationData?.point_6.value.split('-')[1]]\r\n                    : ['', 'mm/s'],\r\n                    // point_2: vibrationData?.point_2?.value,\r\n                    // point_3: vibrationData?.point_3?.value,\r\n                    // point_4: vibrationData?.point_4?.value,\r\n                    // point_5: vibrationData?.point_5?.value,\r\n                    // point_6: vibrationData?.point_6?.value,\r\n                    de_bearing: vibrationData?.de_bearing?.value,\r\n                    nde_bearing: vibrationData?.nde_bearing?.value,\r\n                    others: vibrationData?.others?.value,\r\n                    };\r\n                });\r\n\r\n                setInitialModalForm((prev) => {\r\n                    return {\r\n                    ...prev,\r\n                    point_1: vibrationData?.point_1?.check,\r\n                    point_2: vibrationData?.point_2?.check,\r\n                    point_3: vibrationData?.point_3?.check,\r\n                    point_4: vibrationData?.point_4?.check,\r\n                    point_5: vibrationData?.point_5?.check,\r\n                    point_6: vibrationData?.point_6?.check,\r\n                    de_bearing: vibrationData?.de_bearing?.check,\r\n                    nde_bearing: vibrationData?.nde_bearing?.check,\r\n                    others: vibrationData?.others?.check,\r\n                    };\r\n                });\r\n                }}\r\n            >\r\n                {\" \"}\r\n                <EditOutlined /> Edit\r\n            </Button>\r\n            </div>\r\n        </div>\r\n        <div className=\"green-radio mt-4 mb-5\">\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    checked={vibrationData?.point_1?.check}\r\n                    className={returnClass(vibrationData?.point_1?.check)}\r\n                >\r\n                    Point 1\r\n                </Radio>\r\n                <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    // value={vibrationData?.point_1?.value}\r\n                    value={vibrationData?.point_1?.value  \r\n                        ? vibrationData?.point_1?.value.split('-')[0]\r\n                        : vibrationData?.point_1?.value}\r\n                    \r\n                    suffix={vibrationData?.point_1?.value  \r\n                        ? (vibrationData?.point_1.value.split('-')[1] == 'm/s' ? <span>m/s<sup>2</sup></span> : vibrationData?.point_1.value.split('-')[1])\r\n                        : 'mm/s'}\r\n                    disabled\r\n                />\r\n            </div>\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    checked={vibrationData?.point_2?.check}\r\n                    className={returnClass(vibrationData?.point_2?.check)}\r\n                >\r\n                    Point 2\r\n                </Radio>\r\n                <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    // value={vibrationData?.point_2?.value}\r\n                    value={vibrationData?.point_2?.value  \r\n                        ? vibrationData?.point_2?.value.split('-')[0]\r\n                        : vibrationData?.point_2?.value}\r\n                    \r\n                    suffix={vibrationData?.point_2?.value  \r\n                        ? (vibrationData?.point_2.value.split('-')[1] == 'm/s' ? <span>m/s<sup>2</sup></span> : vibrationData?.point_2.value.split('-')[1])\r\n                        : 'mm/s'}\r\n                    disabled\r\n                />\r\n            </div>\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    checked={vibrationData?.point_3?.check}\r\n                    className={returnClass(vibrationData?.point_3?.check)}\r\n                >\r\n                    Point 3\r\n                </Radio>\r\n                <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    // value={vibrationData?.point_3?.value}\r\n                    value={vibrationData?.point_3?.value  \r\n                        ? vibrationData?.point_3?.value.split('-')[0]\r\n                        : vibrationData?.point_3?.value}\r\n                    \r\n                    suffix={vibrationData?.point_3?.value  \r\n                        ? (vibrationData?.point_3.value.split('-')[1] == 'm/s' ? <span>m/s<sup>2</sup></span> : vibrationData?.point_3.value.split('-')[1])\r\n                        : 'mm/s'}\r\n                    disabled\r\n                />\r\n            </div>\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    checked={vibrationData?.point_4?.check}\r\n                    className={returnClass(vibrationData?.point_4?.check)}\r\n                >\r\n                    Point 4\r\n                </Radio>\r\n                <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    // value={vibrationData?.point_4?.value}\r\n                    value={vibrationData?.point_4?.value  \r\n                        ? vibrationData?.point_4?.value.split('-')[0]\r\n                        : vibrationData?.point_4?.value}\r\n                    \r\n                    suffix={vibrationData?.point_4?.value  \r\n                        ? (vibrationData?.point_4.value.split('-')[1] == 'm/s' ? <span>m/s<sup>2</sup></span> : vibrationData?.point_4.value.split('-')[1])\r\n                        : 'mm/s'}\r\n                    disabled\r\n                />\r\n            </div>\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    checked={vibrationData?.point_5?.check}\r\n                    className={returnClass(vibrationData?.point_5?.check)}\r\n                >\r\n                    Point 5\r\n                </Radio>\r\n                <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    // value={vibrationData?.point_5?.value}\r\n                    value={vibrationData?.point_5?.value  \r\n                        ? vibrationData?.point_5?.value.split('-')[0]\r\n                        : vibrationData?.point_5?.value}\r\n                    \r\n                    suffix={vibrationData?.point_5?.value  \r\n                        ? (vibrationData?.point_5.value.split('-')[1] == 'm/s' ? <span>m/s<sup>2</sup></span> : vibrationData?.point_5.value.split('-')[1])\r\n                        : 'mm/s'}\r\n                    disabled\r\n                />\r\n            </div>\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    checked={vibrationData?.point_6?.check}\r\n                    className={returnClass(vibrationData?.point_6?.check)}\r\n                >\r\n                    Point 6\r\n                </Radio>\r\n                <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    // value={vibrationData?.point_6?.value}\r\n                    value={vibrationData?.point_6?.value  \r\n                        ? vibrationData?.point_6?.value.split('-')[0]\r\n                        : vibrationData?.point_6?.value}\r\n                    \r\n                    suffix={vibrationData?.point_6?.value  \r\n                        ? (vibrationData?.point_6.value.split('-')[1] == 'm/s' ? <span>m/s<sup>2</sup></span> : vibrationData?.point_6.value.split('-')[1])\r\n                        : 'mm/s'}\r\n                    disabled\r\n                />\r\n            </div>\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    checked={vibrationData?.de_bearing?.check}\r\n                    className={returnClass(vibrationData?.de_bearing?.check)}\r\n                >\r\n                    DE Bearing\r\n                </Radio>\r\n                <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={vibrationData?.de_bearing?.value}\r\n                    suffix={'g'}\r\n                />\r\n            </div>\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    checked={vibrationData?.nde_bearing?.check}\r\n                    className={returnClass(vibrationData?.nde_bearing?.check)}\r\n                >\r\n                    NDE Bearing\r\n                </Radio>\r\n                <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={vibrationData?.nde_bearing?.value}\r\n                    suffix={'g'}\r\n                />\r\n            </div>\r\n            <div className=\"mb-4 d-flex justify-content-between\">\r\n                <Radio\r\n                    style={{ width: \"30%\" }}\r\n                    disabled\r\n                    checked={vibrationData?.others?.check}\r\n                    className={returnClass(vibrationData?.others?.check)}\r\n                >\r\n                    Others\r\n                </Radio>\r\n                <Input\r\n                    style={{ width: \"70%\" }}\r\n                    placeholder=\"Type here...\"\r\n                    disabled\r\n                    value={vibrationData?.others?.value}\r\n                />\r\n            </div>\r\n            <div className=\"mt-5\">\r\n                <h5>Remarks</h5>\r\n                <TextArea\r\n                    rows={5}\r\n                    value={vibrationData?.remarks?.value}\r\n                    onChange={(e) => {\r\n                    setVibrationData((prev) => ({\r\n                        ...prev,\r\n                        remarks: {\r\n                        check:null,\r\n                        value: e.target.value,\r\n                        },\r\n                    }));\r\n                    }}\r\n                    cols={16}\r\n                    placeholder=\"Type Here...\"\r\n                />\r\n            </div>\r\n            <div className=\"mt-5\">\r\n                <h5>Uploaded Photos</h5>\r\n                <div className=\"dashed-border p-2\">\r\n                    {selectedImages3.map((image, index) => (\r\n                        <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                            <div className='w-75 d-flex flex-column align-items-start'>\r\n                                <img\r\n                                // key={index}\r\n                                src={image.url}\r\n                                alt={`Image ${index}`}\r\n                                style={{\r\n                                // width: \"200px\",\r\n                                height: \"200px\",\r\n                                marginRight: \"10px\",\r\n                                }}\r\n                                />\r\n                                <div className='diflex justify-content-start'>\r\n                                    <Button type='primary' className='mt-2' onClick={() => {\r\n                                            setEditImageId(image.id);\r\n                                            // setInitialcondVibrationUploaModal(true);\r\n                                            setUploadModal(true);\r\n                                            setUploadImageType('Vibration-Test');\r\n                                            setSelectedImageTemp(image.url_unmodified);\r\n                                            setImageMarkings(image.image_markings);\r\n                                            if(image.url_unmodified.includes('http')) {\r\n                                                convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                            } else {\r\n                                                setTimeout(() => {\r\n                                                    UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                                }, 500);\r\n                                            }\r\n                                        }}>\r\n                                        {\" \"}\r\n                                        Edit Photo\r\n                                    </Button>\r\n\r\n                                    <Button className='mt-2 ml-2' onClick={() => {\r\n                                            delUplFile3(index)\r\n                                        }}>\r\n                                        {\" \"}\r\n                                        Delete Photo\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <h4>Markings</h4>\r\n                                {image.image_markings.length > 0 ?\r\n                                    image.image_markings.map((marking, index) => (\r\n                                        marking.text && <div>\r\n                                            <b>{index+1}. </b>{marking.text}\r\n                                        </div>\r\n                                    ))\r\n                                    : <div><i>No Markings Added</i></div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        \r\n    </>\r\n  );\r\n};\r\n\r\nexport default VibrationTests;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Vibration-Tests/EditVibrationTests.js",["1431","1432","1433","1434","1435","1436","1437"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Modal, Radio, Select, Input, Collapse, DatePicker, Form, message, Space } from \"antd\";\r\nimport {\r\n  EditColorIcon,\r\n} from \"assets/svg/icon\";\r\n\r\nconst EditVibrationTests = ({\r\n    initialModalFormdata,\r\n    initialModalForm,\r\n    setInitialModalFormdata,\r\n    vibrationData,\r\n    setVibrationData,\r\n    vibrationTestModal,\r\n    setVibrationTestModal,\r\n    onRadioChange,\r\n    handleRadio2Chnge,\r\n    setInitialeditModal,\r\n    setInitialModalForm,\r\n    setInitialcondVibrationUploaModal,\r\n  }) => {\r\n\r\n  // useEffect(() => {\r\n  //   console.log(initialModalForm)\r\n  //   console.log(initialModalFormdata)\r\n  // }, [])\r\n  \r\n  return (\r\n    <>\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <EditColorIcon />{\" \"}\r\n            <span className=\"d-block ml-2\"> Edit Details </span>\r\n          </div>\r\n        }\r\n        visible={vibrationTestModal}\r\n        onCancel={() => setVibrationTestModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"\">\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"point_1\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.point_1}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Point 1</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              // value={initialModalFormdata?.point_1}\r\n              // onChange={(e) => handleRadio2Chnge(\"point_1\", e)}\r\n              // suffix={'mm/s'}\r\n              \r\n              value={initialModalFormdata?.point_1[0]}\r\n              onChange={(e) => {\r\n                setInitialModalFormdata((data) => {\r\n                  let val = [e.target.value, data.point_1[1]]\r\n                  \r\n                  let dt = {\r\n                      ...data,\r\n                      point_1: val\r\n                  }\r\n                  return dt\r\n                  // return {\r\n                  //   ...prev,\r\n                  //   point_1: [e.target.value, prev.point_1[1]]\r\n                  // }\r\n                })\r\n              }}\r\n\r\n              addonAfter={\r\n                  <Select\r\n                      value={initialModalFormdata?.point_1[1]}\r\n                      defaultValue={'mm/s'}\r\n                      className=\"select-after\"\r\n                      onChange={(e) => {\r\n                          setInitialModalFormdata((data) => {\r\n                            let val = [data.point_1[0], e]\r\n                            \r\n                            return {\r\n                              ...data,\r\n                              point_1: val\r\n                            }\r\n                          })\r\n                      }}\r\n                  >\r\n                      <Select.Option value=\"mm/s\">mm/s</Select.Option>\r\n                      <Select.Option value=\"m/s\">m/s<sup>2</sup></Select.Option>\r\n                  </Select>\r\n              }\r\n            />\r\n          </div>      \r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"point_2\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.point_2}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Point 2</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              // value={initialModalFormdata?.point_2}\r\n              // onChange={(e) => handleRadio2Chnge(\"point_2\", e)}\r\n\r\n              value={initialModalFormdata?.point_2[0]}\r\n              onChange={(e) => {\r\n                setInitialModalFormdata((data) => {\r\n                  let val = [e.target.value, data.point_2[1]]\r\n                  \r\n                  let dt = {\r\n                      ...data,\r\n                      point_2: val\r\n                  }\r\n                  return dt\r\n                })\r\n              }}\r\n\r\n              addonAfter={\r\n                  <Select\r\n                      value={initialModalFormdata?.point_2[1]}\r\n                      defaultValue={'mm/s'}\r\n                      className=\"select-after\"\r\n                      onChange={(e) => {\r\n                          setInitialModalFormdata((data) => {\r\n                            let val = [data.point_2[0], e]\r\n                            \r\n                            return {\r\n                              ...data,\r\n                              point_2: val\r\n                            }\r\n                          })\r\n                      }}\r\n                  >\r\n                      <Select.Option  value=\"mm/s\">mm/s</Select.Option >\r\n                      <Select.Option  value=\"m/s\">m/s<sup>2</sup></Select.Option >\r\n                  </Select>\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"point_3\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.point_3}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Point 3</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              // value={initialModalFormdata?.point_3}\r\n              // onChange={(e) => handleRadio2Chnge(\"point_3\", e)}\r\n              // value={initialModalFormdata?.point_2[0]}\r\n              value={initialModalFormdata?.point_3[0]}\r\n              onChange={(e) => {\r\n                setInitialModalFormdata((data) => {\r\n                  let val = [e.target.value, data.point_3[1]]\r\n                  \r\n                  let dt = {\r\n                      ...data,\r\n                      point_3: val\r\n                  }\r\n                  return dt\r\n                })\r\n              }}\r\n\r\n              addonAfter={\r\n                  <Select\r\n                      value={initialModalFormdata?.point_3[1]}\r\n                      defaultValue={'mm/s'}\r\n                      className=\"select-after\"\r\n                      onChange={(e) => {\r\n                          setInitialModalFormdata((data) => {\r\n                            let val = [data.point_3[0], e]\r\n                            \r\n                            return {\r\n                              ...data,\r\n                              point_3: val\r\n                            }\r\n                          })\r\n                      }}\r\n                  >\r\n                      <Select.Option  value=\"mm/s\">mm/s</Select.Option >\r\n                      <Select.Option  value=\"m/s\">m/s<sup>2</sup></Select.Option >\r\n                  </Select>\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"point_4\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.point_4}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Point 4</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              // value={initialModalFormdata?.point_4}\r\n              // onChange={(e) => handleRadio2Chnge(\"point_4\", e)}\r\n              \r\n              value={initialModalFormdata?.point_4[0]}\r\n              onChange={(e) => {\r\n                setInitialModalFormdata((data) => {\r\n                  let val = [e.target.value, data.point_4[1]]\r\n                  \r\n                  let dt = {\r\n                      ...data,\r\n                      point_4: val\r\n                  }\r\n                  return dt\r\n                })\r\n              }}\r\n\r\n              addonAfter={\r\n                  <Select\r\n                      value={initialModalFormdata?.point_4[1]}\r\n                      defaultValue={'mm/s'}\r\n                      className=\"select-after\"\r\n                      onChange={(e) => {\r\n                          setInitialModalFormdata((data) => {\r\n                            let val = [data.point_4[0], e]\r\n                            \r\n                            return {\r\n                              ...data,\r\n                              point_4: val\r\n                            }\r\n                          })\r\n                      }}\r\n                  >\r\n                      <Select.Option  value=\"mm/s\">mm/s</Select.Option >\r\n                      <Select.Option  value=\"m/s\">m/s<sup>2</sup></Select.Option >\r\n                  </Select>\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"point_5\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.point_5}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Point 5</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              // value={initialModalFormdata?.point_5}\r\n              // onChange={(e) => handleRadio2Chnge(\"point_5\", e)}\r\n              value={initialModalFormdata?.point_5[0]}\r\n              onChange={(e) => {\r\n                setInitialModalFormdata((data) => {\r\n                  let val = [e.target.value, data.point_5[1]]\r\n                  \r\n                  let dt = {\r\n                      ...data,\r\n                      point_5: val\r\n                  }\r\n                  return dt\r\n                })\r\n              }}\r\n\r\n              addonAfter={\r\n                  <Select\r\n                      value={initialModalFormdata?.point_5[1]}\r\n                      defaultValue={'mm/s'}\r\n                      className=\"select-after\"\r\n                      onChange={(e) => {\r\n                          setInitialModalFormdata((data) => {\r\n                            let val = [data.point_5[0], e]\r\n                            \r\n                            return {\r\n                              ...data,\r\n                              point_5: val\r\n                            }\r\n                          })\r\n                      }}\r\n                  >\r\n                      <Select.Option  value=\"mm/s\">mm/s</Select.Option >\r\n                      <Select.Option  value=\"m/s\">m/s<sup>2</sup></Select.Option >\r\n                  </Select>\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"point_6\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.point_6}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Point 6</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              // value={initialModalFormdata?.point_6}\r\n              // onChange={(e) => handleRadio2Chnge(\"point_6\", e)}\r\n              \r\n              value={initialModalFormdata?.point_6[0]}\r\n              onChange={(e) => {\r\n                setInitialModalFormdata((data) => {\r\n                  let val = [e.target.value, data.point_6[1]]\r\n                  let dt = {\r\n                      ...data,\r\n                      point_6: val\r\n                  }\r\n                  return dt\r\n                })\r\n              }}\r\n\r\n              addonAfter={\r\n                  <Select\r\n                      value={initialModalFormdata?.point_6[1]}\r\n                      defaultValue={'mm/s'}\r\n                      className=\"select-after\"\r\n                      onChange={(e) => {\r\n                          setInitialModalFormdata((data) => {\r\n                            let val = [data.point_6[0], e]\r\n                            return {\r\n                              ...data,\r\n                              point_6: val\r\n                            }\r\n                          })\r\n                      }}\r\n                  >\r\n                      <Select.Option on value=\"mm/s\">mm/s</Select.Option >\r\n                      <Select.Option  value=\"m/s\">m/s<sup>2</sup></Select.Option >\r\n                  </Select>\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"de_bearing\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.de_bearing}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>DE Bearing</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.de_bearing}\r\n              onChange={(e) => handleRadio2Chnge(\"de_bearing\", e)}\r\n              suffix={'g'}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"nde_bearing\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.nde_bearing}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>NDE Bearing</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.nde_bearing}\r\n              onChange={(e) => handleRadio2Chnge(\"nde_bearing\", e)}\r\n              suffix={'g'}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <Radio.Group\r\n              name=\"others\"\r\n              onChange={onRadioChange}\r\n              value={initialModalForm?.others}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <label>Others</label>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={initialModalFormdata?.others}\r\n              onChange={(e) => handleRadio2Chnge(\"others\", e)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => {\r\n            setVibrationTestModal(false);\r\n          }}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              // console.log(initialModalFormdata, initialModalForm);\r\n              setVibrationTestModal(false);\r\n              setVibrationData({\r\n                  ...vibrationData,\r\n                  point_1:{\r\n                    check: initialModalForm?.point_1,\r\n                    value:  initialModalFormdata?.point_1[0] + (initialModalFormdata?.point_1[0] && '-'+initialModalFormdata?.point_1[1])\r\n                  },\r\n                  point_2:{\r\n                    check: initialModalForm?.point_2,\r\n                    value: initialModalFormdata?.point_2[0] + (initialModalFormdata?.point_2[0] && '-'+initialModalFormdata?.point_2[1])\r\n                  },\r\n                  point_3:{\r\n                    check: initialModalForm?.point_3,\r\n                    value: initialModalFormdata?.point_3[0] + (initialModalFormdata?.point_3[0] && '-'+initialModalFormdata?.point_3[1])\r\n                  },\r\n                  point_4:{\r\n                    check: initialModalForm?.point_4,\r\n                    value: initialModalFormdata?.point_4[0] + (initialModalFormdata?.point_4[0] && '-'+initialModalFormdata?.point_4[1])\r\n                  },\r\n                  point_5:{\r\n                    check: initialModalForm?.point_5,\r\n                    value: initialModalFormdata?.point_5[0] + (initialModalFormdata?.point_5[0] && '-'+initialModalFormdata?.point_5[1])\r\n                  },\r\n                  point_6:{\r\n                    check: initialModalForm?.point_6,\r\n                    value: initialModalFormdata?.point_6[0] + (initialModalFormdata?.point_6[0] && '-'+initialModalFormdata?.point_6[1])\r\n                  },\r\n                  de_bearing:{\r\n                    check: initialModalForm?.de_bearing,\r\n                    value: initialModalFormdata?.de_bearing\r\n                  },\r\n                  nde_bearing:{\r\n                    check: initialModalForm?.nde_bearing,\r\n                    value: initialModalFormdata?.nde_bearing\r\n                  },\r\n                  others:{\r\n                    check: initialModalForm?.others,\r\n                    value: initialModalFormdata?.others\r\n                  },\r\n              })\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal></>\r\n  )\r\n}\r\n\r\nexport default EditVibrationTests","/home/faizan/jd-works/customer-web-app/src/components/shared-components/ChartWidget/FrequencySpectrumChart.js",[],"/home/faizan/jd-works/customer-web-app/src/components/shared-components/ChartWidget/Top3LineChat.js",["1438","1439"],"import { Card, Table, Tag } from 'antd';\r\nimport moment from 'moment';\r\nimport React from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\nfunction TopLineChart({ series, title, label }) {\r\n    // Convert `y` to a number and `x` to timestamp\r\n    let formattedSeries = series.map((point,index) => ({\r\n        x:  point.x,\r\n        y: Number(point.y) // Ensure `y` is a number\r\n    }));\r\n\r\n    // Sort and get the top 3 points\r\n    const sortedPoints = series\r\n        .filter(point => !isNaN(point.y))\r\n        .sort((a, b) => b.y - a.y)\r\n        .slice(0, 3);\r\n\r\n    const colors = ['#FF0000', '#00FF00', '#0000FF']; // Red, Green, Blue\r\n\r\n    const data = {\r\n        series: [\r\n            {\r\n                name: 'Amplitude',\r\n                data: formattedSeries,\r\n            },\r\n        ],\r\n        options: {\r\n            chart: {\r\n                type: 'line',\r\n                zoom: {\r\n                    enabled: true,\r\n                    type: 'x',\r\n                    autoScaleYaxis: true,\r\n                },\r\n\r\n                    animations: {\r\n                      enabled: false\r\n                    },\r\n                    markers: {\r\n                        size: 0\r\n                     }\r\n                 \r\n                  \r\n            },\r\n            dataLabels: {\r\n                enabled: false,\r\n            },\r\n            yaxis: {\r\n                labels: {\r\n                    formatter: function (val) {\r\n                        return !isNaN(val) ? Math.round(val) : 'N/A'; // Round y value to nearest integer\r\n                    },\r\n                },\r\n                title: {\r\n                    text: 'Amplitude',\r\n                    style: {\r\n                      fontSize: '14px',\r\n                      fontWeight: 'normal'\r\n                    }\r\n                  },\r\n            },\r\n            stroke: {\r\n                curve: 'straight',\r\n                width: 1,\r\n            },\r\n            xaxis: {\r\n                type: 'numeric', // Numeric type for x-axis\r\n                min: Math.min(...formattedSeries.map(p => p.x)), // Set min value based on x\r\n                max: Math.max(...formattedSeries.map(p => p.x)), // Set max value based on x\r\n                labels: {\r\n                    formatter: function (value) {\r\n                        return Math.round(value); // Round x value to nearest integer\r\n                    },\r\n                    show: true,\r\n                },\r\n                tickAmount: 6,\r\n                title: {\r\n                    text: 'Frequency (Hz)',\r\n                    style: {\r\n                      fontSize: '14px',\r\n                      fontWeight: 'normal'\r\n                    }\r\n                  }\r\n            },\r\n            tooltip: {\r\n                x: {\r\n                    formatter: (val) => `Frequency #${Math.round(val)}`, // Display whole number in tooltip\r\n                },\r\n                y:{\r\n                    formatter: (val) => `${(val)}` // Display whole number in tooltip\r\n                }\r\n            },\r\n            annotations: {\r\n                points: sortedPoints.map((point, index) => ({\r\n                    x: point.x,\r\n                    y: point.y,\r\n                    marker: {\r\n                        size: 6,\r\n                        fillColor: colors[index],\r\n                        strokeColor: '#000000',\r\n                        radius: 2,\r\n                    },\r\n                    label: {\r\n                        text: `#${index + 1}: ${Math.round(point.y)}`, // Round annotation to nearest integer\r\n                        borderColor: '#000',\r\n                        offsetY: 0,\r\n                        style: {\r\n                            color: '#fff',\r\n                            background: colors[index],\r\n                        },\r\n                    },\r\n                })),\r\n            },\r\n        },\r\n    };\r\n    \r\n    \r\n    // Table Columns with Colors\r\n    const columns = [\r\n        {\r\n            render:(text, record, index) => <div style={{\r\n                width: '10px',\r\n                height: '10px',\r\n                borderRadius: '50%',\r\n                backgroundColor: colors[index],\r\n            }} ></div>,\r\n        },\r\n        // {\r\n        //     title: 'Time',\r\n        //     dataIndex: 'x',\r\n        //     key: 'time',\r\n        //     render: (time) => moment(time).format('DD-MM-YYYY hh:mm A'),\r\n        // },\r\n        {\r\n            title: 'Frequency (Hz)',\r\n            dataIndex: 'x',\r\n            key: 'point',\r\n            render: (freq) => freq.toFixed(2),\r\n            \r\n        },\r\n        {\r\n            title: 'Amplitude',\r\n            dataIndex: 'y',\r\n            key: 'amplitude',\r\n            render: (amplitude, record, index) => (\r\n               <div style={{ fontWeight: 'bold' }}>\r\n                    {amplitude}\r\n                </div>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div style={{ display: 'flex', gap: '20px' }}>\r\n            <Card style={{ flex: 1 }}>\r\n                <div style={{ fontWeight: 'bold', fontSize: '17px', color: '#000000' }}>\r\n                    {title}\r\n                </div>\r\n                <ReactApexChart options={data.options} series={data.series} type=\"line\" height={370} />\r\n                <div style={{ fontWeight: 'bold', fontSize: '12px', color: '#72849A', textAlign: 'center', marginTop: '10px' }}>\r\n                    {label}\r\n                </div>\r\n            </Card>\r\n\r\n            {/* Table for Top 3 Amplitudes */}\r\n            <Card style={{ width: '20%' }}>\r\n                <Table\r\n                    dataSource={sortedPoints}\r\n                    columns={columns}\r\n                    pagination={false}\r\n                    size=\"small\"\r\n                    rowKey=\"x\"\r\n                />\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TopLineChart;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Winding-Electrical-Tests/StatorWindingElectricalTests.js",["1440","1441","1442","1443","1444","1445","1446"],"import React, { useState } from 'react'\r\nimport { Button, Collapse, Input, Radio, DatePicker } from \"antd\";\r\nimport {\r\n\r\n    WhiteImageIcon,\r\n    AuxilleryChecksIcon,\r\n} from \"assets/svg/icon\";\r\n\r\nimport {\r\n    EditOutlined,\r\n    HistoryOutlined,\r\n} from \"@ant-design/icons\";\r\nimport EditStatorWindingElectricalTests from './EditStatorWindingElectricalTests';\r\n\r\nconst StatorWindingElectricalTests = ({\r\n    setStatorWindingData,\r\n    statorWindingData,\r\n\r\n    setUploadModal, \r\n    setUploadImageType,\r\n    setImageMarkings,\r\n    UploadImageMarkingKonva,\r\n    setEditImageId,\r\n    setSelectedImageTemp,\r\n    delSubUploadedPhoto\r\n}) => {\r\n    const [editStatus, setEditStatus] = useState(false);\r\n    const { Panel } = Collapse;\r\n\r\n    const [modalName, setModalName] = useState(\"\");\r\n    const [editKey, setEditKey] = useState(\"\");\r\n    const [editData, setEditData] = useState(\"\");\r\n    const [suffixData, setSuffixData] = useState(\r\n        {\r\n            \"U1-U2\": 'mΩ',\r\n            \"U-V\": 'mΩ',\r\n            \"V1-V2\": 'mΩ',\r\n            \"U-W\": 'mΩ',\r\n            \"W1-W2\": 'mΩ',\r\n            \"V-W\": 'mΩ',\r\n\r\n            \"UVW-E\": 'mΩ',\r\n            \"U-E\": 'mΩ',\r\n            \"V-E\": 'mΩ',\r\n            \"W-E\": 'mΩ',\r\n            \"U-V\": 'mΩ',\r\n            \"V-W\": 'mΩ',\r\n            \"U-W\": 'mΩ',\r\n            \"Test Volt\": 'V',\r\n\r\n            \"K-L\": 'mΩ',\r\n            \"K-M\": 'mΩ',\r\n            \"L-M\": 'mΩ',\r\n\r\n            \"KLM-E\": 'mΩ',\r\n            \"K-E\": 'mΩ',\r\n            \"L-E\": 'mΩ',\r\n            \"M-E\": 'mΩ',\r\n\r\n            \"Ins 1 min\": 'mΩ',\r\n            \"Ins 10 min\": 'mΩ',\r\n        },\r\n    );\r\n\r\n\r\n    const getSuffixSplitValue = (internalData) => {\r\n        if(suffixData[internalData?.name]) {\r\n            if(internalData.value?.includes('-')) {\r\n                let value = internalData.value?.split('-')\r\n                return value[value.length-1]\r\n            } else {\r\n                return suffixData[internalData?.name]\r\n            }\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    const convertImageToBase64 = async (imageUrl, markings) => {\r\n        try {\r\n            const response = await fetch(imageUrl, { mode: \"cors\" }); // Ensure CORS is allowed\r\n            const blob = await response.blob(); // Convert response to Blob\r\n            const reader = new FileReader();\r\n            \r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n            let base64 = reader.result;\r\n            if(base64) {\r\n                UploadImageMarkingKonva(base64, markings);\r\n            }\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error fetching image:\", error);\r\n        }\r\n    };\r\n    \r\n  return (\r\n    <div className=\"normal-header-color\">\r\n        {editStatus && <EditStatorWindingElectricalTests modalName={modalName} editStatus={editStatus} setEditStatus={setEditStatus}\r\n        editData={editData} editKey={editKey} suffixData={suffixData} setSuffixData={setSuffixData} \r\n        setStatorWindingData={setStatorWindingData} />}\r\n        {\r\n            statorWindingData.map((item, i) => {\r\n                return (\r\n                        <Collapse\r\n                            key={i} // Added key prop to Collapse component\r\n                            expandIconPosition={\"end\"}\r\n                            // onChange={(data) => console.log(data)}\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Panel\r\n                                key={i}\r\n                                header={\r\n                                    <>\r\n                                        <span className=\"d-flex align-items-centr\" style={{ gap: \"5px\" }}>\r\n                                            <AuxilleryChecksIcon /> {item?.title}{\" \"}\r\n                                            <span style={{ color: \"grey\", fontSize: \"14px\" }} className=\"font-weight-300 ml-2\">\r\n                                                {\" \"}\r\n                                                <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                                            </span>\r\n                                        </span>\r\n                                        <span className=\"customEditButton\" style={{ gap: \"5px\" }}>\r\n                                            {/* <Button\r\n                                                className=\"bg-primary text-white mr-1\"\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    console.log(\"add\");\r\n                                                }}\r\n                                            >\r\n                                                +\r\n                                            </Button> */}\r\n\r\n                                            <Button onClick={() => {\r\n                                                    // e.stopPropagation();\r\n                                                    setUploadModal(true);\r\n                                                    setUploadImageType(`Stator-Winding ~ ${item?.title}`);\r\n                                                }} className=\"bg-primary text-white mr-1\">\r\n                                                    <WhiteImageIcon />\r\n                                            </Button>\r\n\r\n                                            <Button onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                setEditStatus(true)\r\n\r\n                                                setModalName(statorWindingData[i].title);\r\n                                                setEditKey(statorWindingData[i].key);\r\n                                                setEditData(statorWindingData[i].data)\r\n                                                setEditStatus(true);\r\n\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <EditOutlined />\r\n\r\n                                            </Button>\r\n                                        </span>\r\n                                    </>\r\n                                }\r\n                            >\r\n                                {\r\n                                    item.data.map((internalData, k) => {\r\n                                        return (\r\n                                            <>\r\n                                                <div className={`${internalData.check == 1 ? 'green' : (internalData.check == 2 ? 'red' : 'grey')}-radio`} key={k}>\r\n\r\n                                                    <div className=\"mb-4 mt-3 d-flex justify-content-between\">\r\n                                                        <Radio\r\n                                                            style={{ width: \"30%\" }}\r\n                                                            checked={internalData.check}\r\n                                                        >\r\n                                                            {internalData.name}\r\n                                                        </Radio>\r\n                                                        {internalData.name == 'Date' ? \r\n                                                        <DatePicker\r\n                                                            style={{ width: \"70%\" }}\r\n                                                            placeholder=\"Select date\"\r\n                                                            value={internalData.value}\r\n                                                            format={'DD-MM-YYYY'}\r\n                                                            disabled\r\n                                                        />\r\n                                                        : \r\n                                                        <Input\r\n                                                            style={{ width: \"70%\" }}\r\n                                                            placeholder=\"Type here...\"\r\n                                                            // value={internalData.value?.includes('-') ? internalData.value?.split('-')[0] : internalData.value}\r\n                                                            value={suffixData[internalData.name] ? \r\n                                                                internalData.value?.split('-')[0] : internalData.value}\r\n                                                            suffix={getSuffixSplitValue(internalData)}\r\n                                                            disabled\r\n                                                        /> }\r\n                                                    </div>\r\n                                                </div>\r\n                                            </>\r\n                                        );\r\n                                    })\r\n                                }\r\n\r\n                                <div className=\"mt-5\">\r\n                                    <h5>Uploaded Photos</h5>\r\n                                    <div className=\"dashed-border p-2\">\r\n                                        {item.photos.map((image, index) => (\r\n                                            <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                                                <div className='w-75 d-flex flex-column align-items-start'>\r\n                                                    <img\r\n                                                    src={image.url}\r\n                                                    alt={`Image ${index}`}\r\n                                                    style={{\r\n                                                    // width: \"200px\",\r\n                                                    height: \"200px\",\r\n                                                    marginRight: \"10px\",\r\n                                                    }}\r\n                                                    />\r\n                                                    <div className='diflex justify-content-start'>\r\n                                                        <Button type='primary' className='mt-2' onClick={() => {\r\n                                                                setEditImageId(image.id);\r\n                                                                setUploadModal(true);\r\n                                                                setUploadImageType(`Stator-Winding ~ ${item?.title}`);\r\n                                                                setSelectedImageTemp(image.url_unmodified);\r\n                                                                setImageMarkings(image.image_markings);\r\n                                                                if(image.url_unmodified.includes('http')) {\r\n                                                                    convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                                                } else {\r\n                                                                    setTimeout(() => {\r\n                                                                        UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                                                    }, 500);\r\n                                                                }\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Edit Photo\r\n                                                        </Button>\r\n\r\n                                                        <Button className='mt-2 ml-2' onClick={() => {\r\n                                                                delSubUploadedPhoto(index, `Stator-Winding ~ ${item?.title}`)\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Delete Photo\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <h4>Markings</h4>\r\n                                                    {image.image_markings.length > 0 ?\r\n                                                        image.image_markings.map((marking, index) => (\r\n                                                            marking.text && <div>\r\n                                                                <b>{index+1}. </b>{marking.text}\r\n                                                            </div>\r\n                                                        ))\r\n                                                        : <div><i>No Markings Added</i></div>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </Panel>\r\n                        </Collapse>\r\n                )\r\n            })\r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StatorWindingElectricalTests","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Auxiliaries-Checks/AuxiliariesChecks.js",["1447","1448","1449","1450","1451","1452","1453","1454","1455","1456","1457","1458","1459"],"import React, { useState } from 'react'\r\nimport { Button, Collapse, Input, Radio } from \"antd\";\r\nimport {\r\n    WhiteImageIcon,\r\n    AuxilleryChecksIcon,\r\n} from \"assets/svg/icon\";\r\n\r\nimport {\r\n    EditOutlined,\r\n    HistoryOutlined,\r\n} from \"@ant-design/icons\";\r\nimport EditAuxiliariesChecks from './EditAuxiliariesChecks';\r\n\r\nconst AuxiliariesChecks = ({\r\n    auxiliariesChecksData, \r\n    setAuxiliariesChecksData,\r\n\r\n    setUploadModal, \r\n    setUploadImageType,\r\n    setImageMarkings,\r\n    UploadImageMarkingKonva,\r\n    setEditImageId,\r\n    setSelectedImageTemp,\r\n    delSubUploadedPhoto\r\n}) => {\r\n    const [editStatus, setEditStatus] = useState(false);\r\n    const { Panel } = Collapse;\r\n    console.log(auxiliariesChecksData)\r\n\r\n    const [modalName, setModalName] = useState(\"\");\r\n    const [editKey, setEditKey] = useState(\"\");\r\n    const [editData, setEditData] = useState(\"\");\r\n    const [suffixData, setSuffixData] = useState(\r\n        {\r\n            \"Insulation\": 'E',\r\n            \"Result - Insulation\": 'MΩ',\r\n            \"Resistance\": 'KΩ',\r\n            \"Result - Resistance\": 'Ω',\r\n            \"Test Volt\": 'V',\r\n            \"Act Volt\": 'V',\r\n            \"DC Volt\": 'V',\r\n            \"Current\": 'A',\r\n        },\r\n    );\r\n\r\n\r\n    const getSuffixSplitValue = (internalData) => {\r\n        if(suffixData[getSuffixIndex(internalData)]) {\r\n            if(internalData.value?.includes('-')) {\r\n                let value = internalData.value?.split('-');\r\n                return value[value.length-1]\r\n            } \r\n            else {\r\n                return suffixData[getSuffixIndex(internalData)]\r\n            }\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    const getResistanceSuffixSplitValue = (internalData, index) => {\r\n        if(internalData.value) {\r\n            let val = internalData.value?.split(' ~ ');\r\n            if(val[index]) {\r\n                let value = val[index].split('-')\r\n                return value[value.length-1]\r\n            } else {\r\n                return suffixData['Resistance']\r\n            }\r\n        } else {\r\n            return suffixData['Resistance']\r\n        }\r\n    }\r\n\r\n    const getSuffixIndex = (data) => {\r\n        let key = '';\r\n        if(modalName == 'Heater' || modalName == 'Brake') {\r\n            if(+data.key == 2) {\r\n                key = 'Result - Insulation'\r\n            }\r\n            else if(+data.key == 4) {\r\n                key = 'Result - Resistance'\r\n            } else {\r\n                key = data.name\r\n            }\r\n        } else if(modalName == 'Thermistor' || modalName == 'Thermostat' || modalName == 'PT-100') {\r\n            if(+data.key == 2) {\r\n                key = 'Result - Resistance'\r\n            }\r\n        } else  {\r\n            key = data.name\r\n        }\r\n        // console.log(key)\r\n        let sf_name_found =  Object.keys(suffixData).find((e) => e == key);\r\n        if(sf_name_found) {\r\n            return sf_name_found\r\n        } else {\r\n            return null\r\n        }\r\n    };\r\n\r\n    const convertImageToBase64 = async (imageUrl, markings) => {\r\n        try {\r\n            const response = await fetch(imageUrl, { mode: \"cors\" }); // Ensure CORS is allowed\r\n            const blob = await response.blob(); // Convert response to Blob\r\n            const reader = new FileReader();\r\n            \r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n            let base64 = reader.result;\r\n            if(base64) {\r\n                UploadImageMarkingKonva(base64, markings);\r\n            }\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error fetching image:\", error);\r\n        }\r\n    };\r\n    \r\n  return (\r\n    <div className=\"normal-header-color\">\r\n        {editStatus && <EditAuxiliariesChecks modalName={modalName} editStatus={editStatus} setEditStatus={setEditStatus}\r\n        editData={editData} editKey={editKey} suffixData={suffixData} setSuffixData={setSuffixData} \r\n        setAuxiliariesChecksData={setAuxiliariesChecksData} />}\r\n        {\r\n            auxiliariesChecksData.map((item, i) => {\r\n                return (\r\n                    <Collapse\r\n                        key={i} // Added key prop to Collapse component\r\n                        expandIconPosition={\"end\"}\r\n                        onChange={(data) => console.log(data)}\r\n                        className=\"mb-3\"\r\n                    >\r\n                        <Panel\r\n                            key={i}\r\n                            header={\r\n                                <>\r\n                                    <span className=\"d-flex align-items-centr\" style={{ gap: \"5px\" }}>\r\n                                        <AuxilleryChecksIcon /> {item?.title}{\" \"}\r\n                                        <span style={{ color: \"grey\", fontSize: \"14px\" }} className=\"font-weight-300 ml-2\">\r\n                                            {\" \"}\r\n                                            <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                                        </span>\r\n                                    </span>\r\n                                    <span className=\"customEditButton\" style={{ gap: \"5px\" }}>\r\n                                        {/* <Button\r\n                                            className=\"bg-primary text-white mr-1\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                console.log(\"add\");\r\n                                            }}\r\n                                        >\r\n                                            +\r\n                                        </Button> */}\r\n\r\n                                        <Button onClick={(e) => {\r\n                                                // e.stopPropagation();\r\n                                                setUploadModal(true);\r\n                                                setUploadImageType(`Auxiliary-Checks ~ ${item?.title}`);\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <WhiteImageIcon />\r\n                                        </Button>\r\n\r\n                                        <Button onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            setEditStatus(true)\r\n\r\n                                            setModalName(auxiliariesChecksData[i].title);\r\n                                            setEditKey(auxiliariesChecksData[i].key);\r\n                                            setEditData(auxiliariesChecksData[i].data)\r\n                                            setEditStatus(true);\r\n\r\n                                        }} className=\"bg-primary text-white mr-1\">\r\n                                            <EditOutlined />\r\n\r\n                                        </Button>\r\n                                    </span>\r\n                                </>\r\n                            }\r\n                        >\r\n                            {\r\n                                item.data.map((internalData, k) => {\r\n                                    return (\r\n                                        <>\r\n                                            <div className={`${internalData.check == 1 ? 'green' : (internalData.check == 2 ? 'red' : 'grey')}-radio`} key={k}>\r\n\r\n                                                <div className=\"mb-4 mt-3 d-flex justify-content-between\">\r\n                                                    <Radio\r\n                                                        style={{ width: \"30%\" }}\r\n                                                        checked={internalData.check}\r\n                                                    >\r\n                                                        {internalData.name}\r\n                                                    </Radio>\r\n                                                    {!(internalData.name == 'Resistance') ? \r\n                                                        <Input\r\n                                                            style={{ width: \"70%\" }}\r\n                                                            placeholder=\"Type here...\"\r\n                                                            // value={internalData.value?.includes('-') ? internalData.value?.split('-')[0] : internalData.value}\r\n                                                            value={suffixData[getSuffixIndex(internalData)] ? \r\n                                                                internalData.value?.split('-')[0] : internalData.value}\r\n                                                            suffix={getSuffixSplitValue(internalData)}\r\n                                                            disabled\r\n                                                        />\r\n                                                        :\r\n                                                        <div style={{ width: \"70%\" }} className='d-flex justify-content-between'>\r\n                                                            <Input\r\n                                                                style={{ width: \"47%\" }}\r\n                                                                // placeholder=\"Type here...\"\r\n                                                                value={internalData.value ? \r\n                                                                    (internalData.value?.split(' ~ ')[0] ? internalData.value?.split(' ~ ')[0].split('-')[0] : internalData.value?.split(' ~ ')[0]) \r\n                                                                    : internalData.value}\r\n                                                                suffix={getResistanceSuffixSplitValue(internalData, 0)}\r\n                                                                disabled\r\n                                                            />\r\n                                                            <div className='d-flex align-items-center'><h4>-</h4></div>\r\n                                                            <Input\r\n                                                                style={{ width: \"47%\" }}\r\n                                                                // placeholder=\"Type here...\"\r\n                                                                value={internalData.value ? \r\n                                                                    (internalData.value?.split(' ~ ')[1] ? internalData.value?.split(' ~ ')[1].split('-')[0] : internalData.value?.split(' ~ ')[1]) \r\n                                                                    : internalData.value}\r\n                                                                suffix={getResistanceSuffixSplitValue(internalData, 1)}\r\n                                                                disabled\r\n                                                            />\r\n                                                        </div>\r\n\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        </>\r\n                                    );\r\n                                })\r\n                            }\r\n\r\n                            <div className=\"mt-5\">\r\n                                    <h5>Uploaded Photos</h5>\r\n                                    <div className=\"dashed-border p-2\">\r\n                                        {item.photos.map((image, index) => (\r\n                                            <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                                                <div className='w-75 d-flex flex-column align-items-start'>\r\n                                                    <img\r\n                                                    src={image.url}\r\n                                                    alt={`Image ${index}`}\r\n                                                    style={{\r\n                                                    // width: \"200px\",\r\n                                                    height: \"200px\",\r\n                                                    marginRight: \"10px\",\r\n                                                    }}\r\n                                                    />\r\n                                                    <div className='diflex justify-content-start'>\r\n                                                        <Button type='primary' className='mt-2' onClick={() => {\r\n                                                                setEditImageId(image.id);\r\n                                                                setUploadModal(true);\r\n                                                                setUploadImageType(`Auxiliary-Checks ~ ${item?.title}`);\r\n                                                                setSelectedImageTemp(image.url_unmodified);\r\n                                                                setImageMarkings(image.image_markings);\r\n                                                                if(image.url_unmodified.includes('http')) {\r\n                                                                    convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                                                } else {\r\n                                                                    setTimeout(() => {\r\n                                                                        UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                                                    }, 500);\r\n                                                                }\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Edit Photo\r\n                                                        </Button>\r\n\r\n                                                        <Button className='mt-2 ml-2' onClick={() => {\r\n                                                                delSubUploadedPhoto(index, `Auxiliary-Checks ~ ${item?.title}`)\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Delete Photo\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <h4>Markings</h4>\r\n                                                    {image.image_markings.length > 0 ?\r\n                                                        image.image_markings.map((marking, index) => (\r\n                                                            marking.text && <div>\r\n                                                                <b>{index+1}. </b>{marking.text}\r\n                                                            </div>\r\n                                                        ))\r\n                                                        : <div><i>No Markings Added</i></div>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                        </Panel>\r\n                    </Collapse>\r\n                )\r\n            })\r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AuxiliariesChecks","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/MiscellenousReport/MiscelleneousReport.js",["1460","1461","1462","1463","1464","1465","1466","1467","1468","1469","1470","1471","1472"],"import React, { useState } from 'react'\r\nimport { Collapse, Button, Upload, Form } from 'antd';\r\nimport { UploadFileIcon } from 'assets/svg/icon';\r\nimport { CloseCircleOutlined } from '@ant-design/icons';\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\r\nimport { ViewDetailsIcon } from 'assets/svg/icon'\r\nimport { EditOutlined, HistoryOutlined, EyeOutlined } from '@ant-design/icons'\r\nimport ReportSerchIcon from \"assets/svg/greenSearch.png\";\r\nimport { UploadFile, UploadImage } from \"utils/Upload\";\r\n\r\nconst MiscelleneousReport = ({miscelleneousReportData, setMiscelleneousReportData}) => {\r\n    const history = useHistory();\r\n    // const { Panel } = Collapse;\r\n\r\n    let styles = {\r\n        files: {\r\n            listStyle: \"none\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            gap: \"13px\",\r\n            border: \"1px solid lightblue\",\r\n            padding: \"10px\",\r\n            borderRadius: \"9px\",\r\n            background: \"#0093ff0a\",\r\n        },\r\n        uploadFile: {\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            opacity: 0,\r\n        },\r\n\r\n        // Add the new styles here:\r\n\r\n        \".uploadFile::-webkit-file-upload-button\": {\r\n            visibility: \"hidden\",\r\n        },\r\n\r\n        \".uploadFile::before\": {\r\n            content: \"'Drag & Drop'\",\r\n            display: \"inline-block\",\r\n            padding: \"10px\",\r\n            border: \"1px solid #ccc\",\r\n            borderRadius: \"4px\",\r\n            cursor: \"pointer\",\r\n        },\r\n\r\n        \".uploadFile:hover::before\": {\r\n            backgroundColor: \"#ccc\",\r\n        },\r\n    };\r\n\r\n    const [machineStatus, setMachineStatus] = useState(false)\r\n    const onFinish = (values) => {\r\n        console.log('Form values:', values);\r\n        // Add logic to handle form submission\r\n    };\r\n\r\n    // function handleFileSelect(event) {\r\n    const handleFileSelect = async (event) => {\r\n        const fileList = event.target.files;\r\n        console.log(fileList);\r\n\r\n        const newSelectedFiles = [];\r\n        for (let i = 0; i < fileList.length; i++) {\r\n            // newSelectedFiles.push(fileList[i]);\r\n            console.log(fileList[i]);\r\n\r\n            if(fileList[i]) {\r\n                const url = await UploadImage(fileList[i]);\r\n                newSelectedFiles.push({\r\n                    name: (fileList[i] && fileList[i].name) || '',\r\n                    url: url\r\n                });\r\n            }\r\n\r\n        }\r\n        console.log(newSelectedFiles);\r\n        // setMiscelleneousReportData([...miscelleneousReportData, newSelectedFiles[0]]);\r\n        setMiscelleneousReportData([...miscelleneousReportData, ...newSelectedFiles]);\r\n    }\r\n\r\n    const delUplFile = (i) => {\r\n        let AfterDeleteFile = miscelleneousReportData.filter((elem, index) => {\r\n            return index !== i;\r\n        });\r\n        setMiscelleneousReportData(AfterDeleteFile);\r\n        console.log(AfterDeleteFile)\r\n    };\r\n\r\n    function handleBackClick() {\r\n        // if (activeTab > 1 && activeTab <= 7) {\r\n        //   let actnum = Number(activeTab) - 1;\r\n        //   setActiveTab(actnum.toString());\r\n        // }\r\n\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <h5 className='m-0 mt-2'>\r\n                Upload Files\r\n            </h5>\r\n            <div className=\" p-3\">\r\n                <div className=\"d-flex flex-column justify-content-center align-items-center position-relative uploaddoc\">\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"64\"\r\n                        height=\"64\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 64 64\"\r\n                    >\r\n                        <path\r\n                            fill={\"#3CA6C1\"}\r\n                            d=\"M18.57 15.51l7.86 7a2 2 0 001.33.51H56v34.9A2.93 2.93 0 0153.26 61H5.74A2.93 2.93 0 013 57.92V18a2.85 2.85 0 012.68-3h11.56a2 2 0 011.33.51z\"\r\n                        ></path>\r\n                        <path fill=\"#D7E6EF\" d=\"M49 57H7V3h42v54z\"></path>\r\n                        <path\r\n                            fill={\"#3CA6C1\"}\r\n                            d=\"M45 23h16v-6a2 2 0 00-2-2h-6l-8 8z\"\r\n                        ></path>\r\n                        <path fill=\"#F7FCFF\" d=\"M14 9h42v14H14V9z\"></path>\r\n                        <path\r\n                            fill={\"#3CA6C1\"}\r\n                            d=\"M25.69 15.51l7.42 7a1.8 1.8 0 001.25.51H61v34.9A2.87 2.87 0 0158.41 61H13.59A2.87 2.87 0 0111 57.92V18a2.79 2.79 0 012.53-3h10.9c.47 0 .922.184 1.26.51z\"\r\n                        ></path>\r\n                        <path\r\n                            fill=\"#F7FCFF\"\r\n                            d=\"M36 55c7.18 0 13-5.82 13-13s-5.82-13-13-13-13 5.82-13 13 5.82 13 13 13z\"\r\n                        ></path>\r\n                        <path\r\n                            fill=\"#D7E6EF\"\r\n                            d=\"M52 13H32a1 1 0 000 2h20a1 1 0 000-2zm0 4H37a1 1 0 000 2h15a1 1 0 000-2z\"\r\n                        ></path>\r\n                        <path\r\n                            fill=\"#44394A\"\r\n                            d=\"M36.5 49.28l6.72-6.72a5.501 5.501 0 00-7.78-7.78l-8.84 8.84a1.002 1.002 0 000 1.42A1 1 0 0028 45l8.84-8.84a3.5 3.5 0 114.95 4.95l-6.71 6.71a1.998 1.998 0 01-3.38-.571A2 2 0 0132.26 45L39 38.32a.5.5 0 01.71 0 .48.48 0 010 .71l-6 6a1 1 0 101.42 1.41l6-6a2.503 2.503 0 00-3.54-3.54l-6.72 6.72a4 4 0 000 5.66 4.003 4.003 0 005.66 0h-.03z\"\r\n                        ></path>\r\n                    </svg>\r\n                    <h5 className=\"mb-0 mt-2\">Drag & Drop Files Here</h5>\r\n                    <h5 className=\"mb-0\">Or</h5>\r\n                    <h5 className=\"mb-0\" style={{ color: \"#3CA6C1\" }}>\r\n                        Click here to upload\r\n                    </h5>\r\n                    <input\r\n                        style={styles.uploadFile}\r\n                        className=\"uploadFile\"\r\n                        type=\"file\"\r\n                        multiple\r\n                        onChange={handleFileSelect}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                    {miscelleneousReportData.length > 0 && (\r\n                        <ul className=\"p-0\" style={{ width: \"40%\" }}>\r\n                            {miscelleneousReportData.map((file, i) => (\r\n                                <li key={file.name} className=\"my-3\" style={styles.files}>\r\n                                    {\" \"}\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <UploadFileIcon />{\" \"}\r\n                                        <span className=\"ml-2\">{file.name} </span>{\" \"}\r\n                                    </div>\r\n                                    <span className=\"ml-5\">\r\n                                        {file.url ? (  <EyeOutlined style={{ cursor: \"pointer\" }} onClick={() => window.open(file.url)} />) : null}\r\n                                    </span>\r\n                                    <span\r\n                                        style={{ cursor: \"pointer\" }}\r\n                                        onClick={() => delUplFile(i)}\r\n                                    >\r\n                                        {\" \"}\r\n                                        <CloseCircleOutlined />{\" \"}\r\n                                    </span>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* <div className=\"d-flex justify-content-between\">\r\n                <h4 className=\"d-flex align-items-center\">\r\n                    {\" \"}\r\n                    <ViewDetailsIcon /> View Details{\" \"}\r\n                    <span\r\n                        style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                        className=\"font-weight-300 ml-2\"\r\n                    >\r\n                        {\" \"}\r\n                        <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                    </span>{\" \"}\r\n                </h4>\r\n                <Button\r\n                    className=\"bg-primary text-white\"\r\n                // onClick={() => setJobRefModal(true)}\r\n                >\r\n                    {\" \"}\r\n                    <EditOutlined /> Edit\r\n                </Button>\r\n            </div>\r\n            <div className=\"grey-table mt-3\">\r\n\r\n                <Upload className='upload' >\r\n                    <Button>fb</Button>\r\n                </Upload>\r\n            </div> */}\r\n\r\n            {/* <Form.Item>\r\n                <div\r\n                    style={{ gap: \"10px\" }}\r\n                    className=\"mt-5 d-flex justify-content-end\"\r\n                >\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold\"\r\n                        htmlType=\"button\"\r\n                        onClick={handleBackClick}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                    <Button\r\n                        className=\"px-4 font-weight-semibold text-white bg-primary\"\r\n                        htmlType=\"submit\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Form.Item> */}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MiscelleneousReport","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Free-Volume-Check/FreeVolumeCheck.js",["1473","1474","1475"],"import React, { useState } from 'react'\r\nimport { Button, Collapse, Input, Radio } from \"antd\";\r\nimport {\r\n\r\n    WhiteImageIcon,\r\n    AuxilleryChecksIcon,\r\n} from \"assets/svg/icon\";\r\n\r\nimport {\r\n    EditOutlined,\r\n    HistoryOutlined,\r\n} from \"@ant-design/icons\";\r\nimport EditFreeVolumeCheck from './EditFreeVolumeCheck';\r\n\r\nconst FreeVolumeCheck = ({\r\n    freeVolumeData, \r\n    setFreeVolumeData,\r\n\r\n    setUploadModal, \r\n    setUploadImageType,\r\n    setImageMarkings,\r\n    UploadImageMarkingKonva,\r\n    setEditImageId,\r\n    setSelectedImageTemp,\r\n    delSubUploadedPhoto\r\n }) => {\r\n    const { Panel } = Collapse;\r\n    const [editStatus, setEditStatus] = useState(false);\r\n    const [modalName, setModalName] = useState(\"\");\r\n    const [editKey, setEditKey] = useState(\"\");\r\n    const [editData, setEditData] = useState(\"\");\r\n    const [suffixData, setSuffixData] = useState(\r\n        {\r\n            \"Motor Frame inner dia 'a'\": 'cm',\r\n            \"Motor Core length 'b'\": 'cm',\r\n            \"Motor Core Length 'f'\": 'cm',\r\n            \"Width\": 'cm',\r\n            \"Breadth\": 'cm',\r\n            \"Height\": 'cm',\r\n            \"T-box internal width 'w'\": 'cm',\r\n            \"T-box internal breadth 'b'\": 'cm',\r\n            \"T-box internal height 'h'\": 'cm',\r\n            \"T-Box internal breadth 'h'\": 'cm',\r\n            \"Diameter\": 'cm',\r\n            \"T-box internal breadth 'h'\": 'cm',\r\n        },\r\n    );\r\n\r\n\r\n    const getSuffixSplitValue = (internalData) => {\r\n        if(suffixData[internalData?.name]) {\r\n            if(internalData.value?.includes('-')) {\r\n                let value = internalData.value?.split('-')\r\n                return value[value.length-1]\r\n            } else {\r\n                return suffixData[internalData?.name]\r\n            }\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    const convertImageToBase64 = async (imageUrl, markings) => {\r\n        try {\r\n            const response = await fetch(imageUrl, { mode: \"cors\" }); // Ensure CORS is allowed\r\n            const blob = await response.blob(); // Convert response to Blob\r\n            const reader = new FileReader();\r\n            \r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n            let base64 = reader.result;\r\n            if(base64) {\r\n                UploadImageMarkingKonva(base64, markings);\r\n            }\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error fetching image:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"normal-header-color\">\r\n            {editStatus && <EditFreeVolumeCheck modalName={modalName} editStatus={editStatus} setEditStatus={setEditStatus} \r\n            editData={editData} editKey={editKey} suffixData={suffixData} setSuffixData={setSuffixData} \r\n            freeVolumeData={freeVolumeData} setFreeVolumeData={setFreeVolumeData} />}\r\n\r\n            {\r\n                freeVolumeData.map((item, i) => {\r\n                    // console.log(\"k\" + key + \" \" + JSON.stringify(item))\r\n                    // console.log(item[`data${i + 1}`]?.[`edit${i + 1}`]);\r\n                    \r\n                    return (\r\n\r\n                        <Collapse\r\n                            key={i} // Added key prop to Collapse component\r\n                            expandIconPosition={\"end\"}\r\n                            // onChange={(data) => console.log(data)}\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Panel\r\n                                key={i}\r\n                                header={\r\n                                    <>\r\n                                        <span className=\"d-flex align-items-centr\" style={{ gap: \"5px\" }}>\r\n                                            <AuxilleryChecksIcon /> {item?.title}{\" \"}\r\n                                            <span style={{ color: \"grey\", fontSize: \"14px\" }} className=\"font-weight-300 ml-2\">\r\n                                                {\" \"}\r\n                                                <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                                            </span>\r\n                                        </span>\r\n                                        <span className=\"customEditButton\" style={{ gap: \"5px\" }}>\r\n                                            {/* <Button\r\n                                                className=\"bg-primary text-white mr-1\"\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    console.log(\"add\");\r\n                                                }}\r\n                                            >\r\n                                                +\r\n                                            </Button> */}\r\n\r\n                                            <Button onClick={(e) => {\r\n                                                // e.stopPropagation();\r\n                                                setUploadModal(true);\r\n                                                setUploadImageType(`Free-Volume ~ ${item?.title}`);\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <WhiteImageIcon />\r\n                                            </Button>\r\n\r\n                                            <Button onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                setEditStatus(true)\r\n\r\n                                                setModalName(freeVolumeData[i].title);\r\n                                                setEditKey(freeVolumeData[i].key);\r\n                                                setEditData(freeVolumeData[i].data)\r\n                                                setEditStatus(true);\r\n\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <EditOutlined />\r\n\r\n                                            </Button>\r\n                                        </span>\r\n                                    </>\r\n                                }\r\n                            >\r\n                                {\r\n                                    item.data.map((internalData, k) => {\r\n                                        return (\r\n                                            <>\r\n                                                <div className={`${internalData.check == 1 ? 'green' : (internalData.check == 2 ? 'red' : 'grey')}-radio`} key={k}>\r\n\r\n                                                    <div className=\"mb-4 mt-3 d-flex justify-content-between\">\r\n                                                        <Radio\r\n                                                            style={{ width: \"30%\" }}\r\n                                                            checked={internalData.check}\r\n                                                        >\r\n                                                            {internalData.name}\r\n                                                        </Radio>\r\n                                                        <Input\r\n                                                            style={{ width: \"70%\" }}\r\n                                                            placeholder=\"Type here...\"\r\n                                                            value={suffixData[internalData.name] ? internalData.value?.split('-')[0] : internalData.value}\r\n                                                            // suffix={internalData.value?.includes('-') ? \r\n                                                            //     internalData.value?.split('-')[1] : 'cm'}\r\n                                                            suffix={getSuffixSplitValue(internalData)}\r\n                                                            disabled\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </>\r\n                                        );\r\n                                    })\r\n                                }\r\n\r\n                                <div className=\"mt-5\">\r\n                                    <h5>Uploaded Photos</h5>\r\n                                    <div className=\"dashed-border p-2\">\r\n                                        {item?.photos.map((image, index) => (\r\n                                            <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                                                <div className='w-75 d-flex flex-column align-items-start'>\r\n                                                    <img\r\n                                                    src={image.url}\r\n                                                    alt={`Image ${index}`}\r\n                                                    style={{\r\n                                                    // width: \"200px\",\r\n                                                    height: \"200px\",\r\n                                                    marginRight: \"10px\",\r\n                                                    }}\r\n                                                    />\r\n                                                    <div className='diflex justify-content-start'>\r\n                                                        <Button type='primary' className='mt-2' onClick={() => {\r\n                                                                setEditImageId(image.id);\r\n                                                                setUploadModal(true);\r\n                                                                setUploadImageType(`Free-Volume ~ ${item?.title}`);\r\n                                                                setSelectedImageTemp(image.url_unmodified);\r\n                                                                setImageMarkings(image.image_markings);\r\n                                                                if(image.url_unmodified.includes('http')) {\r\n                                                                    convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                                                } else {\r\n                                                                    setTimeout(() => {\r\n                                                                        UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                                                    }, 500);\r\n                                                                }\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Edit Photo\r\n                                                        </Button>\r\n\r\n                                                        <Button className='mt-2 ml-2' onClick={() => {\r\n                                                                delSubUploadedPhoto(index, `Free-Volume ~ ${item?.title}`)\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Delete Photo\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <h4>Markings</h4>\r\n                                                    {image.image_markings.length > 0 ?\r\n                                                        image.image_markings.map((marking, index) => (\r\n                                                            marking.text && <div>\r\n                                                                <b>{index+1}. </b>{marking.text}\r\n                                                            </div>\r\n                                                        ))\r\n                                                        : <div><i>No Markings Added</i></div>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </Panel>\r\n                        </Collapse>\r\n                    )\r\n                })\r\n            }\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FreeVolumeCheck","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Flame-Path-Dimension/FlamePathDimension.js",["1476","1477","1478","1479","1480","1481","1482"],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Collapse, Input, Radio } from \"antd\";\r\nimport { WhiteImageIcon, AuxilleryChecksIcon } from \"assets/svg/icon\";\r\nimport { EditOutlined, HistoryOutlined } from \"@ant-design/icons\";\r\nimport EditFlamePathDimension from './EditFlamePathDimension';\r\n\r\nconst FlamePathDimension = ({ \r\n    flamePathData, \r\n    setFlamePathData,\r\n\r\n    setUploadModal, \r\n    setUploadImageType,\r\n    setImageMarkings,\r\n    UploadImageMarkingKonva,\r\n    setEditImageId,\r\n    setSelectedImageTemp,\r\n    delSubUploadedPhoto\r\n}) => {\r\n    const [number, setNumber] = useState();\r\n    const [editStatus, setEditStatus] = useState(false);\r\n    const [modalName, setModalName] = useState(\"\");\r\n    const [editKey, setEditKey] = useState(\"\");\r\n    const [editData, setEditData] = useState(\"\");\r\n    // const [flamePathDataUnit, setFlamePathDataUnit] = useState({\r\n    //     chamber_volume:\"cm\",\r\n    //     flame_path_length:\"mm\",\r\n    //     maximum_permissible_gap:\"mm\",\r\n    //     logically_larger_diameter:\"mm\",\r\n    //     logically_smaller_diameter:\"mm\",\r\n    //     gap:\"mm\",\r\n    //     thread: \"mm\"\r\n    // })\r\n    const [suffixData, setSuffixData] = useState(\r\n        {\r\n            \"Chamber Volume\": 'cm',\r\n            \"Flame Path Length\": 'mm',\r\n            \"Maximum permissible gap\": 'mm',\r\n            \"Logically larger diameter\": 'mm',\r\n            \"Logically smaller diameter\": 'mm',\r\n            \"Gap\": 'mm',\r\n            \"Flange surface and flatness checked and acceptable\": 'cm',\r\n            \"Thread\": 'mm'\r\n        },\r\n    );\r\n  \r\n\r\n    const getSuffixSplitValue = (internalData) => {\r\n        if(suffixData[internalData?.name]) {\r\n            if(internalData.value?.includes('-')) {\r\n                let value = internalData.value?.split('-')\r\n                return value[value.length-1]\r\n            } else {\r\n                return suffixData[internalData?.name]\r\n            }\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    const { Panel } = Collapse;\r\n    const data = [\r\n        {\r\n            data1: {\r\n                name: \"Position A\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"],\r\n                edit1: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"]\r\n            }\r\n        },\r\n        {\r\n            data2: {\r\n                name: \"Position B\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"],\r\n                edit2: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"]\r\n            }\r\n        },\r\n        {\r\n            data3: { \r\n                name: \"Position C\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit3: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data4: { \r\n                name: \"Position C1\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit4: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data5: { \r\n                name: \"Position D\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit5: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data6: { \r\n                name: \"Position E\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit6: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data7: { \r\n                name: \"Position E1\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit7: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data8: { \r\n                name: \"Position G\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit8: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data9: { \r\n                name: \"Position H\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit9: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data10: { \r\n                name: \"Position J\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit10: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data11: { \r\n                name: \"Position K\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit11: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data12: { \r\n                name: \"Position L\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit12: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data13: { \r\n                name: \"Position M\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"], \r\n                edit13: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"] }\r\n        },\r\n        {\r\n            data14: {\r\n                name: \"Position P\", data: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"],\r\n                edit14: [\"Chamber Volume\", \"Flame Path Length\", \"Maximum permissible gap\", \"Logically larger diameter\", \"Logically smaller diameter\", \"Gap\", \"Acceptable to standard\"]\r\n            }\r\n        },\r\n        {\r\n            data15: { name: \"Position P1\", data: [\"Flange surface and flatness checked and acceptable\"], edit15: [\"Flange surface and flatness checked and acceptable\"] }\r\n        },\r\n        {\r\n            data16: { name: \"Position L1\", data: [\"Flange surface and flatness checked and acceptable\"], edit16: [\"Flange surface and flatness checked and acceptable\"] }\r\n        },\r\n        {\r\n            data17: { name: \"Position M1\", data: [\"Flange surface and flatness checked and acceptable\"], edit17: [\"Flange surface and flatness checked and acceptable\"] }\r\n        },\r\n        {\r\n            data18: { name: \"Position K1\", data: [\"Flange surface and flatness checked and acceptable\"], edit18: [\"Flange surface and flatness checked and acceptable\"] }\r\n        },\r\n        {\r\n            data19: { name: \"Position M2\", data: [\"Number of threads engaged\", \"Thread\", \"Condition acceptable to standard\"], edit19: [\"Number of threads engaged\", \"Thread\", \"Condition acceptable to Standard\"] }\r\n        },\r\n        {\r\n            data20: { name: \"Position R\", data: [\"Remarks\"], edit20: [\"Remarks\"] }\r\n        },\r\n    ];\r\n\r\n    const convertImageToBase64 = async (imageUrl, markings) => {\r\n        try {\r\n            const response = await fetch(imageUrl, { mode: \"cors\" }); // Ensure CORS is allowed\r\n            const blob = await response.blob(); // Convert response to Blob\r\n            const reader = new FileReader();\r\n            \r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n            let base64 = reader.result;\r\n            if(base64) {\r\n                UploadImageMarkingKonva(base64, markings);\r\n            }\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error fetching image:\", error);\r\n        }\r\n    };\r\n\r\n    // , \"Position C1\", \"Position D\", \"Position E\", \"Position E1\", \"Position G\", \"Position H\", \"Position I\", \"Position J\", \"Position K\", \"Position L\", \"Position M\", \"Position P\", \"Position P1\", \"Position L1\", \"Position M1\", \"Position P2\", \"Position k1\", \"Position M2\", \"Position R\"\r\n\r\n    return (\r\n        <div className=\"normal-header-color\">\r\n            {editStatus && <EditFlamePathDimension modalName={modalName} setEditStatus={setEditStatus} editStatus={editStatus} editData={editData} editKey={editKey} suffixData={suffixData} setSuffixData={setSuffixData} flamePathData={flamePathData} setFlamePathData={setFlamePathData} />}\r\n\r\n            {\r\n                flamePathData.map((item, i) => {\r\n                    // const key = `data${i + 1}`\r\n                    // console.log(\"k\" + key + \" \" + JSON.stringify(item))\r\n                    // console.log(item[`data${i + 1}`]?.[`edit${i + 1}`]);\r\n                    \r\n                    return (\r\n\r\n                        <Collapse\r\n                            key={i} // Added key prop to Collapse component\r\n                            expandIconPosition={\"end\"}\r\n                            onChange={(data) => setNumber(data)}\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Panel\r\n                                key={i}\r\n                                header={\r\n                                    <>\r\n                                        <span className=\"d-flex align-items-centr\" style={{ gap: \"5px\" }}>\r\n                                            <AuxilleryChecksIcon /> {item?.title}{\" \"}\r\n                                            {/* {console.log(item)} */}\r\n                                            <span style={{ color: \"grey\", fontSize: \"14px\" }} className=\"font-weight-300 ml-2\">\r\n                                                {\" \"}\r\n                                                <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                                            </span>\r\n                                        </span>\r\n                                        <span className=\"customEditButton\" style={{ gap: \"5px\" }}>\r\n                                            {/* <Button\r\n                                                className=\"bg-primary text-white mr-1\"\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    console.log(\"add\");\r\n                                                }}\r\n                                            >\r\n                                                +\r\n                                            </Button> */}\r\n                                            {/* ['Position P1', 'Position L1', 'Position M1', 'Position K1', 'Position M2', 'Position R'].includes(item[key]?.name) &&  */}\r\n\r\n                                            <Button onClick={(e) => {\r\n                                                // e.stopPropagation();\r\n                                                setUploadModal(true);\r\n                                                setUploadImageType(`Flame-Path ~ ${item?.title}`);\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <WhiteImageIcon />\r\n                                            </Button>\r\n\r\n                                            <Button onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                setEditStatus(true)\r\n\r\n                                                // const editArray = item[`data${i + 1}`]?.[`edit${i + 1}`];\r\n                                                // setModalName(\"P\");\r\n                                                // setEditData(item[`data${i + 1}`]?.[`edit${i + 1}`])\r\n                                                setModalName(flamePathData[i].title);\r\n                                                setEditKey(flamePathData[i].key);\r\n                                                setEditData(flamePathData[i].data)\r\n                                                setEditStatus(true);\r\n\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <EditOutlined />\r\n\r\n                                            </Button>\r\n                                        </span>\r\n                                    </>\r\n                                }\r\n\r\n                            >\r\n\r\n                                {\r\n                                    // item[key].data.map((internalData, k) => {\r\n                                    item.data.map((internalData, k) => {\r\n                                        return (\r\n                                            <>\r\n                                                {item?.title == 'Position R' && <h2>Notes on End-shield threaded</h2>}\r\n\r\n                                                <div className={`${internalData.check == 1 ? 'green' : (internalData.check == 2 ? 'red' : 'grey')}-radio`} key={k}>\r\n\r\n                                                    <div className=\"mb-4 mt-3 d-flex justify-content-between\">\r\n                                                        <Radio\r\n                                                            style={{ width: \"30%\" }}\r\n                                                            checked={internalData.check}\r\n                                                        >\r\n                                                            {internalData.name}\r\n                                                        </Radio>\r\n                                                        <Input\r\n                                                            style={{ width: \"70%\" }}\r\n                                                            placeholder=\"Type here...\"\r\n                                                            value={suffixData[internalData.name] ? internalData.value?.split('-')[0] : internalData.value}\r\n                                                            \r\n                                                            // suffix={internalData.value?.includes('-') ? \r\n                                                            //     (internalData.value?.split('-')[1] == 'cm' ? <div>cm<sup>3</sup></div> : internalData.value?.split('-')[1])\r\n                                                            //      : suffixData[internalData.name] ? 'mm' : null}\r\n\r\n                                                            suffix={getSuffixSplitValue(internalData) == 'cm' ? <div>cm<sup>3</sup></div> : getSuffixSplitValue(internalData)}\r\n                                                            disabled\r\n                                                        />\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            </>\r\n                                        );\r\n                                    })\r\n                                }\r\n\r\n                                <div className=\"mt-5\">\r\n                                    <h5>Uploaded Photos</h5>\r\n                                    <div className=\"dashed-border p-2\">\r\n                                        {item.photos.map((image, index) => (\r\n                                            <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                                                <div className='w-75 d-flex flex-column align-items-start'>\r\n                                                    <img\r\n                                                    src={image.url}\r\n                                                    alt={`Image ${index}`}\r\n                                                    style={{\r\n                                                    // width: \"200px\",\r\n                                                    height: \"200px\",\r\n                                                    marginRight: \"10px\",\r\n                                                    }}\r\n                                                    />\r\n                                                    <div className='diflex justify-content-start'>\r\n                                                        <Button type='primary' className='mt-2' onClick={() => {\r\n                                                                setEditImageId(image.id);\r\n                                                                setUploadModal(true);\r\n                                                                setUploadImageType(`Flame-Path ~ ${item?.title}`);\r\n                                                                setSelectedImageTemp(image.url_unmodified);\r\n                                                                setImageMarkings(image.image_markings);\r\n                                                                if(image.url_unmodified.includes('http')) {\r\n                                                                    convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                                                } else {\r\n                                                                    setTimeout(() => {\r\n                                                                        UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                                                    }, 500);\r\n                                                                }\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Edit Photo\r\n                                                        </Button>\r\n\r\n                                                        <Button className='mt-2 ml-2' onClick={() => {\r\n                                                                delSubUploadedPhoto(index, `Flame-Path ~ ${item?.title}`)\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Delete Photo\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <h4>Markings</h4>\r\n                                                    {image.image_markings.length > 0 ?\r\n                                                        image.image_markings.map((marking, index) => (\r\n                                                            marking.text && <div>\r\n                                                                <b>{index+1}. </b>{marking.text}\r\n                                                            </div>\r\n                                                        ))\r\n                                                        : <div><i>No Markings Added</i></div>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </Panel>\r\n                        </Collapse>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FlamePathDimension;\r\n\r\n\r\n\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotator-Shaft-Runout/RotatorShaftRunout.js",["1483","1484","1485"],"import React, { useState } from 'react'\r\nimport { Button, Collapse, Input, Radio } from \"antd\";\r\nimport {\r\n\r\n    WhiteImageIcon,\r\n    AuxilleryChecksIcon,\r\n} from \"assets/svg/icon\";\r\n\r\nimport {\r\n    EditOutlined,\r\n    HistoryOutlined,\r\n} from \"@ant-design/icons\";\r\nimport EditRotatorShaftRunout from './EditRotatorShaftRunout';\r\n\r\nconst RotatorShaftRunout = ({\r\n    rotatorShaftData, \r\n    setRotatorShaftData,\r\n\r\n    setUploadModal, \r\n    setUploadImageType,\r\n    setImageMarkings,\r\n    UploadImageMarkingKonva,\r\n    setEditImageId,\r\n    setSelectedImageTemp,\r\n    delSubUploadedPhoto\r\n}) => {\r\n    const { Panel } = Collapse;\r\n    const [editStatus, setEditStatus] = useState(false);\r\n    const [modalName, setModalName] = useState(\"\");\r\n    const [editKey, setEditKey] = useState(\"\");\r\n    const [editData, setEditData] = useState(\"\");\r\n    const [suffixData, setSuffixData] = useState(\r\n        {\r\n            \"Diameter\": 'mm',\r\n            \"Length\": 'mm',\r\n            \"A\": 'mm',\r\n            \"B\": 'mm',\r\n            \"C\": 'mm',\r\n            \"D\": 'mm',\r\n        },\r\n    );\r\n\r\n\r\n    const getSuffixSplitValue = (internalData) => {\r\n        if(suffixData[internalData?.name]) {\r\n            if(internalData.value?.includes('-')) {\r\n                let value = internalData.value?.split('-')\r\n                return value[value.length-1]\r\n            } else {\r\n                return suffixData[internalData?.name]\r\n            }\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    const convertImageToBase64 = async (imageUrl, markings) => {\r\n        try {\r\n            const response = await fetch(imageUrl, { mode: \"cors\" }); // Ensure CORS is allowed\r\n            const blob = await response.blob(); // Convert response to Blob\r\n            const reader = new FileReader();\r\n            \r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n            let base64 = reader.result;\r\n            if(base64) {\r\n                UploadImageMarkingKonva(base64, markings);\r\n            }\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error fetching image:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"normal-header-color\">\r\n            {editStatus && <EditRotatorShaftRunout modalName={modalName} editStatus={editStatus} setEditStatus={setEditStatus}\r\n            editData={editData} editKey={editKey} suffixData={suffixData} setSuffixData={setSuffixData} \r\n            setRotatorShaftData={setRotatorShaftData} />}\r\n\r\n            {\r\n                rotatorShaftData.map((item, i) => {\r\n                    // console.log(JSON.stringify(item))\r\n                    \r\n                    return (\r\n\r\n                        <Collapse\r\n                            key={i} // Added key prop to Collapse component\r\n                            expandIconPosition={\"end\"}\r\n                            // onChange={(data) => console.log(data)}\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Panel\r\n                                key={i}\r\n                                header={\r\n                                    <>\r\n                                        <span className=\"d-flex align-items-centr\" style={{ gap: \"5px\" }}>\r\n                                            <AuxilleryChecksIcon /> {item?.title}{\" \"}\r\n                                            <span style={{ color: \"grey\", fontSize: \"14px\" }} className=\"font-weight-300 ml-2\">\r\n                                                {\" \"}\r\n                                                <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                                            </span>\r\n                                        </span>\r\n                                        <span className=\"customEditButton\" style={{ gap: \"5px\" }}>\r\n                                            {/* <Button\r\n                                                className=\"bg-primary text-white mr-1\"\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    console.log(\"add\");\r\n                                                }}\r\n                                            >\r\n                                                +\r\n                                            </Button> */}\r\n\r\n                                            <Button onClick={(e) => {\r\n                                                // e.stopPropagation();\r\n                                                setUploadModal(true);\r\n                                                setUploadImageType(`Rotor-Shaft ~ ${item?.title}`);\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <WhiteImageIcon />\r\n                                            </Button>\r\n\r\n                                            <Button onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                setEditStatus(true)\r\n\r\n                                                setModalName(rotatorShaftData[i].title);\r\n                                                setEditKey(rotatorShaftData[i].key);\r\n                                                setEditData(rotatorShaftData[i].data)\r\n                                                setEditStatus(true);\r\n\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <EditOutlined />\r\n\r\n                                            </Button>\r\n                                        </span>\r\n                                    </>\r\n                                }\r\n                            >\r\n                                {\r\n                                    item.data.map((internalData, k) => {\r\n                                        return (\r\n                                            <>\r\n                                                <div className={`${internalData.check == 1 ? 'green' : (internalData.check == 2 ? 'red' : 'grey')}-radio`} key={k}>\r\n\r\n                                                    <div className=\"mb-4 mt-3 d-flex justify-content-between\">\r\n                                                        <Radio\r\n                                                            style={{ width: \"30%\" }}\r\n                                                            checked={internalData.check}\r\n                                                        >\r\n                                                            {internalData.name}\r\n                                                        </Radio>\r\n                                                        <Input\r\n                                                            style={{ width: \"70%\" }}\r\n                                                            placeholder=\"Type here...\"\r\n                                                            // value={internalData.value?.includes('-') ? internalData.value?.split('-')[0] : internalData.value}\r\n                                                            value={suffixData[internalData.name] ? \r\n                                                                internalData.value?.split('-')[0] : internalData.value}\r\n                                                            suffix={getSuffixSplitValue(internalData)}\r\n                                                            disabled\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </>\r\n                                        );\r\n                                    })\r\n                                }\r\n\r\n                                <div className=\"mt-5\">\r\n                                    <h5>Uploaded Photos</h5>\r\n                                    <div className=\"dashed-border p-2\">\r\n                                        {item.photos.map((image, index) => (\r\n                                            <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                                                <div className='w-75 d-flex flex-column align-items-start'>\r\n                                                    <img\r\n                                                    src={image.url}\r\n                                                    alt={`Image ${index}`}\r\n                                                    style={{\r\n                                                    // width: \"200px\",\r\n                                                    height: \"200px\",\r\n                                                    marginRight: \"10px\",\r\n                                                    }}\r\n                                                    />\r\n                                                    <div className='diflex justify-content-start'>\r\n                                                        <Button type='primary' className='mt-2' onClick={() => {\r\n                                                                setEditImageId(image.id);\r\n                                                                setUploadModal(true);\r\n                                                                setUploadImageType(`Rotor-Shaft ~ ${item?.title}`);\r\n                                                                setSelectedImageTemp(image.url_unmodified);\r\n                                                                setImageMarkings(image.image_markings);\r\n                                                                if(image.url_unmodified.includes('http')) {\r\n                                                                    convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                                                } else {\r\n                                                                    setTimeout(() => {\r\n                                                                        UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                                                    }, 500);\r\n                                                                }\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Edit Photo\r\n                                                        </Button>\r\n\r\n                                                        <Button className='mt-2 ml-2' onClick={() => {\r\n                                                                delSubUploadedPhoto(index, `Rotor-Shaft ~ ${item?.title}`)\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Delete Photo\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <h4>Markings</h4>\r\n                                                    {image.image_markings.length > 0 ?\r\n                                                        image.image_markings.map((marking, index) => (\r\n                                                            marking.text && <div>\r\n                                                                <b>{index+1}. </b>{marking.text}\r\n                                                            </div>\r\n                                                        ))\r\n                                                        : <div><i>No Markings Added</i></div>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </Panel>\r\n                        </Collapse>\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RotatorShaftRunout","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Mechanical_Inspection/MechanicalInspection.js",["1486","1487","1488"],"import React, { useState } from 'react'\r\nimport { Button, Collapse, Input, Radio } from \"antd\";\r\nimport {\r\n\r\n    WhiteImageIcon,\r\n    AuxilleryChecksIcon,\r\n} from \"assets/svg/icon\";\r\n\r\nimport {\r\n    EditOutlined,\r\n    HistoryOutlined,\r\n} from \"@ant-design/icons\";\r\nimport EditMechanicalInspection from './EditMechanicalInspection';\r\n\r\nconst MechanicalInspection = ({\r\n    mechanicalInspectionData, \r\n    setMechanicalInspectionData,\r\n\r\n    setUploadModal, \r\n    setUploadImageType,\r\n    setImageMarkings,\r\n    UploadImageMarkingKonva,\r\n    setEditImageId,\r\n    setSelectedImageTemp,\r\n    delSubUploadedPhoto\r\n}) => {\r\n    const [editStatus, setEditStatus] = useState(false);\r\n    const { Panel } = Collapse;\r\n\r\n    const [modalName, setModalName] = useState(\"\");\r\n    const [editKey, setEditKey] = useState(\"\");\r\n    const [editData, setEditData] = useState(\"\");\r\n    const [suffixData, setSuffixData] = useState(\r\n        {\r\n            \"A-A`\": 'mm',\r\n            \"B-B`\": 'mm',\r\n            \"C-C`\": 'mm',\r\n        },\r\n    );\r\n\r\n\r\n    const getSuffixSplitValue = (internalData) => {\r\n        if(suffixData[internalData?.name]) {\r\n            if(internalData.value?.includes('-')) {\r\n                let value = internalData.value?.split('-')\r\n                return value[value.length-1]\r\n            } else {\r\n                return suffixData[internalData?.name]\r\n            }\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    const convertImageToBase64 = async (imageUrl, markings) => {\r\n        try {\r\n            const response = await fetch(imageUrl, { mode: \"cors\" }); // Ensure CORS is allowed\r\n            const blob = await response.blob(); // Convert response to Blob\r\n            const reader = new FileReader();\r\n            \r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n            let base64 = reader.result;\r\n            if(base64) {\r\n                UploadImageMarkingKonva(base64, markings);\r\n            }\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error fetching image:\", error);\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div className=\"normal-header-color\">\r\n            {editStatus && <EditMechanicalInspection modalName={modalName} editStatus={editStatus} setEditStatus={setEditStatus}\r\n            editData={editData} editKey={editKey} suffixData={suffixData} setSuffixData={setSuffixData} \r\n            setMechanicalInspectionData={setMechanicalInspectionData} />}\r\n\r\n            {\r\n                mechanicalInspectionData.map((item, i) => {\r\n\r\n                    return (\r\n                        <Collapse\r\n                            key={i} // Added key prop to Collapse component\r\n                            expandIconPosition={\"end\"}\r\n                            // onChange={(data) => console.log(data)}\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Panel\r\n                                key={i+1}\r\n                                header={\r\n                                    <>\r\n                                        <span className=\"d-flex align-items-centr\" style={{ gap: \"5px\" }}>\r\n                                            <AuxilleryChecksIcon /> {item?.title}{\" \"}\r\n                                            <span style={{ color: \"grey\", fontSize: \"14px\" }} className=\"font-weight-300 ml-2\">\r\n                                                {\" \"}\r\n                                                <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                                            </span>\r\n                                        </span>\r\n                                        <span className=\"customEditButton\" style={{ gap: \"5px\" }}>\r\n                                            {/* <Button\r\n                                                className=\"bg-primary text-white mr-1\"\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    console.log(\"add\");\r\n                                                }}\r\n                                            >\r\n                                                +\r\n                                            </Button> */}\r\n\r\n                                            <Button onClick={(e) => {\r\n                                                // e.stopPropagation();\r\n                                                setUploadModal(true);\r\n                                                setUploadImageType(`Mechanical-Inspection ~ ${item?.title}`);\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <WhiteImageIcon />\r\n                                            </Button>\r\n\r\n                                            <Button onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                setEditStatus(true)\r\n\r\n                                                setModalName(mechanicalInspectionData[i].title);\r\n                                                setEditKey(mechanicalInspectionData[i].key);\r\n                                                setEditData(mechanicalInspectionData[i].data)\r\n                                                setEditStatus(true);\r\n\r\n                                            }} className=\"bg-primary text-white mr-1\">\r\n                                                <EditOutlined />\r\n\r\n                                            </Button>\r\n                                        </span>\r\n                                    </>\r\n                                }\r\n                            >\r\n                                {\r\n                                    item.data.map((internalData, k) => {\r\n                                        return (\r\n                                            <>\r\n                                                <div className={`${internalData.check == 1 ? 'green' : (internalData.check == 2 ? 'red' : 'grey')}-radio`} key={k}>\r\n\r\n                                                    <div className=\"mb-4 mt-3 d-flex justify-content-between\">\r\n                                                        <Radio\r\n                                                            style={{ width: \"30%\" }}\r\n                                                            checked={internalData.check}\r\n                                                        >\r\n                                                            {internalData.name}\r\n                                                        </Radio>\r\n                                                        <Input\r\n                                                            style={{ width: \"70%\" }}\r\n                                                            placeholder=\"Type here...\"\r\n                                                            // value={internalData.value?.includes('-') ? internalData.value?.split('-')[0] : internalData.value}\r\n                                                            value={suffixData[internalData.name] ? \r\n                                                                internalData.value?.split('-')[0] : internalData.value}\r\n                                                            suffix={getSuffixSplitValue(internalData)}\r\n                                                            disabled\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </>\r\n                                        );\r\n                                    })\r\n                                }\r\n\r\n                                <div className=\"mt-5\">\r\n                                    <h5>Uploaded Photos</h5>\r\n                                    <div className=\"dashed-border p-2\">\r\n                                        {item.photos.map((image, index) => (\r\n                                            <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                                                <div className='w-75 d-flex flex-column align-items-start'>\r\n                                                    <img\r\n                                                    src={image.url}\r\n                                                    alt={`Image ${index}`}\r\n                                                    style={{\r\n                                                    // width: \"200px\",\r\n                                                    height: \"200px\",\r\n                                                    marginRight: \"10px\",\r\n                                                    }}\r\n                                                    />\r\n                                                    <div className='diflex justify-content-start'>\r\n                                                        <Button type='primary' className='mt-2' onClick={() => {\r\n                                                                setEditImageId(image.id);\r\n                                                                setUploadModal(true);\r\n                                                                setUploadImageType(`Mechanical-Inspection ~ ${item?.title}`);\r\n                                                                setSelectedImageTemp(image.url_unmodified);\r\n                                                                setImageMarkings(image.image_markings);\r\n                                                                if(image.url_unmodified.includes('http')) {\r\n                                                                    convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                                                } else {\r\n                                                                    setTimeout(() => {\r\n                                                                        UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                                                    }, 500);\r\n                                                                }\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Edit Photo\r\n                                                        </Button>\r\n\r\n                                                        <Button className='mt-2 ml-2' onClick={() => {\r\n                                                                delSubUploadedPhoto(index, `Mechanical-Inspection ~ ${item?.title}`)\r\n                                                            }}>\r\n                                                            {\" \"}\r\n                                                            Delete Photo\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <h4>Markings</h4>\r\n                                                    {image.image_markings.length > 0 ?\r\n                                                        image.image_markings.map((marking, index) => (\r\n                                                            marking.text && <div>\r\n                                                                <b>{index+1}. </b>{marking.text}\r\n                                                            </div>\r\n                                                        ))\r\n                                                        : <div><i>No Markings Added</i></div>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </Panel>\r\n                        </Collapse>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MechanicalInspection","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Free-Load-Test/EditFreeLoadTest.js",["1489"],"import { Button, DatePicker, Input, Modal, Radio, Select, Tooltip } from \"antd\";\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { EditColorIcon } from \"assets/svg/icon\";\r\nimport React, { useState } from \"react\";\r\nconst { Option } = Select;\r\nconst EditFreeLoadTest = ({ SREditModal, setSREditModal }) => {\r\n    console.log(\"editsssss\")\r\n    const [SrModalFormData, setSrModalFormData] = useState({\r\n        v_w_suffix: 'mΩ',\r\n        u1_u2_suffix: 'mΩ',\r\n        u_v_suffix: 'mΩ',\r\n        v1_v2_suffix: 'mΩ',\r\n        u_w_suffix: 'mΩ',\r\n        w1_w2_suffix: 'mΩ',\r\n    });\r\n    const [SrRadioData, setSrRadioData] = useState({});\r\n    const handleRadioChnge = (name, e) => {\r\n        console.log(name, e.target.value);\r\n        setSrModalFormData({\r\n            ...SrModalFormData,\r\n            [name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const onRadioChange = (e) => {\r\n        console.log(\"radio checked\", e.target.value);\r\n        setSrRadioData({\r\n            ...SrRadioData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    return (\r\n        <>\r\n            {console.log(\"Free\")}\r\n            <Modal\r\n                title={\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n                    </div>\r\n                }\r\n                visible={SREditModal}\r\n                onCancel={() => setSREditModal(false)}\r\n                footer={false}\r\n                width={1000}\r\n            >\r\n                <div className=\"\">\r\n\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v1_v2\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v1_v2}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>Resistance</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"30%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                        <div>-</div>\r\n                        <Input\r\n                            style={{ width: \"30%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"u_w\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.u_w}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>Result</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.u_w}\r\n                            onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"u_w_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v_w\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v_w}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>Remarks</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v_w}\r\n                            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v_w_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"d-flex justify-content-end mt-5\">\r\n                    <Button key=\"cancel\" onClick={() => setSREditModal(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        key=\"save\"\r\n                        className=\"bg-primary text-white ml-2\"\r\n                        onClick={() => {\r\n                            console.log(SrModalFormData, SrModalFormData);\r\n                            setSREditModal(false);\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditFreeLoadTest;","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Free-Load-Test/FreeLoadTest.js",["1490","1491","1492","1493","1494","1495"],"import React from 'react';\r\nimport { Collapse, Radio, Input, Button, DatePicker } from 'antd';\r\nimport { HistoryOutlined, EditOutlined } from '@ant-design/icons';\r\n// import AuxilleryChecksIcon from \"assets/svg/icon\";\r\nimport { AuxilleryChecksIcon } from 'assets/svg/icon';\r\n// import WhiteImageIcon from './WhiteImageIcon';\r\nimport { WhiteImageIcon } from 'assets/svg/icon';\r\nimport ReportSerchIcon from \"assets/svg/greenSearch.png\";\r\nimport { ConnectorResistIcon } from 'assets/svg/icon';\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { ViewDetailsIcon } from 'assets/svg/icon';\r\n\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst FreeLoadTest = ({\r\n    setInitialeditModal, \r\n    initialModalFormdata, \r\n    setInitialModalFormdata, \r\n    initialModalForm, \r\n    setInitialModalForm, \r\n    freeLoadData, \r\n    setFreeLoadData, \r\n    setInitialcondUploaModal, \r\n    selectedImages2, \r\n    returnClass,\r\n    setSelectedImageTemp,\r\n    setImageMarkings,\r\n    UploadImageMarkingKonva,\r\n    setEditImageId,\r\n    delUplFile2,\r\n    setUploadModal,\r\n    setUploadImageType\r\n    }) => {\r\n        const convertImageToBase64 = async (imageUrl, markings) => {\r\n            try {\r\n                const response = await fetch(imageUrl, { mode: \"cors\" }); // Ensure CORS is allowed\r\n                const blob = await response.blob(); // Convert response to Blob\r\n                const reader = new FileReader();\r\n                \r\n                reader.readAsDataURL(blob);\r\n                reader.onloadend = () => {\r\n                    let base64 = reader.result;\r\n                    if(base64) {\r\n                        UploadImageMarkingKonva(base64, markings);\r\n                    }\r\n                };\r\n            } catch (error) {\r\n              console.error(\"Error fetching image:\", error);\r\n            }\r\n        };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Collapse className=\"mb-3\">\r\n                <Panel\r\n                    header={\r\n                        <>\r\n                            <img src={ReportSerchIcon} alt=\"...\" />\r\n                            Free Load Test\r\n                        </>\r\n                    }\r\n                    key=\"3\"\r\n                >\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <h4 className=\"d-flex align-items-center\">\r\n                            {\" \"}\r\n                            <ViewDetailsIcon /> View Details{\" \"}\r\n                            <span\r\n                                style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                                className=\"font-weight-300 ml-2\"\r\n                            >\r\n                                {\" \"}\r\n                                <HistoryOutlined /> Last updated an hour ago{\" \"}\r\n                            </span>{\" \"}\r\n                        </h4>\r\n                        <div>\r\n                            <Button onClick={() => {\r\n                                    // setInitialcondUploaModal(true);\r\n                                    setUploadModal(true);\r\n                                    setUploadImageType('Free-Load');\r\n                                }}>\r\n                                {\" \"}\r\n                                Upload Photos\r\n                            </Button>\r\n                            <Button\r\n                                className=\"bg-primary text-white ml-2\"\r\n                                onClick={() => {\r\n                                    setInitialeditModal(true);\r\n                                    setInitialModalFormdata((prev)=>{\r\n                                        return{\r\n                                            ...prev,\r\n                                            stator_volt:freeLoadData?.stator_volt?.value,\r\n                                            frequency:freeLoadData?.frequency?.value,\r\n                                            current_l1:freeLoadData?.current_l1?.value,\r\n                                            current_l2:freeLoadData?.current_l2?.value,\r\n                                            current_l3:freeLoadData?.current_l3?.value,\r\n                                            connection:freeLoadData?.connection?.value,\r\n                                            speed:freeLoadData?.speed?.value,\r\n                                            rotation:freeLoadData?.rotation?.value,\r\n                                            de_temp:freeLoadData?.de_temp?.value,\r\n                                            nde_temp:freeLoadData?.nde_temp?.value,\r\n                                            position:freeLoadData?.position?.value,\r\n                                            time:freeLoadData?.time?.value,\r\n                                        }\r\n                                    })\r\n\r\n                                    setInitialModalForm((prev)=>{\r\n                                        return{\r\n                                            ...prev,\r\n                                            stator_volt:freeLoadData?.stator_volt?.check,\r\n                                            frequency:freeLoadData?.frequency?.check,\r\n                                            current_l1:freeLoadData?.current_l1?.check,\r\n                                            current_l2:freeLoadData?.current_l2?.check,\r\n                                            current_l3:freeLoadData?.current_l3?.check,\r\n                                            connection:freeLoadData?.connection?.check,\r\n                                            speed:freeLoadData?.speed?.check,\r\n                                            rotation:freeLoadData?.rotation?.check,\r\n                                            de_temp:freeLoadData?.de_temp?.check,\r\n                                            nde_temp:freeLoadData?.nde_temp?.check,\r\n                                            position:freeLoadData?.position?.check,\r\n                                            time:freeLoadData?.time?.check,\r\n                                        }\r\n                                    })\r\n\r\n                                    // setModalName(\"FreeLoadTest\");\r\n                                }}\r\n\r\n\r\n                            >\r\n                                {\" \"}\r\n                                <EditOutlined /> Edit\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"green-radio mt-4 mb-5\">\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.stator_volt?.check}\r\n                                className={returnClass(freeLoadData?.stator_volt?.check)}\r\n                            >\r\n                                Stator Volt\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                value={freeLoadData?.stator_volt?.value}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.frequency?.check}\r\n                                className={returnClass(freeLoadData?.frequency?.check)}\r\n                            >\r\n                                Frequency\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                disabled\r\n                                value={freeLoadData?.frequency?.value}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.current_l1?.check}\r\n                                className={returnClass(freeLoadData?.current_l1?.check)}\r\n                            >\r\n                                Current L1\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                disabled\r\n                                value={freeLoadData?.current_l1?.value}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.current_l2?.check}\r\n                                className={returnClass(freeLoadData?.current_l2?.check)}\r\n                            >\r\n                                Current L2\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                value={freeLoadData?.current_l2?.value}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.current_l3?.check}\r\n                                className={returnClass(freeLoadData?.current_l3?.check)}\r\n                            >\r\n                                Current L3\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                value={freeLoadData?.current_l3?.value}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.connection?.check}\r\n                                className={returnClass(freeLoadData?.connection?.check)}\r\n                            >\r\n                                Connection\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                value={freeLoadData?.connection?.value}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.speed?.check}\r\n                                className={returnClass(freeLoadData?.speed?.check)}\r\n                            >\r\n                                Speed\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                disabled\r\n                                value={freeLoadData?.speed?.value}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.rotation?.check}\r\n                                className={returnClass(freeLoadData?.rotation?.check)}\r\n                            >\r\n                                Rotation\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                disabled\r\n                                value={freeLoadData?.rotation?.value}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.de_temp?.check}\r\n                                className={returnClass(freeLoadData?.de_temp?.check)}\r\n                            >\r\n                                DE Temp\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                disabled\r\n                                value={freeLoadData?.de_temp?.value}\r\n\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.nde_temp?.check}\r\n                                className={returnClass(freeLoadData?.nde_temp?.check)}\r\n                            >\r\n                                NDE Temp\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                disabled\r\n                                value={freeLoadData?.nde_temp?.value}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.position?.check}\r\n                            >\r\n                                Position\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                disabled\r\n                                value={freeLoadData?.position?.value}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-4 d-flex justify-content-between\">\r\n                            <Radio\r\n                                style={{ width: \"30%\" }}\r\n                                disabled\r\n                                checked={freeLoadData?.time?.check}\r\n                            >\r\n                                Time\r\n                            </Radio>\r\n                            <Input\r\n                                style={{ width: \"70%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                disabled\r\n                                value={freeLoadData?.time?.value}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mt-5\">\r\n                            <h5>Remarks</h5>\r\n                            <TextArea rows={5}\r\n                                value={freeLoadData?.remarks?.value}\r\n                                onChange={(e) => {\r\n                                    setFreeLoadData((prev) => ({\r\n                                        ...prev,\r\n                                        remarks: {\r\n                                        check:null,\r\n                                        value: e.target.value,\r\n                                        },\r\n                                    }));\r\n                                \r\n                                }}\r\n                                cols={16} placeholder=\"Type Here...\" />\r\n                        </div>\r\n                        <div className=\"mt-5\">\r\n                            <h5>Upload Photos</h5>\r\n                            <div className=\"dashed-border p-2\">\r\n                                {false && selectedImages2.map((image, index) => (\r\n                                <img\r\n                                    key={index}\r\n                                    src={image}\r\n                                    alt={`Image ${index}`}\r\n                                    style={{\r\n                                    width: \"200px\",\r\n                                    height: \"200px\",\r\n                                    marginRight: \"10px\",\r\n                                        \r\n                                    }}\r\n                                />\r\n                                ))}\r\n                                {selectedImages2.map((image, index) => (\r\n                                    <div className='mb-2 w-100 d-flex justify-content-start' key={index}>\r\n                                        <div className='w-75 d-flex flex-column align-items-start'>\r\n                                            <img\r\n                                                src={image.url}\r\n                                                alt={`Image ${index}`}\r\n                                                style={{\r\n                                                    height: \"200px\",\r\n                                                    marginRight: \"10px\",\r\n                                                }}\r\n                                            />\r\n                                            <div className='diflex justify-content-start'>\r\n                                                <Button type='primary' className='mt-2' onClick={() => {\r\n                                                        setEditImageId(image.id);\r\n                                                        // setInitialcondUploaModal(true);\r\n                                                        setUploadModal(true);\r\n                                                        setUploadImageType('Free-Load');\r\n                                                        setSelectedImageTemp(image.url_unmodified);\r\n                                                        setImageMarkings(image.image_markings);\r\n                                                        if(image.url_unmodified.includes('http')) {\r\n                                                            convertImageToBase64(image.url_unmodified, image.image_markings);\r\n                                                        } else {\r\n                                                            setTimeout(() => {\r\n                                                                UploadImageMarkingKonva(image.url_unmodified, image.image_markings);\r\n                                                            }, 500);\r\n                                                        }\r\n                                                    }}>\r\n                                                    {\" \"}\r\n                                                    Edit Photo\r\n                                                </Button>\r\n\r\n                                                <Button className='mt-2 ml-2' onClick={() => {\r\n                                                        delUplFile2(index)\r\n                                                    }}>\r\n                                                    {\" \"}\r\n                                                    Delete Photo\r\n                                                </Button>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <h4>Markings</h4>\r\n                                            {image.image_markings.length > 0 ?\r\n                                                image.image_markings.map((marking, index) => (\r\n                                                    marking.text && <div key={index}>\r\n                                                        <b>{index+1}. </b>{marking.text}\r\n                                                    </div>\r\n                                                ))\r\n                                                : <div><i>No Markings Added</i></div>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Panel>\r\n            </Collapse>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default FreeLoadTest;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Insulation/Stator_winding_electrical_tests/EditStatorResistance.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Insulation/Stator_winding_electrical_tests/EditStatorInsulation.js",["1496"],"import { Button, DatePicker, Input, Modal, Radio, Select } from \"antd\";\r\nimport { EditColorIcon } from \"assets/svg/icon\";\r\nimport React, { useState } from \"react\";\r\nconst { Option } = Select;\r\nconst EditStatorInsulation = ({ SIEditModal, setSIEditModal }) => {\r\n  const [SrModalFormData, setSrModalFormData] = useState({\r\n    v_w_suffix:'mΩ',\r\n    u_e_suffix:'mΩ',\r\n    u_v_suffix:'mΩ',\r\n    v_e_suffix:'mΩ',\r\n    uvw_e_suffix:'mΩ',\r\n    u_w_suffix:'mΩ',\r\n    w_e_suffix:'mΩ',\r\n  });\r\n  const [SrRadioData, setSrRadioData] = useState({});\r\n  const handleRadioChnge = (name, e) => {\r\n    console.log(name, e.target.value);\r\n    setSrModalFormData({\r\n      ...SrModalFormData,\r\n      [name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const onRadioChange = (e) => {\r\n    console.log(\"radio checked\", e.target.value);\r\n    setSrRadioData({\r\n      ...SrRadioData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  return (\r\n    <Modal\r\n      title={\r\n        <div className=\"d-flex align-items-center\">\r\n          <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n        </div>\r\n      }\r\n      visible={SIEditModal}\r\n      onCancel={() => setSIEditModal(false)}\r\n      footer={false}\r\n      width={1000}\r\n    >\r\n      <div className=\"\">\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <div className=\"d-flex \" style={{gap:'8px'}}>\r\n                \r\n          <Radio.Group\r\n            name=\"uvw_e\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.uvw_e}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>UVW-E</labek>\r\n            </div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.uvw_e}\r\n            onChange={(e) => handleRadioChnge(\"uvw_e\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.uvw_e_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"uvw_e_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_e\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_e}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>U-E</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_e}\r\n            onChange={(e) => handleRadioChnge(\"u_e\", e)}\r\n            addonAfter={(<>\r\n            <Select value={SrModalFormData?.u_e_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_e_suffix\",{\r\n                target: { value: e },\r\n              })} >\r\n    <Option value=\"mΩ\">mΩ</Option>\r\n    <Option value=\"Ω\">Ω</Option>\r\n  </Select>\r\n            </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v_e\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v_e}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>V-E</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v_e}\r\n            onChange={(e) => handleRadioChnge(\"v_e\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v_e_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v_e_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"w_e\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.w_e}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>W-E</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.w_e}\r\n            onChange={(e) => handleRadioChnge(\"w_e\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.w_e_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"w_e_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_v\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_v}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>U-V</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_v}\r\n            onChange={(e) => handleRadioChnge(\"u_v\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u_v_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_v_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>V-W</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v_w}\r\n            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>U-W</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_w}\r\n            onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"test_volt\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.test_volt}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Test Volt</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.test_volt}\r\n            onChange={(e) => handleRadioChnge(\"test_volt\", e)}\r\n            suffix='V'\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"checked_by\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.checked_by}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Checked By</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.checked_by}\r\n            onChange={(e) => handleRadioChnge(\"checked_by\", e)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"test_volt\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.test_volt}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Test Volt</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.test_volt}\r\n            onChange={(e) => handleRadioChnge(\"test_volt\", e)}\r\n            suffix='V'\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"checked_by\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.checked_by}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Checked By</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.checked_by}\r\n            onChange={(e) => handleRadioChnge(\"checked_by\", e)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"test_volt\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.test_volt}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Test Volt</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.test_volt}\r\n            onChange={(e) => handleRadioChnge(\"test_volt\", e)}\r\n            suffix='V'\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"checked_by\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.checked_by}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Checked By</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.checked_by}\r\n            onChange={(e) => handleRadioChnge(\"checked_by\", e)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"test_volt\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.test_volt}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Test Volt</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.test_volt}\r\n            onChange={(e) => handleRadioChnge(\"test_volt\", e)}\r\n            suffix='V'\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"checked_by\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.checked_by}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Checked By</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.checked_by}\r\n            onChange={(e) => handleRadioChnge(\"checked_by\", e)}\r\n          />\r\n        </div>\r\n      \r\n      <div className=\"d-flex justify-content-end mt-5\">\r\n        <Button key=\"cancel\" onClick={() => setSIEditModal(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          key=\"save\"\r\n          className=\"bg-primary text-white ml-2\"\r\n          onClick={() => {\r\n            console.log(SrModalFormData, SrModalFormData);\r\n            setSIEditModal(false);\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditStatorInsulation;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/AuxiliaryCheckEdits/EditBrake.js",["1497"],"import { Button, DatePicker, Input, Modal, Radio, Select,Tooltip  } from \"antd\";\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { EditColorIcon } from \"assets/svg/icon\";\r\nimport React, { useState } from \"react\";\r\nconst { Option } = Select;\r\nconst EditBrake = ({SREditModal, setSREditModal }) => {\r\n  const [SrModalFormData, setSrModalFormData] = useState({\r\n    v_w_suffix:'mΩ',\r\n    u1_u2_suffix:'mΩ',\r\n    u_v_suffix:'mΩ',\r\n    v1_v2_suffix:'mΩ',\r\n    u_w_suffix:'mΩ',\r\n    w1_w2_suffix:'mΩ',\r\n  });\r\n  const [SrRadioData, setSrRadioData] = useState({});\r\n  const handleRadioChnge = (name, e) => {\r\n    console.log(name, e.target.value);\r\n    setSrModalFormData({\r\n      ...SrModalFormData,\r\n      [name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const onRadioChange = (e) => {\r\n    console.log(\"radio checked\", e.target.value);\r\n    setSrRadioData({\r\n      ...SrRadioData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  return (\r\n  \r\n      <Modal\r\n      title={\r\n        <div className=\"d-flex align-items-center\">\r\n          <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n        </div>\r\n      }\r\n      visible={SREditModal}\r\n      onCancel={() => setSREditModal(false)}\r\n      footer={false}\r\n      width={1000}\r\n    >\r\n      <div className=\"\">\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <div className=\"d-flex \" style={{gap:'8px'}}>\r\n                \r\n          <Radio.Group\r\n            name=\"u1_u2\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u1_u2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Insulation</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n            </div>\r\n            \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u1_u2}\r\n            onChange={(e) => handleRadioChnge(\"u1_u2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u1_u2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u1_u2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_v\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_v}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Result</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n          \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_v}\r\n            onChange={(e) => handleRadioChnge(\"u_v\", e)}\r\n            addonAfter={(<>\r\n            <Select value={SrModalFormData?.u_v_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_v_suffix\",{\r\n                target: { value: e },\r\n              })} >\r\n    <Option value=\"mΩ\">mΩ</Option>\r\n    <Option value=\"Ω\">Ω</Option>\r\n  </Select>\r\n            </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v1_v2\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v1_v2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Resistance</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v1_v2}\r\n            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v1_v2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Result</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n         \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_w}\r\n            onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"w1_w2\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.w1_w2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Test Volt</labek></div>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.w1_w2}\r\n            onChange={(e) => handleRadioChnge(\"w1_w2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.w1_w2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"w1_w2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Result</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n         \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_w}\r\n            onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"w1_w2\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.w1_w2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>AC Volt</labek></div>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.w1_w2}\r\n            onChange={(e) => handleRadioChnge(\"w1_w2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.w1_w2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"w1_w2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex justify-content-end mt-5\">\r\n        <Button key=\"cancel\" onClick={() => setSREditModal(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          key=\"save\"\r\n          className=\"bg-primary text-white ml-2\"\r\n          onClick={() => {\r\n            console.log(SrModalFormData, SrModalFormData);\r\n            setSREditModal(false);\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n    \r\n  );\r\n};\r\n\r\nexport default EditBrake;\r\n\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/AuxiliaryCheckEdits/EditPT_100.js",["1498"],"import { Button, DatePicker, Input, Modal, Radio, Select,Tooltip  } from \"antd\";\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { EditColorIcon } from \"assets/svg/icon\";\r\nimport React, { useState } from \"react\";\r\nconst { Option } = Select;\r\nconst EditPT_100 = ({ SREditModal, setSREditModal }) => {\r\n    console.log(\"edit\")\r\n  const [SrModalFormData, setSrModalFormData] = useState({\r\n    v_w_suffix:'mΩ',\r\n    u1_u2_suffix:'mΩ',\r\n    u_v_suffix:'mΩ',\r\n    v1_v2_suffix:'mΩ',\r\n    u_w_suffix:'mΩ',\r\n    w1_w2_suffix:'mΩ',\r\n  });\r\n  const [SrRadioData, setSrRadioData] = useState({});\r\n  const handleRadioChnge = (name, e) => {\r\n    console.log(name, e.target.value);\r\n    setSrModalFormData({\r\n      ...SrModalFormData,\r\n      [name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const onRadioChange = (e) => {\r\n    console.log(\"radio checked\", e.target.value);\r\n    setSrRadioData({\r\n      ...SrRadioData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  return (\r\n   \r\n      <Modal\r\n      title={\r\n        <div className=\"d-flex align-items-center\">\r\n          <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n        </div>\r\n      }\r\n      visible={SREditModal}\r\n      onCancel={() => setSREditModal(false)}\r\n      footer={false}\r\n      width={1000}\r\n    >\r\n      <div className=\"\">\r\n    \r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v1_v2\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v1_v2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Resistance</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n          <Input\r\n            style={{ width: \"30%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v1_v2}\r\n            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v1_v2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n          <div>-</div>\r\n          <Input\r\n            style={{ width: \"30%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v1_v2}\r\n            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v1_v2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Result</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n         \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_w}\r\n            onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n      \r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Remarks</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n         \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v_w}\r\n            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        \r\n      </div>\r\n      <div className=\"d-flex justify-content-end mt-5\">\r\n        <Button key=\"cancel\" onClick={() => setSREditModal(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          key=\"save\"\r\n          className=\"bg-primary text-white ml-2\"\r\n          onClick={() => {\r\n            console.log(SrModalFormData, SrModalFormData);\r\n            setSREditModal(false);\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n    \r\n  );\r\n};\r\n\r\nexport default EditPT_100;","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/AuxiliaryCheckEdits/EditOthers.js",["1499"],"import { Button, DatePicker, Input, Modal, Radio, Select,Tooltip  } from \"antd\";\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { EditColorIcon } from \"assets/svg/icon\";\r\nimport React, { useState } from \"react\";\r\nconst { Option } = Select;\r\nconst EditOthers = ({ SREditModal, setSREditModal }) => {\r\n    console.log(\"edit\")\r\n  const [SrModalFormData, setSrModalFormData] = useState({\r\n    v_w_suffix:'mΩ',\r\n    u1_u2_suffix:'mΩ',\r\n    u_v_suffix:'mΩ',\r\n    v1_v2_suffix:'mΩ',\r\n    u_w_suffix:'mΩ',\r\n    w1_w2_suffix:'mΩ',\r\n  });\r\n  const [SrRadioData, setSrRadioData] = useState({});\r\n  const handleRadioChnge = (name, e) => {\r\n    console.log(name, e.target.value);\r\n    setSrModalFormData({\r\n      ...SrModalFormData,\r\n      [name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const onRadioChange = (e) => {\r\n    console.log(\"radio checked\", e.target.value);\r\n    setSrRadioData({\r\n      ...SrRadioData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  return (\r\n   \r\n      <Modal\r\n      title={\r\n        <div className=\"d-flex align-items-center\">\r\n          <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n        </div>\r\n      }\r\n      visible={SREditModal}\r\n      onCancel={() => setSREditModal(false)}\r\n      footer={false}\r\n      width={1000}\r\n    >\r\n      <div className=\"\">\r\n    \r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v1_v2\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v1_v2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Test Records</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v1_v2}\r\n            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v1_v2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n         \r\n        </div>\r\n      \r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Remarks</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n         \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v_w}\r\n            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        \r\n      </div>\r\n      <div className=\"d-flex justify-content-end mt-5\">\r\n        <Button key=\"cancel\" onClick={() => setSREditModal(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          key=\"save\"\r\n          className=\"bg-primary text-white ml-2\"\r\n          onClick={() => {\r\n            console.log(SrModalFormData, SrModalFormData);\r\n            setSREditModal(false);\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n    \r\n  );\r\n};\r\n\r\nexport default EditOthers;","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TraverlerRemarksReplyContainer.js",["1500"],"import { Card } from 'antd'\r\nimport moment from 'moment'\r\nimport React from 'react'\r\n\r\nfunction TraverlerRemarksReplyContainer({ index, editedLogs, remarksReply, setRemarksReply, id }) {\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            marginLeft: '20px'\r\n        }}> {\r\n                remarksReply[index] ? <>{editedLogs.map((item, index) => {\r\n                    return (\r\n                        <>\r\n                            <div style={{\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                                gap: \"10px\"\r\n                            }}>\r\n                                <div style={{\r\n                                    fontSize: '16px',\r\n                                    fontWeight: 500,\r\n                                    color: 'black'\r\n                                }}>{item.user?.name}</div>\r\n                                <div style={{\r\n                                    fontSize: '12px',\r\n                                    color: 'gray'\r\n                                }}>{moment(item.createdAt).format('DD MMM YYYY hh:mm a')}</div>\r\n                            </div>\r\n                            {/* {item.previousFilePath ?\r\n                                        <div style={{\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                            gap: '10px',\r\n                                            // boxShadow: '0px 0px 5px 0px rgba(0,0,0,0.1)',\r\n                                            width: '40%',\r\n\r\n                                        }}>\r\n                                            {\r\n                                                item.previousFilePath.split('.').pop() === 'pdf' ? <> <a style={{\r\n                                                    textDecoration: 'underline',\r\n                                                    color: '#2EA3F2',\r\n                                                    fontWeight: 700,\r\n                                                    cursor: 'pointer',\r\n                                                    // padding: '10px'\r\n                                                }} href={item.previousFilePath} target=\"_blank\" rel=\"noreferrer\">PDF</a>   <Card style={{\r\n                                                        \r\n\r\n                                                }}>\r\n                                                    {item.previousContent}\r\n                                                </Card>\r\n                                                </>\r\n                                                    : <><img src={item.previousFilePath} alt=\"file\" style={{ width: \"200px\", height: 'auto' }} />\r\n                                                        <Card style={{\r\n                                                        \r\n\r\n                                                        }}>\r\n                                                            {item.previousContent}\r\n                                                        </Card>\r\n                                                    </>\r\n                                            }\r\n\r\n                                        </div>\r\n                                        : */}\r\n                                        <div>{item.comment}</div>\r\n                                        {/* } */}\r\n\r\n                        </>\r\n                    )\r\n                })\r\n                }</> : <></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TraverlerRemarksReplyContainer\r\n\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TravelerRemarksReplyLabel.js",["1501"],"import React, { useEffect } from 'react'\r\nimport { DownOutlined, UpOutlined } from '@ant-design/icons'\r\n\r\nfunction TravelerRemarksReplyLabel({ index, editedLogs, labelRemarksReply, setLabelRemarksReply, id }) {\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                cursor: 'pointer',\r\n            }}>\r\n                {\r\n                    labelRemarksReply[index] ?\r\n                        <div onClick={() => {\r\n                            setLabelRemarksReply((prevState) => {\r\n                                prevState[index] = false;\r\n                                return [...prevState]\r\n                            })\r\n                        }} ><UpOutlined /> </div> : <div onClick={() => {\r\n                            setLabelRemarksReply((prevState) => {\r\n                                prevState[index] = true;\r\n                                return [...prevState]\r\n                            })\r\n                        }} > <DownOutlined /></div>\r\n                }\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TravelerRemarksReplyLabel","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/InquiryDetails/TravelerRemarks/TravelerRemarksReply.js",["1502"],"import React, { useEffect } from 'react'\r\nimport { DownOutlined, UpOutlined } from '@ant-design/icons'\r\n\r\nfunction TravelerRemarksReply({ index, editedLogs, remarksReply, setRemarksReply, id }) {\r\n\r\n  return (\r\n    <>\r\n      <div style={{\r\n        cursor: 'pointer',\r\n      }}>\r\n        {\r\n          remarksReply[index] ?\r\n            <div onClick={() => {\r\n              setRemarksReply((prevState) => {\r\n                prevState[index] = false;\r\n                return [...prevState]\r\n              })\r\n            }} ><UpOutlined /> </div> : <div onClick={() => {\r\n              setRemarksReply((prevState) => {\r\n                prevState[index] = true;\r\n                return [...prevState]\r\n              })\r\n            }} > <DownOutlined /></div>\r\n        }\r\n\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TravelerRemarksReply","/home/faizan/jd-works/customer-web-app/src/components/shared-components/BarChart/BarChart.js",[],"/home/faizan/jd-works/customer-web-app/src/components/shared-components/Map/googleMap.js",["1503"],"import React from \"react\";\r\nimport { GoogleMap, Marker, useLoadScript } from \"@react-google-maps/api\";\r\nimport Circle from \"../../../assets/Oval.png\"\r\n\r\nconst mapContainerStyle = {\r\n  width: \"100%\",\r\n  height: \"500px\",\r\n};\r\n\r\nconst center = {\r\n  lat: 1.3521, // Singapore Latitude\r\n  lng: 103.8198, // Singapore Longitude\r\n};\r\n\r\nconst markersData = [\r\n  { id: 1, lat: 28.520737, lng: 77.0372},\r\n  { id: 2, lat: 1.2834, lng: 103.8607 },\r\n  { id: 3, lat: 1.3324, lng: 103.7436},\r\n];\r\n\r\nconst GoogleMapWithMarkers = ({data}) => {\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAP,\r\n  });\r\n\r\n  if (!isLoaded) return <p>Loading Maps...</p>;\r\n\r\n  return (\r\n    <GoogleMap mapContainerStyle={mapContainerStyle} center={center} zoom={12}>\r\n     {data.map((marker) => (\r\n        <Marker\r\n          key={marker.id}\r\n          position={{ lat: +marker.lat, lng:+marker.lng }}\r\n          icon={{\r\n            url: Circle, \r\n            scaledSize: new window.google.maps.Size(20, 20), \r\n          }}\r\n        />\r\n      ))}\r\n    </GoogleMap>\r\n  );\r\n};\r\n\r\nexport default GoogleMapWithMarkers;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Insulation/SIUpload.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Insulation/EditSIModal.js",["1504"],"import { Button, DatePicker, Input, Modal, Radio, Select } from \"antd\";\r\nimport { EditColorIcon } from \"assets/svg/icon\";\r\nimport React, { useState } from \"react\";\r\nconst { Option } = Select;\r\nconst EditModal = ({ SIEditModal, setSIEditModal }) => {\r\n  const [SrModalFormData, setSrModalFormData] = useState({\r\n    v_w_suffix:'mΩ',\r\n    u_e_suffix:'mΩ',\r\n    u_v_suffix:'mΩ',\r\n    v_e_suffix:'mΩ',\r\n    uvw_e_suffix:'mΩ',\r\n    u_w_suffix:'mΩ',\r\n    w_e_suffix:'mΩ',\r\n  });\r\n  const [SrRadioData, setSrRadioData] = useState({});\r\n  const handleRadioChnge = (name, e) => {\r\n    console.log(name, e.target.value);\r\n    setSrModalFormData({\r\n      ...SrModalFormData,\r\n      [name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const onRadioChange = (e) => {\r\n    console.log(\"radio checked\", e.target.value);\r\n    setSrRadioData({\r\n      ...SrRadioData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  return (\r\n    <Modal\r\n      title={\r\n        <div className=\"d-flex align-items-center\">\r\n          <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n        </div>\r\n      }\r\n      visible={SIEditModal}\r\n      onCancel={() => setSIEditModal(false)}\r\n      footer={false}\r\n      width={1000}\r\n    >\r\n      <div className=\"\">\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <div className=\"d-flex \" style={{gap:'8px'}}>\r\n                \r\n          <Radio.Group\r\n            name=\"uvw_e\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.uvw_e}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>UVW-E</labek>\r\n            </div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.uvw_e}\r\n            onChange={(e) => handleRadioChnge(\"uvw_e\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.uvw_e_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"uvw_e_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_e\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_e}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>U-E</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_e}\r\n            onChange={(e) => handleRadioChnge(\"u_e\", e)}\r\n            addonAfter={(<>\r\n            <Select value={SrModalFormData?.u_e_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_e_suffix\",{\r\n                target: { value: e },\r\n              })} >\r\n    <Option value=\"mΩ\">mΩ</Option>\r\n    <Option value=\"Ω\">Ω</Option>\r\n  </Select>\r\n            </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v_e\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v_e}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>V-E</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v_e}\r\n            onChange={(e) => handleRadioChnge(\"v_e\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v_e_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v_e_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"w_e\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.w_e}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>W-E</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.w_e}\r\n            onChange={(e) => handleRadioChnge(\"w_e\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.w_e_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"w_e_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_v\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_v}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>U-V</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_v}\r\n            onChange={(e) => handleRadioChnge(\"u_v\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u_v_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_v_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>V-W</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v_w}\r\n            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>U-W</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_w}\r\n            onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"test_volt\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.test_volt}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Test Volt</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.test_volt}\r\n            onChange={(e) => handleRadioChnge(\"test_volt\", e)}\r\n            suffix='V'\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"checked_by\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.checked_by}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Checked By</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.checked_by}\r\n            onChange={(e) => handleRadioChnge(\"checked_by\", e)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex justify-content-end mt-5\">\r\n        <Button key=\"cancel\" onClick={() => setSIEditModal(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          key=\"save\"\r\n          className=\"bg-primary text-white ml-2\"\r\n          onClick={() => {\r\n            console.log(SrModalFormData, SrModalFormData);\r\n            setSIEditModal(false);\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditModal;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/SRUpload.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/AuxiliaryCheckEdits/EditThermistor.js",["1505"],"import { Button, DatePicker, Input, Modal, Radio, Select,Tooltip  } from \"antd\";\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { EditColorIcon } from \"assets/svg/icon\";\r\nimport React, { useState } from \"react\";\r\nconst { Option } = Select;\r\nconst EditThermistor = ({ SREditModal, setSREditModal }) => {\r\n  const [SrModalFormData, setSrModalFormData] = useState({\r\n    v_w_suffix:'mΩ',\r\n    u1_u2_suffix:'mΩ',\r\n    u_v_suffix:'mΩ',\r\n    v1_v2_suffix:'mΩ',\r\n    u_w_suffix:'mΩ',\r\n    w1_w2_suffix:'mΩ',\r\n  });\r\n  const [SrRadioData, setSrRadioData] = useState({});\r\n  const handleRadioChnge = (name, e) => {\r\n    console.log(name, e.target.value);\r\n    setSrModalFormData({\r\n      ...SrModalFormData,\r\n      [name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const onRadioChange = (e) => {\r\n    console.log(\"radio checked\", e.target.value);\r\n    setSrRadioData({\r\n      ...SrRadioData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  return (\r\n   \r\n      <Modal\r\n      title={\r\n        <div className=\"d-flex align-items-center\">\r\n          <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n        </div>\r\n      }\r\n      visible={SREditModal}\r\n      onCancel={() => setSREditModal(false)}\r\n      footer={false}\r\n      width={1000}\r\n    >\r\n      <div className=\"\">\r\n    \r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v1_v2\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v1_v2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Resistance</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v1_v2}\r\n            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v1_v2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Result</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n         \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_w}\r\n            onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n      \r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Remarks</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n         \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v_w}\r\n            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        \r\n      </div>\r\n      <div className=\"d-flex justify-content-end mt-5\">\r\n        <Button key=\"cancel\" onClick={() => setSREditModal(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          key=\"save\"\r\n          className=\"bg-primary text-white ml-2\"\r\n          onClick={() => {\r\n            console.log(SrModalFormData, SrModalFormData);\r\n            setSREditModal(false);\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n    \r\n  );\r\n};\r\n\r\nexport default EditThermistor;","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator Resistance/EditModal.js",["1506"],"import { Button, DatePicker, Input, Modal, Radio, Select,Tooltip  } from \"antd\";\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { EditColorIcon } from \"assets/svg/icon\";\r\nimport React, { useState } from \"react\";\r\nconst { Option } = Select;\r\nconst EditModal = ({SREditModal, setSREditModal }) => {\r\n  const [SrModalFormData, setSrModalFormData] = useState({\r\n    v_w_suffix:'mΩ',\r\n    u1_u2_suffix:'mΩ',\r\n    u_v_suffix:'mΩ',\r\n    v1_v2_suffix:'mΩ',\r\n    u_w_suffix:'mΩ',\r\n    w1_w2_suffix:'mΩ',\r\n  });\r\n  const [SrRadioData, setSrRadioData] = useState({});\r\n  console.log(SrRadioData);\r\n  const handleRadioChnge = (name, e) => {\r\n    console.log(name, e.target.value);\r\n    setSrRadioData({\r\n      ...SrRadioData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    setSrModalFormData({\r\n      ...SrModalFormData,\r\n      [name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const onRadioChange = (e) => {\r\n    console.log(\"radio checked\", e.target.value);\r\n    setSrRadioData({\r\n      ...SrRadioData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  return (\r\n  \r\n      <Modal\r\n      title={\r\n        <div className=\"d-flex align-items-center\">\r\n          <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n        </div>\r\n      }\r\n      visible={SREditModal}\r\n      onCancel={() => setSREditModal(false)}\r\n      footer={false}\r\n      width={1000}\r\n    >\r\n      <div className=\"\">\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n            <div className=\"d-flex \" style={{gap:'8px'}}>\r\n                \r\n          <Radio.Group\r\n            name=\"u1_u2\"\r\n            onChange={handleRadioChnge}\r\n            value={SrRadioData?.u1_u2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Insulation</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n            </div>\r\n            \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u1_u2}\r\n            onChange={(e) => handleRadioChnge(\"u1_u2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u1_u2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u1_u2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n\r\n        \r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_v\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_v}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Result</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n          \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_v}\r\n            onChange={(e) => handleRadioChnge(\"u_v\", e)}\r\n            addonAfter={(<>\r\n            <Select value={SrModalFormData?.u_v_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_v_suffix\",{\r\n                target: { value: e },\r\n              })} >\r\n    <Option value=\"mΩ\">mΩ</Option>\r\n    <Option value=\"Ω\">Ω</Option>\r\n  </Select>\r\n            </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v1_v2\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v1_v2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Resistance</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v1_v2}\r\n            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v1_v2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"u_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.u_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Result</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n         \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.u_w}\r\n            onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">KΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"w1_w2\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.w1_w2}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Test Volt</labek></div>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.w1_w2}\r\n            onChange={(e) => handleRadioChnge(\"w1_w2\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.w1_w2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"w1_w2_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"v_w\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.v_w}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Remarks</labek>\r\n          <div>\r\n    <Tooltip title=\"Your tooltip message\">\r\n      <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n    </Tooltip>\r\n  </div>\r\n          </div>\r\n         \r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.v_w}\r\n            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n            addonAfter={(<>\r\n                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v_w_suffix\",{\r\n                    target: { value: e },\r\n                  })} >\r\n        <Option value=\"mΩ\">mΩ</Option>\r\n        <Option value=\"Ω\">Ω</Option>\r\n      </Select>\r\n                </>)}\r\n          />\r\n        </div>\r\n        {/* <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"checked_by\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.checked_by}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Checked By</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.checked_by}\r\n            onChange={(e) => handleRadioChnge(\"checked_by\", e)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"instrument\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.instrument}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Instrument</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.instrument}\r\n            onChange={(e) => handleRadioChnge(\"instrument\", e)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"t_box_cover\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.t_box_cover}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Date</labek></div>\r\n          <DatePicker\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Select date\"\r\n            value={SrModalFormData?.date}\r\n            onChange={(e) =>\r\n                handleRadioChnge(\"date\", {\r\n                target: { value: e },\r\n              })\r\n            }\r\n            // suffix='mΩ'\r\n          />\r\n        </div> */}\r\n      </div>\r\n      <div className=\"d-flex justify-content-end mt-5\">\r\n        <Button key=\"cancel\" onClick={() => setSREditModal(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          key=\"save\"\r\n          className=\"bg-primary text-white ml-2\"\r\n          onClick={() => {\r\n            console.log(SrModalFormData, SrModalFormData);\r\n            setSREditModal(false);\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n    \r\n  );\r\n};\r\n\r\nexport default EditModal;\r\n\r\n\r\n// model === \"heater\" && (\r\n//   <Modal\r\n//   title={\r\n//     <div className=\"d-flex align-items-center\">\r\n//       <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n//     </div>\r\n//   }\r\n//   visible={SREditModal}\r\n//   onCancel={() => setSREditModal(false)}\r\n//   footer={false}\r\n//   width={1000}\r\n// >\r\n//   <div className=\"\">\r\n//     <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n//         <div className=\"d-flex \" style={{gap:'8px'}}>\r\n            \r\n//       <Radio.Group\r\n//         name=\"u1_u2\"\r\n//         onChange={onRadioChange}\r\n//         value={SrRadioData?.u1_u2}\r\n//       >\r\n//         <Radio className=\"green-radio\" value={1}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"red-radio\" value={2}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"grey-radio\" value={3}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//       </Radio.Group>\r\n//       <labek>Insulation</labek>\r\n//         </div>\r\n//       <Input\r\n//         style={{ width: \"70%\" }}\r\n//         placeholder=\"Type here...\"\r\n//         value={SrModalFormData?.u1_u2}\r\n//         onChange={(e) => handleRadioChnge(\"u1_u2\", e)}\r\n//         addonAfter={(<>\r\n//             <Select value={SrModalFormData?.u1_u2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u1_u2_suffix\",{\r\n//                 target: { value: e },\r\n//               })} >\r\n//     <Option value=\"mΩ\">mΩ</Option>\r\n//     <Option value=\"Ω\">Ω</Option>\r\n//   </Select>\r\n//             </>)}\r\n//       />\r\n//     </div>\r\n//     <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n//     <div className=\"d-flex \" style={{gap:'8px'}}>\r\n//       <Radio.Group\r\n//         name=\"u_v\"\r\n//         onChange={onRadioChange}\r\n//         value={SrRadioData?.u_v}\r\n//       >\r\n//         <Radio className=\"green-radio\" value={1}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"red-radio\" value={2}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"grey-radio\" value={3}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//       </Radio.Group>\r\n//       <labek>Result</labek></div>\r\n//       <Input\r\n//         style={{ width: \"70%\" }}\r\n//         placeholder=\"Type here...\"\r\n//         value={SrModalFormData?.u_v}\r\n//         onChange={(e) => handleRadioChnge(\"u_v\", e)}\r\n//         addonAfter={(<>\r\n//         <Select value={SrModalFormData?.u_v_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_v_suffix\",{\r\n//             target: { value: e },\r\n//           })} >\r\n// <Option value=\"mΩ\">mΩ</Option>\r\n// <Option value=\"Ω\">Ω</Option>\r\n// </Select>\r\n//         </>)}\r\n//       />\r\n//     </div>\r\n//     <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n//     <div className=\"d-flex \" style={{gap:'8px'}}>\r\n//       <Radio.Group\r\n//         name=\"v1_v2\"\r\n//         onChange={onRadioChange}\r\n//         value={SrRadioData?.v1_v2}\r\n//       >\r\n//         <Radio className=\"green-radio\" value={1}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"red-radio\" value={2}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"grey-radio\" value={3}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//       </Radio.Group>\r\n//       <labek>Resistance</labek></div>\r\n//       <Input\r\n//         style={{ width: \"70%\" }}\r\n//         placeholder=\"Type here...\"\r\n//         value={SrModalFormData?.v1_v2}\r\n//         onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n//         addonAfter={(<>\r\n//             <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v1_v2_suffix\",{\r\n//                 target: { value: e },\r\n//               })} >\r\n//     <Option value=\"mΩ\">mΩ</Option>\r\n//     <Option value=\"Ω\">Ω</Option>\r\n//   </Select>\r\n//             </>)}\r\n//       />\r\n//     </div>\r\n//     <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n//     <div className=\"d-flex \" style={{gap:'8px'}}>\r\n//       <Radio.Group\r\n//         name=\"u_w\"\r\n//         onChange={onRadioChange}\r\n//         value={SrRadioData?.u_w}\r\n//       >\r\n//         <Radio className=\"green-radio\" value={1}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"red-radio\" value={2}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"grey-radio\" value={3}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//       </Radio.Group>\r\n//       <labek>Result</labek></div>\r\n//       <Input\r\n//         style={{ width: \"70%\" }}\r\n//         placeholder=\"Type here...\"\r\n//         value={SrModalFormData?.u_w}\r\n//         onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n//         addonAfter={(<>\r\n//             <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"u_w_suffix\",{\r\n//                 target: { value: e },\r\n//               })} >\r\n//     <Option value=\"mΩ\">KΩ</Option>\r\n//     <Option value=\"Ω\">Ω</Option>\r\n//   </Select>\r\n//             </>)}\r\n//       />\r\n//     </div>\r\n//     <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n//     <div className=\"d-flex \" style={{gap:'8px'}}>\r\n//       <Radio.Group\r\n//         name=\"w1_w2\"\r\n//         onChange={onRadioChange}\r\n//         value={SrRadioData?.w1_w2}\r\n//       >\r\n//         <Radio className=\"green-radio\" value={1}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"red-radio\" value={2}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"grey-radio\" value={3}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//       </Radio.Group>\r\n//       <labek>Test Volt</labek></div>\r\n//       <Input\r\n//         style={{ width: \"70%\" }}\r\n//         placeholder=\"Type here...\"\r\n//         value={SrModalFormData?.w1_w2}\r\n//         onChange={(e) => handleRadioChnge(\"w1_w2\", e)}\r\n//         addonAfter={(<>\r\n//             <Select value={SrModalFormData?.w1_w2_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"w1_w2_suffix\",{\r\n//                 target: { value: e },\r\n//               })} >\r\n//     <Option value=\"mΩ\">mΩ</Option>\r\n//     <Option value=\"Ω\">Ω</Option>\r\n//   </Select>\r\n//             </>)}\r\n//       />\r\n//     </div>\r\n//     <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n//     <div className=\"d-flex \" style={{gap:'8px'}}>\r\n//       <Radio.Group\r\n//         name=\"v_w\"\r\n//         onChange={onRadioChange}\r\n//         value={SrRadioData?.v_w}\r\n//       >\r\n//         <Radio className=\"green-radio\" value={1}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"red-radio\" value={2}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"grey-radio\" value={3}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//       </Radio.Group>\r\n//       <labek>Remarks</labek></div>\r\n//       <Input\r\n//         style={{ width: \"70%\" }}\r\n//         placeholder=\"Type here...\"\r\n//         value={SrModalFormData?.v_w}\r\n//         onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n//         addonAfter={(<>\r\n//             <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"v_w_suffix\",{\r\n//                 target: { value: e },\r\n//               })} >\r\n//     <Option value=\"mΩ\">mΩ</Option>\r\n//     <Option value=\"Ω\">Ω</Option>\r\n//   </Select>\r\n//             </>)}\r\n//       />\r\n//     </div>\r\n//     <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n//     <div className=\"d-flex \" style={{gap:'8px'}}>\r\n//       <Radio.Group\r\n//         name=\"checked_by\"\r\n//         onChange={onRadioChange}\r\n//         value={SrRadioData?.checked_by}\r\n//       >\r\n//         <Radio className=\"green-radio\" value={1}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"red-radio\" value={2}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"grey-radio\" value={3}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//       </Radio.Group>\r\n//       <labek>Checked By</labek></div>\r\n//       <Input\r\n//         style={{ width: \"70%\" }}\r\n//         placeholder=\"Type here...\"\r\n//         value={SrModalFormData?.checked_by}\r\n//         onChange={(e) => handleRadioChnge(\"checked_by\", e)}\r\n//       />\r\n//     </div>\r\n//     <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n//     <div className=\"d-flex \" style={{gap:'8px'}}>\r\n//       <Radio.Group\r\n//         name=\"instrument\"\r\n//         onChange={onRadioChange}\r\n//         value={SrRadioData?.instrument}\r\n//       >\r\n//         <Radio className=\"green-radio\" value={1}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"red-radio\" value={2}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"grey-radio\" value={3}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//       </Radio.Group>\r\n//       <labek>Instrument</labek></div>\r\n//       <Input\r\n//         style={{ width: \"70%\" }}\r\n//         placeholder=\"Type here...\"\r\n//         value={SrModalFormData?.instrument}\r\n//         onChange={(e) => handleRadioChnge(\"instrument\", e)}\r\n//       />\r\n//     </div>\r\n//     <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n//     <div className=\"d-flex \" style={{gap:'8px'}}>\r\n//       <Radio.Group\r\n//         name=\"t_box_cover\"\r\n//         onChange={onRadioChange}\r\n//         value={SrRadioData?.t_box_cover}\r\n//       >\r\n//         <Radio className=\"green-radio\" value={1}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"red-radio\" value={2}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//         <Radio className=\"grey-radio\" value={3}>\r\n//           {\" \"}\r\n//         </Radio>\r\n//       </Radio.Group>\r\n//       <labek>Date</labek></div>\r\n//       <DatePicker\r\n//         style={{ width: \"70%\" }}\r\n//         placeholder=\"Select date\"\r\n//         value={SrModalFormData?.date}\r\n//         onChange={(e) =>\r\n//             handleRadioChnge(\"date\", {\r\n//             target: { value: e },\r\n//           })\r\n//         }\r\n//         // suffix='mΩ'\r\n//       />\r\n//     </div>\r\n//   </div>\r\n//   <div className=\"d-flex justify-content-end mt-5\">\r\n//     <Button key=\"cancel\" onClick={() => setSREditModal(false)}>\r\n//       Cancel\r\n//     </Button>\r\n//     <Button\r\n//       key=\"save\"\r\n//       className=\"bg-primary text-white ml-2\"\r\n//       onClick={() => {\r\n//         console.log(SrModalFormData, SrModalFormData);\r\n//         setSREditModal(false);\r\n//       }}\r\n//     >\r\n//       Save\r\n//     </Button>\r\n//   </div>\r\n// </Modal>\r\n// )","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Surge-Compression/EditSCModal.js",["1507"],"import { Button, DatePicker, Input, Modal, Radio, Select } from \"antd\";\r\nimport { EditColorIcon } from \"assets/svg/icon\";\r\nimport React, { useState } from \"react\";\r\nconst { Option } = Select;\r\nconst EditSCModal = ({ SCEditModal, setSCEditModal }) => {\r\n    const [SrModalFormData, setSrModalFormData] = useState({\r\n      ins_1_min_suffix:'mΩ',\r\n      ins_10_min_suffix:'mΩ',\r\n    });\r\n    const [SrRadioData, setSrRadioData] = useState({});\r\n    const handleRadioChnge = (name, e) => {\r\n      console.log(name, e.target.value);\r\n      setSrModalFormData({\r\n        ...SrModalFormData,\r\n        [name]: e.target.value,\r\n      });\r\n    };\r\n  \r\n    const onRadioChange = (e) => {\r\n      console.log(\"radio checked\", e.target.value);\r\n      setSrRadioData({\r\n        ...SrRadioData,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    };\r\n    return (\r\n      <Modal\r\n        title={\r\n          <div className=\"d-flex align-items-center\">\r\n            <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n          </div>\r\n        }\r\n        visible={SCEditModal}\r\n        onCancel={() => setSCEditModal(false)}\r\n        footer={false}\r\n        width={1000}\r\n      >\r\n        <div className=\"\">\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n              <div className=\"d-flex \" style={{gap:'8px'}}>\r\n                  \r\n            <Radio.Group\r\n              name=\"u_v\"\r\n              onChange={onRadioChange}\r\n              value={SrRadioData?.u_v}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <labek>U-V</labek>\r\n              </div>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={SrModalFormData?.u_v}\r\n              onChange={(e) => handleRadioChnge(\"u_v\", e)}\r\n            //   suffix='mΩ'\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n          <div className=\"d-flex \" style={{gap:'8px'}}>\r\n            <Radio.Group\r\n              name=\"u_w\"\r\n              onChange={onRadioChange}\r\n              value={SrRadioData?.u_w}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <labek>U-W</labek></div>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={SrModalFormData?.u_w}\r\n              onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n            //   suffix='mΩ'\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n          <div className=\"d-flex \" style={{gap:'8px'}}>\r\n            <Radio.Group\r\n              name=\"v_w\"\r\n              onChange={onRadioChange}\r\n              value={SrRadioData?.v_w}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <labek>V-W</labek></div>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={SrModalFormData?.v_w}\r\n              onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n          <div className=\"d-flex \" style={{gap:'8px'}}>\r\n            <Radio.Group\r\n              name=\"test_volt\"\r\n              onChange={onRadioChange}\r\n              value={SrRadioData?.test_volt}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <labek>Text Volt</labek></div>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={SrModalFormData?.test_volt}\r\n              onChange={(e) => handleRadioChnge(\"test_volt\", e)}\r\n              suffix='v'\r\n        //       addonAfter={(<>\r\n        //           <Select value={SrModalFormData?.l_e_suffix} className=\"select-after\" onChange={(e)=>handleRadioChnge(\"l_e_suffix\",{\r\n        //               target: { value: e },\r\n        //             })} >\r\n        //   <Option value=\"mΩ\">mΩ</Option>\r\n        //   <Option value=\"Ω\">Ω</Option>\r\n        // </Select>\r\n        //           </>)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n          <div className=\"d-flex \" style={{gap:'8px'}}>\r\n            <Radio.Group\r\n              name=\"checked_by\"\r\n              onChange={onRadioChange}\r\n              value={SrRadioData?.checked_by}\r\n            >\r\n              <Radio className=\"green-radio\" value={1}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"red-radio\" value={2}>\r\n                {\" \"}\r\n              </Radio>\r\n              <Radio className=\"grey-radio\" value={3}>\r\n                {\" \"}\r\n              </Radio>\r\n            </Radio.Group>\r\n            <labek>Checked By</labek></div>\r\n            <Input\r\n              style={{ width: \"70%\" }}\r\n              placeholder=\"Type here...\"\r\n              value={SrModalFormData?.checked_by}\r\n              onChange={(e) => handleRadioChnge(\"checked_by\", e)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"instrument\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.instrument}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Instrument</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.instrument}\r\n            onChange={(e) => handleRadioChnge(\"instrument\", e)}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"date\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.date}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Date</labek></div>\r\n          <DatePicker\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Select date\"\r\n            value={SrModalFormData?.date}\r\n            onChange={(e) =>\r\n                handleRadioChnge(\"date\", {\r\n                target: { value: e },\r\n              })\r\n            }\r\n            // suffix='mΩ'\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n        <div className=\"d-flex \" style={{gap:'8px'}}>\r\n          <Radio.Group\r\n            name=\"remarks\"\r\n            onChange={onRadioChange}\r\n            value={SrRadioData?.remarks}\r\n          >\r\n            <Radio className=\"green-radio\" value={1}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"red-radio\" value={2}>\r\n              {\" \"}\r\n            </Radio>\r\n            <Radio className=\"grey-radio\" value={3}>\r\n              {\" \"}\r\n            </Radio>\r\n          </Radio.Group>\r\n          <labek>Remarks</labek></div>\r\n          <Input\r\n            style={{ width: \"70%\" }}\r\n            placeholder=\"Type here...\"\r\n            value={SrModalFormData?.remarks}\r\n            onChange={(e) => handleRadioChnge(\"remarks\", e)}\r\n          />\r\n        </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-end mt-5\">\r\n          <Button key=\"cancel\" onClick={() => setSCEditModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            key=\"save\"\r\n            className=\"bg-primary text-white ml-2\"\r\n            onClick={() => {\r\n              console.log(SrModalFormData, SrModalFormData);\r\n              setSCEditModal(false);\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n\r\nexport default EditSCModal\r\n","/home/faizan/jd-works/customer-web-app/src/components/shared-components/lineChart/LineChart.js",[],"/home/faizan/jd-works/customer-web-app/src/components/shared-components/pieChartWidget/PieChartWidget.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Polarization-Index/EditPolarizationIndexModal.js",[],"/home/faizan/jd-works/customer-web-app/src/components/shared-components/ChartWidget/LineChart.js",["1508","1509","1510","1511","1512","1513"],"import { Card, message } from 'antd';\r\nimport moment from 'moment';\r\nimport React, { useEffect, useRef } from 'react'\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport { useParams } from 'react-router-dom/cjs/react-router-dom';\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nfunction LineChart({ series, title, label, graphType, start_date, end_date, disabled, dateSelector }) {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const lastZoomTime = useRef(0);\r\n    const [chartData, setChartData] = React.useState({\r\n        series: [],\r\n        options: {},\r\n    })\r\n    const handleZoom = (chartContext, { xaxis }) => {\r\n        const diff = xaxis.max - xaxis.min;\r\n        lastZoomTime.current = Date.now();\r\n        let format = \"DD-MM-YYYY\"; // Default: Show Full Date\r\n        // if (dateSelector == \"1\") {\r\n        //     return date.format(\"HH:mm\");  // Show hours and minutes\r\n        // } else if (dateSelector == \"7\") {\r\n        //     return date.format(\"dddd, DD-MM-YYYY\");  // Show week name + date\r\n        // } else {\r\n        //     return date.format(\"DD-MM-YYYY\");  // Default to date format\r\n        // }\r\n        if (diff < 1000 * 60 * 60 * 24) {  // Less than 1 day → Show Hours\r\n            format = \"HH:mm\";\r\n        } else if (diff < 1000 * 60 * 60 * 24 * 7) {  // Less than 1 week → Show Day\r\n            format = \"dddd, DD-MM-YYYY\";\r\n        } else if (diff < 1000 * 60 * 60 * 24 * 30) {  // Less than 1 month → Show Week\r\n            format = \"DD-MM-YYYY\";\r\n        } else if (diff < 1000 * 60 * 60 * 24 * 365) {  // Less than 1 year → Show Month\r\n            format = \"MMM-YYYY\";\r\n        }\r\n\r\n        chartContext.updateOptions({\r\n            xaxis: {\r\n                labels: { formatter: (value) => moment(value).format(format) },\r\n            },\r\n            tooltip: {\r\n                x: { formatter: (val) => moment(val).format(format) },\r\n            },\r\n        });\r\n    };\r\n\r\n    const handleClick = (data, index) => {\r\n        // Check if current user is a free user (role id 5)\r\n        const userRole = parseInt(localStorage.getItem(\"role\"));\r\n        const isFreeUser = userRole === 5;\r\n        \r\n        if (!graphType) {\r\n            return;\r\n        }\r\n        // if (disabled) {\r\n        //     return;\r\n        // }\r\n        if (index == -1) {\r\n            return;\r\n        }\r\n        if (data.length == 0) {\r\n            return;\r\n        }\r\n        if (Date.now() - lastZoomTime.current < 500) return;\r\n        const bin = data[index].extraValue;\r\n\r\n        if (bin == null || bin == \"\") {\r\n            message.error(\"No data available for this point\");\r\n            return;\r\n        }\r\n        console.log(data[index]);\r\n\r\n        // Free users have limited access to spectrum analysis\r\n        if (isFreeUser && !bin.includes(\"_1.bin\")) {\r\n            message.error(\"Advanced spectrum analysis is available for premium users only\");\r\n            return;\r\n        }\r\n\r\n        // Permission check for _1.bin files (similar to admin app)\r\n        if (bin.includes(\"_1.bin\")) {\r\n            history.push(`analysisReport/${id}/${graphType}/${bin}/${data[index].x}/${data[index].y}`);\r\n            localStorage.setItem('graphType', graphType)\r\n            localStorage.setItem('tab', 'analysis');\r\n            localStorage.setItem('deviceId', localStorage.getItem('deviceId2'))\r\n            localStorage.setItem('start_date', start_date)\r\n            localStorage.setItem('end_date', end_date)\r\n            localStorage.setItem('dateSelector', dateSelector)\r\n        } else {\r\n            if (isFreeUser) {\r\n                message.error(\"This analysis feature is available for premium users only\");\r\n            } else {\r\n                message.error(\"Permission Denied\");\r\n            }\r\n            return;\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        setChartData({\r\n            series: [{\r\n                name: 'Amplitude', // Custom label for the series\r\n                data: series,\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    type: 'line',\r\n                    zoom: {\r\n                        enabled: true, // Enable zoom functionality\r\n                        type: 'x',     // Zoom along the x-axis (options: 'x', 'y', 'xy')\r\n                        autoScaleYaxis: true, // Adjust y-axis automatically when zoomed\r\n                    },\r\n                    events: {\r\n                        click: function (event, chartContext, config) {\r\n                            if (typeof config.seriesIndex !== 'undefined' && typeof config.dataPointIndex !== 'undefined') {\r\n                                // return;\r\n                                handleClick(config.config?.series[0].data, config.dataPointIndex);\r\n\r\n                            }\r\n                        },\r\n\r\n                        zoomed: handleZoom,\r\n\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        formatter: function (val) {\r\n                            return val?.toFixed(2);\r\n                        }\r\n                    }\r\n                },\r\n                stroke: {\r\n                    curve: 'straight',\r\n                    width: 1\r\n                },\r\n                xaxis: {\r\n                    type: 'datetime',\r\n                    labels: {\r\n                        formatter: function (value) {\r\n                            const date = moment(value);\r\n\r\n                            // If dateSelector is a date range, apply dynamic formatting\r\n                            if (dateSelector === \"Date-Range\" && start_date && end_date) {\r\n                                const start = moment(start_date);\r\n                                const end = moment(end_date);\r\n                                const diff = end.diff(start, \"days\");\r\n\r\n                                if (diff < 1) {\r\n                                    return date.format(\"HH:mm\");\r\n                                } else if (diff < 7) {\r\n                                    return date.format(\"ddd, DD-MM\");\r\n                                } else if (diff < 30) {\r\n                                    return date.format(\"DD-MM-YYYY\");\r\n                                } else {\r\n                                    return date.format(\"MMM YYYY\");\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (dateSelector == \"1\") {\r\n                                    return date.format(\"HH:mm\");  // Show hours and minutes\r\n                                } else if (dateSelector == \"7\") {\r\n                                    return date.format(\"dddd, DD-MM-YYYY\");  // Show week name + date\r\n                                } else {\r\n                                    return date.format(\"DD-MM-YYYY\");\r\n                                } \r\n                            }\r\n                        },\r\n\r\n                        show: true,\r\n                    },\r\n                    tickAmount: 6,\r\n                },\r\n                tooltip: {\r\n                    x: {\r\n                        formatter: (val) => {\r\n                            return moment(val).format('HH:mm DD-MM-YYYY');\r\n                        },\r\n                    },\r\n                },\r\n                annotations: {\r\n                    // yaxis: [\r\n                    //     {\r\n                    //         y: 8, // Max Threshold\r\n                    //         borderColor: '#64E926', // Green color\r\n                    //         strokeDashArray: 0, // Solid line\r\n                    //         label: {\r\n                    //             borderColor: '#00E396',\r\n                    //             style: {\r\n                    //                 color: '#fff',\r\n                    //                 background: '#00E396',\r\n                    //             },\r\n                    //             // text: 'Max Threshold',\r\n                    //         },\r\n                    //     },\r\n                    //     {\r\n                    //         y: 4,\r\n                    //         borderColor: '#FF4768',\r\n                    //         strokeDashArray: 0,\r\n                    //         label: {\r\n                    //             borderColor: '#FF4560',\r\n                    //             style: {\r\n                    //                 color: '#fff',\r\n                    //                 background: '#FF4560',\r\n                    //             },\r\n                    //             // text: 'Min Threshold',\r\n                    //         },\r\n                    //     },\r\n                    // ],\r\n                    // points: [\r\n                    //     {\r\n                    //         x: moment('2024-12-12 10:57', 'YYYY-MM-DD HH:mm').valueOf(),  // Example time (change as needed)\r\n                    //         y: 3,  // Max Threshold\r\n                    //         marker: {\r\n                    //             size: 6,  // Dot size (radius * 2 for full diameter)\r\n                    //             fillColor: '#0000FF',  // Blue color\r\n                    //             strokeColor: '#0000FF', // Blue color\r\n                    //             radius: 2,  // 2px radius (dot)\r\n                    //         },\r\n\r\n                    //     },\r\n\r\n                    // ],\r\n                },\r\n            },\r\n        });\r\n    }, [series, dateSelector]);\r\n\r\n    return (\r\n        <div>  <Card>\r\n            <div style={{\r\n                fontWeight: 'bold',\r\n                fontSize: '17px',\r\n                color: '#000000',\r\n            }}>{title}</div>\r\n            <ReactApexChart\r\n                options={chartData.options}\r\n                series={chartData.series}\r\n                type=\"line\"\r\n                height={370}\r\n                key={JSON.stringify(chartData.series)} // Forces re-render\r\n            />\r\n            <div style={{\r\n                fontWeight: 'bold',\r\n                fontSize: '12px',\r\n                color: '#72849A',\r\n                textAlign: 'center',\r\n                marginTop: '10px'\r\n            }}>{label}</div>\r\n        </Card></div>\r\n    )\r\n}\r\n\r\nexport default LineChart","/home/faizan/jd-works/customer-web-app/src/components/shared-components/ChartWidget/BarChart.js",["1514"],"import { Card } from 'antd';\r\nimport moment from 'moment';\r\nimport React from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\nfunction BarChart({ series, title, label }) {\r\n    const data = {\r\n        series: [{\r\n            name: 'Amplitude', // Custom label for the series\r\n            data: series,\r\n        }],\r\n        options: {\r\n            chart: {\r\n                type: 'bar', // Ensures this is a bar chart\r\n                zoom: {\r\n                    enabled: false\r\n                }\r\n            },\r\n            plotOptions: {\r\n                bar: {\r\n                    columnWidth: '20%', // Thinner bars, with no gaps\r\n                    barHeight: '100%',\r\n                }\r\n            },\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            yaxis: {\r\n                labels: {\r\n                    formatter: function (val) {\r\n                \r\n                        return val.toFixed(2);\r\n                    }\r\n                }\r\n            },\r\n            stroke: {\r\n                curve: 'straight',\r\n                width: 1\r\n            },\r\n            xaxis: {\r\n                type: 'numeric', // Change x-axis to numeric for frequency values\r\n                labels: {\r\n                    formatter: function (value) {\r\n                        return (typeof value === 'number') ? value.toFixed(2): value; \r\n                        // return value?.toFixed(2); // Direct numeric values for frequency\r\n                    },\r\n                    show: true,\r\n                },\r\n           \r\n            },\r\n            tooltip: {\r\n                x: {\r\n                    formatter: (val) => {\r\n                        return `${val} Hz`; // Display frequency with \"Hz\"\r\n                    },\r\n                },\r\n            }\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <div style={{\r\n                    fontWeight: 'bold',\r\n                    fontSize: '17px',\r\n                    color: '#000000',\r\n                }}>{title}</div>\r\n                <ReactApexChart options={data.options} series={data.series} type=\"bar\" height={370} />\r\n                <div style={{\r\n                    fontWeight: 'bold',\r\n                    fontSize: '12px',\r\n                    color: '#72849A',\r\n                    textAlign: 'center',\r\n                    marginTop: '10px'\r\n                }}>{label}</div>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BarChart;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotor-Insulation/EditRIModal.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotor-Resistance/EditRRModal.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotor-Resistance/RRUpload.js",[],"/home/faizan/jd-works/customer-web-app/src/utils/Csv.js",[],"/home/faizan/jd-works/customer-web-app/src/constants/Headers.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/order-management/Card/CardOrder.js",["1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525"],"import { Card, Divider, Popover, Tag } from \"antd\";\r\nimport React from \"react\";\r\nimport VibrationIcon from \"assets/Frame 1171275235.png\";\r\nimport QuotationIcon from \"assets/quotation.png\";\r\nimport HousingIcon from \"assets/house.png\";\r\nimport Machine from \"assets/Machine.png\";\r\nimport CalendarIcon from \"assets/calendarForDesc.png\";\r\nimport Onsite from \"assets/LocationIcon.png\";\r\nimport ProfileForCard from \"assets/ProfileForCard.png\";\r\nimport InHouse from \"assets/svg/inhouse.svg\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport moment from \"moment\";\r\n\r\nfunction CardOrder({ data }) {\r\n  const history = useHistory();\r\n  return (\r\n    <>\r\n      <Card\r\n        style={{\r\n          width: \"32%\",\r\n          cursor: \"pointer\",\r\n        }}\r\n        onClick={() => {\r\n          history.push(\"/app/order-management/order-detail\"+\"/\"+data.id);\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            gap: \"10px\",\r\n          }}\r\n        >\r\n          <div>\r\n            <img src={VibrationIcon} />\r\n          </div>\r\n          <div\r\n            style={{\r\n              flex: 1,\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                fontSize: \"20px\",\r\n                color: \"#000\",\r\n              }}\r\n            >\r\n              {/* Vibration Analysis */}\r\n            </div>\r\n            <div>#{data.id}</div>\r\n            <div>\r\n             { \r\n              data.status === 2 ? (\r\n                <Tag color=\"green\">Survery Scheduled</Tag>\r\n              ) : \r\n              data.status === 3 ? (\r\n                <Tag color=\"green\">Survey Completed</Tag>\r\n              ) :\r\n              data.status === 1 ? (\r\n                <Tag color=\"green\">Order Created</Tag>\r\n        \r\n            ):null\r\n            }\r\n              \r\n            </div>\r\n          </div>\r\n          <div>\r\n            {\r\n              data.is_quotation_generated==1?\r\n             <Popover title=\"Quotation Generated\"><img\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n              src={QuotationIcon}\r\n            /></Popover> :null\r\n            }\r\n          </div>\r\n          <div>\r\n            {/* data.maintenance_service_type!==\"Onsite\"?Onsite:LocationForIcon */}\r\n            {data.maintenance_service_type == \"Onsite\" ? (\r\n              <Popover  content=\"Onsite\"><img style={{}} src={Onsite} /></Popover>\r\n            ) : (\r\n              <Popover content=\"Workshop\"><img style={{}} src={InHouse} /></Popover> \r\n            )}\r\n          </div>\r\n          {/* <div>\r\n            <img\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n              src={ProfileForCard}\r\n            />\r\n          </div> */}\r\n        </div>\r\n        <Divider\r\n          variant=\"dashed\"\r\n          style={{\r\n            borderColor: \"#F6F4F4\",\r\n          }}\r\n          dashed\r\n        />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            gap: \"10px\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div>\r\n              <img src={HousingIcon} />\r\n            </div>\r\n            <div\r\n              style={{\r\n                color: \"#72849A\",\r\n                fontSize: \"14px\",\r\n              }}\r\n            >\r\n              {data.job_site?.jobsite_name}\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div>\r\n              <img src={Machine} />\r\n            </div>\r\n            <div\r\n              style={{\r\n                color: \"#72849A\",\r\n                fontSize: \"14px\",\r\n              }}\r\n            >\r\n              {data.machine?.name}\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div>\r\n              <img src={CalendarIcon} />\r\n            </div>\r\n            <div\r\n              style={{\r\n                color: \"#72849A\",\r\n                fontSize: \"14px\",\r\n              }}\r\n            >\r\n              {moment(data.created_at).format(\"DD-MM-YYYY hh:mm A\")}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CardOrder;\r\n\r\n// function CardOrder({data}) {\r\n//     console.log(data)\r\n//     const history = useHistory();\r\n//     return (\r\n//         <>\r\n//             <Card style={{\r\n//                 width: \"32%\",\r\n//                 cursor: \"pointer\",\r\n//             }}\r\n//                 onClick={() => {\r\n//                     history.push(\"/app/inquiry-management/inquiry-details/\" + data.id)\r\n//                 }}\r\n//             >\r\n//                 <div style={{\r\n//                     display: \"flex\",\r\n//                     gap: \"10px\",\r\n//                 }}>\r\n//                     <div>\r\n//                         <img src={VibrationIcon} />\r\n//                     </div>\r\n//                     <div style={{\r\n//                         flex: 1,\r\n//                     }}>\r\n//                         <div style={{\r\n//                             fontWeight: \"bold\",\r\n//                             fontSize: \"20px\",\r\n//                             color: \"#000\"\r\n//                         }}>{data.inquiry_type}</div>\r\n//                         <div>#{data.id}</div>\r\n//                         <div>\r\n//                             {\r\n//                                 data.inquiry_status === 0 ? <Tag color=\"orange\">Pending</Tag> : <Tag color=\"green\">Completed</Tag>\r\n//                             }\r\n//                         </div>\r\n//                     </div>\r\n//                     <div >\r\n//                         <img style={{\r\n//                             cursor: \"pointer\"\r\n//                         }} src={QuotationIcon} />\r\n//                     </div>\r\n//                     <div>\r\n//                         <img style={{\r\n//                             cursor: \"pointer\"\r\n//                         }} src={LocationForIcon} />\r\n//                     </div>\r\n//                     {/* <div>\r\n//                         <img style={{\r\n//                             cursor: \"pointer\"\r\n//                         }} src={ProfileForCard} />\r\n//                     </div> */}\r\n//                 </div>\r\n//                 <Divider\r\n//                     variant=\"dashed\"\r\n//                     style={{\r\n//                         borderColor: '#F6F4F4',\r\n//                     }}\r\n//                     dashed\r\n//                 />\r\n//                 <div style={{\r\n//                     display: \"flex\",\r\n//                     flexDirection: \"column\",\r\n//                     gap: \"10px\",\r\n\r\n//                 }}>\r\n//                     <div style={{\r\n//                         display: \"flex\",\r\n//                         gap: \"10px\",\r\n//                         alignItems: \"center\",\r\n\r\n//                     }}>\r\n\r\n//                         <div><img src={HousingIcon} /></div>\r\n//                         <div style={{\r\n//                             color: \"#72849A\",\r\n//                             fontSize: \"14px\",\r\n//                         }}>\r\n//                             {data.job_site?.jobsite_name}\r\n//                         </div>\r\n//                     </div>\r\n\r\n//                     <div style={{\r\n//                         display: \"flex\",\r\n//                         gap: \"10px\",\r\n//                         alignItems: \"center\",\r\n\r\n//                     }}>\r\n\r\n//                         <div><img src={Machine} /></div>\r\n//                         <div style={{\r\n//                             color: \"#72849A\",\r\n//                             fontSize: \"14px\",\r\n//                         }}>  {data.job_site?.jobsite_description}</div>\r\n//                     </div>\r\n\r\n//                     <div style={{\r\n//                         display: \"flex\",\r\n//                         gap: \"10px\",\r\n//                         alignItems: \"center\",\r\n\r\n//                     }}>\r\n\r\n//                         <div><img src={CalendarIcon} /></div>\r\n//                         <div style={{\r\n//                             color: \"#72849A\",\r\n//                             fontSize: \"14px\",\r\n//                         }}>{\r\n//                             moment(data.created_at).format('DD-MM-YYYY HH:mm A')\r\n//                         }</div>\r\n//                     </div>\r\n\r\n//                 </div>\r\n//             </Card>\r\n//         </>\r\n//     )\r\n// }\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/inquiry-management/Card/CardOrder.js",["1526","1527","1528","1529","1530","1531","1532","1533","1534","1535"],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/Card/Gauge.js",["1536"],"import React from \"react\";\r\nimport GaugeChart from \"react-gauge-chart\";\r\nimport { retry } from \"redux-saga/effects\";\r\n\r\n\r\nfunction Gauge({ value }) {\r\n    function getGaugeColor(value) {\r\n        if (value >= 7 && value <= 10) {\r\n            return \"Good\"\r\n        } else if (value >= 5 && value < 7) {\r\n            return \"Satisfactory\"\r\n        } else if (value >= 2 && value < 5) {\r\n            return \"Warning\"\r\n        } else if (value >= 0 && value < 2) {\r\n            return \"Critical\"\r\n        }\r\n    }\r\n\r\n    //     like 7-10 hai to Good\r\n    // 5-7 hai to Satisfactory\r\n    // 5-2 hai to Warning\r\n    // 2-0 hai to Critical\r\n    return (\r\n        <>\r\n            <GaugeChart\r\n                id=\"gauge-chart3\"\r\n                nrOfLevels={30}\r\n                colors={['#F93737', '#FB5D2C', '#FB8920', '#FFA500', '#FFCB21', '#A6D62E', '#00A843']}\r\n                arcWidth={0.3} // Thickness of the arc\r\n                percent={value / 10}\r\n                textColor=\"black\" // Label text color\r\n                arcLength={0.5} // Ensures a semi-circle\r\n                needleColor=\"black\" // Pointer color\r\n            />\r\n            <div style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n            }}>\r\n                <span style={{\r\n                    fontSize: \"12px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"black\",\r\n                    textAlign: \"center\"\r\n                }}>{getGaugeColor(value)}</span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Gauge;\r\n","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Flame-Path-Dimension/EditFlamePathDimension.js",["1537","1538","1539","1540"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Button, Modal, Radio, Select, Input, Tooltip } from 'antd';\r\nimport { EditColorIcon } from 'assets/svg/icon';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditFlamePathDimension = ({ modalName, setEditStatus, editStatus, editData, editKey, suffixData, setSuffixData, setFlamePathData }) => {\r\n    const [tempEditData, setTempEditData] = useState(editData);\r\n\r\n    useEffect(() => {\r\n        let crr_Data = tempEditData.map((internalData) => {\r\n            // let val = suffixData[internalData.name] ? internalData.value?.split('-')[0] : internalData.value\r\n\r\n            let val = suffixData[internalData.name] \r\n            ? \r\n            [ \r\n                internalData.value && internalData.value?.split('-')[0], \r\n                (internalData.value && internalData.value?.split('-')[0]) ? internalData.value?.split('-')[1] : suffixData[internalData.name]\r\n            ]\r\n            : \r\n            internalData.value;\r\n            return {\r\n                ...internalData,\r\n                value: val\r\n            }\r\n        })\r\n        setTempEditData(crr_Data)\r\n    }, [])\r\n    \r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title={\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details - {modalName}</span>\r\n                    </div>\r\n                }\r\n                visible={editStatus}\r\n                onCancel={() => setEditStatus(false)}\r\n                footer={false}\r\n                width={1140}\r\n            >\r\n                {tempEditData.map((item, i) => (\r\n                    <div key={i}>\r\n                        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                            <div className=\"d-flex\" style={{ gap: '6px', width: '50%' }}>\r\n                                <Radio.Group\r\n                                    name=\"v1_v2\"\r\n                                    onChange={(e) => {\r\n                                        setTempEditData((data) => {\r\n                                            let dt = data.map((el) => {\r\n                                                if(el.name == item.name) {\r\n                                                    return {\r\n                                                        ...el,\r\n                                                        check: e.target.value\r\n                                                    }\r\n                                                } else {\r\n                                                    return {\r\n                                                        ...el\r\n                                                    }\r\n                                                }\r\n                                            })\r\n                                            return dt\r\n                                        });\r\n                                        // console.log(tempEditData[item.key-1]);\r\n                                    }}\r\n                                    value={item?.check}\r\n                                >\r\n                                    <Radio className=\"green-radio\" value={1}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"red-radio\" value={2}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"grey-radio\" value={3}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                </Radio.Group>\r\n                                <label>{item.name}</label>\r\n                                <div>\r\n                                    <Tooltip title={item.name}>\r\n                                        <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>\r\n                            <Input\r\n                                style={{ width: \"50%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                value={item?.value[0]}\r\n                                onChange={(e) => {\r\n                                    setTempEditData((data) => {\r\n                                        let dt = data.map((el) => {\r\n                                            if(el.name == item.name) {\r\n                                                let val = suffixData[item.name] ? [e.target.value, el.value[1]] : [e.target.value]\r\n                                                return {\r\n                                                    ...el,\r\n                                                    // value: e.target.value\r\n                                                    value: val\r\n                                                }\r\n                                            } else {\r\n                                                return {\r\n                                                    ...el\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                        return dt\r\n                                    });\r\n                                    // console.log(tempEditData[item.key-1]);\r\n                                }}\r\n                                addonAfter={suffixData[item.name] && (\r\n                                    <Select\r\n                                        value={item?.value[1]}\r\n                                        defaultValue={'mm'}\r\n                                        className=\"select-after\"\r\n                                        onChange={(e) => {\r\n                                            // setSuffixData((data) => {\r\n                                            //     let dt = data\r\n                                            //     dt[item.name] = e\r\n                                            //     return {...dt}\r\n                                            // })\r\n\r\n                                            setTempEditData((data) => {\r\n                                                let dt = data.map((el) => {\r\n                                                    if(el.name == item.name) {\r\n                                                        let val = [el.value[0], e]\r\n                                                        return {\r\n                                                            ...el,\r\n                                                            // value: e.target.value\r\n                                                            value: val\r\n                                                        }\r\n                                                    } else {\r\n                                                        return {\r\n                                                            ...el\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                return dt\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        <Option value=\"mm\">mm</Option>\r\n                                        <Option value=\"cm\">cm<sup>3</sup></Option>\r\n                                    </Select>\r\n                                )}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n                <div className=\"d-flex justify-content-end mt-5\">\r\n                    <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        key=\"save\"\r\n                        className=\"bg-primary text-white ml-2\"\r\n                        onClick={() => {\r\n                            setEditStatus(false);\r\n                            let fpData = tempEditData.map((e) => {\r\n                                let val_suffix = '';\r\n                                let val = '';\r\n                                if(suffixData[e.name]) {\r\n                                    if(e.value[0]) val_suffix = '-'+e.value[1];\r\n                                    val = e.value[0] + val_suffix;\r\n                                } else {\r\n                                    val = e.value[0]\r\n                                }\r\n                                // val_suffix = ((e.value && suffixData[e.name]) ? '-'+suffixData[e.name] : '')\r\n                                return {\r\n                                    ...e,\r\n                                    value: val\r\n                                }\r\n                            })\r\n                            setFlamePathData((data) => {\r\n                                let flameData = data.map((e) => {\r\n                                    if(e.key === editKey) {\r\n                                        return {\r\n                                            ...e,\r\n                                            data: fpData\r\n                                        }\r\n                                    } else {\r\n                                        return {...e}\r\n                                    }\r\n                                })\r\n                                return flameData\r\n                            });\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditFlamePathDimension","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Auxiliaries-Checks/EditAuxiliariesChecks.js",["1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552","1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563","1564","1565","1566","1567","1568","1569","1570","1571","1572","1573","1574","1575"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Modal, Radio, Select, Input, Tooltip } from 'antd';\r\nimport { EditColorIcon } from 'assets/svg/icon';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditAuxiliariesChecks = ({ modalName, setEditStatus, editStatus, editData, editKey, suffixData, setSuffixData, setAuxiliariesChecksData }) => {\r\n    const [tempEditData, setTempEditData] = useState(editData);\r\n    \r\n    \r\n\r\n    const getSuffixIndex = (data) => {\r\n        // console.log(\"check-1\", data);\r\n        // console.log(modalName);\r\n        let key = '';\r\n        if(modalName == 'Heater' || modalName == 'Brake') {\r\n            if(+data.key == 2) {\r\n                key = 'Result - Insulation'\r\n            }\r\n            else if(+data.key == 4) {\r\n                key = 'Result - Resistance'\r\n            } else {\r\n                key = data.name\r\n            }\r\n        } else if(modalName == 'Thermistor' || modalName == 'Thermostat' || modalName == 'PT-100') {\r\n            if(+data.key == 2) {\r\n                key = 'Result - Resistance'\r\n            }\r\n        } else  {\r\n            key = data.name\r\n        }\r\n        // console.log(key)\r\n        let sf_name_found =  Object.keys(suffixData).find((e) => e == key);\r\n        if(sf_name_found) {\r\n            return sf_name_found\r\n        } else {\r\n            return false\r\n        }\r\n    };\r\n\r\n    const showCurrentSuffix = (data, suffix) => {\r\n        // console.log(\"check-1\", data);\r\n        let show_sfx = null;\r\n\r\n        if(modalName == 'Heater' || modalName == 'Brake') {\r\n            if(+data.key == 1 && ['E','MΩ','GΩ'].includes(suffix)) {\r\n                show_sfx = true\r\n            }\r\n            else if(+data.key == 2 && ['MΩ','GΩ'].includes(suffix)) {\r\n                show_sfx = true\r\n            }\r\n            else if(+data.key == 3 && ['KΩ','Ω'].includes(suffix)) {\r\n                show_sfx = true\r\n            }\r\n            else if(+data.key == 4 && ['KΩ','Ω'].includes(suffix)) {\r\n                show_sfx = true\r\n            }\r\n            else if(data.name.includes('Volt') && ['V'].includes(suffix)) {\r\n                show_sfx = true\r\n            }\r\n            else if(data.name.includes('Current') && ['A'].includes(suffix)) {\r\n                show_sfx = true\r\n            }\r\n            else {\r\n                show_sfx = false\r\n            }\r\n        } else if(modalName == 'Thermistor' || modalName == 'Thermostat' || modalName == 'PT-100') {\r\n            if(+data.key == 1 && ['KΩ','Ω'].includes(suffix)) {\r\n                show_sfx = true\r\n            }\r\n            else if(+data.key == 2 && ['MΩ','GΩ'].includes(suffix)) {\r\n                show_sfx = true\r\n            } else {\r\n                show_sfx = false\r\n            }\r\n        } else  {\r\n            show_sfx = data.name\r\n        }\r\n        // console.log(show_sfx)\r\n        return show_sfx\r\n    };\r\n\r\n    useEffect(() => {\r\n        let crr_Data = tempEditData.map((internalData) => {\r\n            let val = []\r\n            if(internalData.value) {\r\n                if(suffixData[getSuffixIndex(internalData)]) {\r\n                    if(internalData.name == 'Resistance') {\r\n                        let dt_arr = internalData.value.includes(' ~ ') ? internalData.value?.split(' ~ ') : null;\r\n                        \r\n                        if(dt_arr) {\r\n                            // val = [dt_arr[0].split('-')[0], dt_arr[1].split('-')[0]];\r\n                            \r\n                            if(dt_arr[0]) {\r\n                                let arr = dt_arr[0].split('-')\r\n                                val = [arr[0], arr[1]]\r\n                            } else {\r\n                                val = ['', suffixData[getSuffixIndex(internalData)]]\r\n                            }\r\n    \r\n                            if(dt_arr[1]) {\r\n                                let arr = dt_arr[1].split('-')\r\n                                val = [...val, arr[0], arr[1]]\r\n                            } else {\r\n                                val = [...val, '', suffixData[getSuffixIndex(internalData)]]\r\n                            }\r\n                        } else {\r\n                            val = [\r\n                                '', suffixData[getSuffixIndex(internalData)], \r\n                                '', suffixData[getSuffixIndex(internalData)]\r\n                            ]\r\n                        }\r\n                    } else {\r\n                        // val = internalData.value?.split('-')[0]\r\n                        val = [ \r\n                            internalData.value?.split('-')[0], \r\n                            internalData.value?.split('-')[1]\r\n                        ]\r\n                    } \r\n                }\r\n                else {\r\n                    val = [internalData.value]\r\n                }\r\n            } else {\r\n                if(suffixData[getSuffixIndex(internalData)]) {\r\n                    if(internalData.name == 'Resistance') {\r\n                        val = [ \r\n                            '', suffixData[getSuffixIndex(internalData)] ,\r\n                            '', suffixData[getSuffixIndex(internalData)] \r\n                        ]\r\n                        console.log(val)\r\n                    } else {\r\n                        val = [ '', suffixData[getSuffixIndex(internalData)] ];\r\n                        console.log(val)\r\n                    } \r\n                }\r\n                else {\r\n                    val = [internalData.value]\r\n                    console.log(val)\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...internalData,\r\n                value: val\r\n            }\r\n        })\r\n        setTempEditData(crr_Data)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title={\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details - {modalName}</span>\r\n                    </div>\r\n                }\r\n                visible={editStatus}\r\n                onCancel={() => setEditStatus(false)}\r\n                footer={false}\r\n                width={1140}\r\n            >\r\n                {tempEditData.map((item, i) => (\r\n                    <div key={i}>\r\n                        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                            <div className=\"d-flex\" style={{ gap: '6px', width: '50%' }}>\r\n                                <Radio.Group\r\n                                    name=\"v1_v2\"\r\n                                    onChange={(e) => {\r\n                                        setTempEditData((data) => {\r\n                                            let dt = data.map((el) => {\r\n                                                if((el.name == item.name) && (el.key === item.key)) {\r\n                                                    return {\r\n                                                        ...el,\r\n                                                        check: e.target.value\r\n                                                    }\r\n                                                } else {\r\n                                                    return {\r\n                                                        ...el\r\n                                                    }\r\n                                                }\r\n                                            })\r\n                                            return dt\r\n                                        });\r\n                                    }}\r\n                                    value={item?.check}\r\n                                >\r\n                                    <Radio className=\"green-radio\" value={1}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"red-radio\" value={2}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"grey-radio\" value={3}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                </Radio.Group>\r\n                                <label>{item.name}</label>\r\n                                <div>\r\n                                    <Tooltip title={item.name}>\r\n                                        <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>\r\n                            {!(item.name == 'Resistance') &&\r\n                                <Input\r\n                                    style={{ width: \"50%\" }}\r\n                                    placeholder=\"Type here...\"\r\n                                    value={item?.value[0]}\r\n                                    onChange={(e) => {\r\n                                        setTempEditData((data) => {\r\n                                            let dt = data.map((el) => {\r\n                                                if(el.name == item.name && el.key == item.key) {\r\n                                                    let val = suffixData[getSuffixIndex(item)] ? [e.target.value, el.value[1]] : [e.target.value]\r\n                                                    return {\r\n                                                        ...el,\r\n                                                        // value: e.target.value\r\n                                                        value: val\r\n                                                    }\r\n                                                } else {\r\n                                                    return {\r\n                                                        ...el\r\n                                                    }\r\n                                                }\r\n                                            })\r\n                                            return dt\r\n                                        });\r\n                                    }}\r\n                                    addonAfter={getSuffixIndex(item) && (\r\n                                        <Select\r\n                                            // value={suffixData[getSuffixIndex(item)]}\r\n                                            value={item?.value[1]}\r\n                                            className=\"select-after\"\r\n                                            defaultValue={suffixData[getSuffixIndex(item)]}\r\n                                            onChange={(e) => {\r\n                                                // setSuffixData((data) => {\r\n                                                //     let dt = data\r\n                                                //     dt[getSuffixIndex(item)] = e\r\n                                                //     return {...dt}\r\n                                                // })\r\n                                                setTempEditData((data) => {\r\n                                                    let dt = data.map((el) => {\r\n                                                        if(el.name == item.name && el.key == item.key) {\r\n                                                            let val = [el.value[0], e]\r\n                                                            return {\r\n                                                                ...el,\r\n                                                                value: val\r\n                                                            }\r\n                                                        } else {\r\n                                                            return {\r\n                                                                ...el\r\n                                                            }\r\n                                                        }\r\n                                                    })\r\n                                                    return dt\r\n                                                });\r\n                                            }}\r\n                                            disabled={['V','A'].includes(suffixData[item.name])}\r\n                                        >\r\n                                            {showCurrentSuffix(item, \"MΩ\") && <Option value=\"MΩ\">MΩ</Option>}\r\n                                            {showCurrentSuffix(item, \"GΩ\") && <Option value=\"GΩ\">GΩ</Option>}\r\n                                            {showCurrentSuffix(item, \"KΩ\") && <Option value=\"KΩ\">KΩ</Option>}\r\n                                            {showCurrentSuffix(item, \"Ω\") && <Option value=\"Ω\">Ω</Option>}\r\n\r\n                                            {showCurrentSuffix(item, \"E\") && <Option value=\"E\">E</Option>}\r\n                                            {showCurrentSuffix(item, \"V\") && <Option value=\"V\">V</Option>}\r\n                                            {showCurrentSuffix(item, \"A\") && <Option value=\"A\">A</Option>}\r\n                                        </Select>\r\n                                    )}\r\n                                />\r\n                            }\r\n                            {(item.name == 'Resistance') && <div className='w-50 d-flex justify-content-between'>\r\n                                    <Input\r\n                                        style={{ width: \"47%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        // value={item?.value[0]}\r\n                                        value={item?.value[0]}\r\n                                        onChange={(e) => {\r\n                                            setTempEditData((data) => {\r\n                                                let dt = data.map((el) => {\r\n                                                    if((el.name == item.name) && (el.key === item.key)) {\r\n                                                        // let val = [e.target.value, el.value[1]]\r\n                                                        // let val = [[e.target.value,el.value[0][1]], el.value[1]]\r\n                                                        let val = [e.target.value , el.value[1], el.value[2], el.value[3]]\r\n                                                        return {\r\n                                                            ...el,\r\n                                                            value: val\r\n                                                        }\r\n                                                    } else {\r\n                                                        return {\r\n                                                            ...el\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                return dt\r\n                                            });\r\n                                        }}\r\n                                        addonAfter={getSuffixIndex(item) && (\r\n                                            <Select\r\n                                                // value={suffixData[getSuffixIndex(item)]}\r\n                                                // value={item?.value[0][1]}\r\n                                                value={item?.value[1]}\r\n                                                className=\"select-after\"\r\n                                                defaultValue={suffixData[getSuffixIndex(item)]}\r\n                                                onChange={(e) => {\r\n                                                    // setSuffixData((data) => {\r\n                                                    //     let dt = data\r\n                                                    //     dt[getSuffixIndex(item)] = e\r\n                                                    //     return {...dt}\r\n                                                    // })\r\n                                                    setTempEditData((data) => {\r\n                                                        let dt = data.map((el) => {\r\n                                                            if(el.name == item.name) {\r\n                                                                // let val = [el.value[0], e]\r\n                                                                // let val = [[el.value[0][0], e], el.value[1]]\r\n                                                                let val = [el.value[0], e.target.value, el.value[2], el.value[3]]\r\n                                                                return {\r\n                                                                    ...el,\r\n                                                                    value: val\r\n                                                                }\r\n                                                            } else {\r\n                                                                return {\r\n                                                                    ...el\r\n                                                                }\r\n                                                            }\r\n                                                        })\r\n                                                        return dt\r\n                                                    });\r\n                                                }}\r\n                                            >\r\n                                                <Option value=\"KΩ\">KΩ</Option>\r\n                                                <Option value=\"Ω\">Ω</Option>\r\n                                            </Select>\r\n                                        )}\r\n                                    />\r\n                                    <div className='d-flex align-items-center'><h4>-</h4></div>\r\n                                    <Input\r\n                                        style={{ width: \"47%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        // value={item?.value[1]}\r\n                                        value={item?.value[2]}\r\n                                        onChange={(e) => {\r\n                                            setTempEditData((data) => {\r\n                                                let dt = data.map((el) => {\r\n                                                    if((el.name == item.name) && (el.key === item.key)) {\r\n                                                        // let val = [el.value[0], e.target.value]\r\n                                                        // let val = [el.value[0], [e.target.value,el.value[1][1]]]\r\n                                                        let val = [el.value[0], el.value[1], e.target.value, el.value[3]]\r\n                                                        return {\r\n                                                            ...el,\r\n                                                            value: val\r\n                                                        }\r\n                                                    } else {\r\n                                                        return {\r\n                                                            ...el\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                return dt\r\n                                            });\r\n                                        }}\r\n                                        addonAfter={getSuffixIndex(item) && (\r\n                                            <Select\r\n                                                // value={suffixData[getSuffixIndex(item)]}\r\n                                                value={item?.value[3]}\r\n                                                className=\"select-after\"\r\n                                                defaultValue={suffixData[getSuffixIndex(item)]}\r\n                                                onChange={(e) => {\r\n                                                    // setSuffixData((data) => {\r\n                                                    //     let dt = data\r\n                                                    //     dt[getSuffixIndex(item)] = e\r\n                                                    //     return {...dt}\r\n                                                    // })\r\n                                                    setTempEditData((data) => {\r\n                                                        let dt = data.map((el) => {\r\n                                                            if(el.name == item.name) {\r\n                                                                // let val = [el.value[0], e]\r\n                                                                // let val = [el.value[0], [el.value[1][0], e]]\r\n                                                                let val = [el.value[0], el.value[1], el.value[2], e.target.value]\r\n                                                                return {\r\n                                                                    ...el,\r\n                                                                    value: val\r\n                                                                }\r\n                                                            } else {\r\n                                                                return {\r\n                                                                    ...el\r\n                                                                }\r\n                                                            }\r\n                                                        })\r\n                                                        return dt\r\n                                                    });\r\n                                                }}\r\n                                            >\r\n                                                <Option value=\"KΩ\">KΩ</Option>\r\n                                                <Option value=\"Ω\">Ω</Option>\r\n                                            </Select>\r\n                                        )}\r\n                                    />\r\n                                </div>\r\n                            }\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n                <div className=\"d-flex justify-content-end mt-5\">\r\n                    <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        key=\"save\"\r\n                        className=\"bg-primary text-white ml-2\"\r\n                        onClick={() => {\r\n                            setEditStatus(false);\r\n                            let fpData = tempEditData.map((e) => {\r\n                                let val = '';\r\n                                let val_suffix = '';\r\n                                if(e.name == 'Resistance') {\r\n                                    // let sf_1 = e.value[0] ? '-'+suffixData['Resistance'] : '';\r\n                                    // let sf_2 = e.value[1] ? '-'+suffixData['Resistance'] : '';\r\n                                    // val = (e.value[0] ? e.value[0] + sf_1 : '') + ' ~ ' + (e.value[1] ? (e.value[1] + sf_2) : '');\r\n\r\n                                    let sf_1 = e.value[0] ? '-'+e.value[1] : '';\r\n                                    let sf_2 = e.value[2] ? '-'+e.value[3] : '';\r\n                                    val = (e.value[0] ? e.value[0] + sf_1 : '') + ' ~ ' + (e.value[2] ? (e.value[2] + sf_2) : '');\r\n                                } else {\r\n                                    val_suffix = ((e.value[0] && suffixData[getSuffixIndex(e)]) ? '-'+e.value[1] : '')\r\n                                    val = e.value[0] + val_suffix\r\n                                    // console\r\n                                }\r\n                                return {\r\n                                    ...e,\r\n                                    // value: e.value + val_suffix\r\n                                    value: val\r\n                                }\r\n                            })\r\n                            console.log(fpData)\r\n                            setAuxiliariesChecksData((data) => {\r\n                                let flameData = data.map((e) => {\r\n                                    if(e.key === editKey) {\r\n                                        return {\r\n                                            ...e,\r\n                                            data: fpData\r\n                                        }\r\n                                    } else {\r\n                                        return {...e}\r\n                                    }\r\n                                })\r\n                                return flameData\r\n                            });\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default EditAuxiliariesChecks","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Free-Volume-Check/EditFreeVolumeCheck.js",["1576","1577","1578","1579","1580"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Button, Modal, Radio, Select, Input, Tooltip } from 'antd';\r\nimport { EditColorIcon } from 'assets/svg/icon';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditFreeVolumeCheck = ({ modalName, setEditStatus, editStatus, editData, editKey, suffixData, setSuffixData, setFreeVolumeData }) => {\r\n    const [tempEditData, setTempEditData] = useState(editData);\r\n    \r\n    useEffect(() => {\r\n        let crr_Data = tempEditData.map((internalData) => {\r\n            let val = suffixData[internalData.name] \r\n            ? \r\n            [ \r\n                internalData.value && internalData.value?.split('-')[0], \r\n                (internalData.value && internalData.value?.split('-')[0]) ? internalData.value?.split('-')[1] : suffixData[internalData.name]\r\n            ]\r\n            : \r\n            [internalData.value];\r\n\r\n            return {\r\n                ...internalData,\r\n                value: val\r\n            }\r\n        })\r\n        setTempEditData(crr_Data)\r\n    }, [])\r\n    \r\n    // old data\r\n    const [SrModalFormData, setSrModalFormData] = useState({\r\n        v_w_suffix: 'mΩ',\r\n        u1_u2_suffix: 'mΩ',\r\n        u_v_suffix: 'mΩ',\r\n        v1_v2_suffix: 'mΩ',\r\n        u_w_suffix: 'mΩ',\r\n        w1_w2_suffix: 'mΩ',\r\n    });\r\n    const [SrRadioData, setSrRadioData] = useState({});\r\n    const handleRadioChnge = (name, e) => {\r\n        console.log(name, e.target.value);\r\n        setSrModalFormData({\r\n            ...SrModalFormData,\r\n            [name]: e.target.value,\r\n        });\r\n    };\r\n    const onRadioChange = (e) => {\r\n        console.log(\"radio checked\", e.target.value);\r\n        setSrRadioData({\r\n            ...SrRadioData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    return (\r\n\r\n        <>\r\n            <Modal\r\n                title={\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details - {modalName}</span>\r\n                    </div>\r\n                }\r\n                visible={editStatus}\r\n                onCancel={() => setEditStatus(false)}\r\n                footer={false}\r\n                width={1140}\r\n            >\r\n                {tempEditData.map((item, i) => (\r\n                    <div key={i}>\r\n                        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                            <div className=\"d-flex\" style={{ gap: '6px', width: '50%' }}>\r\n                                <Radio.Group\r\n                                    name=\"v1_v2\"\r\n                                    onChange={(e) => {\r\n                                        setTempEditData((data) => {\r\n                                            let dt = data.map((el) => {\r\n                                                if(el.name == item.name) {\r\n                                                    return {\r\n                                                        ...el,\r\n                                                        check: e.target.value\r\n                                                    }\r\n                                                } else {\r\n                                                    return {\r\n                                                        ...el\r\n                                                    }\r\n                                                }\r\n                                            })\r\n                                            return dt\r\n                                        });\r\n                                    }}\r\n                                    value={item?.check}\r\n                                >\r\n                                    <Radio className=\"green-radio\" value={1}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"red-radio\" value={2}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"grey-radio\" value={3}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                </Radio.Group>\r\n                                <label>{item.name}</label>\r\n                                <div>\r\n                                    <Tooltip title={item.name}>\r\n                                        <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>\r\n                            <Input\r\n                                style={{ width: \"50%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                // value={item?.value}\r\n                                value={item?.value[0]}\r\n                                onChange={(e) => {\r\n                                    setTempEditData((data) => {\r\n                                        let dt = data.map((el) => {\r\n                                            if(el.name == item.name) {\r\n                                                let val = suffixData[item.name] ? [e.target.value, el.value[1]] : [e.target.value]\r\n                                                return {\r\n                                                    ...el,\r\n                                                    // value: e.target.value\r\n                                                    value: val\r\n                                                }\r\n                                            } else {\r\n                                                return {\r\n                                                    ...el\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                        return dt\r\n                                    });\r\n                                }}\r\n                                addonAfter={suffixData[item.name] && (\r\n                                    <Select\r\n                                        // value={suffixData[item.name]}\r\n                                        value={item?.value[1]}\r\n                                        defaultValue={'mm'}\r\n                                        className=\"select-after\"\r\n                                        onChange={(e) => {\r\n                                            // setSuffixData((data) => {\r\n                                            //     let dt = data\r\n                                            //     dt[item.name] = e\r\n                                            //     return {...dt}\r\n                                            // })\r\n                                            setTempEditData((data) => {\r\n                                                let dt = data.map((el) => {\r\n                                                    if(el.name == item.name) {\r\n                                                        let val = [el.value[0], e]\r\n                                                        return {\r\n                                                            ...el,\r\n                                                            value: val\r\n                                                        }\r\n                                                    } else {\r\n                                                        return {\r\n                                                            ...el\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                return dt\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        <Option value=\"mm\">mm</Option>\r\n                                        <Option value=\"cm\">cm</Option>\r\n                                    </Select>\r\n                                )}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n                <div className=\"d-flex justify-content-end mt-5\">\r\n                    <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        key=\"save\"\r\n                        className=\"bg-primary text-white ml-2\"\r\n                        onClick={() => {\r\n                            setEditStatus(false);\r\n                            let fpData = tempEditData.map((e) => {\r\n                                let val_suffix = '';\r\n                                let val = '';\r\n                                if(suffixData[e.name]) {\r\n                                    if(e.value[0]) val_suffix = '-'+e.value[1];\r\n                                    val = e.value[0] + val_suffix;\r\n                                } else {\r\n                                    val = e.value[0]\r\n                                }\r\n                                // val_suffix = ((e.value && suffixData[e.name]) ? '-'+suffixData[e.name] : '')\r\n                                return {\r\n                                    ...e,\r\n                                    value: val\r\n                                }\r\n                            })\r\n                            setFreeVolumeData((data) => {\r\n                                let flameData = data.map((e) => {\r\n                                    if(e.key === editKey) {\r\n                                        return {\r\n                                            ...e,\r\n                                            data: fpData\r\n                                        }\r\n                                    } else {\r\n                                        return {...e}\r\n                                    }\r\n                                })\r\n                                return flameData\r\n                            });\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n\r\n            {false &&\r\n                <div>\r\n                    {/* {modalName === \"Frame1\" && */}\r\n                    <Modal\r\n                        title={\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n                            </div>\r\n                        }\r\n                        visible={editStatus}\r\n                        onCancel={() => setEditStatus(false)}\r\n                        footer={false}\r\n                        width={1000}\r\n                    >\r\n                        <div className=\"\">\r\n\r\n                            <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                    <Radio.Group\r\n                                        name=\"v1_v2\"\r\n                                        onChange={onRadioChange}\r\n                                        value={SrRadioData?.v1_v2}\r\n                                    >\r\n                                        <Radio className=\"green-radio\" value={1}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                        <Radio className=\"red-radio\" value={2}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                        <Radio className=\"grey-radio\" value={3}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                    </Radio.Group>\r\n                                    <labek>Motor Frame inner dia 'a'</labek>\r\n                                    <div>\r\n                                        <Tooltip title=\"Your tooltip message\">\r\n                                            <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </div>\r\n                                <Input\r\n                                    style={{ width: \"70%\" }}\r\n                                    placeholder=\"Type here...\"\r\n                                    value={SrModalFormData?.v1_v2}\r\n                                    onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                    <Radio.Group\r\n                                        name=\"v1_v2\"\r\n                                        onChange={onRadioChange}\r\n                                        value={SrRadioData?.v1_v2}\r\n                                    >\r\n                                        <Radio className=\"green-radio\" value={1}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                        <Radio className=\"red-radio\" value={2}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                        <Radio className=\"grey-radio\" value={3}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                    </Radio.Group>\r\n                                    <labek>Motor Core length 'b'</labek>\r\n                                    <div>\r\n                                        <Tooltip title=\"Your tooltip message\">\r\n                                            <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </div>\r\n                                <Input\r\n                                    style={{ width: \"70%\" }}\r\n                                    placeholder=\"Type here...\"\r\n                                    value={SrModalFormData?.v1_v2}\r\n                                    onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                                    addonAfter={(<>\r\n                                        <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                            target: { value: e },\r\n                                        })} >\r\n                                            <Option value=\"mm\">mm</Option>\r\n\r\n                                        </Select>\r\n                                    </>)}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                    <Radio.Group\r\n                                        name=\"u_w\"\r\n                                        onChange={onRadioChange}\r\n                                        value={SrRadioData?.u_w}\r\n                                    >\r\n                                        <Radio className=\"green-radio\" value={1}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                        <Radio className=\"red-radio\" value={2}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                        <Radio className=\"grey-radio\" value={3}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                    </Radio.Group>\r\n                                    <labek>Motor Core length 'f'</labek>\r\n                                    <div>\r\n                                        <Tooltip title=\"Your tooltip message\">\r\n                                            <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <Input\r\n                                    style={{ width: \"70%\" }}\r\n                                    placeholder=\"Type here...\"\r\n                                    value={SrModalFormData?.u_w}\r\n                                    onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n                                    addonAfter={(<>\r\n                                        <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"u_w_suffix\", {\r\n                                            target: { value: e },\r\n                                        })} >\r\n                                            <Option value=\"mΩ\">KΩ</Option>\r\n                                            <Option value=\"Ω\">Ω</Option>\r\n                                        </Select>\r\n                                    </>)}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                    <Radio.Group\r\n                                        name=\"v_w\"\r\n                                        onChange={onRadioChange}\r\n                                        value={SrRadioData?.v_w}\r\n                                    >\r\n                                        <Radio className=\"green-radio\" value={1}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                        <Radio className=\"red-radio\" value={2}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                        <Radio className=\"grey-radio\" value={3}>\r\n                                            {\" \"}\r\n                                        </Radio>\r\n                                    </Radio.Group>\r\n                                    <labek>Remark</labek>\r\n                                    <div>\r\n                                        <Tooltip title=\"Your tooltip message\">\r\n                                            <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </div>\r\n                                <Input\r\n                                    style={{ width: \"70%\" }}\r\n                                    placeholder=\"Type here...\"\r\n                                    value={SrModalFormData?.v_w}\r\n                                    onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n                                    addonAfter={(<>\r\n                                        <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v_w_suffix\", {\r\n                                            target: { value: e },\r\n                                        })} >\r\n                                            <Option value=\"mΩ\">KΩ</Option>\r\n                                            <Option value=\"Ω\">Ω</Option>\r\n                                        </Select>\r\n                                    </>)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"d-flex justify-content-end mt-5\">\r\n                            <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                                key=\"save\"\r\n                                className=\"bg-primary text-white ml-2\"\r\n                                onClick={() => {\r\n                                    // console.log(SrModalFormData, SrModalFormData);\r\n                                    setEditStatus(false);\r\n                                }}\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        </div>\r\n                    </Modal>\r\n\r\n                    {/* Module Name Frame 2 */}\r\n                    {modalName === \"Frame2\" &&\r\n                        <Modal\r\n                            title={\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n                                </div>\r\n                            }\r\n                            visible={editStatus}\r\n                            onCancel={() => setEditStatus(false)}\r\n                            footer={false}\r\n                            width={1000}\r\n                        >\r\n                            <div className=\"\">\r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"v1_v2\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.v1_v2}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>Width</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.v1_v2}\r\n                                        onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n        \r\n                                    />\r\n                                </div>\r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"v1_v2\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.v1_v2}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>Breadth</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.v1_v2}\r\n                                        onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                                        addonAfter={(<>\r\n                                            <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                                target: { value: e },\r\n                                            })} >\r\n                                                <Option value=\"mm\">mm</Option>\r\n        \r\n                                            </Select>\r\n                                        </>)}\r\n                                    />\r\n                                </div>\r\n        \r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"u_w\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.u_w}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>Height</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n        \r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.u_w}\r\n                                        onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n                                        addonAfter={(<>\r\n                                            <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"u_w_suffix\", {\r\n                                                target: { value: e },\r\n                                            })} >\r\n                                                <Option value=\"mΩ\">KΩ</Option>\r\n                                                <Option value=\"Ω\">Ω</Option>\r\n                                            </Select>\r\n                                        </>)}\r\n                                    />\r\n                                </div>\r\n        \r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"v_w\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.v_w}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>Remark</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.v_w}\r\n                                        onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n                                        addonAfter={(<>\r\n                                            <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v_w_suffix\", {\r\n                                                target: { value: e },\r\n                                            })} >\r\n                                                <Option value=\"mΩ\">KΩ</Option>\r\n                                                <Option value=\"Ω\">Ω</Option>\r\n                                            </Select>\r\n                                        </>)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n        \r\n                            <div className=\"d-flex justify-content-end mt-5\">\r\n                                <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    key=\"save\"\r\n                                    className=\"bg-primary text-white ml-2\"\r\n                                    onClick={() => {\r\n                                        // console.log(SrModalFormData, SrModalFormData);\r\n                                        setEditStatus(false);\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                    }\r\n\r\n                    {modalName === 'TerminalBox-V3' &&\r\n                        <Modal\r\n                            title={\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n                                </div>\r\n                            }\r\n                            visible={editStatus}\r\n                            onCancel={() => setEditStatus(false)}\r\n                            footer={false}\r\n                            width={1000}\r\n                        >\r\n                            <div className=\"\">\r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"v1_v2\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.v1_v2}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>T-box internal width 'w'</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.v1_v2}\r\n                                        onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n        \r\n                                    />\r\n                                </div>\r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"v1_v2\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.v1_v2}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>T-box internal breadth 'b'</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.v1_v2}\r\n                                        onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                                        addonAfter={(<>\r\n                                            <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                                target: { value: e },\r\n                                            })} >\r\n                                                <Option value=\"mm\">mm</Option>\r\n        \r\n                                            </Select>\r\n                                        </>)}\r\n                                    />\r\n                                </div>\r\n        \r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"u_w\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.u_w}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>T-box internal height 'h'</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n        \r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.u_w}\r\n                                        onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n                                        addonAfter={(<>\r\n                                            <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"u_w_suffix\", {\r\n                                                target: { value: e },\r\n                                            })} >\r\n                                                <Option value=\"mΩ\">KΩ</Option>\r\n                                                <Option value=\"Ω\">Ω</Option>\r\n                                            </Select>\r\n                                        </>)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-end mt-5\">\r\n                                <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    key=\"save\"\r\n                                    className=\"bg-primary text-white ml-2\"\r\n                                    onClick={() => {\r\n                                        // console.log(SrModalFormData, SrModalFormData);\r\n                                        setEditStatus(false);\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                    }\r\n        \r\n                    {modalName === \"TerminalBox-V4\" &&\r\n                        <Modal\r\n                            title={\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n                                </div>\r\n                            }\r\n                            visible={editStatus}\r\n                            onCancel={() => setEditStatus(false)}\r\n                            footer={false}\r\n                            width={1000}\r\n                        >\r\n                            <div className=\"\">\r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"v1_v2\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.v1_v2}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>T-box internal width 'w'</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.v1_v2}\r\n                                        onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n        \r\n                                    />\r\n                                </div>\r\n        \r\n        \r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"u_w\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.u_w}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>T-box internal height 'h'</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n        \r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.u_w}\r\n                                        onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n                                        addonAfter={(<>\r\n                                            <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"u_w_suffix\", {\r\n                                                target: { value: e },\r\n                                            })} >\r\n                                                <Option value=\"mΩ\">KΩ</Option>\r\n                                                <Option value=\"Ω\">Ω</Option>\r\n                                            </Select>\r\n                                        </>)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-end mt-5\">\r\n                                <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    key=\"save\"\r\n                                    className=\"bg-primary text-white ml-2\"\r\n                                    onClick={() => {\r\n                                        // console.log(SrModalFormData, SrModalFormData);\r\n                                        setEditStatus(false);\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                    }\r\n\r\n                    {modalName === \"AuxiliaryBox-V5\" &&\r\n                        <Modal\r\n                            title={\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n                                </div>\r\n                            }\r\n                            visible={editStatus}\r\n                            onCancel={() => setEditStatus(false)}\r\n                            footer={false}\r\n                            width={1000}\r\n                        >\r\n                            <div className=\"\">\r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"v1_v2\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.v1_v2}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>T-box internal width 'w'</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.v1_v2}\r\n                                        onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n        \r\n                                    />\r\n                                </div>\r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"u_w\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.u_w}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>Diameter</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n        \r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.u_w}\r\n                                        onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n                                        addonAfter={(<>\r\n                                            <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"u_w_suffix\", {\r\n                                                target: { value: e },\r\n                                            })} >\r\n                                                <Option value=\"mΩ\">KΩ</Option>\r\n                                                <Option value=\"Ω\">Ω</Option>\r\n                                            </Select>\r\n                                        </>)}\r\n                                    />\r\n                                </div>\r\n        \r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"u_w\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.u_w}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>T-box internal breadth 'b'\r\n                                        </labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n        \r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.u_w}\r\n                                        onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n                                        addonAfter={(<>\r\n                                            <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"u_w_suffix\", {\r\n                                                target: { value: e },\r\n                                            })} >\r\n                                                <Option value=\"mΩ\">KΩ</Option>\r\n                                                <Option value=\"Ω\">Ω</Option>\r\n                                            </Select>\r\n                                        </>)}\r\n                                    />\r\n                                </div>\r\n        \r\n        \r\n                            </div>\r\n                            <div className=\"d-flex justify-content-end mt-5\">\r\n                                <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    key=\"save\"\r\n                                    className=\"bg-primary text-white ml-2\"\r\n                                    onClick={() => {\r\n                                        // console.log(SrModalFormData, SrModalFormData);\r\n                                        setEditStatus(false);\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                    }\r\n\r\n                    {modalName == \"Auxilarybox-V6\" &&\r\n                        <Modal\r\n                            title={\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n                                </div>\r\n                            }\r\n                            visible={editStatus}\r\n                            onCancel={() => setEditStatus(false)}\r\n                            footer={false}\r\n                            width={1000}\r\n                        >\r\n                            <div className=\"\">\r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"v1_v2\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.v1_v2}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>T-box internal width 'w'</labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.v1_v2}\r\n                                        onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n        \r\n                                    />\r\n                                </div>\r\n        \r\n                                <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                                    <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                                        <Radio.Group\r\n                                            name=\"u_w\"\r\n                                            onChange={onRadioChange}\r\n                                            value={SrRadioData?.u_w}\r\n                                        >\r\n                                            <Radio className=\"green-radio\" value={1}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"red-radio\" value={2}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                            <Radio className=\"grey-radio\" value={3}>\r\n                                                {\" \"}\r\n                                            </Radio>\r\n                                        </Radio.Group>\r\n                                        <labek>T-box internal breadth 'b'\r\n                                        </labek>\r\n                                        <div>\r\n                                            <Tooltip title=\"Your tooltip message\">\r\n                                                <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n        \r\n                                    <Input\r\n                                        style={{ width: \"70%\" }}\r\n                                        placeholder=\"Type here...\"\r\n                                        value={SrModalFormData?.u_w}\r\n                                        onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n                                        addonAfter={(<>\r\n                                            <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"u_w_suffix\", {\r\n                                                target: { value: e },\r\n                                            })} >\r\n                                                <Option value=\"mΩ\">KΩ</Option>\r\n                                                <Option value=\"Ω\">Ω</Option>\r\n                                            </Select>\r\n                                        </>)}\r\n                                    />\r\n                                </div>\r\n        \r\n        \r\n                            </div>\r\n                            <div className=\"d-flex justify-content-end mt-5\">\r\n                                <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    key=\"save\"\r\n                                    className=\"bg-primary text-white ml-2\"\r\n                                    onClick={() => {\r\n                                        // console.log(SrModalFormData, SrModalFormData);\r\n                                        setEditStatus(false);\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                    }\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditFreeVolumeCheck","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Stator-Winding-Electrical-Tests/EditStatorWindingElectricalTests.js",["1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Modal, Radio, Select, Input, Tooltip, DatePicker } from 'antd';\r\nimport { EditColorIcon } from 'assets/svg/icon';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditStatorWindingElectricalTests = ({ modalName, setEditStatus, editStatus, editData, editKey, suffixData, setSuffixData, setStatorWindingData }) => {\r\n    const [tempEditData, setTempEditData] = useState(editData);\r\n    \r\n    useEffect(() => {\r\n        let crr_Data = tempEditData.map((internalData) => {\r\n            // let val = suffixData[internalData.name] ? internalData.value?.split('-')[0] : internalData.value\r\n            let val = suffixData[internalData.name] \r\n            ? \r\n            [ \r\n                internalData.value ? internalData.value?.split('-')[0]:'', \r\n                internalData.value ? internalData.value?.split('-')[1] : suffixData[internalData.name]\r\n            ]\r\n            : \r\n            [internalData.value];\r\n\r\n            return {\r\n                ...internalData,\r\n                value: val\r\n            }\r\n        })\r\n        setTempEditData(crr_Data)\r\n    }, [])\r\n\r\n    const getSuffixIndex = (data) => {\r\n        // console.log(\"check-1\", data);\r\n        let sf_name_found =  Object.keys(suffixData).find((e) => e == data.name);\r\n\r\n        if(sf_name_found) {\r\n            return suffixData[sf_name_found]\r\n        } else {\r\n            return false\r\n        }\r\n    };\r\n\r\n    const showCurrentSuffix = (data, suffix) => {\r\n        // console.log(\"check-1\", data);\r\n        let show_sfx = null;\r\n\r\n        if(modalName == 'Stator Resistance' || modalName == 'Rotor Resistance') {\r\n            if(data.name.includes('Volt')) {\r\n                if(['V'].includes(suffix)) show_sfx = true\r\n                else show_sfx = false\r\n            }\r\n            else if(['MΩ','Ω'].includes(suffix)) {\r\n                show_sfx = true\r\n            }\r\n            else {\r\n                show_sfx = false\r\n            }\r\n        } else if(modalName == 'Stator Insulation' || modalName == 'Rotor Insulation' || modalName == 'Polarization  Index') {\r\n            if(data.name.includes('Volt') && ['V'].includes(suffix)) {\r\n                show_sfx = true\r\n            }\r\n            else if(['MΩ','GΩ'].includes(suffix)) {\r\n                show_sfx = true\r\n            } \r\n            else {\r\n                show_sfx = false\r\n            }\r\n        } else  {\r\n            show_sfx = data.name\r\n        }\r\n        // console.log(show_sfx)\r\n        return show_sfx\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title={\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details - {modalName}</span>\r\n                    </div>\r\n                }\r\n                visible={editStatus}\r\n                onCancel={() => setEditStatus(false)}\r\n                footer={false}\r\n                width={1140}\r\n            >\r\n                {tempEditData.map((item, i) => (\r\n                    <div key={i}>\r\n                        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                            <div className=\"d-flex\" style={{ gap: '6px', width: '50%' }}>\r\n                                <Radio.Group\r\n                                    name=\"v1_v2\"\r\n                                    onChange={(e) => {\r\n                                        setTempEditData((data) => {\r\n                                            let dt = data.map((el) => {\r\n                                                if(el.name == item.name) {\r\n                                                    return {\r\n                                                        ...el,\r\n                                                        check: e.target.value\r\n                                                    }\r\n                                                } else {\r\n                                                    return {\r\n                                                        ...el\r\n                                                    }\r\n                                                }\r\n                                            })\r\n                                            return dt\r\n                                        });\r\n                                    }}\r\n                                    value={item?.check}\r\n                                >\r\n                                    <Radio className=\"green-radio\" value={1}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"red-radio\" value={2}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"grey-radio\" value={3}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                </Radio.Group>\r\n                                <label>{item.name}</label>\r\n                                <div>\r\n                                    <Tooltip title={item.name}>\r\n                                        <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>\r\n                            {item.name == 'Date' ? \r\n                                <DatePicker\r\n                                    style={{ width: \"50%\" }}\r\n                                    placeholder=\"Select date\"\r\n                                    // value={item?.value}\r\n                                    value={item?.value[0]}\r\n                                    format={'DD-MM-YYYY'}\r\n                                    onChange={(e) => {\r\n                                        setTempEditData((data) => {\r\n                                            let dt = data.map((el) => {\r\n                                                if(el.name == item.name) {\r\n                                                    let val = [e];\r\n                                                    return {\r\n                                                        ...el,\r\n                                                        value: val\r\n                                                    }\r\n                                                } else {\r\n                                                    return {\r\n                                                        ...el\r\n                                                    }\r\n                                                }\r\n                                            })\r\n                                            return dt\r\n                                        });\r\n                                    }}\r\n                                />\r\n                                : \r\n                                <Input\r\n                                    style={{ width: \"50%\" }}\r\n                                    placeholder=\"Type here...\"\r\n                                    value={item?.value[0]}\r\n                                    onChange={(e) => {\r\n                                        setTempEditData((data) => {\r\n                                            let dt = data.map((el) => {\r\n                                                if(el.name == item.name) {\r\n                                                    let val = suffixData[item.name] ? [e.target.value, el.value[1]] : [e.target.value]\r\n                                                    return {\r\n                                                        ...el,\r\n                                                        // value: e.target.value\r\n                                                        value: val\r\n                                                    }\r\n                                                } else {\r\n                                                    return {\r\n                                                        ...el\r\n                                                    }\r\n                                                }\r\n                                            })\r\n                                            return dt\r\n                                        });\r\n                                    }}\r\n                                    addonAfter={getSuffixIndex(item) && (\r\n                                        <Select\r\n                                            value={item?.value[1]}\r\n                                            defaultValue={suffixData[getSuffixIndex(item)]}\r\n                                            className=\"select-after\"\r\n                                            onChange={(e) => {\r\n                                                // setSuffixData((data) => {\r\n                                                //     let dt = data\r\n                                                //     dt[getSuffixIndex(item)] = e\r\n                                                //     return {...dt}\r\n                                                // })\r\n                                                setTempEditData((data) => {\r\n                                                    let dt = data.map((el) => {\r\n                                                        if(el.name == item.name) {\r\n                                                            let val = [el.value[0], e]\r\n                                                            return {\r\n                                                                ...el,\r\n                                                                value: val\r\n                                                            }\r\n                                                        } else {\r\n                                                            return {\r\n                                                                ...el\r\n                                                            }\r\n                                                        }\r\n                                                    })\r\n                                                    return dt\r\n                                                });\r\n                                            }}\r\n                                            disabled={['V'].includes(suffixData[item.name])}\r\n                                        >\r\n                                            {showCurrentSuffix(item, 'MΩ') && <Option value=\"MΩ\">MΩ</Option>}\r\n                                            {showCurrentSuffix(item, 'GΩ') && <Option value=\"GΩ\">GΩ</Option>}\r\n                                            {showCurrentSuffix(item, 'Ω') && <Option value=\"Ω\">Ω</Option>}\r\n                                            {showCurrentSuffix(item, 'V') && <Option value=\"V\">V</Option>}\r\n                                        </Select>\r\n                                    )}\r\n                                />\r\n                            }\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n                <div className=\"d-flex justify-content-end mt-5\">\r\n                    <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        key=\"save\"\r\n                        className=\"bg-primary text-white ml-2\"\r\n                        onClick={() => {\r\n                            setEditStatus(false);\r\n                            // let fpData = tempEditData.map((e) => {\r\n                            //     let val_suffix = ((e.value && suffixData[getSuffixIndex(e.name)]) ? '-'+suffixData[getSuffixIndex(e.name)] : '')\r\n                            //     return {\r\n                            //         ...e,\r\n                            //         value: e.value + val_suffix\r\n                            //     }\r\n                            // })\r\n                            let fpData = tempEditData.map((e) => {\r\n                                let val_suffix = '';\r\n                                let val = '';\r\n                                if(suffixData[e.name]) {\r\n                                    if(e.value[0]) val_suffix = '-'+e.value[1];\r\n                                    val = e.value[0] + val_suffix;\r\n                                } else {\r\n                                    val = e.value[0]\r\n                                }\r\n                                // val_suffix = ((e.value && suffixData[e.name]) ? '-'+suffixData[e.name] : '')\r\n                                return {\r\n                                    ...e,\r\n                                    value: val\r\n                                }\r\n                            })\r\n                            setStatorWindingData((data) => {\r\n                                let flameData = data.map((e) => {\r\n                                    if(e.key === editKey) {\r\n                                        return {\r\n                                            ...e,\r\n                                            data: fpData\r\n                                        }\r\n                                    } else {\r\n                                        return {...e}\r\n                                    }\r\n                                })\r\n                                return flameData\r\n                            });\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditStatorWindingElectricalTests","/home/faizan/jd-works/customer-web-app/src/components/layout-components/NavLanguage.js",[],"/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Mechanical_Inspection/EditMechanicalInspection.js",["1593","1594","1595","1596"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Modal, Radio, Select, Input, Tooltip } from 'antd';\r\nimport { EditColorIcon } from 'assets/svg/icon';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditMechanicalInspection = ({ modalName, setEditStatus, editStatus, editData, editKey, suffixData, setSuffixData, setMechanicalInspectionData }) => {\r\n    const [tempEditData, setTempEditData] = useState(editData);\r\n    \r\n    useEffect(() => {\r\n        let crr_Data = tempEditData.map((internalData) => {\r\n            // let val = suffixData[internalData.name] ? internalData.value?.split('-')[0] : internalData.value\r\n            let val = suffixData[internalData.name] \r\n            ? \r\n            [ \r\n                internalData.value && internalData.value?.split('-')[0], \r\n                (internalData.value && internalData.value?.split('-')[0]) ? internalData.value?.split('-')[1] : suffixData[internalData.name]\r\n            ]\r\n            : \r\n            [internalData.value];\r\n\r\n            return {\r\n                ...internalData,\r\n                value: val\r\n            }\r\n        })\r\n        setTempEditData(crr_Data)\r\n    }, [])\r\n\r\n    const [SrModalFormData, setSrModalFormData] = useState({\r\n        v_w_suffix: 'mΩ',\r\n        u1_u2_suffix: 'mΩ',\r\n        u_v_suffix: 'mΩ',\r\n        v1_v2_suffix: 'mΩ',\r\n        u_w_suffix: 'mΩ',\r\n        w1_w2_suffix: 'mΩ',\r\n    });\r\n    const [SrRadioData, setSrRadioData] = useState({});\r\n    const handleRadioChnge = (name, e) => {\r\n        console.log(name, e.target.value);\r\n        setSrModalFormData({\r\n            ...SrModalFormData,\r\n            [name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const onRadioChange = (e) => {\r\n        console.log(\"radio checked\", e.target.value);\r\n        setSrRadioData({\r\n            ...SrRadioData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title={\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details - {modalName}</span>\r\n                    </div>\r\n                }\r\n                visible={editStatus}\r\n                onCancel={() => setEditStatus(false)}\r\n                footer={false}\r\n                width={1140}\r\n            >\r\n                {tempEditData.map((item, i) => (\r\n                    <div key={i}>\r\n                        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                            <div className=\"d-flex\" style={{ gap: '6px', width: '50%' }}>\r\n                                <Radio.Group\r\n                                    name=\"v1_v2\"\r\n                                    onChange={(e) => {\r\n                                        setTempEditData((data) => {\r\n                                            let dt = data.map((el) => {\r\n                                                if(el.name == item.name) {\r\n                                                    return {\r\n                                                        ...el,\r\n                                                        check: e.target.value\r\n                                                    }\r\n                                                } else {\r\n                                                    return {\r\n                                                        ...el\r\n                                                    }\r\n                                                }\r\n                                            })\r\n                                            return dt\r\n                                        });\r\n                                    }}\r\n                                    value={item?.check}\r\n                                >\r\n                                    <Radio className=\"green-radio\" value={1}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"red-radio\" value={2}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"grey-radio\" value={3}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                </Radio.Group>\r\n                                <label>{item.name}</label>\r\n                                <div>\r\n                                    <Tooltip title={item.name}>\r\n                                        <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>\r\n                            <Input\r\n                                style={{ width: \"50%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                value={item?.value[0]}\r\n                                onChange={(e) => {\r\n                                    setTempEditData((data) => {\r\n                                        let dt = data.map((el) => {\r\n                                            if(el.name == item.name) {\r\n                                                let val = suffixData[item.name] ? [e.target.value, el.value[1]] : [e.target.value]\r\n                                                return {\r\n                                                    ...el,\r\n                                                    // value: e.target.value\r\n                                                    value: val\r\n                                                }\r\n                                            } else {\r\n                                                return {\r\n                                                    ...el\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                        return dt\r\n                                    });\r\n                                }}\r\n                                addonAfter={suffixData[item.name] && (\r\n                                    <Select\r\n                                        value={item?.value[1]}\r\n                                        defaultValue={'mm'}\r\n                                        className=\"select-after\"\r\n                                        onChange={(e) => {\r\n                                            // setSuffixData((data) => {\r\n                                            //     let dt = data\r\n                                            //     dt[item.name] = e\r\n                                            //     return {...dt}\r\n                                            // })\r\n                                            setTempEditData((data) => {\r\n                                                let dt = data.map((el) => {\r\n                                                    if(el.name == item.name) {\r\n                                                        let val = [el.value[0], e]\r\n                                                        return {\r\n                                                            ...el,\r\n                                                            value: val\r\n                                                        }\r\n                                                    } else {\r\n                                                        return {\r\n                                                            ...el\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                return dt\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        <Option value=\"mm\">mm</Option>\r\n                                        <Option value=\"cm\">cm</Option>\r\n                                    </Select>\r\n                                )}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n                <div className=\"d-flex justify-content-end mt-5\">\r\n                    <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        key=\"save\"\r\n                        className=\"bg-primary text-white ml-2\"\r\n                        onClick={() => {\r\n                            setEditStatus(false);\r\n                            let fpData = tempEditData.map((e) => {\r\n                                let val_suffix = '';\r\n                                let val = '';\r\n                                if(suffixData[e.name]) {\r\n                                    if(e.value[0]) val_suffix = '-'+e.value[1];\r\n                                    val = e.value[0] + val_suffix;\r\n                                } else {\r\n                                    val = e.value[0]\r\n                                }\r\n                                // val_suffix = ((e.value && suffixData[e.name]) ? '-'+suffixData[e.name] : '')\r\n                                return {\r\n                                    ...e,\r\n                                    value: val\r\n                                }\r\n                            })\r\n                            setMechanicalInspectionData((data) => {\r\n                                let flameData = data.map((e) => {\r\n                                    if(e.key === editKey) {\r\n                                        return {\r\n                                            ...e,\r\n                                            data: fpData\r\n                                        }\r\n                                    } else {\r\n                                        return {...e}\r\n                                    }\r\n                                })\r\n                                return flameData\r\n                            });\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n\r\n            {false && <Modal\r\n                title={\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n                    </div>\r\n                }\r\n                visible={editStatus}\r\n                onCancel={() => setEditStatus(false)}\r\n                footer={false}\r\n                width={1000}\r\n            >\r\n                <div className=\"\">\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v1_v2\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v1_v2}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>A-A'</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mm\">mm</Option>\r\n\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v1_v2\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v1_v2}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>B-B'</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v1_v2\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v1_v2}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>C-C'</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v_w\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v_w}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>Remark</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v_w}\r\n                            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v_w_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"d-flex justify-content-end mt-5\">\r\n                    <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        key=\"save\"\r\n                        className=\"bg-primary text-white ml-2\"\r\n                        onClick={() => {\r\n                            // console.log(SrModalFormData, SrModalFormData);\r\n                            setEditStatus(false);\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default EditMechanicalInspection","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/machine-details/add-new-life-cycle-event/Rotator-Shaft-Runout/EditRotatorShaftRunout.js",["1597","1598","1599","1600"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Modal, Radio, Select, Input, Tooltip } from 'antd';\r\nimport { EditColorIcon } from 'assets/svg/icon';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditRotatorShaftRunout = ({ modalName, setEditStatus, editStatus, editData, editKey, suffixData, setSuffixData, setRotatorShaftData }) => {\r\n    const [tempEditData, setTempEditData] = useState(editData);\r\n    \r\n    useEffect(() => {\r\n        let crr_Data = tempEditData.map((internalData) => {\r\n            // let val = suffixData[internalData.name] ? internalData.value?.split('-')[0] : internalData.value\r\n            let val = suffixData[internalData.name] \r\n            ? \r\n            [ \r\n                internalData.value && internalData.value?.split('-')[0], \r\n                (internalData.value && internalData.value?.split('-')[0]) ? internalData.value?.split('-')[1] : suffixData[internalData.name]\r\n            ]\r\n            : \r\n            [internalData.value];\r\n\r\n            return {\r\n                ...internalData,\r\n                value: val\r\n            }\r\n        })\r\n        setTempEditData(crr_Data)\r\n    }, [])\r\n\r\n    const [SrModalFormData, setSrModalFormData] = useState({\r\n        v_w_suffix: 'mΩ',\r\n        u1_u2_suffix: 'mΩ',\r\n        u_v_suffix: 'mΩ',\r\n        v1_v2_suffix: 'mΩ',\r\n        u_w_suffix: 'mΩ',\r\n        w1_w2_suffix: 'mΩ',\r\n    });\r\n    const [SrRadioData, setSrRadioData] = useState({});\r\n    const handleRadioChnge = (name, e) => {\r\n        console.log(name, e.target.value);\r\n        setSrModalFormData({\r\n            ...SrModalFormData,\r\n            [name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const onRadioChange = (e) => {\r\n        console.log(\"radio checked\", e.target.value);\r\n        setSrRadioData({\r\n            ...SrRadioData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title={\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details - {modalName}</span>\r\n                    </div>\r\n                }\r\n                visible={editStatus}\r\n                onCancel={() => setEditStatus(false)}\r\n                footer={false}\r\n                width={1140}\r\n            >\r\n                {tempEditData.map((item, i) => (\r\n                    <div key={i}>\r\n                        <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                            <div className=\"d-flex\" style={{ gap: '6px', width: '50%' }}>\r\n                                <Radio.Group\r\n                                    name=\"v1_v2\"\r\n                                    onChange={(e) => {\r\n                                        setTempEditData((data) => {\r\n                                            let dt = data.map((el) => {\r\n                                                if(el.name == item.name) {\r\n                                                    return {\r\n                                                        ...el,\r\n                                                        check: e.target.value\r\n                                                    }\r\n                                                } else {\r\n                                                    return {\r\n                                                        ...el\r\n                                                    }\r\n                                                }\r\n                                            })\r\n                                            return dt\r\n                                        });\r\n                                    }}\r\n                                    value={item?.check}\r\n                                >\r\n                                    <Radio className=\"green-radio\" value={1}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"red-radio\" value={2}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                    <Radio className=\"grey-radio\" value={3}>\r\n                                        {\" \"}\r\n                                    </Radio>\r\n                                </Radio.Group>\r\n                                <label>{item.name}</label>\r\n                                <div>\r\n                                    <Tooltip title={item.name}>\r\n                                        <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>\r\n                            <Input\r\n                                style={{ width: \"50%\" }}\r\n                                placeholder=\"Type here...\"\r\n                                value={item?.value[0]}\r\n                                onChange={(e) => {\r\n                                    setTempEditData((data) => {\r\n                                        let dt = data.map((el) => {\r\n                                            if(el.name == item.name) {\r\n                                                let val = suffixData[item.name] ? [e.target.value, el.value[1]] : [e.target.value]\r\n                                                return {\r\n                                                    ...el,\r\n                                                    // value: e.target.value\r\n                                                    value: val\r\n                                                }\r\n                                            } else {\r\n                                                return {\r\n                                                    ...el\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                        return dt\r\n                                    });\r\n                                }}\r\n                                addonAfter={suffixData[item.name] && (\r\n                                    <Select\r\n                                        value={item?.value[1]}\r\n                                        defaultValue={'mm'}\r\n                                        className=\"select-after\"\r\n                                        onChange={(e) => {\r\n                                            // setSuffixData((data) => {\r\n                                            //     let dt = data\r\n                                            //     dt[item.name] = e\r\n                                            //     return {...dt}\r\n                                            // })\r\n                                            setTempEditData((data) => {\r\n                                                let dt = data.map((el) => {\r\n                                                    if(el.name == item.name) {\r\n                                                        let val = [el.value[0], e]\r\n                                                        return {\r\n                                                            ...el,\r\n                                                            value: val\r\n                                                        }\r\n                                                    } else {\r\n                                                        return {\r\n                                                            ...el\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                return dt\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        <Option value=\"mm\">mm</Option>\r\n                                        <Option value=\"cm\">cm</Option>\r\n                                    </Select>\r\n                                )}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n                <div className=\"d-flex justify-content-end mt-5\">\r\n                    <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        key=\"save\"\r\n                        className=\"bg-primary text-white ml-2\"\r\n                        onClick={() => {\r\n                            setEditStatus(false);\r\n                            let fpData = tempEditData.map((e) => {\r\n                                let val_suffix = '';\r\n                                let val = '';\r\n                                if(suffixData[e.name]) {\r\n                                    if(e.value[0]) val_suffix = '-'+e.value[1];\r\n                                    val = e.value[0] + val_suffix;\r\n                                } else {\r\n                                    val = e.value[0]\r\n                                }\r\n                                // val_suffix = ((e.value && suffixData[e.name]) ? '-'+suffixData[e.name] : '')\r\n                                return {\r\n                                    ...e,\r\n                                    value: val\r\n                                }\r\n                            })\r\n                            setRotatorShaftData((data) => {\r\n                                let flameData = data.map((e) => {\r\n                                    if(e.key === editKey) {\r\n                                        return {\r\n                                            ...e,\r\n                                            data: fpData\r\n                                        }\r\n                                    } else {\r\n                                        return {...e}\r\n                                    }\r\n                                })\r\n                                return flameData\r\n                            });\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n\r\n            {false && <Modal\r\n                title={\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <EditColorIcon /> <span className=\"d-block ml-2\"> Edit Details </span>\r\n                    </div>\r\n                }\r\n                visible={editStatus}\r\n                onCancel={() => setEditStatus(false)}\r\n                footer={false}\r\n                width={1000}\r\n            >\r\n                <div className=\"\">\r\n\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v1_v2\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v1_v2}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>Name</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n\r\n                        />\r\n                    </div>\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v1_v2\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v1_v2}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>Diameter</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mm\">mm</Option>\r\n\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v1_v2\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v1_v2}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>Length</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v1_v2\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v1_v2}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>A</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v1_v2\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v1_v2}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>B</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v1_v2}\r\n                            onChange={(e) => handleRadioChnge(\"v1_v2\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v1_v2_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v1_v2_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"u_w\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.u_w}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>C</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.u_w}\r\n                            onChange={(e) => handleRadioChnge(\"u_w\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.u_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"u_w_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v_w\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v_w}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>D</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v_w}\r\n                            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v_w_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"mb-4 d-flex justify-content-between align-items-center\">\r\n                        <div className=\"d-flex \" style={{ gap: '8px' }}>\r\n                            <Radio.Group\r\n                                name=\"v_w\"\r\n                                onChange={onRadioChange}\r\n                                value={SrRadioData?.v_w}\r\n                            >\r\n                                <Radio className=\"green-radio\" value={1}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"red-radio\" value={2}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                                <Radio className=\"grey-radio\" value={3}>\r\n                                    {\" \"}\r\n                                </Radio>\r\n                            </Radio.Group>\r\n                            <labek>Remark</labek>\r\n                            <div>\r\n                                <Tooltip title=\"Your tooltip message\">\r\n                                    <QuestionCircleOutlined style={{ marginLeft: '4px', color: '#1890ff' }} />\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            style={{ width: \"70%\" }}\r\n                            placeholder=\"Type here...\"\r\n                            value={SrModalFormData?.v_w}\r\n                            onChange={(e) => handleRadioChnge(\"v_w\", e)}\r\n                            addonAfter={(<>\r\n                                <Select value={SrModalFormData?.v_w_suffix} className=\"select-after\" onChange={(e) => handleRadioChnge(\"v_w_suffix\", {\r\n                                    target: { value: e },\r\n                                })} >\r\n                                    <Option value=\"mΩ\">KΩ</Option>\r\n                                    <Option value=\"Ω\">Ω</Option>\r\n                                </Select>\r\n                            </>)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"d-flex justify-content-end mt-5\">\r\n                    <Button key=\"cancel\" onClick={() => setEditStatus(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        key=\"save\"\r\n                        className=\"bg-primary text-white ml-2\"\r\n                        onClick={() => {\r\n                            // console.log(SrModalFormData, SrModalFormData);\r\n                            setEditStatus(false);\r\n                        }}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Modal>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditRotatorShaftRunout","/home/faizan/jd-works/customer-web-app/src/components/shared-components/ColorPicker/index.js",[],"/home/faizan/jd-works/customer-web-app/src/hooks/usePostalCodeLookup.js",[],"/home/faizan/jd-works/customer-web-app/src/utils/OneMapService.js",["1601"],"import axios from 'axios'\r\nimport { API_BASE_URL } from 'constants/ApiConstant'\r\n\r\nclass OneMapService {\r\n  static async searchByPostalCode(postalCode) {\r\n    try {\r\n      if (!postalCode || postalCode.length !== 6) {\r\n        throw new Error('Postal code must be exactly 6 digits')\r\n      }\r\n\r\n      const response = await axios.get(`${API_BASE_URL}/api/onemap/search`, {\r\n        params: { postalCode }\r\n      })\r\n\r\n      if (response.data.success) {\r\n        return {\r\n          success: true,\r\n          data: response.data.data\r\n        }\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: response.data.message || 'Location not found'\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('OneMap search error:', error)\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || error.message || 'Failed to search location'\r\n      }\r\n    }\r\n  }\r\n\r\n  static parseAddressComponents(address) {\r\n    if (!address) return {}\r\n\r\n    // Split address and try to extract components\r\n    const parts = address.split(' ')\r\n    const components = {}\r\n\r\n    // Try to extract block number (usually first number)\r\n    const blockMatch = address.match(/^(\\d+)/)\r\n    if (blockMatch) {\r\n      components.block_number = blockMatch[1]\r\n    }\r\n\r\n    // Extract road name (everything after block number until \"SINGAPORE\")\r\n    const roadMatch = address.match(/^\\d+\\s+(.+?)\\s+SINGAPORE/)\r\n    if (roadMatch) {\r\n      components.street_name = roadMatch[1]\r\n    }\r\n\r\n    return components\r\n  }\r\n\r\n  static formatSingaporeAddress(addressData) {\r\n    const { details } = addressData\r\n    \r\n    return {\r\n      block_number: details.BLK_NO || '',\r\n      street_name: details.ROAD_NAME || '',\r\n      building_name: details.BUILDING && details.BUILDING !== 'NIL' ? details.BUILDING : '',\r\n      postal_code: details.POSTAL || '',\r\n      full_address: details.ADDRESS || '',\r\n      latitude: parseFloat(details.LATITUDE) || 0,\r\n      longitude: parseFloat(details.LONGITUDE) || 0\r\n    }\r\n  }\r\n\r\n  static getSingaporeCountryId(countryList) {\r\n    // Look for Singapore in the country list\r\n    const singapore = countryList.find(country => \r\n      country.name?.toLowerCase().includes('singapore') ||\r\n      country.country_name?.toLowerCase().includes('singapore') ||\r\n      country.code?.toLowerCase() === 'sg'\r\n    )\r\n    return singapore?.id || null\r\n  }\r\n}\r\n\r\nexport default OneMapService","/home/faizan/jd-works/customer-web-app/src/views/app-views/machine-and-sensor/sensor-analysis/index.js",["1602","1603","1604","1605","1606","1607","1608","1609","1610","1611","1612","1613","1614","1615","1616","1617","1618","1619","1620","1621","1622"],"import React, { useState, useEffect, useMemo, useCallback, useRef } from \"react\";\r\nimport { Card, Button, Select, Modal, DatePicker, message } from \"antd\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { axiosInstance } from \"App\";\r\nimport { API_BASE_URL } from \"constants/ApiConstant\";\r\nimport SeriesImage from \"assets/images/Mask group.png\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SensorAnalysis = () => {\r\n  // Check if current user is a free user (role id 5)\r\n  const userRole = parseInt(localStorage.getItem(\"role\"));\r\n  const isFreeUser = userRole === 5;\r\n\r\n  // Highcharts chart refs\r\n  const mainChartRef = useRef(null);\r\n  const spectrumChartRef = useRef(null);\r\n  \r\n  // 3-axis spectrum chart refs for _0.bin files\r\n  const spectrumChartRefX = useRef(null);\r\n  const spectrumChartRefY = useRef(null);\r\n  const spectrumChartRefZ = useRef(null);\r\n  \r\n  // Multi-spectrum chart refs (for cases with both 3-axis and 1-axis)\r\n  const multiSpectrum3AxisRefX = useRef(null);\r\n  const multiSpectrum3AxisRefY = useRef(null);\r\n  const multiSpectrum3AxisRefZ = useRef(null);\r\n  const multiSpectrum1AxisRef = useRef(null);\r\n  const history = useHistory();\r\n  const { machineId, sensorId } = useParams();\r\n  const [selectedMetricType, setSelectedMetricType] = useState(\"mid_freq_acceleration_p2p\");\r\n  const [selectedAxis, setSelectedAxis] = useState(\"x\");\r\n  const [selectedAlarm, setSelectedAlarm] = useState(sensorId);\r\n  const [sensorsData, setSensorsData] = useState([]);\r\n  const [selectorDate, setSelectorDate] = useState(\"1\");\r\n  const [dateRangeModal, setDateRangeModal] = useState(false);\r\n  const [modalStartDate, setModalStartDate] = useState(null);\r\n  const [modalEndDate, setModalEndDate] = useState(null);\r\n  const [startDate, setStartDate] = useState(moment().subtract(1, 'days').format('YYYY-MM-DD hh:mm:ss'));\r\n  const [endDate, setEndDate] = useState(moment().format('YYYY-MM-DD hh:mm:ss'));\r\n  const [rawData, setRawData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Analysis data states\r\n  const [mid_freq_acceleration_p2p_x, setMid_freq_acceleration_p2p_x] = useState([]);\r\n  const [mid_freq_acceleration_p2p_y, setMid_freq_acceleration_p2p_y] = useState([]);\r\n  const [mid_freq_acceleration_p2p_z, setMid_freq_acceleration_p2p_z] = useState([]);\r\n  const [high_freq_acceleration_p2p_x, setHigh_freq_acceleration_p2p_x] = useState([]);\r\n\r\n  const [mid_freq_displacement_x, setMid_freq_displacement_x] = useState([]);\r\n  const [mid_freq_displacement_y, setMid_freq_displacement_y] = useState([]);\r\n  const [mid_freq_displacement_z, setMid_freq_displacement_z] = useState([]);\r\n\r\n  const [mid_freq_velocity_x, setMid_freq_velocity_x] = useState([]);\r\n  const [mid_freq_velocity_y, setMid_freq_velocity_y] = useState([]);\r\n  const [mid_freq_velocity_z, setMid_freq_velocity_z] = useState([]);\r\n\r\n  const [mid_freq_env_x, setMid_freq_env_x] = useState([]);\r\n  const [mid_freq_env_y, setMid_freq_env_y] = useState([]);\r\n  const [mid_freq_env_z, setMid_freq_env_z] = useState([]);\r\n\r\n  const [inclination_x, setInclination_x] = useState([]);\r\n  const [inclination_y, setInclination_y] = useState([]);\r\n  const [inclination_z, setInclination_z] = useState([]);\r\n\r\n  const [motorServiceTemperature, setMotorServiceTemperature] = useState([]);\r\n  const [batteryPercentage, setBatteryPercentage] = useState([]);\r\n  const [batteryVoltage, setBatteryVoltage] = useState([]);\r\n  const [rssi, setRssi] = useState([]);\r\n  const [lastZoomTime, setLastZoomTime] = useState({ current: 0 });\r\n\r\n  // Spectrum chart states\r\n  const [spectrumData, setSpectrumData] = useState([]);\r\n  const [spectrumLoading, setSpectrumLoading] = useState(false);\r\n  const [selectedPoint, setSelectedPoint] = useState(null);\r\n  const [showSpectrum, setShowSpectrum] = useState(false);\r\n  \r\n  // 3-axis spectrum data for _0.bin files\r\n  const [is3AxisSpectrum, setIs3AxisSpectrum] = useState(false);\r\n  const [spectrumDataX, setSpectrumDataX] = useState([]);\r\n  const [spectrumDataY, setSpectrumDataY] = useState([]);\r\n  const [spectrumDataZ, setSpectrumDataZ] = useState([]);\r\n\r\n  // Multiple spectrum data (for records that have both _0.bin and _1.bin files)\r\n  const [hasMultipleSpectrums, setHasMultipleSpectrums] = useState(false);\r\n  const [spectrum3AxisData, setSpectrum3AxisData] = useState({ x: [], y: [], z: [] });\r\n  const [spectrum1AxisData, setSpectrum1AxisData] = useState([]);\r\n  const [availableFiles, setAvailableFiles] = useState([]);\r\n  \r\n  // Machine data and harmonics\r\n  const [machineData, setMachineData] = useState(null);\r\n  const [harmonicFrequencies, setHarmonicFrequencies] = useState([]);\r\n\r\n  // Metric configuration\r\n  const metricConfig = {\r\n    \"mid_freq_acceleration_p2p\": {\r\n      label: \"Mid Freq Acceleration\",\r\n      axes: [\"x\", \"y\", \"z\"],\r\n      unit: \"(mm/s²)\",\r\n      colors: { x: \"#ef4444\", y: \"#3b82f6\", z: \"#10b981\" },\r\n      fileMapping: { x: \"file_1\", y: \"file_2\", z: \"file_0\" }\r\n    },\r\n    \"high_freq_acceleration_p2p\": {\r\n      label: \"High Freq Acceleration\", \r\n      axes: [\"z\"],\r\n      unit: \"(mm/s²)\",\r\n      colors: { z: \"#f59e0b\" },\r\n      fileMapping: { z: \"file_0\" }\r\n    },\r\n    \"mid_freq_velocity\": {\r\n      label: \"Mid Freq Velocity\",\r\n      axes: [\"x\", \"y\", \"z\"],\r\n      unit: \"(mm/s)\",\r\n      colors: { x: \"#ef4444\", y: \"#3b82f6\", z: \"#10b981\" },\r\n      fileMapping: { x: \"file_1\", y: \"file_2\", z: \"file_0\" }\r\n    },\r\n    \"mid_freq_displacement\": {\r\n      label: \"Mid Freq Displacement\",\r\n      axes: [\"x\", \"y\", \"z\"],\r\n      unit: \"(μm)\",\r\n      colors: { x: \"#ef4444\", y: \"#3b82f6\", z: \"#10b981\" },\r\n      fileMapping: { x: \"file_1\", y: \"file_2\", z: \"file_0\" }\r\n    },\r\n    \"inclination\": {\r\n      label: \"Inclination\",\r\n      axes: [\"x\", \"y\", \"z\"],\r\n      unit: \"(degrees)\",\r\n      colors: { x: \"#ef4444\", y: \"#3b82f6\", z: \"#10b981\" },\r\n      fileMapping: { x: \"file_1\", y: \"file_2\", z: \"file_0\" }\r\n    },\r\n    \"mid_freq_env\": {\r\n      label: \"Mid Freq Envelope\",\r\n      axes: [\"x\", \"y\", \"z\"],\r\n      unit: \"(Hz)\",\r\n      colors: { x: \"#ef4444\", y: \"#3b82f6\", z: \"#10b981\" },\r\n      fileMapping: { x: \"file_1\", y: \"file_2\", z: \"file_0\" }\r\n    },\r\n    \"temperature\": {\r\n      label: \"Temperature\",\r\n      axes: [\"\"],\r\n      unit: \"(°C)\",\r\n      colors: { \"\": \"#f59e0b\" },\r\n      fileMapping: { \"\": null }\r\n    },\r\n    \"battery_voltage\": {\r\n      label: \"Voltage\", \r\n      axes: [\"\"],\r\n      unit: \"(V)\",\r\n      colors: { \"\": \"#10b981\" },\r\n      fileMapping: { \"\": null }\r\n    },\r\n    \"battery_percentage\": {\r\n      label: \"Battery %\",\r\n      axes: [\"\"],\r\n      unit: \"(%)\",\r\n      colors: { \"\": \"#3b82f6\" },\r\n      fileMapping: { \"\": null }\r\n    },\r\n    \"RSSI\": {\r\n      label: \"RSSI\",\r\n      axes: [\"\"],\r\n      unit: \"(dBm)\",\r\n      colors: { \"\": \"#8b5cf6\" },\r\n      fileMapping: { \"\": null }\r\n    }\r\n  };\r\n\r\n  // Get current data based on selected metric and axis\r\n  const getCurrentChartData = () => {\r\n    const stateMap = {\r\n      \"mid_freq_acceleration_p2p_x\": mid_freq_acceleration_p2p_x,\r\n      \"mid_freq_acceleration_p2p_y\": mid_freq_acceleration_p2p_y,\r\n      \"mid_freq_acceleration_p2p_z\": mid_freq_acceleration_p2p_z,\r\n      \"high_freq_acceleration_p2p_z\": high_freq_acceleration_p2p_x,\r\n      \"mid_freq_velocity_x\": mid_freq_velocity_x,\r\n      \"mid_freq_velocity_y\": mid_freq_velocity_y,\r\n      \"mid_freq_velocity_z\": mid_freq_velocity_z,\r\n      \"mid_freq_displacement_x\": mid_freq_displacement_x,\r\n      \"mid_freq_displacement_y\": mid_freq_displacement_y,\r\n      \"mid_freq_displacement_z\": mid_freq_displacement_z,\r\n      \"inclination_x\": inclination_x,\r\n      \"inclination_y\": inclination_y,\r\n      \"inclination_z\": inclination_z,\r\n      \"mid_freq_env_x\": mid_freq_env_x,\r\n      \"mid_freq_env_y\": mid_freq_env_y,\r\n      \"mid_freq_env_z\": mid_freq_env_z,\r\n      \"temperature_\": motorServiceTemperature,\r\n      \"battery_voltage_\": batteryVoltage,\r\n      \"battery_percentage_\": batteryPercentage,\r\n      \"RSSI_\": rssi\r\n    };\r\n    \r\n    const key = `${selectedMetricType}_${selectedAxis}`;\r\n    return stateMap[key] || [];\r\n  };\r\n\r\n  // Get current metrics values for display\r\n  const getCurrentMetricsValues = () => {\r\n    if (rawData.length === 0) return {};\r\n    \r\n    const latestData = rawData[rawData.length - 1];\r\n    return {\r\n      temperature: latestData.temperature || \"N/A\",\r\n      battery_voltage: latestData.battery_voltage || \"N/A\", \r\n      battery_percentage: latestData.battery_percentage || \"N/A\",\r\n      rssi: latestData.rssi || \"N/A\"\r\n    };\r\n  };\r\n\r\n  // Get file availability status for a data point\r\n  const getFileAvailabilityStatus = (dataIndex) => {\r\n    if (!rawData || dataIndex >= rawData.length) return 'none';\r\n    \r\n    const record = rawData[dataIndex];\r\n    const hasFile0 = record.file_0 && record.file_0.trim() !== '';\r\n    const hasFile1 = record.file_1 && record.file_1.trim() !== '';\r\n    \r\n    if (hasFile0 && hasFile1) return 'both';\r\n    if (hasFile0) return 'mid-freq';\r\n    if (hasFile1) return 'high-freq';\r\n    return 'none';\r\n  };\r\n\r\n  // Get color for file availability status\r\n  const getFileAvailabilityColor = (status) => {\r\n    switch (status) {\r\n      case 'both': return '#10b981'; // Green - both analyses available\r\n      case 'mid-freq': return '#3b82f6'; // Blue - mid-frequency analysis only\r\n      case 'high-freq': return '#f59e0b'; // Orange - high-frequency analysis only\r\n      case 'none': return '#ef4444'; // Red - no analysis available\r\n      default: return '#9ca3af'; // Gray - unknown status\r\n    }\r\n  };\r\n\r\n  // Enhanced function to fetch multiple spectrum data for a single point\r\n  const fetchAllSpectrumData = async (pointData) => {\r\n    console.log('fetchAllSpectrumData called with pointData:', pointData);\r\n    \r\n    // Free users can only access limited spectrum analysis\r\n    if (isFreeUser) {\r\n      message.error(\"Advanced spectrum analysis is available for premium users only\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setSpectrumLoading(true);\r\n      \r\n      // Reset all spectrum states\r\n      setHasMultipleSpectrums(false);\r\n      setIs3AxisSpectrum(false);\r\n      setSpectrumData([]);\r\n      setSpectrum3AxisData({ x: [], y: [], z: [] });\r\n      setSpectrum1AxisData([]);\r\n      setAvailableFiles([]);\r\n      \r\n      // Check which files are available in the rawData for this point\r\n      const dataIndex = rawData.findIndex(item => \r\n        moment(item.datetime).format('YYYY-MM-DD HH:mm:ss') === moment(pointData.x).format('YYYY-MM-DD HH:mm:ss')\r\n      );\r\n      \r\n      if (dataIndex === -1) {\r\n        message.error(\"Could not find data record for this point\");\r\n        return;\r\n      }\r\n      \r\n      const recordData = rawData[dataIndex];\r\n      const files = [];\r\n      \r\n      // Check for available binary files\r\n      if (recordData.file_0 && recordData.file_0.trim() !== '') {\r\n        files.push({ type: '_0.bin', path: recordData.file_0, label: '3-axis mid-frequency' });\r\n      }\r\n      if (recordData.file_1 && recordData.file_1.trim() !== '') {\r\n        files.push({ type: '_1.bin', path: recordData.file_1, label: '1-axis high-frequency' });\r\n      }\r\n      \r\n      console.log('Available files for analysis:', files);\r\n      setAvailableFiles(files);\r\n      \r\n      if (files.length === 0) {\r\n        message.error(\"No binary files available for spectrum analysis\");\r\n        return;\r\n      }\r\n      \r\n      // Fetch spectrum data for all available files\r\n      const spectrumPromises = files.map(file => fetchSingleSpectrumData(file.path, file.type));\r\n      const spectrumResults = await Promise.all(spectrumPromises);\r\n      \r\n      // Process results\r\n      let has3Axis = false;\r\n      let has1Axis = false;\r\n      let tempSpectrum3AxisData = { x: [], y: [], z: [] };\r\n      let tempSpectrum1AxisData = [];\r\n      \r\n      spectrumResults.forEach((result, index) => {\r\n        if (result.success) {\r\n          if (result.axes === 3) {\r\n            has3Axis = true;\r\n            tempSpectrum3AxisData = {\r\n              x: result.data.x_axis.map(item => [parseFloat(item.x), parseFloat(item.y)]),\r\n              y: result.data.y_axis.map(item => [parseFloat(item.x), parseFloat(item.y)]),\r\n              z: result.data.z_axis.map(item => [parseFloat(item.x), parseFloat(item.y)])\r\n            };\r\n          } else if (result.axes === 1) {\r\n            has1Axis = true;\r\n            tempSpectrum1AxisData = result.data.map(item => [parseFloat(item.x), parseFloat(item.y)]);\r\n          }\r\n        } else {\r\n          console.error(`Failed to process ${files[index].path}:`, result.error);\r\n        }\r\n      });\r\n      \r\n      // Set the spectrum data states\r\n      if (has3Axis) {\r\n        setSpectrum3AxisData(tempSpectrum3AxisData);\r\n      }\r\n      if (has1Axis) {\r\n        setSpectrum1AxisData(tempSpectrum1AxisData);\r\n      }\r\n      \r\n      // Set display flags\r\n      if (has3Axis && has1Axis) {\r\n        setHasMultipleSpectrums(true);\r\n        console.log('Multiple spectrums available: 3-axis + 1-axis');\r\n      } else if (has3Axis) {\r\n        setIs3AxisSpectrum(true);\r\n        setSpectrumDataX(tempSpectrum3AxisData.x);\r\n        setSpectrumDataY(tempSpectrum3AxisData.y); \r\n        setSpectrumDataZ(tempSpectrum3AxisData.z);\r\n        console.log('Single 3-axis spectrum available');\r\n      } else if (has1Axis) {\r\n        setIs3AxisSpectrum(false);\r\n        setSpectrumData(tempSpectrum1AxisData);\r\n        console.log('Single 1-axis spectrum available');\r\n      }\r\n      \r\n      setSelectedPoint(pointData);\r\n      setShowSpectrum(true);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error fetching spectrum data:\", error);\r\n      message.error(\"Error fetching spectrum data: \" + error.message);\r\n    } finally {\r\n      setSpectrumLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to fetch single spectrum data\r\n  const fetchSingleSpectrumData = async (binFilePath, expectedType) => {\r\n    const cleanBinFile = binFilePath?.replace(\"uploads/\", \"\");\r\n    const apiUrl = `api/getDataFromPythonScript?fileName=${cleanBinFile}`;\r\n    \r\n    console.log(`Fetching spectrum for: ${cleanBinFile} (expected: ${expectedType})`);\r\n    \r\n    const response = await axiosInstance.get(apiUrl);\r\n    return response.data;\r\n  };\r\n\r\n  // Helper function to convert data to Highcharts format (memoized)\r\n  const convertToHighchartsData = useCallback((data) => {\r\n    if (!data || data.length === 0) return [];\r\n    \r\n    return data.map((item, index) => {\r\n      return [\r\n        item.x instanceof Date ? item.x.getTime() : index, // Use timestamp for time series\r\n        item.y || 0\r\n      ];\r\n    });\r\n  }, []);\r\n\r\n  // Helper function to convert spectrum data to Highcharts format\r\n  const convertSpectrumToHighchartsData = useCallback((spectrumData) => {\r\n    if (!spectrumData || spectrumData.length === 0) return [];\r\n    \r\n    // Data is already in [[x, y], [x, y], ...] format from fetchSpectrumData\r\n    return spectrumData;\r\n  }, []);\r\n\r\n  // Find harmonic frequencies and their amplitudes from spectrum data\r\n  const getTop4Peaks = (spectrumData, machineRpm) => {\r\n    if (!machineRpm) {\r\n      return [];\r\n    }\r\n    \r\n    const baseFreq = parseFloat(machineRpm) / 60; // 1X frequency (RPM/60)\r\n    const colors = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#ff8800\"];\r\n    \r\n    // Define harmonic multipliers we want to find\r\n    const harmonicMultipliers = [1, 2, 3.3, 4.2];\r\n    \r\n    const harmonics = harmonicMultipliers.map((multiplier, index) => {\r\n      const targetFreq = baseFreq * multiplier;\r\n      let amplitude = 0;\r\n      \r\n      // Find the amplitude at this harmonic frequency from spectrum data\r\n      if (spectrumData && spectrumData.length > 0) {\r\n        // Find the closest frequency point in the spectrum data\r\n        const closestPoint = spectrumData.reduce((closest, point) => {\r\n          const [freq, amp] = point;\r\n          const currentDistance = Math.abs(freq - targetFreq);\r\n          const closestDistance = Math.abs(closest[0] - targetFreq);\r\n          return currentDistance < closestDistance ? point : closest;\r\n        });\r\n        amplitude = closestPoint[1];\r\n      }\r\n      \r\n      return {\r\n        frequency: targetFreq,\r\n        amplitude: amplitude,\r\n        multiplier: multiplier === 1 ? \"1X\" : \r\n                   multiplier === 2 ? \"2X\" : \r\n                   multiplier === 3.3 ? \"3.3X\" : \"4.2X\",\r\n        color: colors[index] || \"#666666\"\r\n      };\r\n    });\r\n    \r\n    return harmonics;\r\n  };\r\n\r\n  // Create main chart with Highcharts\r\n  const createMainChart = useCallback((data, title, unit, color) => {\r\n    if (!mainChartRef.current || !window.Highcharts) return;\r\n\r\n    if (mainChartRef.current.chart) {\r\n      mainChartRef.current.chart.destroy();\r\n    }\r\n\r\n    const chartData = convertToHighchartsData(data);\r\n    \r\n    // Create file availability pointer series\r\n    const fileAvailabilityData = data.map((point, index) => {\r\n      const availabilityStatus = getFileAvailabilityStatus(index);\r\n      const pointerColor = getFileAvailabilityColor(availabilityStatus);\r\n      \r\n      return {\r\n        x: point.x instanceof Date ? point.x.getTime() : index,\r\n        y: point.y,\r\n        color: pointerColor,\r\n        status: availabilityStatus\r\n      };\r\n    });\r\n    \r\n    mainChartRef.current.chart = window.Highcharts.stockChart(mainChartRef.current, {\r\n      chart: {\r\n        height: 450\r\n      },\r\n      title: {\r\n        text: title\r\n      },\r\n      xAxis: {\r\n        type: 'datetime',\r\n        title: {\r\n          text: 'Time'\r\n        }\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: `${title} ${unit}`\r\n        }\r\n      },\r\n      series: [{\r\n        name: title,\r\n        data: chartData,\r\n        color: color,\r\n        type: 'line',\r\n        point: {\r\n          events: {\r\n            click: function(e) {\r\n              const pointIndex = this.index;\r\n              const originalData = data[pointIndex];\r\n              \r\n              // Check if we have any binary files available for this point\r\n              // Use the new fetchAllSpectrumData to handle multiple files\r\n              fetchAllSpectrumData(originalData);\r\n            }\r\n          }\r\n        }\r\n      }, {\r\n        name: 'File Availability',\r\n        type: 'scatter',\r\n        data: fileAvailabilityData,\r\n        marker: {\r\n          enabled: true,\r\n          symbol: 'circle',\r\n          radius: 4,\r\n          states: {\r\n            hover: {\r\n              radius: 6\r\n            }\r\n          }\r\n        },\r\n        showInLegend: false,\r\n        enableMouseTracking: true,\r\n        tooltip: {\r\n          pointFormatter: function() {\r\n            const statusLabels = {\r\n              'both': 'Both Mid & High Frequency',\r\n              'mid-freq': 'Mid-Frequency Only',\r\n              'high-freq': 'High-Frequency Only', \r\n              'none': 'No Analysis Available'\r\n            };\r\n            return `<span style=\"color:${this.color}\">●</span> Analysis: <b>${statusLabels[this.status] || 'Unknown'}</b><br/>`;\r\n          }\r\n        },\r\n        point: {\r\n          events: {\r\n            click: function(e) {\r\n              const pointIndex = this.index;\r\n              const originalData = data[pointIndex];\r\n              \r\n              fetchAllSpectrumData(originalData);\r\n            }\r\n          }\r\n        }\r\n      }],\r\n      tooltip: {\r\n        xDateFormat: '%Y-%m-%d %H:%M:%S',\r\n        shared: true\r\n      },\r\n      plotOptions: {\r\n        line: {\r\n          marker: {\r\n            enabled: false\r\n          }\r\n        }\r\n      },\r\n      legend: {\r\n        enabled: true,\r\n        align: 'right',\r\n        verticalAlign: 'top',\r\n        layout: 'vertical',\r\n        x: -10,\r\n        y: 50,\r\n        itemStyle: {\r\n          fontSize: '10px'\r\n        }\r\n      }\r\n    });\r\n  }, [convertToHighchartsData, fetchAllSpectrumData, getFileAvailabilityStatus, getFileAvailabilityColor, rawData]);\r\n\r\n  // Create spectrum chart with Highcharts\r\n  const createSpectrumChart = useCallback((spectrumData) => {\r\n    console.log('createSpectrumChart called with data length:', spectrumData ? spectrumData.length : 0);\r\n    console.log('spectrumChartRef.current:', spectrumChartRef.current);\r\n    console.log('window.Highcharts available:', !!window.Highcharts);\r\n    \r\n    if (!spectrumChartRef.current || !window.Highcharts) {\r\n      console.log('Missing ref or Highcharts, returning');\r\n      return;\r\n    }\r\n\r\n    if (spectrumChartRef.current.chart) {\r\n      console.log('Destroying existing chart');\r\n      spectrumChartRef.current.chart.destroy();\r\n    }\r\n\r\n    const chartData = convertSpectrumToHighchartsData(spectrumData);\r\n    console.log('Chart data prepared, length:', chartData.length);\r\n    console.log('Sample chart data:', chartData.slice(0, 3));\r\n    \r\n    // Get harmonic frequencies for plot lines if machine data is available\r\n    const harmonics = machineData && machineData.rpm ? getTop4Peaks(spectrumData, machineData.rpm) : [];\r\n    \r\n    // Create plot lines for harmonic frequencies\r\n    const plotLines = harmonics.map((harmonic) => ({\r\n      color: harmonic.color,\r\n      width: 2,\r\n      value: harmonic.frequency,\r\n      dashStyle: 'solid',\r\n      label: {\r\n        text: harmonic.multiplier,\r\n        style: {\r\n          color: harmonic.color,\r\n          fontWeight: 'bold',\r\n          fontSize: '11px'\r\n        },\r\n        align: 'center',\r\n        verticalAlign: 'bottom',\r\n        y: -5\r\n      }\r\n    }));\r\n\r\n    // Create series for harmonic frequency markers (dots)\r\n    const harmonicSeries = harmonics.map((harmonic) => ({\r\n      name: `Harmonic ${harmonic.multiplier}`,\r\n      type: 'scatter',\r\n      data: [[harmonic.frequency, harmonic.amplitude || 0]],\r\n      color: harmonic.color,\r\n      marker: {\r\n        symbol: 'circle',\r\n        radius: 5,\r\n        fillColor: harmonic.color,\r\n        lineColor: harmonic.color,\r\n        lineWidth: 2\r\n      },\r\n      showInLegend: false,\r\n      enableMouseTracking: true,\r\n      tooltip: {\r\n        pointFormat: '<b>{point.x:.1f} Hz</b><br/>Harmonic: <b>' + harmonic.multiplier + '</b>'\r\n      }\r\n    }));\r\n    \r\n    try {\r\n      console.log('Creating Highcharts chart...');\r\n      spectrumChartRef.current.chart = window.Highcharts.chart(spectrumChartRef.current, {\r\n        chart: {\r\n          height: 450,\r\n          type: 'line',\r\n          zoomType: 'xy'\r\n        },\r\n        title: {\r\n          text: 'Amplitude Spectrum'\r\n        },\r\n        xAxis: {\r\n          title: {\r\n            text: 'Frequency (Hz)'\r\n          }\r\n        },\r\n        yAxis: {\r\n          title: {\r\n            text: 'Log Amplitude'\r\n          }\r\n        },\r\n        series: [\r\n          {\r\n            name: 'Amplitude Spectrum',\r\n            data: chartData,\r\n            color: '#ef4444',\r\n            lineWidth: 2,\r\n            type: 'line'\r\n          }\r\n        ],\r\n        legend: {\r\n          enabled: false\r\n        },\r\n        plotOptions: {\r\n          line: {\r\n            marker: {\r\n              enabled: false\r\n            },\r\n            states: {\r\n              hover: {\r\n                lineWidthPlus: 1\r\n              }\r\n            }\r\n          },\r\n          scatter: {\r\n            marker: {\r\n              enabled: true\r\n            }\r\n          }\r\n        },\r\n      });\r\n      console.log('Chart created successfully:', spectrumChartRef.current.chart);\r\n    } catch (error) {\r\n      console.error('Error creating spectrum chart:', error);\r\n    }\r\n  }, [convertSpectrumToHighchartsData, machineData, getTop4Peaks]);\r\n\r\n  // Create combined 3-axis spectrum chart for _0.bin files\r\n  const create3AxisSpectrumCharts = useCallback((dataX, dataY, dataZ) => {\r\n    console.log('create3AxisSpectrumCharts called - creating single combined chart');\r\n    \r\n    if (!window.Highcharts) {\r\n      console.log('Highcharts not available');\r\n      return;\r\n    }\r\n\r\n    // Get harmonic frequencies for plot lines if machine data is available\r\n    const harmonics = machineData && machineData.rpm ? getTop4Peaks(dataZ, machineData.rpm) : [];\r\n    \r\n    // Create plot lines for harmonic frequencies\r\n    const plotLines = harmonics.map((harmonic) => ({\r\n      color: harmonic.color,\r\n      width: 2,\r\n      value: harmonic.frequency,\r\n      dashStyle: 'solid',\r\n      label: {\r\n        text: harmonic.multiplier,\r\n        style: {\r\n          color: harmonic.color,\r\n          fontWeight: 'bold',\r\n          fontSize: '11px'\r\n        },\r\n        align: 'center',\r\n        verticalAlign: 'bottom',\r\n        y: -5\r\n      }\r\n    }));\r\n\r\n    // Create series for harmonic frequency markers (dots)\r\n    const harmonicSeries = harmonics.map((harmonic) => ({\r\n      name: `Harmonic ${harmonic.multiplier}`,\r\n      type: 'scatter',\r\n      data: [[harmonic.frequency, harmonic.amplitude || 0]],\r\n      color: harmonic.color,\r\n      marker: {\r\n        symbol: 'circle',\r\n        radius: 5,\r\n        fillColor: harmonic.color,\r\n        lineColor: harmonic.color,\r\n        lineWidth: 2\r\n      },\r\n      showInLegend: false,\r\n      enableMouseTracking: true,\r\n      tooltip: {\r\n        pointFormat: '<b>{point.x:.1f} Hz</b><br/>Harmonic: <b>' + harmonic.multiplier + '</b>'\r\n      }\r\n    }));\r\n\r\n    // Create single combined chart with all 3 axes\r\n    if (spectrumChartRefX.current) {\r\n      if (spectrumChartRefX.current.chart) {\r\n        spectrumChartRefX.current.chart.destroy();\r\n      }\r\n      \r\n      spectrumChartRefX.current.chart = window.Highcharts.chart(spectrumChartRefX.current, {\r\n        chart: { height: 450, type: 'line', zoomType: 'xy' },\r\n        title: { text: '3-Axis Mid-Frequency Spectrum Analysis' },\r\n        subtitle: { text: 'Combined X, Y, Z axes (fs=6664Hz, nperseg=4096)' },\r\n        xAxis: { \r\n          title: { text: 'Frequency (Hz)' },\r\n          gridLineWidth: 1,\r\n          plotLines: plotLines\r\n        },\r\n        yAxis: { \r\n          title: { text: 'Log Amplitude (m/s²)²/Hz' },\r\n          gridLineWidth: 1\r\n        },\r\n        series: [\r\n          {\r\n            name: 'X-Axis',\r\n            data: dataX,\r\n            color: '#ef4444',\r\n            lineWidth: 2,\r\n            type: 'line'\r\n          }, {\r\n            name: 'Y-Axis',\r\n            data: dataY,\r\n            color: '#3b82f6',\r\n            lineWidth: 2,\r\n            type: 'line'\r\n          }, {\r\n            name: 'Z-Axis',\r\n            data: dataZ,\r\n            color: '#10b981',\r\n            lineWidth: 2,\r\n            type: 'line'\r\n          },\r\n          ...harmonicSeries\r\n        ],\r\n        legend: { \r\n          enabled: true,\r\n          align: 'center',\r\n          verticalAlign: 'top',\r\n          layout: 'horizontal'\r\n        },\r\n        plotOptions: { \r\n          line: { \r\n            marker: { enabled: false },\r\n            states: {\r\n              hover: {\r\n                lineWidthPlus: 1\r\n              }\r\n            }\r\n          },\r\n          scatter: {\r\n            marker: {\r\n              enabled: true\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          shared: true,\r\n          crosshairs: true,\r\n          formatter: function() {\r\n            let tooltip = '<b>Frequency: ' + this.x.toFixed(2) + ' Hz</b><br/>';\r\n            this.points.forEach(point => {\r\n              tooltip += '<span style=\"color:' + point.color + '\">' + point.series.name + \r\n                        ': ' + point.y.toFixed(4) + '</span><br/>';\r\n            });\r\n            return tooltip;\r\n          }\r\n        },\r\n      });\r\n    }\r\n  }, [machineData, getTop4Peaks]);\r\n\r\n  // Create multi-spectrum charts (both 3-axis and 1-axis for same data point)\r\n  const createMultiSpectrumCharts = useCallback((spectrum3Axis, spectrum1Axis) => {\r\n    console.log('createMultiSpectrumCharts called');\r\n    \r\n    if (!window.Highcharts) {\r\n      console.log('Highcharts not available');\r\n      return;\r\n    }\r\n\r\n    // Get harmonic frequencies for plot lines if machine data is available\r\n    const harmonics = machineData && machineData.rpm ? getTop4Peaks(spectrum3Axis.z, machineData.rpm) : [];\r\n    const harmonics1Axis = machineData && machineData.rpm ? getTop4Peaks(spectrum1Axis, machineData.rpm) : [];\r\n    \r\n    // Create plot lines for harmonic frequencies\r\n    const plotLines = harmonics.map((harmonic) => ({\r\n      color: harmonic.color,\r\n      width: 2,\r\n      value: harmonic.frequency,\r\n      dashStyle: 'solid',\r\n      label: {\r\n        text: harmonic.multiplier,\r\n        style: {\r\n          color: harmonic.color,\r\n          fontWeight: 'bold',\r\n          fontSize: '11px'\r\n        },\r\n        align: 'center',\r\n        verticalAlign: 'bottom',\r\n        y: -5\r\n      }\r\n    }));\r\n\r\n    const plotLines1Axis = harmonics1Axis.map((harmonic) => ({\r\n      color: harmonic.color,\r\n      width: 2,\r\n      value: harmonic.frequency,\r\n      dashStyle: 'solid',\r\n      label: {\r\n        text: harmonic.multiplier,\r\n        style: {\r\n          color: harmonic.color,\r\n          fontWeight: 'bold',\r\n          fontSize: '11px'\r\n        },\r\n        align: 'center',\r\n        verticalAlign: 'bottom',\r\n        y: -5\r\n      }\r\n    }));\r\n\r\n    // Create series for harmonic frequency markers (dots)\r\n    const harmonicSeries = harmonics.map((harmonic) => ({\r\n      name: `Harmonic ${harmonic.multiplier}`,\r\n      type: 'scatter',\r\n      data: [[harmonic.frequency, harmonic.amplitude || 0]],\r\n      color: harmonic.color,\r\n      marker: {\r\n        symbol: 'circle',\r\n        radius: 5,\r\n        fillColor: harmonic.color,\r\n        lineColor: harmonic.color,\r\n        lineWidth: 2\r\n      },\r\n      showInLegend: false,\r\n      enableMouseTracking: true,\r\n      tooltip: {\r\n        pointFormat: '<b>{point.x:.1f} Hz</b><br/>Harmonic: <b>' + harmonic.multiplier + '</b>'\r\n      }\r\n    }));\r\n\r\n    const harmonicSeries1Axis = harmonics1Axis.map((harmonic) => ({\r\n      name: `Harmonic ${harmonic.multiplier}`,\r\n      type: 'scatter',\r\n      data: [[harmonic.frequency, harmonic.amplitude || 0]],\r\n      color: harmonic.color,\r\n      marker: {\r\n        symbol: 'circle',\r\n        radius: 5,\r\n        fillColor: harmonic.color,\r\n        lineColor: harmonic.color,\r\n        lineWidth: 2\r\n      },\r\n      showInLegend: false,\r\n      enableMouseTracking: true,\r\n      tooltip: {\r\n        pointFormat: '<b>{point.x:.1f} Hz</b><br/>Harmonic: <b>' + harmonic.multiplier + '</b>'\r\n      }\r\n    }));\r\n\r\n    // Create single combined 3-axis chart\r\n    if (multiSpectrum3AxisRefX.current) {\r\n      if (multiSpectrum3AxisRefX.current.chart) {\r\n        multiSpectrum3AxisRefX.current.chart.destroy();\r\n      }\r\n      \r\n      multiSpectrum3AxisRefX.current.chart = window.Highcharts.chart(multiSpectrum3AxisRefX.current, {\r\n        chart: { height: 420, type: 'line', zoomType: 'xy' },\r\n        title: { text: '3-Axis Mid-Frequency Spectrum Analysis' },\r\n        subtitle: { text: 'Combined X, Y, Z axes (fs=6664Hz, nperseg=4096)' },\r\n        xAxis: { \r\n          title: { text: 'Frequency (Hz)' },\r\n          gridLineWidth: 1,\r\n          plotLines: plotLines\r\n        },\r\n        yAxis: { \r\n          title: { text: 'Log Amplitude (m/s²)²/Hz' },\r\n          gridLineWidth: 1\r\n        },\r\n        series: [\r\n          {\r\n            name: 'X-Axis',\r\n            data: spectrum3Axis.x,\r\n            color: '#ef4444',\r\n            lineWidth: 2,\r\n            type: 'line'\r\n          }, {\r\n            name: 'Y-Axis',\r\n            data: spectrum3Axis.y,\r\n            color: '#3b82f6',\r\n            lineWidth: 2,\r\n            type: 'line'\r\n          }, {\r\n            name: 'Z-Axis',\r\n            data: spectrum3Axis.z,\r\n            color: '#10b981',\r\n            lineWidth: 2,\r\n            type: 'line'\r\n          },\r\n          ...harmonicSeries\r\n        ],\r\n        legend: { \r\n          enabled: true,\r\n          align: 'center',\r\n          verticalAlign: 'top',\r\n          layout: 'horizontal'\r\n        },\r\n        plotOptions: { \r\n          line: { \r\n            marker: { enabled: false },\r\n            states: {\r\n              hover: {\r\n                lineWidthPlus: 1\r\n              }\r\n            }\r\n          },\r\n          scatter: {\r\n            marker: {\r\n              enabled: true\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          shared: true,\r\n          crosshairs: true,\r\n          formatter: function() {\r\n            let tooltip = '<b>Frequency: ' + this.x.toFixed(2) + ' Hz</b><br/>';\r\n            this.points.forEach(point => {\r\n              tooltip += '<span style=\"color:' + point.color + '\">' + point.series.name + \r\n                        ': ' + point.y.toFixed(4) + '</span><br/>';\r\n            });\r\n            return tooltip;\r\n          }\r\n        },\r\n      });\r\n    }\r\n\r\n    // 1-axis chart\r\n    if (multiSpectrum1AxisRef.current) {\r\n      if (multiSpectrum1AxisRef.current.chart) {\r\n        multiSpectrum1AxisRef.current.chart.destroy();\r\n      }\r\n      \r\n      multiSpectrum1AxisRef.current.chart = window.Highcharts.chart(multiSpectrum1AxisRef.current, {\r\n        chart: { height: 370, type: 'line', zoomType: 'xy' },\r\n        title: { text: '1-Axis High-Frequency Spectrum Analysis' },\r\n        subtitle: { text: 'Single axis (fs=2560Hz, nperseg=65536)' },\r\n        xAxis: { \r\n          title: { text: 'Frequency (Hz)' }\r\n        },\r\n        yAxis: { title: { text: 'Log Amplitude' } },\r\n        series: [\r\n          {\r\n            name: '1-Axis PSD',\r\n            data: spectrum1Axis,\r\n            color: '#f59e0b',\r\n            lineWidth: 2,\r\n            type: 'line'\r\n          }\r\n        ],\r\n        legend: { enabled: false },\r\n        plotOptions: { \r\n          line: { \r\n            marker: { enabled: false },\r\n            states: {\r\n              hover: {\r\n                lineWidthPlus: 1\r\n              }\r\n            }\r\n          },\r\n          scatter: {\r\n            marker: {\r\n              enabled: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [machineData, getTop4Peaks]);\r\n\r\n  useEffect(() => {\r\n    fetchMachineData();\r\n    fetchSensorsData();\r\n    if (sensorId) {\r\n      setSelectedAlarm(sensorId);\r\n      fetchSensorData(sensorId, startDate, endDate);\r\n    }\r\n  }, [machineId, sensorId]);\r\n\r\n  // Fetch machine data to get RPM for harmonic calculations\r\n  const fetchMachineData = async () => {\r\n    try {\r\n      const response = await axiosInstance.get(`api/web/machines/${machineId}`);\r\n      const machine = response.data.item;\r\n      setMachineData(machine);\r\n      \r\n      // Calculate harmonic frequencies based on RPM\r\n      if (machine && machine.rpm) {\r\n        const baseFreq = parseFloat(machine.rpm) / 60; // Convert RPM to Hz (1st order frequency)\r\n        const harmonics = [\r\n          { multiplier: 1, frequency: baseFreq, label: \"1X\", color: \"#ff0000\" },\r\n          { multiplier: 2, frequency: baseFreq * 2, label: \"2X\", color: \"#00ff00\" },\r\n          { multiplier: 3, frequency: baseFreq * 3, label: \"3X\", color: \"#0000ff\" },\r\n          { multiplier: 3.4, frequency: baseFreq * 3.4, label: \"3.4X\", color: \"#ff8800\" },\r\n          { multiplier: 4, frequency: baseFreq * 4, label: \"4X\", color: \"#8800ff\" },\r\n          { multiplier: 4.2, frequency: baseFreq * 4.2, label: \"4.2X\", color: \"#00ffff\" }\r\n        ];\r\n        setHarmonicFrequencies(harmonics);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching machine data:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchSensorsData = async () => {\r\n    try {\r\n      const response = await axiosInstance.get(`api/web/machines/${machineId}/sensors`);\r\n      setSensorsData(response.data.items || []);\r\n    } catch (error) {\r\n      console.error(\"Error fetching sensors data:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchSensorData = async (sensor_id, start_date, end_date) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axiosInstance.get(`api/machine-data?machine_id=${machineId}&deviceID=${sensor_id}&start_date=${start_date}&end_date=${end_date}`);\r\n      const rawData = response.data.data;\r\n      setRawData(rawData);\r\n\r\n      // Process all chart data with proper number parsing and file mapping\r\n      setMid_freq_acceleration_p2p_x(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_acceleration_p2p_x) || 0,\r\n            extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_acceleration_p2p_y(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_acceleration_p2p_y) || 0,\r\n            extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_acceleration_p2p_z(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_acceleration_p2p_z) || 0,\r\n            extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setHigh_freq_acceleration_p2p_x(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.high_freq_acceleration_p2p_z) || 0,\r\n            extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_displacement_x(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_displacement_x) || 0,\r\n            extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_displacement_y(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_displacement_y) || 0,\r\n            extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_displacement_z(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_displacement_z) || 0,\r\n            extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_velocity_x(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_velocity_x) || 0,\r\n            extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_velocity_y(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_velocity_y) || 0,\r\n            extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_velocity_z(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_velocity_z) || 0,\r\n            extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_env_x(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_env_x) || 0,\r\n            extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_env_y(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_env_y) || 0,\r\n            extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setMid_freq_env_z(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.mid_freq_env_z) || 0,\r\n            extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setInclination_x(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.inclination_x) || 0,\r\n            extraValue: item.file_1?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setInclination_y(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.inclination_y) || 0,\r\n            extraValue: item.file_2?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setInclination_z(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.inclination_z) || 0,\r\n            extraValue: item.file_0?.replace(\"uploads/\", \"\"),\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      // Additional chart data - using correct field names from API\r\n      setMotorServiceTemperature(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.temperature) || 0, // API uses 'temperature' not 'motor_service_temperature'\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setBatteryPercentage(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.battery_percentage) || 0,\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setBatteryVoltage(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.battery_voltage) || 0,\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n      setRssi(() => {\r\n        const data = rawData.map((item) => {\r\n          return {\r\n            x: moment(item.datetime).toDate(),\r\n            y: parseFloat(item.RSSI) || 0, // API uses 'RSSI' (uppercase) not 'rssi'\r\n          }\r\n        })\r\n        return data\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching sensor data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMetricTypeChange = (value) => {\r\n    setSelectedMetricType(value);\r\n    // Reset axis to first available axis for the selected metric\r\n    const availableAxes = metricConfig[value]?.axes || [\"x\"];\r\n    setSelectedAxis(availableAxes[0]);\r\n  };\r\n\r\n  const handleAxisChange = (value) => {\r\n    setSelectedAxis(value);\r\n  };\r\n\r\n  const download = async (sensor_id, start_date, end_date) => {\r\n    if (rawData.length === 0) {\r\n      message.error(\"No data found\");\r\n      return;\r\n    }\r\n    let url = `${API_BASE_URL}/api/downloadMultipleRawFilesAndZipAndServe?machine_id=${machineId}&deviceID=${sensor_id}&start_date=${start_date}&end_date=${end_date}`;\r\n    window.open(url, '_blank');\r\n  };\r\n\r\n  const handleDateRangeSubmit = () => {\r\n    if (modalStartDate && modalEndDate) {\r\n      const start = moment(modalStartDate).format('YYYY-MM-DD hh:mm:ss');\r\n      const end = moment(modalEndDate).format('YYYY-MM-DD hh:mm:ss');\r\n      setStartDate(start);\r\n      setEndDate(end);\r\n      setSelectorDate(\"Date-Range\");\r\n      if (selectedAlarm) {\r\n        fetchSensorData(selectedAlarm, start, end);\r\n      }\r\n    }\r\n    setDateRangeModal(false);\r\n  };\r\n\r\n  // Update main chart when data changes\r\n  useEffect(() => {\r\n    const chartData = getCurrentChartData();\r\n    const currentConfig = metricConfig[selectedMetricType];\r\n    const currentColor = currentConfig?.colors?.[selectedAxis] || \"#ef4444\";\r\n    const currentUnit = currentConfig?.unit || \"\";\r\n    const chartTitle = `${currentConfig?.label || \"\"} ${selectedAxis.toUpperCase()}`;\r\n    \r\n    if (chartData.length > 0) {\r\n      createMainChart(chartData, chartTitle, currentUnit, currentColor);\r\n    }\r\n  }, [selectedMetricType, selectedAxis, rawData, createMainChart]);\r\n\r\n  // Update spectrum chart when spectrum data changes (single-axis)\r\n  useEffect(() => {\r\n    if (spectrumData && spectrumData.length > 0 && showSpectrum && !is3AxisSpectrum && !hasMultipleSpectrums) {\r\n      console.log('Creating single-axis spectrum chart with data length:', spectrumData.length);\r\n      // Add a small delay to ensure the DOM element is rendered\r\n      setTimeout(() => {\r\n        createSpectrumChart(spectrumData);\r\n      }, 100);\r\n    }\r\n  }, [spectrumData, createSpectrumChart, showSpectrum, is3AxisSpectrum, hasMultipleSpectrums]);\r\n\r\n  // Update 3-axis spectrum chart when data changes\r\n  useEffect(() => {\r\n    if (is3AxisSpectrum && showSpectrum && !hasMultipleSpectrums && \r\n        spectrumDataX && spectrumDataX.length > 0 && \r\n        spectrumDataY && spectrumDataY.length > 0 && \r\n        spectrumDataZ && spectrumDataZ.length > 0) {\r\n      console.log('Creating 3-axis spectrum chart');\r\n      setTimeout(() => {\r\n        create3AxisSpectrumCharts(spectrumDataX, spectrumDataY, spectrumDataZ);\r\n      }, 100);\r\n    }\r\n  }, [spectrumDataX, spectrumDataY, spectrumDataZ, create3AxisSpectrumCharts, showSpectrum, is3AxisSpectrum, hasMultipleSpectrums]);\r\n\r\n  // Update multi-spectrum charts when data changes\r\n  useEffect(() => {\r\n    if (hasMultipleSpectrums && showSpectrum && \r\n        spectrum3AxisData && spectrum1AxisData && spectrum1AxisData.length > 0) {\r\n      console.log('Creating multi-spectrum charts');\r\n      setTimeout(() => {\r\n        createMultiSpectrumCharts(spectrum3AxisData, spectrum1AxisData);\r\n      }, 100);\r\n    }\r\n  }, [spectrum3AxisData, spectrum1AxisData, createMultiSpectrumCharts, showSpectrum, hasMultipleSpectrums]);\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <div style={{ marginBottom: '20px' }}>\r\n        <Button onClick={() => history.push(`/app/machine-and-sensors/machine-details/${machineId}`)}>← Back to Machine Details</Button>\r\n      </div>\r\n      \r\n      <Card>\r\n        <div style={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          marginBottom: '20px',\r\n          gap: '15px'\r\n        }}>\r\n          <div><img src={SeriesImage} alt=\"Series\" /></div>\r\n          <div style={{\r\n            fontWeight: 'bold',\r\n            fontSize: '16px'\r\n          }}>Sensor Analysis {isFreeUser && <span style={{ color: '#f59e0b' }}>(Limited Features)</span>}</div>\r\n          <div>\r\n            <Button \r\n              type=\"primary\" \r\n              disabled={rawData.length === 0} \r\n              loading={loading} \r\n              onClick={() => download(selectedAlarm, startDate, endDate)}\r\n            >\r\n              Acquire Raw Data\r\n            </Button>\r\n          </div>\r\n\r\n          <div style={{ width: '200px' }}>\r\n            <Select \r\n              value={selectorDate} \r\n              onChange={(e) => {\r\n                if (e === \"Date Range\") {\r\n                  setDateRangeModal(true);\r\n                  return;\r\n                }\r\n                setSelectorDate(e);\r\n                let start, end;\r\n                if (e === \"1\") {\r\n                  start = moment().subtract(1, 'days').format('YYYY-MM-DD hh:mm:ss');\r\n                  end = moment().format('YYYY-MM-DD hh:mm:ss');\r\n                } else if (e === \"7\") {\r\n                  start = moment().subtract(7, 'days').format('YYYY-MM-DD hh:mm:ss');\r\n                  end = moment().format('YYYY-MM-DD hh:mm:ss');\r\n                } else if (e === \"30\") {\r\n                  start = moment().subtract(30, 'days').format('YYYY-MM-DD hh:mm:ss');\r\n                  end = moment().format('YYYY-MM-DD hh:mm:ss');\r\n                } else if (e === \"60\") {\r\n                  start = moment().subtract(60, 'days').format('YYYY-MM-DD hh:mm:ss');\r\n                  end = moment().format('YYYY-MM-DD hh:mm:ss');\r\n                }\r\n                setStartDate(start);\r\n                setEndDate(end);\r\n                if (selectedAlarm) {\r\n                  fetchSensorData(selectedAlarm, start, end);\r\n                }\r\n              }} \r\n              style={{ width: '100%' }}\r\n            >\r\n              <Select.Option value=\"1\">1 Day</Select.Option>\r\n              <Select.Option value=\"7\">7 Day</Select.Option>\r\n              <Select.Option value=\"30\">30 Day</Select.Option>\r\n              <Select.Option value=\"60\">60 Day</Select.Option>\r\n              <Select.Option value=\"Date Range\">Date Range</Select.Option>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ width: \"300px\", marginBottom: \"30px\" }}>\r\n          <Select \r\n            value={selectedAlarm}\r\n            placeholder=\"Select Sensor\"\r\n            onChange={(e) => {\r\n              setSelectedAlarm(e);\r\n              localStorage.setItem('deviceId2', e);\r\n              fetchSensorData(e, startDate, endDate);\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          >\r\n            {sensorsData.map((item) => (\r\n              <Option key={item.sensor_id} value={item.sensor_id}>\r\n                {item.sensor_type + \" #\" + (item.sensor_id_label !== null ? item.sensor_id_label : item.sensor_id)}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n\r\n        {/* Spectrum Chart - shown when a point is clicked */}\r\n        {showSpectrum && (\r\n          <Card \r\n            title={\r\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <span>\r\n                  {hasMultipleSpectrums ? \r\n                    `Analysis` :\r\n                    is3AxisSpectrum ? \r\n                      `3-Axis Combined Spectrum (${spectrumDataX ? spectrumDataX.length : 0} points per axis)` : \r\n                      `Amplitude Spectrum (${spectrumData ? spectrumData.length : 0} points)`\r\n                  }\r\n                </span>\r\n                <Button size=\"small\" onClick={() => setShowSpectrum(false)}>✕ Close</Button>\r\n              </div>\r\n            }\r\n            style={{ marginBottom: '20px' }}\r\n            loading={spectrumLoading}\r\n          >\r\n            {selectedPoint && (\r\n              <div style={{ marginBottom: '15px', padding: '10px', background: '#f0f2f5', borderRadius: '6px' }}>\r\n                <div><strong>Time:</strong> {moment(selectedPoint.x).format('DD-MM-YYYY HH:mm:ss')}</div>\r\n                <div><strong>Value:</strong> {selectedPoint.y}</div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Single spectrum charts (either 3-axis OR 1-axis, not both) */}\r\n            {!hasMultipleSpectrums && is3AxisSpectrum && (\r\n              <>\r\n                <div style={{ marginBottom: '20px' }}>\r\n                  <h3 style={{ color: '#1890ff', marginBottom: '15px' }}>3-Axis Mid-Frequency Spectrum Analysis</h3>\r\n                  <div style={{ width: '100%', height: '470px', overflowX: 'auto' }}>\r\n                    <div ref={spectrumChartRefX} style={{ width: '100%', height: '470px' }}></div>\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            {!hasMultipleSpectrums && !is3AxisSpectrum && (\r\n              <>\r\n                <div style={{ marginBottom: '20px' }}>\r\n                  <h3 style={{ color: '#fa8c16', marginBottom: '15px' }}>1-Axis High-Frequency Spectrum Analysis</h3>\r\n                  <div style={{ display: 'flex', gap: '20px' }}>\r\n                    <div style={{ flex: 1, height: '470px', overflowX: 'auto' }}>\r\n                      <div ref={spectrumChartRef} style={{ width: '100%', height: '470px' }}></div>\r\n                    </div>\r\n                    \r\n                    {/* Harmonics Table - Right Side - For Single Axis */}\r\n                    {machineData && (\r\n                      <div style={{ flexShrink: 0 }}>\r\n                        <div style={{ \r\n                          width: '250px',\r\n                          border: '3px solid #fa8c16',\r\n                          borderRadius: '8px',\r\n                          padding: '12px',\r\n                          background: '#fff7e6'\r\n                        }}>\r\n                          <div style={{ \r\n                            background: '#fa8c16', \r\n                            color: 'white', \r\n                            padding: '6px', \r\n                            textAlign: 'center', \r\n                            fontWeight: 'bold',\r\n                            borderRadius: '4px',\r\n                            marginBottom: '10px'\r\n                          }}>\r\n                            Harmonics of Rotational Frequency\r\n                          </div>\r\n                          <table style={{ width: '100%', fontSize: '12px' }}>\r\n                            <tbody>\r\n                              {getTop4Peaks(spectrumData, machineData.rpm).map((peak, index) => (\r\n                                <tr key={index}>\r\n                                  <td style={{ \r\n                                    color: peak.color, \r\n                                    fontWeight: 'bold',\r\n                                    paddingRight: '8px'\r\n                                  }}>\r\n                                    ●\r\n                                  </td>\r\n                                  <td style={{ fontWeight: 'bold' }}>\r\n                                    {(index + 1)}st Order @\r\n                                  </td>\r\n                                  <td style={{ \r\n                                    color: peak.color, \r\n                                    fontWeight: 'bold',\r\n                                    textAlign: 'right'\r\n                                  }}>\r\n                                    {peak.frequency.toFixed(1)} Hz\r\n                                  </td>\r\n                                  <td style={{ \r\n                                    textAlign: 'right',\r\n                                    fontWeight: 'bold'\r\n                                  }}>\r\n                                    {peak.multiplier}\r\n                                  </td>\r\n                                </tr>\r\n                              ))}\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            {/* Multi-spectrum charts (both 3-axis and 1-axis for same data point) */}\r\n            {hasMultipleSpectrums && (\r\n              <>\r\n                <div style={{ marginBottom: '20px' }}>\r\n                  <h3 style={{ color: '#1890ff', marginBottom: '15px' }}>Mid-Frequency Analysis</h3>\r\n                  <div style={{ width: '100%', height: '420px', overflowX: 'auto' }}>\r\n                    <div ref={multiSpectrum3AxisRefX} style={{ width: '100%', height: '420px' }}></div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div style={{ marginBottom: '20px' }}>\r\n                  <h3 style={{ color: '#fa8c16', marginBottom: '15px' }}>High-Frequency Analysis</h3>\r\n                  <div style={{ display: 'flex', gap: '20px' }}>\r\n                    <div style={{ flex: 1, height: '370px', overflowX: 'auto' }}>\r\n                      <div ref={multiSpectrum1AxisRef} style={{ width: '100%', height: '370px' }}></div>\r\n                    </div>\r\n                    \r\n                    {/* Harmonics Table - Right Side - Based on Top 4 Peaks */}\r\n                    {machineData && (\r\n                      <div style={{ flexShrink: 0 }}>\r\n                        <div style={{ \r\n                          width: '250px',\r\n                          border: '3px solid #1890ff',\r\n                          borderRadius: '8px',\r\n                          padding: '12px',\r\n                          background: '#e6f7ff'\r\n                        }}>\r\n                          <div style={{ \r\n                            background: '#1890ff', \r\n                            color: 'white', \r\n                            padding: '6px', \r\n                            textAlign: 'center', \r\n                            fontWeight: 'bold',\r\n                            borderRadius: '4px',\r\n                            marginBottom: '10px'\r\n                          }}>\r\n                            Harmonics of Rotational Frequency\r\n                          </div>\r\n                          <table style={{ width: '100%', fontSize: '12px' }}>\r\n                            <tbody>\r\n                              {getTop4Peaks(null, machineData.rpm).map((peak, index) => (\r\n                                <tr key={index}>\r\n                                  <td style={{ \r\n                                    color: peak.color, \r\n                                    fontWeight: 'bold',\r\n                                    paddingRight: '8px'\r\n                                  }}>\r\n                                    ●\r\n                                  </td>\r\n                                  <td style={{ fontWeight: 'bold' }}>\r\n                                    {(index + 1)}st Order @\r\n                                  </td>\r\n                                  <td style={{ \r\n                                    color: peak.color, \r\n                                    fontWeight: 'bold',\r\n                                    textAlign: 'right'\r\n                                  }}>\r\n                                    {peak.frequency.toFixed(1)} Hz\r\n                                  </td>\r\n                                  <td style={{ \r\n                                    textAlign: 'right',\r\n                                    fontWeight: 'bold'\r\n                                  }}>\r\n                                    {peak.multiplier}\r\n                                  </td>\r\n                                </tr>\r\n                              ))}\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n          </Card>\r\n        )}\r\n\r\n        {/* Single Trend chart */}\r\n        <Card \r\n          title={\r\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n              {/* First row: Trend title and Metric Type Toggle Buttons */}\r\n              <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>\r\n                <span>Trend</span>\r\n                <div style={{ display: 'flex', gap: '5px' }}>\r\n                  {Object.entries(metricConfig).map(([key, config]) => (\r\n                    <button\r\n                      key={key}\r\n                      onClick={() => handleMetricTypeChange(key)}\r\n                      style={{\r\n                        padding: '4px 12px',\r\n                        fontSize: '12px',\r\n                        border: 'none',\r\n                        borderRadius: '15px',\r\n                        cursor: 'pointer',\r\n                        backgroundColor: selectedMetricType === key ? '#1890ff' : 'rgba(255, 255, 255, 0.1)',\r\n                        color: selectedMetricType === key ? 'white' : '#666',\r\n                        transition: 'all 0.2s ease'\r\n                      }}\r\n                    >\r\n                      {config.label}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Second row: Axis Toggle Buttons (center aligned) */}\r\n              {(metricConfig[selectedMetricType]?.axes || []).filter(axis => axis !== \"\").length > 0 && (\r\n                <div style={{ display: 'flex', justifyContent: 'center', gap: '10px' }}>\r\n                  {(metricConfig[selectedMetricType]?.axes || []).filter(axis => axis !== \"\").map((axis) => (\r\n                    <button\r\n                      key={axis}\r\n                      onClick={() => handleAxisChange(axis)}\r\n                      style={{\r\n                        padding: '6px 16px',\r\n                        fontSize: '14px',\r\n                        fontWeight: '600',\r\n                        border: 'none',\r\n                        borderRadius: '15px',\r\n                        cursor: 'pointer',\r\n                        backgroundColor: selectedAxis === axis ? metricConfig[selectedMetricType]?.colors?.[axis] || '#1890ff' : 'rgba(255, 255, 255, 0.1)',\r\n                        color: selectedAxis === axis ? 'white' : '#666',\r\n                        transition: 'all 0.2s ease',\r\n                        minWidth: '45px'\r\n                      }}\r\n                    >\r\n                      {axis.toUpperCase()}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n              \r\n              {/* Third row: File Availability Legend */}\r\n              <div style={{ display: 'flex', justifyContent: 'center', gap: '15px', fontSize: '11px', color: '#666' }}>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\r\n                  <div style={{ width: '8px', height: '8px', borderRadius: '50%', backgroundColor: '#10b981' }}></div>\r\n                  <span>Both Analyses</span>\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\r\n                  <div style={{ width: '8px', height: '8px', borderRadius: '50%', backgroundColor: '#3b82f6' }}></div>\r\n                  <span>Mid-Frequency</span>\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\r\n                  <div style={{ width: '8px', height: '8px', borderRadius: '50%', backgroundColor: '#f59e0b' }}></div>\r\n                  <span>High-Frequency</span>\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\r\n                  <div style={{ width: '8px', height: '8px', borderRadius: '50%', backgroundColor: '#ef4444' }}></div>\r\n                  <span>No Analysis</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }\r\n          style={{ marginBottom: '20px' }}\r\n        >\r\n          <div style={{ width: '100%', height: '450px', overflowX: 'auto' }}>\r\n            <div ref={mainChartRef} style={{ width: '100%', height: '450px' }}></div>\r\n          </div>\r\n        </Card>\r\n      </Card>\r\n\r\n      {/* Date Range Modal */}\r\n      <Modal\r\n        title=\"Select Date Range\"\r\n        visible={dateRangeModal}\r\n        onOk={handleDateRangeSubmit}\r\n        onCancel={() => setDateRangeModal(false)}\r\n      >\r\n        <div style={{ marginBottom: '16px' }}>\r\n          <label>Start Date:</label>\r\n          <DatePicker\r\n            showTime\r\n            value={modalStartDate ? moment(modalStartDate) : null}\r\n            onChange={(date) => setModalStartDate(date)}\r\n            style={{ width: '100%', marginTop: '8px' }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>End Date:</label>\r\n          <DatePicker\r\n            showTime\r\n            value={modalEndDate ? moment(modalEndDate) : null}\r\n            onChange={(date) => setModalEndDate(date)}\r\n            style={{ width: '100%', marginTop: '8px' }}\r\n          />\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorAnalysis;","/home/faizan/jd-works/customer-web-app/src/utils/permissionUtils.js",[],"/home/faizan/jd-works/customer-web-app/src/contexts/PermissionsContext.js",[],{"ruleId":"1623","replacedBy":"1624"},{"ruleId":"1625","replacedBy":"1626"},{"ruleId":"1627","severity":1,"message":"1628","line":2,"column":8,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1631","line":12,"column":10,"nodeType":"1629","messageId":"1630","endLine":12,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1632","line":12,"column":17,"nodeType":"1629","messageId":"1630","endLine":12,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1633","line":2,"column":8,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1634","line":4,"column":3,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":7},{"ruleId":"1627","severity":1,"message":"1635","line":5,"column":3,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":6},{"ruleId":"1627","severity":1,"message":"1636","line":6,"column":3,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":6},{"ruleId":"1627","severity":1,"message":"1637","line":7,"column":3,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1638","line":20,"column":3,"nodeType":"1629","messageId":"1630","endLine":20,"endColumn":10},{"ruleId":"1627","severity":1,"message":"1639","line":46,"column":9,"nodeType":"1629","messageId":"1630","endLine":46,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1640","line":49,"column":9,"nodeType":"1629","messageId":"1630","endLine":49,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1641","line":61,"column":10,"nodeType":"1629","messageId":"1630","endLine":61,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1642","line":61,"column":25,"nodeType":"1629","messageId":"1630","endLine":61,"endColumn":41},{"ruleId":"1643","severity":1,"message":"1644","line":225,"column":33,"nodeType":"1645","messageId":"1646","endLine":225,"endColumn":35},{"ruleId":"1647","severity":1,"message":"1648","line":568,"column":13,"nodeType":"1649","endLine":568,"endColumn":50},{"ruleId":"1650","severity":1,"message":"1651","line":776,"column":1,"nodeType":"1652","messageId":"1653","endLine":779,"endColumn":2},{"ruleId":"1650","severity":1,"message":"1651","line":780,"column":1,"nodeType":"1652","messageId":"1653","endLine":794,"endColumn":2},{"ruleId":"1650","severity":1,"message":"1651","line":795,"column":1,"nodeType":"1652","messageId":"1653","endLine":798,"endColumn":2},{"ruleId":"1627","severity":1,"message":"1654","line":4,"column":24,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":36},{"ruleId":"1627","severity":1,"message":"1655","line":23,"column":3,"nodeType":"1629","messageId":"1630","endLine":23,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1656","line":25,"column":3,"nodeType":"1629","messageId":"1630","endLine":25,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1657","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1658","line":2,"column":3,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1659","line":9,"column":3,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1660","line":11,"column":3,"nodeType":"1629","messageId":"1630","endLine":11,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1661","line":14,"column":10,"nodeType":"1629","messageId":"1630","endLine":14,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1662","line":14,"column":19,"nodeType":"1629","messageId":"1630","endLine":14,"endColumn":30},{"ruleId":"1627","severity":1,"message":"1663","line":16,"column":28,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":41},{"ruleId":"1643","severity":1,"message":"1644","line":18,"column":41,"nodeType":"1645","messageId":"1646","endLine":18,"endColumn":43},{"ruleId":"1664","severity":1,"message":"1665","line":57,"column":7,"nodeType":"1629","messageId":"1666","endLine":57,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1667","line":6,"column":8,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1668","line":17,"column":124,"nodeType":"1629","messageId":"1630","endLine":17,"endColumn":133},{"ruleId":"1643","severity":1,"message":"1669","line":78,"column":92,"nodeType":"1645","messageId":"1646","endLine":78,"endColumn":94},{"ruleId":"1627","severity":1,"message":"1670","line":1,"column":17,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1671","line":1,"column":28,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":36},{"ruleId":"1627","severity":1,"message":"1672","line":11,"column":10,"nodeType":"1629","messageId":"1630","endLine":11,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1673","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1674","line":24,"column":11,"nodeType":"1629","messageId":"1630","endLine":24,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1628","line":6,"column":8,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1639","line":10,"column":9,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1675","line":15,"column":10,"nodeType":"1629","messageId":"1630","endLine":15,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1676","line":99,"column":13,"nodeType":"1629","messageId":"1630","endLine":99,"endColumn":21},{"ruleId":"1677","severity":1,"message":"1678","line":175,"column":9,"nodeType":"1679","messageId":"1646","endLine":175,"endColumn":20},{"ruleId":"1680","severity":1,"message":"1681","line":194,"column":6,"nodeType":"1682","endLine":194,"endColumn":8,"suggestions":"1683"},{"ruleId":"1627","severity":1,"message":"1684","line":7,"column":8,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1685","line":8,"column":10,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1686","line":13,"column":18,"nodeType":"1629","messageId":"1630","endLine":13,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1687","line":10,"column":11,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1688","line":10,"column":26,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1689","line":16,"column":10,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":18},{"ruleId":"1643","severity":1,"message":"1644","line":25,"column":16,"nodeType":"1645","messageId":"1646","endLine":25,"endColumn":18},{"ruleId":"1680","severity":1,"message":"1690","line":32,"column":6,"nodeType":"1682","endLine":32,"endColumn":11,"suggestions":"1691"},{"ruleId":"1627","severity":1,"message":"1692","line":10,"column":10,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1693","line":20,"column":10,"nodeType":"1629","messageId":"1630","endLine":20,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1694","line":20,"column":24,"nodeType":"1629","messageId":"1630","endLine":20,"endColumn":39},{"ruleId":"1643","severity":1,"message":"1669","line":106,"column":66,"nodeType":"1645","messageId":"1646","endLine":106,"endColumn":68},{"ruleId":"1643","severity":1,"message":"1644","line":157,"column":42,"nodeType":"1645","messageId":"1646","endLine":157,"endColumn":44},{"ruleId":"1680","severity":1,"message":"1695","line":202,"column":6,"nodeType":"1682","endLine":202,"endColumn":8,"suggestions":"1696"},{"ruleId":"1627","severity":1,"message":"1628","line":6,"column":8,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1697","line":9,"column":10,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1639","line":11,"column":9,"nodeType":"1629","messageId":"1630","endLine":11,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1676","line":98,"column":13,"nodeType":"1629","messageId":"1630","endLine":98,"endColumn":21},{"ruleId":"1680","severity":1,"message":"1698","line":110,"column":6,"nodeType":"1682","endLine":110,"endColumn":8,"suggestions":"1699"},{"ruleId":"1627","severity":1,"message":"1700","line":2,"column":8,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1701","line":8,"column":7,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1702","line":31,"column":7,"nodeType":"1629","messageId":"1630","endLine":31,"endColumn":17},{"ruleId":"1680","severity":1,"message":"1703","line":80,"column":6,"nodeType":"1682","endLine":80,"endColumn":8,"suggestions":"1704"},{"ruleId":"1627","severity":1,"message":"1705","line":1,"column":10,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1706","line":1,"column":59,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":75},{"ruleId":"1627","severity":1,"message":"1707","line":1,"column":77,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":88},{"ruleId":"1627","severity":1,"message":"1659","line":1,"column":120,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":132},{"ruleId":"1627","severity":1,"message":"1708","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1709","line":3,"column":93,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":97},{"ruleId":"1627","severity":1,"message":"1710","line":3,"column":99,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":104},{"ruleId":"1627","severity":1,"message":"1711","line":3,"column":115,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":125},{"ruleId":"1627","severity":1,"message":"1712","line":5,"column":10,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1713","line":5,"column":29,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":48},{"ruleId":"1627","severity":1,"message":"1714","line":5,"column":50,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":57},{"ruleId":"1627","severity":1,"message":"1639","line":18,"column":9,"nodeType":"1629","messageId":"1630","endLine":18,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1715","line":24,"column":10,"nodeType":"1629","messageId":"1630","endLine":24,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1716","line":30,"column":10,"nodeType":"1629","messageId":"1630","endLine":30,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1717","line":33,"column":9,"nodeType":"1629","messageId":"1630","endLine":33,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1718","line":56,"column":9,"nodeType":"1629","messageId":"1630","endLine":56,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1719","line":61,"column":9,"nodeType":"1629","messageId":"1630","endLine":61,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1669","line":73,"column":64,"nodeType":"1645","messageId":"1646","endLine":73,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1669","line":76,"column":33,"nodeType":"1645","messageId":"1646","endLine":76,"endColumn":35},{"ruleId":"1643","severity":1,"message":"1669","line":79,"column":37,"nodeType":"1645","messageId":"1646","endLine":79,"endColumn":39},{"ruleId":"1643","severity":1,"message":"1669","line":106,"column":66,"nodeType":"1645","messageId":"1646","endLine":106,"endColumn":68},{"ruleId":"1643","severity":1,"message":"1644","line":252,"column":30,"nodeType":"1645","messageId":"1646","endLine":252,"endColumn":32},{"ruleId":"1643","severity":1,"message":"1644","line":252,"column":49,"nodeType":"1645","messageId":"1646","endLine":252,"endColumn":51},{"ruleId":"1643","severity":1,"message":"1644","line":259,"column":38,"nodeType":"1645","messageId":"1646","endLine":259,"endColumn":40},{"ruleId":"1643","severity":1,"message":"1644","line":259,"column":65,"nodeType":"1645","messageId":"1646","endLine":259,"endColumn":67},{"ruleId":"1627","severity":1,"message":"1720","line":339,"column":9,"nodeType":"1629","messageId":"1630","endLine":339,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1721","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1628","line":6,"column":8,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":13},{"ruleId":"1680","severity":1,"message":"1722","line":162,"column":8,"nodeType":"1682","endLine":162,"endColumn":10,"suggestions":"1723"},{"ruleId":"1643","severity":1,"message":"1669","line":166,"column":128,"nodeType":"1645","messageId":"1646","endLine":166,"endColumn":130},{"ruleId":"1680","severity":1,"message":"1724","line":70,"column":8,"nodeType":"1682","endLine":70,"endColumn":10,"suggestions":"1725"},{"ruleId":"1627","severity":1,"message":"1705","line":1,"column":10,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1706","line":1,"column":59,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":75},{"ruleId":"1627","severity":1,"message":"1707","line":1,"column":77,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":88},{"ruleId":"1627","severity":1,"message":"1659","line":1,"column":120,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":132},{"ruleId":"1627","severity":1,"message":"1708","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1709","line":3,"column":93,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":97},{"ruleId":"1627","severity":1,"message":"1710","line":3,"column":99,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":104},{"ruleId":"1627","severity":1,"message":"1711","line":3,"column":115,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":125},{"ruleId":"1627","severity":1,"message":"1712","line":5,"column":10,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1713","line":5,"column":29,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":48},{"ruleId":"1627","severity":1,"message":"1714","line":5,"column":50,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":57},{"ruleId":"1627","severity":1,"message":"1726","line":11,"column":8,"nodeType":"1629","messageId":"1630","endLine":11,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1639","line":17,"column":9,"nodeType":"1629","messageId":"1630","endLine":17,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1715","line":24,"column":10,"nodeType":"1629","messageId":"1630","endLine":24,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1716","line":26,"column":10,"nodeType":"1629","messageId":"1630","endLine":26,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1717","line":31,"column":9,"nodeType":"1629","messageId":"1630","endLine":31,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1718","line":50,"column":9,"nodeType":"1629","messageId":"1630","endLine":50,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1719","line":55,"column":9,"nodeType":"1629","messageId":"1630","endLine":55,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1644","line":121,"column":30,"nodeType":"1645","messageId":"1646","endLine":121,"endColumn":32},{"ruleId":"1643","severity":1,"message":"1644","line":121,"column":49,"nodeType":"1645","messageId":"1646","endLine":121,"endColumn":51},{"ruleId":"1643","severity":1,"message":"1669","line":128,"column":64,"nodeType":"1645","messageId":"1646","endLine":128,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1669","line":131,"column":33,"nodeType":"1645","messageId":"1646","endLine":131,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1727","line":1,"column":31,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1728","line":7,"column":31,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":50},{"ruleId":"1627","severity":1,"message":"1659","line":7,"column":95,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":107},{"ruleId":"1627","severity":1,"message":"1729","line":7,"column":109,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":127},{"ruleId":"1627","severity":1,"message":"1721","line":8,"column":10,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1730","line":15,"column":10,"nodeType":"1629","messageId":"1630","endLine":15,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1731","line":28,"column":12,"nodeType":"1629","messageId":"1630","endLine":28,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1732","line":28,"column":24,"nodeType":"1629","messageId":"1630","endLine":28,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1733","line":29,"column":12,"nodeType":"1629","messageId":"1630","endLine":29,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1734","line":29,"column":20,"nodeType":"1629","messageId":"1630","endLine":29,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1735","line":32,"column":12,"nodeType":"1629","messageId":"1630","endLine":32,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1736","line":37,"column":11,"nodeType":"1629","messageId":"1630","endLine":37,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1737","line":44,"column":12,"nodeType":"1629","messageId":"1630","endLine":44,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1738","line":44,"column":21,"nodeType":"1629","messageId":"1630","endLine":44,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1739","line":106,"column":11,"nodeType":"1629","messageId":"1630","endLine":106,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1740","line":145,"column":12,"nodeType":"1629","messageId":"1630","endLine":145,"endColumn":17},{"ruleId":"1643","severity":1,"message":"1644","line":204,"column":33,"nodeType":"1645","messageId":"1646","endLine":204,"endColumn":35},{"ruleId":"1643","severity":1,"message":"1669","line":231,"column":61,"nodeType":"1645","messageId":"1646","endLine":231,"endColumn":63},{"ruleId":"1643","severity":1,"message":"1644","line":235,"column":33,"nodeType":"1645","messageId":"1646","endLine":235,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1676","line":256,"column":19,"nodeType":"1629","messageId":"1630","endLine":256,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1741","line":325,"column":11,"nodeType":"1629","messageId":"1630","endLine":325,"endColumn":26},{"ruleId":"1680","severity":1,"message":"1724","line":339,"column":8,"nodeType":"1682","endLine":339,"endColumn":10,"suggestions":"1742"},{"ruleId":"1643","severity":1,"message":"1644","line":858,"column":39,"nodeType":"1645","messageId":"1646","endLine":858,"endColumn":41},{"ruleId":"1627","severity":1,"message":"1743","line":1,"column":24,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1727","line":1,"column":31,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1744","line":1,"column":39,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":43},{"ruleId":"1627","severity":1,"message":"1745","line":1,"column":45,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":51},{"ruleId":"1627","severity":1,"message":"1746","line":1,"column":53,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":60},{"ruleId":"1627","severity":1,"message":"1747","line":1,"column":62,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":69},{"ruleId":"1627","severity":1,"message":"1748","line":1,"column":71,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":79},{"ruleId":"1627","severity":1,"message":"1749","line":1,"column":81,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":86},{"ruleId":"1627","severity":1,"message":"1750","line":2,"column":10,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1751","line":2,"column":17,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1658","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1752","line":3,"column":24,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":36},{"ruleId":"1627","severity":1,"message":"1707","line":3,"column":38,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":49},{"ruleId":"1627","severity":1,"message":"1753","line":3,"column":51,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":63},{"ruleId":"1627","severity":1,"message":"1754","line":3,"column":65,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":79},{"ruleId":"1627","severity":1,"message":"1755","line":7,"column":10,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1756","line":9,"column":8,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1757","line":10,"column":10,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1758","line":11,"column":10,"nodeType":"1629","messageId":"1630","endLine":11,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1714","line":14,"column":10,"nodeType":"1629","messageId":"1630","endLine":14,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1684","line":16,"column":8,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1726","line":17,"column":8,"nodeType":"1629","messageId":"1630","endLine":17,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1759","line":23,"column":10,"nodeType":"1629","messageId":"1630","endLine":23,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1760","line":23,"column":23,"nodeType":"1629","messageId":"1630","endLine":23,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1761","line":24,"column":9,"nodeType":"1629","messageId":"1630","endLine":24,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1762","line":30,"column":9,"nodeType":"1629","messageId":"1630","endLine":30,"endColumn":17},{"ruleId":"1643","severity":1,"message":"1669","line":39,"column":64,"nodeType":"1645","messageId":"1646","endLine":39,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1669","line":41,"column":33,"nodeType":"1645","messageId":"1646","endLine":41,"endColumn":35},{"ruleId":"1643","severity":1,"message":"1669","line":44,"column":29,"nodeType":"1645","messageId":"1646","endLine":44,"endColumn":31},{"ruleId":"1643","severity":1,"message":"1644","line":91,"column":37,"nodeType":"1645","messageId":"1646","endLine":91,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1763","line":5,"column":3,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":8},{"ruleId":"1627","severity":1,"message":"1764","line":14,"column":8,"nodeType":"1629","messageId":"1630","endLine":14,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1765","line":17,"column":8,"nodeType":"1629","messageId":"1630","endLine":17,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1766","line":19,"column":8,"nodeType":"1629","messageId":"1630","endLine":19,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1761","line":30,"column":9,"nodeType":"1629","messageId":"1630","endLine":30,"endColumn":16},{"ruleId":"1680","severity":1,"message":"1767","line":98,"column":6,"nodeType":"1682","endLine":98,"endColumn":8,"suggestions":"1768"},{"ruleId":"1627","severity":1,"message":"1676","line":107,"column":13,"nodeType":"1629","messageId":"1630","endLine":107,"endColumn":21},{"ruleId":"1643","severity":1,"message":"1644","line":152,"column":24,"nodeType":"1645","messageId":"1646","endLine":152,"endColumn":26},{"ruleId":"1769","severity":1,"message":"1770","line":208,"column":17,"nodeType":"1649","endLine":208,"endColumn":36},{"ruleId":"1643","severity":1,"message":"1644","line":418,"column":55,"nodeType":"1645","messageId":"1646","endLine":418,"endColumn":57},{"ruleId":"1769","severity":1,"message":"1770","line":488,"column":17,"nodeType":"1649","endLine":488,"endColumn":36},{"ruleId":"1769","severity":1,"message":"1770","line":525,"column":21,"nodeType":"1649","endLine":531,"endColumn":23},{"ruleId":"1769","severity":1,"message":"1770","line":548,"column":17,"nodeType":"1649","endLine":548,"endColumn":36},{"ruleId":"1769","severity":1,"message":"1770","line":594,"column":13,"nodeType":"1649","endLine":594,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1771","line":4,"column":3,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1772","line":5,"column":3,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1773","line":6,"column":3,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1774","line":17,"column":3,"nodeType":"1629","messageId":"1630","endLine":17,"endColumn":9},{"ruleId":"1643","severity":1,"message":"1669","line":65,"column":75,"nodeType":"1645","messageId":"1646","endLine":65,"endColumn":77},{"ruleId":"1627","severity":1,"message":"1727","line":5,"column":3,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":9},{"ruleId":"1627","severity":1,"message":"1744","line":6,"column":3,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":7},{"ruleId":"1627","severity":1,"message":"1745","line":7,"column":3,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":9},{"ruleId":"1627","severity":1,"message":"1746","line":8,"column":3,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":10},{"ruleId":"1627","severity":1,"message":"1748","line":10,"column":3,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":11},{"ruleId":"1627","severity":1,"message":"1749","line":11,"column":3,"nodeType":"1629","messageId":"1630","endLine":11,"endColumn":8},{"ruleId":"1627","severity":1,"message":"1750","line":16,"column":10,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1751","line":16,"column":17,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1658","line":18,"column":3,"nodeType":"1629","messageId":"1630","endLine":18,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1752","line":19,"column":3,"nodeType":"1629","messageId":"1630","endLine":19,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1753","line":21,"column":3,"nodeType":"1629","messageId":"1630","endLine":21,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1754","line":22,"column":3,"nodeType":"1629","messageId":"1630","endLine":22,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1756","line":30,"column":8,"nodeType":"1629","messageId":"1630","endLine":30,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1757","line":31,"column":10,"nodeType":"1629","messageId":"1630","endLine":31,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1758","line":32,"column":10,"nodeType":"1629","messageId":"1630","endLine":32,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1726","line":38,"column":8,"nodeType":"1629","messageId":"1630","endLine":38,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1759","line":44,"column":10,"nodeType":"1629","messageId":"1630","endLine":44,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1775","line":51,"column":9,"nodeType":"1629","messageId":"1630","endLine":51,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1776","line":64,"column":9,"nodeType":"1629","messageId":"1630","endLine":64,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1777","line":71,"column":9,"nodeType":"1629","messageId":"1630","endLine":71,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1778","line":76,"column":9,"nodeType":"1629","messageId":"1630","endLine":76,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1717","line":82,"column":9,"nodeType":"1629","messageId":"1630","endLine":82,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1779","line":86,"column":9,"nodeType":"1629","messageId":"1630","endLine":86,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1780","line":99,"column":9,"nodeType":"1629","messageId":"1630","endLine":99,"endColumn":21},{"ruleId":"1643","severity":1,"message":"1644","line":124,"column":48,"nodeType":"1645","messageId":"1646","endLine":124,"endColumn":50},{"ruleId":"1643","severity":1,"message":"1644","line":124,"column":75,"nodeType":"1645","messageId":"1646","endLine":124,"endColumn":77},{"ruleId":"1643","severity":1,"message":"1644","line":124,"column":104,"nodeType":"1645","messageId":"1646","endLine":124,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":125,"column":27,"nodeType":"1645","messageId":"1646","endLine":125,"endColumn":29},{"ruleId":"1643","severity":1,"message":"1644","line":125,"column":63,"nodeType":"1645","messageId":"1646","endLine":125,"endColumn":65},{"ruleId":"1627","severity":1,"message":"1762","line":133,"column":9,"nodeType":"1629","messageId":"1630","endLine":133,"endColumn":17},{"ruleId":"1643","severity":1,"message":"1644","line":137,"column":54,"nodeType":"1645","messageId":"1646","endLine":137,"endColumn":56},{"ruleId":"1643","severity":1,"message":"1644","line":137,"column":81,"nodeType":"1645","messageId":"1646","endLine":137,"endColumn":83},{"ruleId":"1643","severity":1,"message":"1644","line":137,"column":111,"nodeType":"1645","messageId":"1646","endLine":137,"endColumn":113},{"ruleId":"1643","severity":1,"message":"1644","line":140,"column":25,"nodeType":"1645","messageId":"1646","endLine":140,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1644","line":140,"column":61,"nodeType":"1645","messageId":"1646","endLine":140,"endColumn":63},{"ruleId":"1643","severity":1,"message":"1644","line":147,"column":35,"nodeType":"1645","messageId":"1646","endLine":147,"endColumn":37},{"ruleId":"1643","severity":1,"message":"1644","line":147,"column":54,"nodeType":"1645","messageId":"1646","endLine":147,"endColumn":56},{"ruleId":"1643","severity":1,"message":"1644","line":147,"column":75,"nodeType":"1645","messageId":"1646","endLine":147,"endColumn":77},{"ruleId":"1643","severity":1,"message":"1644","line":148,"column":21,"nodeType":"1645","messageId":"1646","endLine":148,"endColumn":23},{"ruleId":"1643","severity":1,"message":"1644","line":148,"column":57,"nodeType":"1645","messageId":"1646","endLine":148,"endColumn":59},{"ruleId":"1643","severity":1,"message":"1644","line":157,"column":43,"nodeType":"1645","messageId":"1646","endLine":157,"endColumn":45},{"ruleId":"1643","severity":1,"message":"1644","line":157,"column":70,"nodeType":"1645","messageId":"1646","endLine":157,"endColumn":72},{"ruleId":"1643","severity":1,"message":"1644","line":157,"column":99,"nodeType":"1645","messageId":"1646","endLine":157,"endColumn":101},{"ruleId":"1643","severity":1,"message":"1644","line":158,"column":11,"nodeType":"1645","messageId":"1646","endLine":158,"endColumn":13},{"ruleId":"1643","severity":1,"message":"1644","line":158,"column":37,"nodeType":"1645","messageId":"1646","endLine":158,"endColumn":39},{"ruleId":"1643","severity":1,"message":"1669","line":242,"column":64,"nodeType":"1645","messageId":"1646","endLine":242,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1669","line":244,"column":33,"nodeType":"1645","messageId":"1646","endLine":244,"endColumn":35},{"ruleId":"1643","severity":1,"message":"1669","line":247,"column":35,"nodeType":"1645","messageId":"1646","endLine":247,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1781","line":2,"column":10,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1636","line":2,"column":18,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1635","line":2,"column":32,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1749","line":2,"column":37,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":42},{"ruleId":"1627","severity":1,"message":"1782","line":6,"column":8,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1670","line":7,"column":17,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1783","line":9,"column":10,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":20},{"ruleId":"1643","severity":1,"message":"1669","line":271,"column":142,"nodeType":"1645","messageId":"1646","endLine":271,"endColumn":144},{"ruleId":"1627","severity":1,"message":"1784","line":363,"column":7,"nodeType":"1629","messageId":"1630","endLine":363,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1771","line":5,"column":3,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1772","line":6,"column":3,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1773","line":7,"column":3,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1763","line":14,"column":3,"nodeType":"1629","messageId":"1630","endLine":14,"endColumn":8},{"ruleId":"1627","severity":1,"message":"1774","line":19,"column":3,"nodeType":"1629","messageId":"1630","endLine":19,"endColumn":9},{"ruleId":"1627","severity":1,"message":"1785","line":101,"column":9,"nodeType":"1629","messageId":"1630","endLine":101,"endColumn":18},{"ruleId":"1643","severity":1,"message":"1669","line":126,"column":45,"nodeType":"1645","messageId":"1646","endLine":126,"endColumn":47},{"ruleId":"1643","severity":1,"message":"1669","line":149,"column":45,"nodeType":"1645","messageId":"1646","endLine":149,"endColumn":47},{"ruleId":"1643","severity":1,"message":"1669","line":164,"column":43,"nodeType":"1645","messageId":"1646","endLine":164,"endColumn":45},{"ruleId":"1627","severity":1,"message":"1758","line":2,"column":31,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":36},{"ruleId":"1627","severity":1,"message":"1765","line":8,"column":8,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1766","line":10,"column":8,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":13},{"ruleId":"1680","severity":1,"message":"1786","line":63,"column":5,"nodeType":"1682","endLine":63,"endColumn":7,"suggestions":"1787"},{"ruleId":"1643","severity":1,"message":"1644","line":66,"column":25,"nodeType":"1645","messageId":"1646","endLine":66,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1644","line":69,"column":25,"nodeType":"1645","messageId":"1646","endLine":69,"endColumn":27},{"ruleId":"1769","severity":1,"message":"1770","line":141,"column":15,"nodeType":"1649","endLine":141,"endColumn":34},{"ruleId":"1643","severity":1,"message":"1644","line":246,"column":59,"nodeType":"1645","messageId":"1646","endLine":246,"endColumn":61},{"ruleId":"1769","severity":1,"message":"1770","line":322,"column":15,"nodeType":"1649","endLine":322,"endColumn":34},{"ruleId":"1769","severity":1,"message":"1770","line":390,"column":15,"nodeType":"1649","endLine":390,"endColumn":34},{"ruleId":"1769","severity":1,"message":"1770","line":545,"column":15,"nodeType":"1649","endLine":545,"endColumn":34},{"ruleId":"1769","severity":1,"message":"1770","line":570,"column":24,"nodeType":"1649","endLine":572,"endColumn":48},{"ruleId":"1769","severity":1,"message":"1770","line":633,"column":15,"nodeType":"1649","endLine":633,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1705","line":1,"column":10,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1706","line":1,"column":59,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":75},{"ruleId":"1627","severity":1,"message":"1659","line":1,"column":120,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":132},{"ruleId":"1627","severity":1,"message":"1712","line":5,"column":10,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1713","line":5,"column":29,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":48},{"ruleId":"1627","severity":1,"message":"1639","line":16,"column":9,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1716","line":19,"column":10,"nodeType":"1629","messageId":"1630","endLine":19,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1718","line":44,"column":9,"nodeType":"1629","messageId":"1630","endLine":44,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1719","line":49,"column":9,"nodeType":"1629","messageId":"1630","endLine":49,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1669","line":59,"column":64,"nodeType":"1645","messageId":"1646","endLine":59,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1669","line":61,"column":33,"nodeType":"1645","messageId":"1646","endLine":61,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1788","line":146,"column":9,"nodeType":"1629","messageId":"1630","endLine":146,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1789","line":150,"column":9,"nodeType":"1629","messageId":"1630","endLine":150,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1790","line":3,"column":8,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1729","line":8,"column":28,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":46},{"ruleId":"1627","severity":1,"message":"1746","line":9,"column":16,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1727","line":9,"column":25,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1791","line":11,"column":8,"nodeType":"1629","messageId":"1630","endLine":11,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1792","line":12,"column":8,"nodeType":"1629","messageId":"1630","endLine":12,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1793","line":86,"column":9,"nodeType":"1629","messageId":"1630","endLine":86,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1794","line":91,"column":9,"nodeType":"1629","messageId":"1630","endLine":91,"endColumn":30},{"ruleId":"1627","severity":1,"message":"1795","line":93,"column":9,"nodeType":"1629","messageId":"1630","endLine":93,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1796","line":98,"column":9,"nodeType":"1629","messageId":"1630","endLine":98,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1797","line":101,"column":9,"nodeType":"1629","messageId":"1630","endLine":101,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1798","line":106,"column":9,"nodeType":"1629","messageId":"1630","endLine":106,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1799","line":109,"column":9,"nodeType":"1629","messageId":"1630","endLine":109,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1800","line":114,"column":9,"nodeType":"1629","messageId":"1630","endLine":114,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1801","line":116,"column":9,"nodeType":"1629","messageId":"1630","endLine":116,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1802","line":121,"column":9,"nodeType":"1629","messageId":"1630","endLine":121,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1803","line":124,"column":9,"nodeType":"1629","messageId":"1630","endLine":124,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1804","line":129,"column":9,"nodeType":"1629","messageId":"1630","endLine":129,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1805","line":132,"column":9,"nodeType":"1629","messageId":"1630","endLine":132,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1806","line":137,"column":9,"nodeType":"1629","messageId":"1630","endLine":137,"endColumn":30},{"ruleId":"1627","severity":1,"message":"1807","line":139,"column":9,"nodeType":"1629","messageId":"1630","endLine":139,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1808","line":144,"column":9,"nodeType":"1629","messageId":"1630","endLine":144,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1728","line":7,"column":31,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":50},{"ruleId":"1627","severity":1,"message":"1659","line":7,"column":79,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":91},{"ruleId":"1627","severity":1,"message":"1721","line":8,"column":10,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1730","line":15,"column":10,"nodeType":"1629","messageId":"1630","endLine":15,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1809","line":17,"column":10,"nodeType":"1629","messageId":"1630","endLine":17,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1708","line":23,"column":20,"nodeType":"1629","messageId":"1630","endLine":23,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1749","line":25,"column":3,"nodeType":"1629","messageId":"1630","endLine":25,"endColumn":8},{"ruleId":"1627","severity":1,"message":"1751","line":26,"column":3,"nodeType":"1629","messageId":"1630","endLine":26,"endColumn":6},{"ruleId":"1627","severity":1,"message":"1750","line":27,"column":3,"nodeType":"1629","messageId":"1630","endLine":27,"endColumn":8},{"ruleId":"1627","severity":1,"message":"1748","line":28,"column":3,"nodeType":"1629","messageId":"1630","endLine":28,"endColumn":11},{"ruleId":"1627","severity":1,"message":"1810","line":29,"column":3,"nodeType":"1629","messageId":"1630","endLine":29,"endColumn":7},{"ruleId":"1627","severity":1,"message":"1811","line":35,"column":16,"nodeType":"1629","messageId":"1630","endLine":35,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1732","line":41,"column":24,"nodeType":"1629","messageId":"1630","endLine":41,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1733","line":42,"column":12,"nodeType":"1629","messageId":"1630","endLine":42,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1734","line":42,"column":20,"nodeType":"1629","messageId":"1630","endLine":42,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1736","line":49,"column":11,"nodeType":"1629","messageId":"1630","endLine":49,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1737","line":56,"column":12,"nodeType":"1629","messageId":"1630","endLine":56,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1740","line":213,"column":12,"nodeType":"1629","messageId":"1630","endLine":213,"endColumn":17},{"ruleId":"1643","severity":1,"message":"1644","line":436,"column":37,"nodeType":"1645","messageId":"1646","endLine":436,"endColumn":39},{"ruleId":"1643","severity":1,"message":"1644","line":476,"column":37,"nodeType":"1645","messageId":"1646","endLine":476,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1741","line":556,"column":11,"nodeType":"1629","messageId":"1630","endLine":556,"endColumn":26},{"ruleId":"1680","severity":1,"message":"1812","line":580,"column":8,"nodeType":"1682","endLine":580,"endColumn":10,"suggestions":"1813"},{"ruleId":"1627","severity":1,"message":"1814","line":26,"column":3,"nodeType":"1629","messageId":"1630","endLine":26,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1728","line":28,"column":3,"nodeType":"1629","messageId":"1630","endLine":28,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1659","line":31,"column":3,"nodeType":"1629","messageId":"1630","endLine":31,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1730","line":41,"column":10,"nodeType":"1629","messageId":"1630","endLine":41,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1754","line":54,"column":24,"nodeType":"1629","messageId":"1630","endLine":54,"endColumn":38},{"ruleId":"1627","severity":1,"message":"1815","line":58,"column":10,"nodeType":"1629","messageId":"1630","endLine":58,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1816","line":60,"column":9,"nodeType":"1629","messageId":"1630","endLine":60,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1811","line":61,"column":16,"nodeType":"1629","messageId":"1630","endLine":61,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1817","line":63,"column":7,"nodeType":"1629","messageId":"1630","endLine":63,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1732","line":79,"column":22,"nodeType":"1629","messageId":"1630","endLine":79,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1733","line":80,"column":10,"nodeType":"1629","messageId":"1630","endLine":80,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1734","line":80,"column":18,"nodeType":"1629","messageId":"1630","endLine":80,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1736","line":87,"column":9,"nodeType":"1629","messageId":"1630","endLine":87,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1737","line":114,"column":10,"nodeType":"1629","messageId":"1630","endLine":114,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1818","line":119,"column":10,"nodeType":"1629","messageId":"1630","endLine":119,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1819","line":119,"column":17,"nodeType":"1629","messageId":"1630","endLine":119,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1820","line":158,"column":9,"nodeType":"1629","messageId":"1630","endLine":158,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1821","line":208,"column":10,"nodeType":"1629","messageId":"1630","endLine":208,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1822","line":209,"column":10,"nodeType":"1629","messageId":"1630","endLine":209,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1823","line":209,"column":27,"nodeType":"1629","messageId":"1630","endLine":209,"endColumn":45},{"ruleId":"1627","severity":1,"message":"1824","line":210,"column":10,"nodeType":"1629","messageId":"1630","endLine":210,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1825","line":210,"column":29,"nodeType":"1629","messageId":"1630","endLine":210,"endColumn":49},{"ruleId":"1627","severity":1,"message":"1826","line":211,"column":10,"nodeType":"1629","messageId":"1630","endLine":211,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1827","line":211,"column":27,"nodeType":"1629","messageId":"1630","endLine":211,"endColumn":45},{"ruleId":"1627","severity":1,"message":"1828","line":336,"column":10,"nodeType":"1629","messageId":"1630","endLine":336,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1829","line":345,"column":10,"nodeType":"1629","messageId":"1630","endLine":345,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1830","line":346,"column":10,"nodeType":"1629","messageId":"1630","endLine":346,"endColumn":30},{"ruleId":"1627","severity":1,"message":"1831","line":465,"column":9,"nodeType":"1629","messageId":"1630","endLine":465,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1832","line":487,"column":9,"nodeType":"1629","messageId":"1630","endLine":487,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1833","line":514,"column":9,"nodeType":"1629","messageId":"1630","endLine":514,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1834","line":578,"column":12,"nodeType":"1629","messageId":"1630","endLine":578,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1835","line":591,"column":9,"nodeType":"1629","messageId":"1630","endLine":591,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1836","line":699,"column":12,"nodeType":"1629","messageId":"1630","endLine":699,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1837","line":708,"column":9,"nodeType":"1629","messageId":"1630","endLine":708,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1741","line":727,"column":9,"nodeType":"1629","messageId":"1630","endLine":727,"endColumn":24},{"ruleId":"1680","severity":1,"message":"1838","line":776,"column":6,"nodeType":"1682","endLine":776,"endColumn":8,"suggestions":"1839"},{"ruleId":"1643","severity":1,"message":"1644","line":1708,"column":22,"nodeType":"1645","messageId":"1646","endLine":1708,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1749","line":3,"column":3,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":8},{"ruleId":"1627","severity":1,"message":"1708","line":5,"column":3,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":9},{"ruleId":"1627","severity":1,"message":"1748","line":6,"column":3,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":11},{"ruleId":"1627","severity":1,"message":"1727","line":12,"column":3,"nodeType":"1629","messageId":"1630","endLine":12,"endColumn":9},{"ruleId":"1627","severity":1,"message":"1753","line":21,"column":3,"nodeType":"1629","messageId":"1630","endLine":21,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1726","line":30,"column":8,"nodeType":"1629","messageId":"1630","endLine":30,"endColumn":14},{"ruleId":"1643","severity":1,"message":"1669","line":58,"column":113,"nodeType":"1645","messageId":"1646","endLine":58,"endColumn":115},{"ruleId":"1627","severity":1,"message":"1775","line":88,"column":9,"nodeType":"1629","messageId":"1630","endLine":88,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1840","line":137,"column":9,"nodeType":"1629","messageId":"1630","endLine":137,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1708","line":2,"column":3,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":9},{"ruleId":"1627","severity":1,"message":"1841","line":22,"column":3,"nodeType":"1629","messageId":"1630","endLine":22,"endColumn":11},{"ruleId":"1627","severity":1,"message":"1714","line":24,"column":3,"nodeType":"1629","messageId":"1630","endLine":24,"endColumn":10},{"ruleId":"1627","severity":1,"message":"1842","line":28,"column":3,"nodeType":"1629","messageId":"1630","endLine":28,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1843","line":48,"column":3,"nodeType":"1629","messageId":"1630","endLine":48,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1844","line":49,"column":3,"nodeType":"1629","messageId":"1630","endLine":49,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1845","line":50,"column":3,"nodeType":"1629","messageId":"1630","endLine":50,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1846","line":57,"column":8,"nodeType":"1629","messageId":"1630","endLine":57,"endColumn":12},{"ruleId":"1627","severity":1,"message":"1847","line":61,"column":8,"nodeType":"1629","messageId":"1630","endLine":61,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1792","line":63,"column":8,"nodeType":"1629","messageId":"1630","endLine":63,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1848","line":68,"column":7,"nodeType":"1629","messageId":"1630","endLine":68,"endColumn":14},{"ruleId":"1643","severity":1,"message":"1644","line":83,"column":13,"nodeType":"1645","messageId":"1646","endLine":83,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1849","line":87,"column":7,"nodeType":"1629","messageId":"1630","endLine":87,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1850","line":125,"column":10,"nodeType":"1629","messageId":"1630","endLine":125,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1851","line":127,"column":10,"nodeType":"1629","messageId":"1630","endLine":127,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1852","line":128,"column":10,"nodeType":"1629","messageId":"1630","endLine":128,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1853","line":129,"column":10,"nodeType":"1629","messageId":"1630","endLine":129,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1854","line":130,"column":10,"nodeType":"1629","messageId":"1630","endLine":130,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1855","line":131,"column":10,"nodeType":"1629","messageId":"1630","endLine":131,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1856","line":132,"column":10,"nodeType":"1629","messageId":"1630","endLine":132,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1857","line":135,"column":10,"nodeType":"1629","messageId":"1630","endLine":135,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1858","line":138,"column":10,"nodeType":"1629","messageId":"1630","endLine":138,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1859","line":139,"column":10,"nodeType":"1629","messageId":"1630","endLine":139,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1860","line":218,"column":19,"nodeType":"1629","messageId":"1630","endLine":218,"endColumn":29},{"ruleId":"1643","severity":1,"message":"1644","line":227,"column":70,"nodeType":"1645","messageId":"1646","endLine":227,"endColumn":72},{"ruleId":"1643","severity":1,"message":"1644","line":288,"column":24,"nodeType":"1645","messageId":"1646","endLine":288,"endColumn":26},{"ruleId":"1643","severity":1,"message":"1644","line":597,"column":31,"nodeType":"1645","messageId":"1646","endLine":597,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":601,"column":31,"nodeType":"1645","messageId":"1646","endLine":601,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":605,"column":31,"nodeType":"1645","messageId":"1646","endLine":605,"endColumn":33},{"ruleId":"1627","severity":1,"message":"1861","line":623,"column":9,"nodeType":"1629","messageId":"1630","endLine":623,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1862","line":629,"column":9,"nodeType":"1629","messageId":"1630","endLine":629,"endColumn":31},{"ruleId":"1643","severity":1,"message":"1644","line":640,"column":37,"nodeType":"1645","messageId":"1646","endLine":640,"endColumn":39},{"ruleId":"1643","severity":1,"message":"1644","line":644,"column":35,"nodeType":"1645","messageId":"1646","endLine":644,"endColumn":37},{"ruleId":"1680","severity":1,"message":"1863","line":653,"column":6,"nodeType":"1682","endLine":653,"endColumn":8,"suggestions":"1864"},{"ruleId":"1627","severity":1,"message":"1865","line":656,"column":9,"nodeType":"1629","messageId":"1630","endLine":656,"endColumn":19},{"ruleId":"1643","severity":1,"message":"1644","line":717,"column":28,"nodeType":"1645","messageId":"1646","endLine":717,"endColumn":30},{"ruleId":"1643","severity":1,"message":"1644","line":719,"column":35,"nodeType":"1645","messageId":"1646","endLine":719,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1866","line":736,"column":9,"nodeType":"1629","messageId":"1630","endLine":736,"endColumn":27},{"ruleId":"1867","severity":1,"message":"1868","line":1429,"column":55,"nodeType":"1869","messageId":"1870","endLine":1429,"endColumn":57},{"ruleId":"1867","severity":1,"message":"1868","line":1495,"column":55,"nodeType":"1869","messageId":"1870","endLine":1495,"endColumn":57},{"ruleId":"1867","severity":1,"message":"1868","line":1563,"column":55,"nodeType":"1869","messageId":"1870","endLine":1563,"endColumn":57},{"ruleId":"1769","severity":1,"message":"1770","line":1626,"column":20,"nodeType":"1649","endLine":1626,"endColumn":45},{"ruleId":"1643","severity":1,"message":"1644","line":1636,"column":64,"nodeType":"1645","messageId":"1646","endLine":1636,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1644","line":1660,"column":38,"nodeType":"1645","messageId":"1646","endLine":1660,"endColumn":40},{"ruleId":"1643","severity":1,"message":"1644","line":1731,"column":104,"nodeType":"1645","messageId":"1646","endLine":1731,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1732,"column":104,"nodeType":"1645","messageId":"1646","endLine":1732,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1733,"column":104,"nodeType":"1645","messageId":"1646","endLine":1733,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1734,"column":104,"nodeType":"1645","messageId":"1646","endLine":1734,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1742,"column":104,"nodeType":"1645","messageId":"1646","endLine":1742,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1743,"column":104,"nodeType":"1645","messageId":"1646","endLine":1743,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1744,"column":104,"nodeType":"1645","messageId":"1646","endLine":1744,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1751,"column":104,"nodeType":"1645","messageId":"1646","endLine":1751,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1752,"column":104,"nodeType":"1645","messageId":"1646","endLine":1752,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1753,"column":104,"nodeType":"1645","messageId":"1646","endLine":1753,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1760,"column":104,"nodeType":"1645","messageId":"1646","endLine":1760,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1761,"column":104,"nodeType":"1645","messageId":"1646","endLine":1761,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1762,"column":104,"nodeType":"1645","messageId":"1646","endLine":1762,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1769,"column":104,"nodeType":"1645","messageId":"1646","endLine":1769,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1770,"column":104,"nodeType":"1645","messageId":"1646","endLine":1770,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":1771,"column":104,"nodeType":"1645","messageId":"1646","endLine":1771,"endColumn":106},{"ruleId":"1643","severity":1,"message":"1644","line":5,"column":16,"nodeType":"1645","messageId":"1646","endLine":5,"endColumn":18},{"ruleId":"1643","severity":1,"message":"1644","line":8,"column":16,"nodeType":"1645","messageId":"1646","endLine":8,"endColumn":18},{"ruleId":"1643","severity":1,"message":"1644","line":11,"column":16,"nodeType":"1645","messageId":"1646","endLine":11,"endColumn":18},{"ruleId":"1643","severity":1,"message":"1644","line":14,"column":16,"nodeType":"1645","messageId":"1646","endLine":14,"endColumn":18},{"ruleId":"1643","severity":1,"message":"1644","line":17,"column":16,"nodeType":"1645","messageId":"1646","endLine":17,"endColumn":18},{"ruleId":"1643","severity":1,"message":"1644","line":19,"column":17,"nodeType":"1645","messageId":"1646","endLine":19,"endColumn":19},{"ruleId":"1643","severity":1,"message":"1644","line":21,"column":17,"nodeType":"1645","messageId":"1646","endLine":21,"endColumn":19},{"ruleId":"1643","severity":1,"message":"1644","line":23,"column":17,"nodeType":"1645","messageId":"1646","endLine":23,"endColumn":19},{"ruleId":"1643","severity":1,"message":"1644","line":46,"column":16,"nodeType":"1645","messageId":"1646","endLine":46,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1714","line":6,"column":10,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1871","line":16,"column":9,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1872","line":20,"column":10,"nodeType":"1629","messageId":"1630","endLine":20,"endColumn":17},{"ruleId":"1643","severity":1,"message":"1669","line":26,"column":15,"nodeType":"1645","messageId":"1646","endLine":26,"endColumn":17},{"ruleId":"1643","severity":1,"message":"1669","line":31,"column":33,"nodeType":"1645","messageId":"1646","endLine":31,"endColumn":35},{"ruleId":"1680","severity":1,"message":"1786","line":56,"column":6,"nodeType":"1682","endLine":56,"endColumn":8,"suggestions":"1873"},{"ruleId":"1627","severity":1,"message":"1874","line":184,"column":9,"nodeType":"1629","messageId":"1630","endLine":184,"endColumn":17},{"ruleId":"1643","severity":1,"message":"1644","line":219,"column":37,"nodeType":"1645","messageId":"1646","endLine":219,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1707","line":1,"column":10,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1875","line":9,"column":10,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1876","line":12,"column":7,"nodeType":"1629","messageId":"1630","endLine":12,"endColumn":11},{"ruleId":"1680","severity":1,"message":"1877","line":124,"column":8,"nodeType":"1682","endLine":124,"endColumn":10,"suggestions":"1878"},{"ruleId":"1627","severity":1,"message":"1753","line":1,"column":23,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1748","line":3,"column":26,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1751","line":3,"column":63,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":66},{"ruleId":"1627","severity":1,"message":"1775","line":60,"column":9,"nodeType":"1629","messageId":"1630","endLine":60,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1710","line":2,"column":31,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":36},{"ruleId":"1627","severity":1,"message":"1745","line":2,"column":56,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":62},{"ruleId":"1627","severity":1,"message":"1879","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1880","line":48,"column":12,"nodeType":"1629","messageId":"1630","endLine":48,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1881","line":48,"column":27,"nodeType":"1629","messageId":"1630","endLine":48,"endColumn":43},{"ruleId":"1627","severity":1,"message":"1882","line":19,"column":3,"nodeType":"1629","messageId":"1630","endLine":19,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1883","line":20,"column":3,"nodeType":"1629","messageId":"1630","endLine":20,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1884","line":21,"column":3,"nodeType":"1629","messageId":"1630","endLine":21,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1697","line":56,"column":10,"nodeType":"1629","messageId":"1630","endLine":56,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1885","line":99,"column":7,"nodeType":"1629","messageId":"1630","endLine":99,"endColumn":12},{"ruleId":"1627","severity":1,"message":"1886","line":221,"column":7,"nodeType":"1629","messageId":"1630","endLine":221,"endColumn":11},{"ruleId":"1627","severity":1,"message":"1887","line":240,"column":21,"nodeType":"1629","messageId":"1630","endLine":240,"endColumn":33},{"ruleId":"1627","severity":1,"message":"1888","line":265,"column":10,"nodeType":"1629","messageId":"1630","endLine":265,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1889","line":265,"column":26,"nodeType":"1629","messageId":"1630","endLine":265,"endColumn":43},{"ruleId":"1627","severity":1,"message":"1890","line":268,"column":25,"nodeType":"1629","messageId":"1630","endLine":268,"endColumn":41},{"ruleId":"1643","severity":1,"message":"1644","line":3241,"column":20,"nodeType":"1645","messageId":"1646","endLine":3241,"endColumn":22},{"ruleId":"1643","severity":1,"message":"1644","line":3242,"column":58,"nodeType":"1645","messageId":"1646","endLine":3242,"endColumn":60},{"ruleId":"1643","severity":1,"message":"1644","line":3249,"column":25,"nodeType":"1645","messageId":"1646","endLine":3249,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1644","line":3254,"column":20,"nodeType":"1645","messageId":"1646","endLine":3254,"endColumn":22},{"ruleId":"1643","severity":1,"message":"1644","line":3255,"column":59,"nodeType":"1645","messageId":"1646","endLine":3255,"endColumn":61},{"ruleId":"1643","severity":1,"message":"1644","line":3262,"column":25,"nodeType":"1645","messageId":"1646","endLine":3262,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1644","line":3267,"column":20,"nodeType":"1645","messageId":"1646","endLine":3267,"endColumn":22},{"ruleId":"1643","severity":1,"message":"1644","line":3268,"column":61,"nodeType":"1645","messageId":"1646","endLine":3268,"endColumn":63},{"ruleId":"1643","severity":1,"message":"1644","line":3275,"column":25,"nodeType":"1645","messageId":"1646","endLine":3275,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1644","line":3280,"column":20,"nodeType":"1645","messageId":"1646","endLine":3280,"endColumn":22},{"ruleId":"1643","severity":1,"message":"1644","line":3281,"column":69,"nodeType":"1645","messageId":"1646","endLine":3281,"endColumn":71},{"ruleId":"1643","severity":1,"message":"1644","line":3288,"column":25,"nodeType":"1645","messageId":"1646","endLine":3288,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1644","line":3293,"column":20,"nodeType":"1645","messageId":"1646","endLine":3293,"endColumn":22},{"ruleId":"1643","severity":1,"message":"1644","line":3294,"column":66,"nodeType":"1645","messageId":"1646","endLine":3294,"endColumn":68},{"ruleId":"1643","severity":1,"message":"1644","line":3301,"column":25,"nodeType":"1645","messageId":"1646","endLine":3301,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1644","line":3306,"column":20,"nodeType":"1645","messageId":"1646","endLine":3306,"endColumn":22},{"ruleId":"1643","severity":1,"message":"1644","line":3307,"column":62,"nodeType":"1645","messageId":"1646","endLine":3307,"endColumn":64},{"ruleId":"1643","severity":1,"message":"1644","line":3314,"column":25,"nodeType":"1645","messageId":"1646","endLine":3314,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1891","line":3321,"column":9,"nodeType":"1629","messageId":"1630","endLine":3321,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1892","line":3341,"column":9,"nodeType":"1629","messageId":"1630","endLine":3341,"endColumn":39},{"ruleId":"1643","severity":1,"message":"1644","line":3342,"column":24,"nodeType":"1645","messageId":"1646","endLine":3342,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1893","line":3363,"column":9,"nodeType":"1629","messageId":"1630","endLine":3363,"endColumn":35},{"ruleId":"1643","severity":1,"message":"1644","line":3364,"column":24,"nodeType":"1645","messageId":"1646","endLine":3364,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1894","line":3385,"column":9,"nodeType":"1629","messageId":"1630","endLine":3385,"endColumn":39},{"ruleId":"1643","severity":1,"message":"1644","line":3386,"column":24,"nodeType":"1645","messageId":"1646","endLine":3386,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1895","line":3408,"column":9,"nodeType":"1629","messageId":"1630","endLine":3408,"endColumn":40},{"ruleId":"1643","severity":1,"message":"1644","line":3409,"column":24,"nodeType":"1645","messageId":"1646","endLine":3409,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1896","line":3430,"column":9,"nodeType":"1629","messageId":"1630","endLine":3430,"endColumn":35},{"ruleId":"1643","severity":1,"message":"1644","line":3431,"column":24,"nodeType":"1645","messageId":"1646","endLine":3431,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1897","line":3452,"column":9,"nodeType":"1629","messageId":"1630","endLine":3452,"endColumn":34},{"ruleId":"1643","severity":1,"message":"1644","line":3453,"column":24,"nodeType":"1645","messageId":"1646","endLine":3453,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1898","line":3474,"column":9,"nodeType":"1629","messageId":"1630","endLine":3474,"endColumn":34},{"ruleId":"1643","severity":1,"message":"1644","line":3475,"column":24,"nodeType":"1645","messageId":"1646","endLine":3475,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1899","line":3496,"column":9,"nodeType":"1629","messageId":"1630","endLine":3496,"endColumn":36},{"ruleId":"1643","severity":1,"message":"1644","line":3497,"column":24,"nodeType":"1645","messageId":"1646","endLine":3497,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1900","line":3517,"column":9,"nodeType":"1629","messageId":"1630","endLine":3517,"endColumn":31},{"ruleId":"1643","severity":1,"message":"1644","line":3518,"column":24,"nodeType":"1645","messageId":"1646","endLine":3518,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1901","line":3538,"column":9,"nodeType":"1629","messageId":"1630","endLine":3538,"endColumn":35},{"ruleId":"1643","severity":1,"message":"1644","line":3539,"column":24,"nodeType":"1645","messageId":"1646","endLine":3539,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1902","line":3559,"column":9,"nodeType":"1629","messageId":"1630","endLine":3559,"endColumn":37},{"ruleId":"1643","severity":1,"message":"1644","line":3560,"column":24,"nodeType":"1645","messageId":"1646","endLine":3560,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1903","line":3580,"column":9,"nodeType":"1629","messageId":"1630","endLine":3580,"endColumn":36},{"ruleId":"1643","severity":1,"message":"1644","line":3581,"column":24,"nodeType":"1645","messageId":"1646","endLine":3581,"endColumn":26},{"ruleId":"1643","severity":1,"message":"1644","line":3604,"column":13,"nodeType":"1645","messageId":"1646","endLine":3604,"endColumn":15},{"ruleId":"1643","severity":1,"message":"1644","line":3606,"column":20,"nodeType":"1645","messageId":"1646","endLine":3606,"endColumn":22},{"ruleId":"1643","severity":1,"message":"1644","line":3608,"column":20,"nodeType":"1645","messageId":"1646","endLine":3608,"endColumn":22},{"ruleId":"1643","severity":1,"message":"1644","line":3610,"column":20,"nodeType":"1645","messageId":"1646","endLine":3610,"endColumn":22},{"ruleId":"1643","severity":1,"message":"1644","line":3644,"column":15,"nodeType":"1645","messageId":"1646","endLine":3644,"endColumn":17},{"ruleId":"1643","severity":1,"message":"1644","line":3646,"column":22,"nodeType":"1645","messageId":"1646","endLine":3646,"endColumn":24},{"ruleId":"1643","severity":1,"message":"1644","line":3648,"column":22,"nodeType":"1645","messageId":"1646","endLine":3648,"endColumn":24},{"ruleId":"1643","severity":1,"message":"1644","line":3650,"column":22,"nodeType":"1645","messageId":"1646","endLine":3650,"endColumn":24},{"ruleId":"1643","severity":1,"message":"1644","line":3938,"column":30,"nodeType":"1645","messageId":"1646","endLine":3938,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1904","line":3959,"column":7,"nodeType":"1629","messageId":"1630","endLine":3959,"endColumn":12},{"ruleId":"1627","severity":1,"message":"1905","line":3960,"column":7,"nodeType":"1629","messageId":"1630","endLine":3960,"endColumn":13},{"ruleId":"1906","severity":1,"message":"1907","line":4053,"column":40,"nodeType":"1869","messageId":"1908","endLine":4085,"endColumn":10},{"ruleId":"1643","severity":1,"message":"1644","line":4179,"column":13,"nodeType":"1645","messageId":"1646","endLine":4179,"endColumn":15},{"ruleId":"1643","severity":1,"message":"1644","line":4182,"column":13,"nodeType":"1645","messageId":"1646","endLine":4182,"endColumn":15},{"ruleId":"1643","severity":1,"message":"1644","line":4185,"column":13,"nodeType":"1645","messageId":"1646","endLine":4185,"endColumn":15},{"ruleId":"1643","severity":1,"message":"1644","line":4188,"column":13,"nodeType":"1645","messageId":"1646","endLine":4188,"endColumn":15},{"ruleId":"1643","severity":1,"message":"1644","line":4194,"column":23,"nodeType":"1645","messageId":"1646","endLine":4194,"endColumn":25},{"ruleId":"1643","severity":1,"message":"1644","line":4195,"column":55,"nodeType":"1645","messageId":"1646","endLine":4195,"endColumn":57},{"ruleId":"1643","severity":1,"message":"1644","line":4196,"column":53,"nodeType":"1645","messageId":"1646","endLine":4196,"endColumn":55},{"ruleId":"1643","severity":1,"message":"1644","line":4198,"column":23,"nodeType":"1645","messageId":"1646","endLine":4198,"endColumn":25},{"ruleId":"1643","severity":1,"message":"1644","line":4199,"column":56,"nodeType":"1645","messageId":"1646","endLine":4199,"endColumn":58},{"ruleId":"1643","severity":1,"message":"1644","line":4200,"column":54,"nodeType":"1645","messageId":"1646","endLine":4200,"endColumn":56},{"ruleId":"1643","severity":1,"message":"1644","line":4202,"column":23,"nodeType":"1645","messageId":"1646","endLine":4202,"endColumn":25},{"ruleId":"1643","severity":1,"message":"1644","line":4203,"column":58,"nodeType":"1645","messageId":"1646","endLine":4203,"endColumn":60},{"ruleId":"1643","severity":1,"message":"1644","line":4204,"column":56,"nodeType":"1645","messageId":"1646","endLine":4204,"endColumn":58},{"ruleId":"1643","severity":1,"message":"1644","line":4206,"column":23,"nodeType":"1645","messageId":"1646","endLine":4206,"endColumn":25},{"ruleId":"1643","severity":1,"message":"1644","line":4207,"column":66,"nodeType":"1645","messageId":"1646","endLine":4207,"endColumn":68},{"ruleId":"1643","severity":1,"message":"1644","line":4208,"column":64,"nodeType":"1645","messageId":"1646","endLine":4208,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1644","line":4210,"column":23,"nodeType":"1645","messageId":"1646","endLine":4210,"endColumn":25},{"ruleId":"1643","severity":1,"message":"1644","line":4211,"column":63,"nodeType":"1645","messageId":"1646","endLine":4211,"endColumn":65},{"ruleId":"1643","severity":1,"message":"1644","line":4212,"column":61,"nodeType":"1645","messageId":"1646","endLine":4212,"endColumn":63},{"ruleId":"1643","severity":1,"message":"1644","line":4214,"column":23,"nodeType":"1645","messageId":"1646","endLine":4214,"endColumn":25},{"ruleId":"1643","severity":1,"message":"1644","line":4215,"column":59,"nodeType":"1645","messageId":"1646","endLine":4215,"endColumn":61},{"ruleId":"1643","severity":1,"message":"1644","line":4216,"column":57,"nodeType":"1645","messageId":"1646","endLine":4216,"endColumn":59},{"ruleId":"1643","severity":1,"message":"1644","line":4237,"column":21,"nodeType":"1645","messageId":"1646","endLine":4237,"endColumn":23},{"ruleId":"1643","severity":1,"message":"1644","line":4240,"column":21,"nodeType":"1645","messageId":"1646","endLine":4240,"endColumn":23},{"ruleId":"1643","severity":1,"message":"1644","line":4243,"column":21,"nodeType":"1645","messageId":"1646","endLine":4243,"endColumn":23},{"ruleId":"1643","severity":1,"message":"1644","line":4246,"column":21,"nodeType":"1645","messageId":"1646","endLine":4246,"endColumn":23},{"ruleId":"1643","severity":1,"message":"1644","line":4251,"column":31,"nodeType":"1645","messageId":"1646","endLine":4251,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4258,"column":31,"nodeType":"1645","messageId":"1646","endLine":4258,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4265,"column":31,"nodeType":"1645","messageId":"1646","endLine":4265,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4272,"column":31,"nodeType":"1645","messageId":"1646","endLine":4272,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4279,"column":31,"nodeType":"1645","messageId":"1646","endLine":4279,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4286,"column":31,"nodeType":"1645","messageId":"1646","endLine":4286,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4295,"column":21,"nodeType":"1645","messageId":"1646","endLine":4295,"endColumn":23},{"ruleId":"1643","severity":1,"message":"1644","line":4303,"column":21,"nodeType":"1645","messageId":"1646","endLine":4303,"endColumn":23},{"ruleId":"1643","severity":1,"message":"1644","line":4311,"column":21,"nodeType":"1645","messageId":"1646","endLine":4311,"endColumn":23},{"ruleId":"1643","severity":1,"message":"1644","line":4319,"column":21,"nodeType":"1645","messageId":"1646","endLine":4319,"endColumn":23},{"ruleId":"1643","severity":1,"message":"1644","line":4329,"column":31,"nodeType":"1645","messageId":"1646","endLine":4329,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4341,"column":31,"nodeType":"1645","messageId":"1646","endLine":4341,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4353,"column":31,"nodeType":"1645","messageId":"1646","endLine":4353,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4365,"column":31,"nodeType":"1645","messageId":"1646","endLine":4365,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4377,"column":31,"nodeType":"1645","messageId":"1646","endLine":4377,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":4389,"column":31,"nodeType":"1645","messageId":"1646","endLine":4389,"endColumn":33},{"ruleId":"1680","severity":1,"message":"1877","line":4449,"column":6,"nodeType":"1682","endLine":4449,"endColumn":8,"suggestions":"1909"},{"ruleId":"1910","severity":1,"message":"1911","line":6970,"column":34,"nodeType":"1649","messageId":"1912","endLine":6970,"endColumn":106},{"ruleId":"1913","severity":1,"message":"1914","line":9596,"column":23,"nodeType":"1649","endLine":9605,"endColumn":25},{"ruleId":"1913","severity":1,"message":"1914","line":9610,"column":31,"nodeType":"1649","endLine":9617,"endColumn":33},{"ruleId":"1913","severity":1,"message":"1914","line":10197,"column":23,"nodeType":"1649","endLine":10206,"endColumn":25},{"ruleId":"1913","severity":1,"message":"1914","line":10212,"column":31,"nodeType":"1649","endLine":10219,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":10529,"column":30,"nodeType":"1645","messageId":"1646","endLine":10529,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1743","line":1,"column":24,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1727","line":1,"column":31,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1744","line":1,"column":39,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":43},{"ruleId":"1627","severity":1,"message":"1745","line":1,"column":45,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":51},{"ruleId":"1627","severity":1,"message":"1746","line":1,"column":53,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":60},{"ruleId":"1627","severity":1,"message":"1711","line":1,"column":98,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":108},{"ruleId":"1627","severity":1,"message":"1658","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1707","line":3,"column":38,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":49},{"ruleId":"1627","severity":1,"message":"1756","line":9,"column":8,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1757","line":10,"column":10,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1714","line":14,"column":10,"nodeType":"1629","messageId":"1630","endLine":14,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1684","line":16,"column":8,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1759","line":26,"column":10,"nodeType":"1629","messageId":"1630","endLine":26,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1776","line":91,"column":9,"nodeType":"1629","messageId":"1630","endLine":91,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1777","line":96,"column":9,"nodeType":"1629","messageId":"1630","endLine":96,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1778","line":101,"column":9,"nodeType":"1629","messageId":"1630","endLine":101,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1717","line":107,"column":9,"nodeType":"1629","messageId":"1630","endLine":107,"endColumn":21},{"ruleId":"1769","severity":1,"message":"1770","line":119,"column":11,"nodeType":"1649","endLine":119,"endColumn":104},{"ruleId":"1643","severity":1,"message":"1644","line":132,"column":18,"nodeType":"1645","messageId":"1646","endLine":132,"endColumn":20},{"ruleId":"1643","severity":1,"message":"1644","line":173,"column":18,"nodeType":"1645","messageId":"1646","endLine":173,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1788","line":192,"column":9,"nodeType":"1629","messageId":"1630","endLine":192,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1915","line":197,"column":9,"nodeType":"1629","messageId":"1630","endLine":197,"endColumn":21},{"ruleId":"1643","severity":1,"message":"1644","line":232,"column":37,"nodeType":"1645","messageId":"1646","endLine":232,"endColumn":39},{"ruleId":"1643","severity":1,"message":"1669","line":252,"column":64,"nodeType":"1645","messageId":"1646","endLine":252,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1669","line":255,"column":33,"nodeType":"1645","messageId":"1646","endLine":255,"endColumn":35},{"ruleId":"1643","severity":1,"message":"1644","line":269,"column":29,"nodeType":"1645","messageId":"1646","endLine":269,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1634","line":1,"column":18,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1774","line":1,"column":49,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":55},{"ruleId":"1627","severity":1,"message":"1628","line":2,"column":8,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1726","line":3,"column":8,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1670","line":4,"column":17,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1916","line":5,"column":8,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1917","line":6,"column":8,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":38},{"ruleId":"1627","severity":1,"message":"1773","line":7,"column":10,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1918","line":7,"column":25,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1919","line":8,"column":8,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1920","line":12,"column":11,"nodeType":"1629","messageId":"1630","endLine":12,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1921","line":16,"column":12,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1922","line":16,"column":31,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":51},{"ruleId":"1627","severity":1,"message":"1923","line":21,"column":11,"nodeType":"1629","messageId":"1630","endLine":21,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1924","line":28,"column":11,"nodeType":"1629","messageId":"1630","endLine":28,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1676","line":47,"column":19,"nodeType":"1629","messageId":"1630","endLine":47,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1781","line":1,"column":10,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1746","line":1,"column":24,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1758","line":1,"column":40,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":45},{"ruleId":"1627","severity":1,"message":"1747","line":1,"column":47,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":54},{"ruleId":"1627","severity":1,"message":"1628","line":2,"column":8,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1670","line":4,"column":17,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1671","line":4,"column":28,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":36},{"ruleId":"1643","severity":1,"message":"1669","line":27,"column":45,"nodeType":"1645","messageId":"1646","endLine":27,"endColumn":47},{"ruleId":"1627","severity":1,"message":"1781","line":1,"column":10,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1810","line":1,"column":28,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1925","line":1,"column":34,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":42},{"ruleId":"1627","severity":1,"message":"1671","line":2,"column":17,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1926","line":13,"column":11,"nodeType":"1629","messageId":"1630","endLine":13,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1708","line":1,"column":10,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1746","line":1,"column":24,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1751","line":1,"column":33,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":36},{"ruleId":"1627","severity":1,"message":"1927","line":3,"column":8,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1928","line":4,"column":8,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":15},{"ruleId":"1769","severity":1,"message":"1770","line":93,"column":40,"nodeType":"1649","endLine":93,"endColumn":60},{"ruleId":"1769","severity":1,"message":"1770","line":105,"column":29,"nodeType":"1649","endLine":105,"endColumn":55},{"ruleId":"1627","severity":1,"message":"1671","line":1,"column":16,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1929","line":2,"column":18,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1930","line":2,"column":28,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":38},{"ruleId":"1627","severity":1,"message":"1709","line":2,"column":40,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":44},{"ruleId":"1627","severity":1,"message":"1710","line":2,"column":69,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":74},{"ruleId":"1627","severity":1,"message":"1727","line":2,"column":76,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":82},{"ruleId":"1627","severity":1,"message":"1750","line":2,"column":84,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":89},{"ruleId":"1627","severity":1,"message":"1783","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1931","line":3,"column":22,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1932","line":5,"column":8,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1814","line":8,"column":3,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1933","line":11,"column":3,"nodeType":"1629","messageId":"1630","endLine":11,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1904","line":76,"column":7,"nodeType":"1629","messageId":"1630","endLine":76,"endColumn":12},{"ruleId":"1627","severity":1,"message":"1905","line":77,"column":7,"nodeType":"1629","messageId":"1630","endLine":77,"endColumn":13},{"ruleId":"1906","severity":1,"message":"1907","line":155,"column":40,"nodeType":"1869","messageId":"1908","endLine":187,"endColumn":10},{"ruleId":"1627","severity":1,"message":"1671","line":1,"column":16,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1929","line":2,"column":10,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1930","line":2,"column":42,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":52},{"ruleId":"1627","severity":1,"message":"1884","line":4,"column":10,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1883","line":5,"column":10,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1932","line":6,"column":8,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1882","line":7,"column":10,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1934","line":10,"column":8,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":20},{"ruleId":"1643","severity":1,"message":"1644","line":150,"column":71,"nodeType":"1645","messageId":"1646","endLine":150,"endColumn":73},{"ruleId":"1643","severity":1,"message":"1644","line":173,"column":71,"nodeType":"1645","messageId":"1646","endLine":173,"endColumn":73},{"ruleId":"1643","severity":1,"message":"1644","line":196,"column":71,"nodeType":"1645","messageId":"1646","endLine":196,"endColumn":73},{"ruleId":"1643","severity":1,"message":"1644","line":219,"column":71,"nodeType":"1645","messageId":"1646","endLine":219,"endColumn":73},{"ruleId":"1643","severity":1,"message":"1644","line":242,"column":71,"nodeType":"1645","messageId":"1646","endLine":242,"endColumn":73},{"ruleId":"1643","severity":1,"message":"1644","line":265,"column":71,"nodeType":"1645","messageId":"1646","endLine":265,"endColumn":73},{"ruleId":"1913","severity":1,"message":"1914","line":344,"column":33,"nodeType":"1649","endLine":353,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1670","line":1,"column":17,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1671","line":1,"column":28,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":36},{"ruleId":"1627","severity":1,"message":"1929","line":2,"column":47,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":55},{"ruleId":"1627","severity":1,"message":"1930","line":2,"column":57,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":67},{"ruleId":"1627","severity":1,"message":"1709","line":2,"column":69,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":73},{"ruleId":"1627","severity":1,"message":"1747","line":2,"column":75,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":82},{"ruleId":"1627","severity":1,"message":"1750","line":2,"column":84,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":89},{"ruleId":"1627","severity":1,"message":"1751","line":1,"column":23,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1726","line":2,"column":8,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":14},{"ruleId":"1677","severity":1,"message":"1935","line":46,"column":13,"nodeType":"1679","messageId":"1646","endLine":46,"endColumn":18},{"ruleId":"1677","severity":1,"message":"1936","line":47,"column":13,"nodeType":"1679","messageId":"1646","endLine":47,"endColumn":18},{"ruleId":"1677","severity":1,"message":"1937","line":48,"column":13,"nodeType":"1679","messageId":"1646","endLine":48,"endColumn":18},{"ruleId":"1643","severity":1,"message":"1644","line":162,"column":87,"nodeType":"1645","messageId":"1646","endLine":162,"endColumn":89},{"ruleId":"1643","severity":1,"message":"1644","line":162,"column":124,"nodeType":"1645","messageId":"1646","endLine":162,"endColumn":126},{"ruleId":"1643","severity":1,"message":"1644","line":171,"column":76,"nodeType":"1645","messageId":"1646","endLine":171,"endColumn":78},{"ruleId":"1913","severity":1,"message":"1914","line":202,"column":53,"nodeType":"1649","endLine":210,"endColumn":55},{"ruleId":"1643","severity":1,"message":"1644","line":77,"column":22,"nodeType":"1645","messageId":"1646","endLine":77,"endColumn":24},{"ruleId":"1643","severity":1,"message":"1644","line":77,"column":47,"nodeType":"1645","messageId":"1646","endLine":77,"endColumn":49},{"ruleId":"1643","severity":1,"message":"1644","line":78,"column":26,"nodeType":"1645","messageId":"1646","endLine":78,"endColumn":28},{"ruleId":"1643","severity":1,"message":"1644","line":81,"column":31,"nodeType":"1645","messageId":"1646","endLine":81,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":86,"column":29,"nodeType":"1645","messageId":"1646","endLine":86,"endColumn":31},{"ruleId":"1643","severity":1,"message":"1644","line":86,"column":58,"nodeType":"1645","messageId":"1646","endLine":86,"endColumn":60},{"ruleId":"1643","severity":1,"message":"1644","line":86,"column":87,"nodeType":"1645","messageId":"1646","endLine":86,"endColumn":89},{"ruleId":"1643","severity":1,"message":"1644","line":87,"column":26,"nodeType":"1645","messageId":"1646","endLine":87,"endColumn":28},{"ruleId":"1643","severity":1,"message":"1644","line":94,"column":68,"nodeType":"1645","messageId":"1646","endLine":94,"endColumn":70},{"ruleId":"1643","severity":1,"message":"1644","line":185,"column":83,"nodeType":"1645","messageId":"1646","endLine":185,"endColumn":85},{"ruleId":"1643","severity":1,"message":"1644","line":185,"column":120,"nodeType":"1645","messageId":"1646","endLine":185,"endColumn":122},{"ruleId":"1643","severity":1,"message":"1644","line":194,"column":74,"nodeType":"1645","messageId":"1646","endLine":194,"endColumn":76},{"ruleId":"1913","severity":1,"message":"1914","line":241,"column":53,"nodeType":"1649","endLine":249,"endColumn":55},{"ruleId":"1627","severity":1,"message":"1929","line":2,"column":10,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1781","line":2,"column":20,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1774","line":2,"column":28,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1709","line":2,"column":36,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":40},{"ruleId":"1627","severity":1,"message":"1938","line":6,"column":10,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1752","line":7,"column":10,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1939","line":7,"column":24,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1932","line":8,"column":8,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1809","line":9,"column":10,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1880","line":54,"column":12,"nodeType":"1629","messageId":"1630","endLine":54,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1881","line":54,"column":27,"nodeType":"1629","messageId":"1630","endLine":54,"endColumn":43},{"ruleId":"1627","severity":1,"message":"1874","line":55,"column":11,"nodeType":"1629","messageId":"1630","endLine":55,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1834","line":92,"column":14,"nodeType":"1629","messageId":"1630","endLine":92,"endColumn":29},{"ruleId":"1643","severity":1,"message":"1644","line":151,"column":87,"nodeType":"1645","messageId":"1646","endLine":151,"endColumn":89},{"ruleId":"1643","severity":1,"message":"1644","line":151,"column":124,"nodeType":"1645","messageId":"1646","endLine":151,"endColumn":126},{"ruleId":"1913","severity":1,"message":"1914","line":182,"column":53,"nodeType":"1649","endLine":190,"endColumn":55},{"ruleId":"1627","severity":1,"message":"1940","line":20,"column":12,"nodeType":"1629","messageId":"1630","endLine":20,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1876","line":62,"column":11,"nodeType":"1629","messageId":"1630","endLine":62,"endColumn":15},{"ruleId":"1643","severity":1,"message":"1644","line":253,"column":62,"nodeType":"1645","messageId":"1646","endLine":253,"endColumn":64},{"ruleId":"1643","severity":1,"message":"1644","line":255,"column":87,"nodeType":"1645","messageId":"1646","endLine":255,"endColumn":89},{"ruleId":"1643","severity":1,"message":"1644","line":255,"column":124,"nodeType":"1645","messageId":"1646","endLine":255,"endColumn":126},{"ruleId":"1643","severity":1,"message":"1644","line":273,"column":103,"nodeType":"1645","messageId":"1646","endLine":273,"endColumn":105},{"ruleId":"1913","severity":1,"message":"1914","line":290,"column":53,"nodeType":"1649","endLine":298,"endColumn":55},{"ruleId":"1643","severity":1,"message":"1644","line":144,"column":87,"nodeType":"1645","messageId":"1646","endLine":144,"endColumn":89},{"ruleId":"1643","severity":1,"message":"1644","line":144,"column":124,"nodeType":"1645","messageId":"1646","endLine":144,"endColumn":126},{"ruleId":"1913","severity":1,"message":"1914","line":175,"column":53,"nodeType":"1649","endLine":183,"endColumn":55},{"ruleId":"1643","severity":1,"message":"1644","line":140,"column":87,"nodeType":"1645","messageId":"1646","endLine":140,"endColumn":89},{"ruleId":"1643","severity":1,"message":"1644","line":140,"column":124,"nodeType":"1645","messageId":"1646","endLine":140,"endColumn":126},{"ruleId":"1913","severity":1,"message":"1914","line":171,"column":53,"nodeType":"1649","endLine":179,"endColumn":55},{"ruleId":"1627","severity":1,"message":"1930","line":1,"column":18,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1930","line":2,"column":42,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":52},{"ruleId":"1627","severity":1,"message":"1884","line":5,"column":10,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1883","line":7,"column":10,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1882","line":9,"column":10,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":29},{"ruleId":"1913","severity":1,"message":"1914","line":349,"column":33,"nodeType":"1649","endLine":359,"endColumn":35},{"ruleId":"1913","severity":1,"message":"1914","line":364,"column":45,"nodeType":"1649","endLine":371,"endColumn":47},{"ruleId":"1627","severity":1,"message":"1930","line":1,"column":18,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1930","line":1,"column":18,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1930","line":1,"column":18,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1930","line":1,"column":18,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1634","line":1,"column":10,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1670","line":1,"column":17,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1670","line":1,"column":17,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1941","line":15,"column":7,"nodeType":"1629","messageId":"1630","endLine":15,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1930","line":1,"column":18,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1930","line":1,"column":18,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1930","line":1,"column":18,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1639","line":4,"column":9,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":15},{"ruleId":"1643","severity":1,"message":"1644","line":58,"column":19,"nodeType":"1645","messageId":"1646","endLine":58,"endColumn":21},{"ruleId":"1643","severity":1,"message":"1644","line":61,"column":25,"nodeType":"1645","messageId":"1646","endLine":61,"endColumn":27},{"ruleId":"1643","severity":1,"message":"1644","line":67,"column":32,"nodeType":"1645","messageId":"1646","endLine":67,"endColumn":34},{"ruleId":"1643","severity":1,"message":"1644","line":163,"column":50,"nodeType":"1645","messageId":"1646","endLine":163,"endColumn":52},{"ruleId":"1643","severity":1,"message":"1644","line":165,"column":57,"nodeType":"1645","messageId":"1646","endLine":165,"endColumn":59},{"ruleId":"1680","severity":1,"message":"1942","line":230,"column":8,"nodeType":"1682","endLine":230,"endColumn":30,"suggestions":"1943"},{"ruleId":"1627","severity":1,"message":"1726","line":2,"column":8,"nodeType":"1629","messageId":"1630","endLine":2,"endColumn":14},{"ruleId":"1627","severity":1,"message":"1944","line":9,"column":8,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":22},{"ruleId":"1945","severity":1,"message":"1946","line":24,"column":60,"nodeType":"1645","messageId":"1947","endLine":24,"endColumn":61},{"ruleId":"1769","severity":1,"message":"1770","line":34,"column":13,"nodeType":"1649","endLine":34,"endColumn":40},{"ruleId":"1643","severity":1,"message":"1644","line":69,"column":42,"nodeType":"1645","messageId":"1646","endLine":69,"endColumn":44},{"ruleId":"1769","severity":1,"message":"1770","line":70,"column":51,"nodeType":"1649","endLine":75,"endColumn":15},{"ruleId":"1643","severity":1,"message":"1644","line":80,"column":44,"nodeType":"1645","messageId":"1646","endLine":80,"endColumn":46},{"ruleId":"1769","severity":1,"message":"1770","line":81,"column":42,"nodeType":"1649","endLine":81,"endColumn":73},{"ruleId":"1769","severity":1,"message":"1770","line":83,"column":43,"nodeType":"1649","endLine":83,"endColumn":75},{"ruleId":"1769","severity":1,"message":"1770","line":117,"column":15,"nodeType":"1649","endLine":117,"endColumn":40},{"ruleId":"1769","severity":1,"message":"1770","line":137,"column":15,"nodeType":"1649","endLine":137,"endColumn":36},{"ruleId":"1769","severity":1,"message":"1770","line":157,"column":15,"nodeType":"1649","endLine":157,"endColumn":41},{"ruleId":"1627","severity":1,"message":"1948","line":3,"column":8,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1949","line":4,"column":8,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1928","line":6,"column":8,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":15},{"ruleId":"1627","severity":1,"message":"1950","line":8,"column":8,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1944","line":9,"column":8,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":22},{"ruleId":"1769","severity":1,"message":"1770","line":34,"column":25,"nodeType":"1649","endLine":34,"endColumn":51},{"ruleId":"1769","severity":1,"message":"1770","line":54,"column":29,"nodeType":"1649","endLine":56,"endColumn":48},{"ruleId":"1769","severity":1,"message":"1770","line":57,"column":29,"nodeType":"1649","endLine":59,"endColumn":55},{"ruleId":"1769","severity":1,"message":"1770","line":93,"column":30,"nodeType":"1649","endLine":93,"endColumn":55},{"ruleId":"1769","severity":1,"message":"1770","line":128,"column":30,"nodeType":"1649","endLine":128,"endColumn":56},{"ruleId":"1627","severity":1,"message":"1951","line":3,"column":10,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":15},{"ruleId":"1680","severity":1,"message":"1952","line":30,"column":8,"nodeType":"1682","endLine":30,"endColumn":10,"suggestions":"1953"},{"ruleId":"1643","severity":1,"message":"1644","line":55,"column":60,"nodeType":"1645","messageId":"1646","endLine":55,"endColumn":62},{"ruleId":"1643","severity":1,"message":"1644","line":96,"column":56,"nodeType":"1645","messageId":"1646","endLine":96,"endColumn":58},{"ruleId":"1643","severity":1,"message":"1644","line":127,"column":64,"nodeType":"1645","messageId":"1646","endLine":127,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1644","line":18,"column":22,"nodeType":"1645","messageId":"1646","endLine":18,"endColumn":24},{"ruleId":"1643","severity":1,"message":"1644","line":18,"column":47,"nodeType":"1645","messageId":"1646","endLine":18,"endColumn":49},{"ruleId":"1643","severity":1,"message":"1644","line":19,"column":26,"nodeType":"1645","messageId":"1646","endLine":19,"endColumn":28},{"ruleId":"1643","severity":1,"message":"1644","line":22,"column":31,"nodeType":"1645","messageId":"1646","endLine":22,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":27,"column":29,"nodeType":"1645","messageId":"1646","endLine":27,"endColumn":31},{"ruleId":"1643","severity":1,"message":"1644","line":27,"column":58,"nodeType":"1645","messageId":"1646","endLine":27,"endColumn":60},{"ruleId":"1643","severity":1,"message":"1644","line":27,"column":87,"nodeType":"1645","messageId":"1646","endLine":27,"endColumn":89},{"ruleId":"1643","severity":1,"message":"1644","line":28,"column":26,"nodeType":"1645","messageId":"1646","endLine":28,"endColumn":28},{"ruleId":"1643","severity":1,"message":"1644","line":35,"column":68,"nodeType":"1645","messageId":"1646","endLine":35,"endColumn":70},{"ruleId":"1643","severity":1,"message":"1644","line":47,"column":22,"nodeType":"1645","messageId":"1646","endLine":47,"endColumn":24},{"ruleId":"1643","severity":1,"message":"1644","line":47,"column":47,"nodeType":"1645","messageId":"1646","endLine":47,"endColumn":49},{"ruleId":"1643","severity":1,"message":"1644","line":48,"column":26,"nodeType":"1645","messageId":"1646","endLine":48,"endColumn":28},{"ruleId":"1643","severity":1,"message":"1644","line":51,"column":31,"nodeType":"1645","messageId":"1646","endLine":51,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":54,"column":31,"nodeType":"1645","messageId":"1646","endLine":54,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":57,"column":31,"nodeType":"1645","messageId":"1646","endLine":57,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":69,"column":29,"nodeType":"1645","messageId":"1646","endLine":69,"endColumn":31},{"ruleId":"1643","severity":1,"message":"1644","line":69,"column":58,"nodeType":"1645","messageId":"1646","endLine":69,"endColumn":60},{"ruleId":"1643","severity":1,"message":"1644","line":69,"column":87,"nodeType":"1645","messageId":"1646","endLine":69,"endColumn":89},{"ruleId":"1643","severity":1,"message":"1644","line":70,"column":26,"nodeType":"1645","messageId":"1646","endLine":70,"endColumn":28},{"ruleId":"1643","severity":1,"message":"1644","line":73,"column":31,"nodeType":"1645","messageId":"1646","endLine":73,"endColumn":33},{"ruleId":"1643","severity":1,"message":"1644","line":90,"column":42,"nodeType":"1645","messageId":"1646","endLine":90,"endColumn":44},{"ruleId":"1643","severity":1,"message":"1644","line":128,"column":42,"nodeType":"1645","messageId":"1646","endLine":128,"endColumn":44},{"ruleId":"1680","severity":1,"message":"1954","line":151,"column":8,"nodeType":"1682","endLine":151,"endColumn":10,"suggestions":"1955"},{"ruleId":"1643","severity":1,"message":"1644","line":175,"column":61,"nodeType":"1645","messageId":"1646","endLine":175,"endColumn":63},{"ruleId":"1643","severity":1,"message":"1644","line":208,"column":42,"nodeType":"1645","messageId":"1646","endLine":208,"endColumn":44},{"ruleId":"1643","severity":1,"message":"1644","line":216,"column":60,"nodeType":"1645","messageId":"1646","endLine":216,"endColumn":62},{"ruleId":"1643","severity":1,"message":"1644","line":216,"column":83,"nodeType":"1645","messageId":"1646","endLine":216,"endColumn":85},{"ruleId":"1643","severity":1,"message":"1644","line":246,"column":68,"nodeType":"1645","messageId":"1646","endLine":246,"endColumn":70},{"ruleId":"1643","severity":1,"message":"1644","line":246,"column":91,"nodeType":"1645","messageId":"1646","endLine":246,"endColumn":93},{"ruleId":"1643","severity":1,"message":"1644","line":275,"column":41,"nodeType":"1645","messageId":"1646","endLine":275,"endColumn":43},{"ruleId":"1643","severity":1,"message":"1644","line":284,"column":65,"nodeType":"1645","messageId":"1646","endLine":284,"endColumn":67},{"ruleId":"1643","severity":1,"message":"1644","line":316,"column":72,"nodeType":"1645","messageId":"1646","endLine":316,"endColumn":74},{"ruleId":"1643","severity":1,"message":"1644","line":348,"column":65,"nodeType":"1645","messageId":"1646","endLine":348,"endColumn":67},{"ruleId":"1643","severity":1,"message":"1644","line":379,"column":72,"nodeType":"1645","messageId":"1646","endLine":379,"endColumn":74},{"ruleId":"1643","severity":1,"message":"1644","line":420,"column":43,"nodeType":"1645","messageId":"1646","endLine":420,"endColumn":45},{"ruleId":"1680","severity":1,"message":"1952","line":29,"column":8,"nodeType":"1682","endLine":29,"endColumn":10,"suggestions":"1956"},{"ruleId":"1643","severity":1,"message":"1644","line":79,"column":60,"nodeType":"1645","messageId":"1646","endLine":79,"endColumn":62},{"ruleId":"1643","severity":1,"message":"1644","line":120,"column":56,"nodeType":"1645","messageId":"1646","endLine":120,"endColumn":58},{"ruleId":"1643","severity":1,"message":"1644","line":150,"column":64,"nodeType":"1645","messageId":"1646","endLine":150,"endColumn":66},{"ruleId":"1643","severity":1,"message":"1644","line":1001,"column":32,"nodeType":"1645","messageId":"1646","endLine":1001,"endColumn":34},{"ruleId":"1680","severity":1,"message":"1952","line":30,"column":8,"nodeType":"1682","endLine":30,"endColumn":10,"suggestions":"1957"},{"ruleId":"1643","severity":1,"message":"1644","line":34,"column":68,"nodeType":"1645","messageId":"1646","endLine":34,"endColumn":70},{"ruleId":"1643","severity":1,"message":"1644","line":47,"column":22,"nodeType":"1645","messageId":"1646","endLine":47,"endColumn":24},{"ruleId":"1643","severity":1,"message":"1644","line":47,"column":58,"nodeType":"1645","messageId":"1646","endLine":47,"endColumn":60},{"ruleId":"1643","severity":1,"message":"1644","line":58,"column":29,"nodeType":"1645","messageId":"1646","endLine":58,"endColumn":31},{"ruleId":"1643","severity":1,"message":"1644","line":58,"column":65,"nodeType":"1645","messageId":"1646","endLine":58,"endColumn":67},{"ruleId":"1643","severity":1,"message":"1644","line":58,"column":100,"nodeType":"1645","messageId":"1646","endLine":58,"endColumn":102},{"ruleId":"1643","severity":1,"message":"1644","line":97,"column":60,"nodeType":"1645","messageId":"1646","endLine":97,"endColumn":62},{"ruleId":"1643","severity":1,"message":"1644","line":130,"column":40,"nodeType":"1645","messageId":"1646","endLine":130,"endColumn":42},{"ruleId":"1643","severity":1,"message":"1644","line":140,"column":60,"nodeType":"1645","messageId":"1646","endLine":140,"endColumn":62},{"ruleId":"1643","severity":1,"message":"1644","line":164,"column":60,"nodeType":"1645","messageId":"1646","endLine":164,"endColumn":62},{"ruleId":"1643","severity":1,"message":"1644","line":193,"column":68,"nodeType":"1645","messageId":"1646","endLine":193,"endColumn":70},{"ruleId":"1680","severity":1,"message":"1952","line":30,"column":8,"nodeType":"1682","endLine":30,"endColumn":10,"suggestions":"1958"},{"ruleId":"1643","severity":1,"message":"1644","line":79,"column":60,"nodeType":"1645","messageId":"1646","endLine":79,"endColumn":62},{"ruleId":"1643","severity":1,"message":"1644","line":119,"column":56,"nodeType":"1645","messageId":"1646","endLine":119,"endColumn":58},{"ruleId":"1643","severity":1,"message":"1644","line":148,"column":64,"nodeType":"1645","messageId":"1646","endLine":148,"endColumn":66},{"ruleId":"1680","severity":1,"message":"1952","line":30,"column":8,"nodeType":"1682","endLine":30,"endColumn":10,"suggestions":"1959"},{"ruleId":"1643","severity":1,"message":"1644","line":79,"column":60,"nodeType":"1645","messageId":"1646","endLine":79,"endColumn":62},{"ruleId":"1643","severity":1,"message":"1644","line":119,"column":56,"nodeType":"1645","messageId":"1646","endLine":119,"endColumn":58},{"ruleId":"1643","severity":1,"message":"1644","line":148,"column":64,"nodeType":"1645","messageId":"1646","endLine":148,"endColumn":66},{"ruleId":"1627","severity":1,"message":"1960","line":39,"column":11,"nodeType":"1629","messageId":"1630","endLine":39,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1961","line":1,"column":38,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":45},{"ruleId":"1627","severity":1,"message":"1962","line":22,"column":9,"nodeType":"1629","messageId":"1630","endLine":22,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1963","line":23,"column":9,"nodeType":"1629","messageId":"1630","endLine":23,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1964","line":27,"column":9,"nodeType":"1629","messageId":"1630","endLine":27,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1965","line":28,"column":9,"nodeType":"1629","messageId":"1630","endLine":28,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1966","line":71,"column":10,"nodeType":"1629","messageId":"1630","endLine":71,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1967","line":71,"column":24,"nodeType":"1629","messageId":"1630","endLine":71,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1968","line":89,"column":10,"nodeType":"1629","messageId":"1630","endLine":89,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1969","line":93,"column":10,"nodeType":"1629","messageId":"1630","endLine":93,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1970","line":199,"column":9,"nodeType":"1629","messageId":"1630","endLine":199,"endColumn":32},{"ruleId":"1680","severity":1,"message":"1971","line":381,"column":9,"nodeType":"1972","endLine":419,"endColumn":4,"suggestions":"1973"},{"ruleId":"1680","severity":1,"message":"1974","line":381,"column":9,"nodeType":"1972","endLine":419,"endColumn":4,"suggestions":"1975"},{"ruleId":"1680","severity":1,"message":"1976","line":381,"column":9,"nodeType":"1972","endLine":419,"endColumn":4,"suggestions":"1977"},{"ruleId":"1627","severity":1,"message":"1978","line":400,"column":24,"nodeType":"1629","messageId":"1630","endLine":400,"endColumn":27},{"ruleId":"1680","severity":1,"message":"1979","line":540,"column":6,"nodeType":"1682","endLine":540,"endColumn":115,"suggestions":"1980"},{"ruleId":"1627","severity":1,"message":"1981","line":566,"column":11,"nodeType":"1629","messageId":"1630","endLine":566,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1982","line":585,"column":11,"nodeType":"1629","messageId":"1630","endLine":585,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1983","line":822,"column":11,"nodeType":"1629","messageId":"1630","endLine":822,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1984","line":860,"column":11,"nodeType":"1629","messageId":"1630","endLine":860,"endColumn":30},{"ruleId":"1680","severity":1,"message":"1985","line":1006,"column":6,"nodeType":"1682","endLine":1006,"endColumn":27,"suggestions":"1986"},{"ruleId":"1680","severity":1,"message":"1987","line":1319,"column":6,"nodeType":"1682","endLine":1319,"endColumn":66,"suggestions":"1988"},"no-native-reassign",["1989"],"no-negated-in-lhs",["1990"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'LoginForm' is defined but never used.","'Card' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'InputNumber' is defined but never used.","'getAuth' is defined but never used.","'Option' is assigned a value but never used.","'theme' is assigned a value but never used.","'signupLoading' is assigned a value but never used.","'setSignupLoading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'LockOutlined' is defined but never used.","'showForgetPassword' is assigned a value but never used.","'onForgetPasswordClick' is assigned a value but never used.","'getAnalytics' is defined but never used.","'BellOutlined' is defined but never used.","'TeamOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'Masters' is defined but never used.","'StaffManage' is defined but never used.","'hasPermission' is defined but never used.","no-redeclare","'dashBoardNavTree' is already defined.","redeclared","'NavPanel' is defined but never used.","'direction' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'useEffect' is defined but never used.","'useState' is defined but never used.","'axiosInstance' is defined but never used.","'useForm' is defined but never used.","'form' is assigned a value but never used.","'loading' is assigned a value but never used.","'response' is assigned a value but never used.","no-dupe-keys","Duplicate key 'machineName'.","ObjectExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getSensor'. Either include it or remove the dependency array.","ArrayExpression",["1991"],"'CalendarIcon' is defined but never used.","'Link' is defined but never used.","'setData' is assigned a value but never used.","'id' is assigned a value but never used.","'deviceId' is assigned a value but never used.","'fileType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchSensorData'. Either include it or remove the dependency array.",["1992"],"'get' is defined but never used.","'customerData' is assigned a value but never used.","'setCustomerData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchMachineType'. Either include it or remove the dependency array.",["1993"],"'set' is defined but never used.","React Hook useEffect has missing dependencies: 'form' and 'machineName'. Either include them or remove the dependency array.",["1994"],"'headerLogo' is defined but never used.","'tableData' is assigned a value but never used.","'tableData2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchReportData'. Either include it or remove the dependency array.",["1995"],"'DashboardOutlined' is defined but never used.","'EllipsisOutlined' is defined but never used.","'EyeOutlined' is defined but never used.","'Avatar' is defined but never used.","'Form' is defined but never used.","'Radio' is defined but never used.","'Popconfirm' is defined but never used.","'AccountStatusIcon' is defined but never used.","'AssignDashboardIcon' is defined but never used.","'CsvIcon' is defined but never used.","'modalVisible' is assigned a value but never used.","'selectedDashboards' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","'handleSave' is assigned a value but never used.","'handleSelectChange' is assigned a value but never used.","'exportHandler' is assigned a value but never used.","'Option' is defined but never used.","React Hook useEffect has a missing dependency: 'getOperationArea'. Either include it or remove the dependency array.",["1996"],"React Hook useEffect has missing dependencies: 'getData' and 'id'. Either include them or remove the dependency array.",["1997"],"'moment' is defined but never used.","'Select' is defined but never used.","'EnvironmentOutlined' is defined but never used.","'UserSwitchOutlined' is defined but never used.","'API_BASE_URL' is defined but never used.","'mainStatus' is assigned a value but never used.","'setMainStatus' is assigned a value but never used.","'mainId' is assigned a value but never used.","'setMainId' is assigned a value but never used.","'deactiveModalOpen' is assigned a value but never used.","'queryParams' is assigned a value but never used.","'country' is assigned a value but never used.","'setCountry' is assigned a value but never used.","'DeactiveHandleOk' is assigned a value but never used.","'form3' is assigned a value but never used.","'handleOpenAlert' is assigned a value but never used.",["1998"],"'Modal' is defined but never used.","'Rate' is defined but never used.","'Switch' is defined but never used.","'Divider' is defined but never used.","'message' is defined but never used.","'Dropdown' is defined but never used.","'Table' is defined but never used.","'Space' is defined but never used.","'Tag' is defined but never used.","'EditOutlined' is defined but never used.","'MoreOutlined' is defined but never used.","'SearchOutlined' is defined but never used.","'DeleteOutlined' is defined but never used.","'TextArea' is defined but never used.","'AudioOutlined' is defined but never used.","'Input' is defined but never used.","'isModalOpen' is assigned a value but never used.","'setIsModalOpen' is assigned a value but never used.","'history' is assigned a value but never used.","'onSearch' is assigned a value but never used.","'Empty' is defined but never used.","'Icon2' is defined but never used.","'SampleImage' is defined but never used.","'Icon6' is defined but never used.","React Hook useEffect has missing dependencies: 'getComments' and 'getData'. Either include them or remove the dependency array.",["1999"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'FileOutlined' is defined but never used.","'FilterOutlined' is defined but never used.","'InboxOutlined' is defined but never used.","'Upload' is defined but never used.","'getMenu' is assigned a value but never used.","'handleSwitchChange' is assigned a value but never used.","'showModal' is assigned a value but never used.","'handleOk' is assigned a value but never used.","'operations' is assigned a value but never used.","'onDeleteData' is assigned a value but never used.","'Button' is defined but never used.","'listPlugin' is defined but never used.","'useHistory' is defined but never used.","'styles' is assigned a value but never used.","'getBase64' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["2000"],"'handleView' is assigned a value but never used.","'AssignDashboardfun' is assigned a value but never used.","'Image1' is defined but never used.","'LineChart' is defined but never used.","'BarChart' is defined but never used.","'lineUnCountSeries' is assigned a value but never used.","'lineUnCountCategories' is assigned a value but never used.","'uncountSeries' is assigned a value but never used.","'uncountCategories' is assigned a value but never used.","'lineAlertSeries' is assigned a value but never used.","'lineAlertCategories' is assigned a value but never used.","'alertSeries' is assigned a value but never used.","'alertCategories' is assigned a value but never used.","'lineVibrationSeries' is assigned a value but never used.","'lineVibrationCategories' is assigned a value but never used.","'vibrationSeries' is assigned a value but never used.","'vibrationCategories' is assigned a value but never used.","'lineBatterySeries' is assigned a value but never used.","'lineBatteryCategories' is assigned a value but never used.","'batterySer' is assigned a value but never used.","'batteryCategories' is assigned a value but never used.","'UploadFile' is defined but never used.","'Menu' is defined but never used.","'Text' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchParentPermissions', 'getData', and 'id'. Either include them or remove the dependency array.",["2001"],"'CloseCircleOutlined' is defined but never used.","'getAssignablePermissions' is defined but never used.","'Search' is assigned a value but never used.","'SwitchCard' is assigned a value but never used.","'data1' is assigned a value but never used.","'setData1' is assigned a value but never used.","'columns1' is assigned a value but never used.","'webAppChecked' is assigned a value but never used.","'orderManagement' is assigned a value but never used.","'setOrderManagement' is assigned a value but never used.","'inquiryManagement' is assigned a value but never used.","'setInquiryManagement' is assigned a value but never used.","'operationMaster' is assigned a value but never used.","'setOperationMaster' is assigned a value but never used.","'webAppPermissions' is assigned a value but never used.","'mobileAppChecked' is assigned a value but never used.","'mobileAppPermissions' is assigned a value but never used.","'onWebAppCheckAllChange' is assigned a value but never used.","'onMobileAppCheckAllChange' is assigned a value but never used.","'handleSearch' is assigned a value but never used.","'handleBackClick' is defined but never used.","'handleNext' is assigned a value but never used.","'handleFileSelect' is defined but never used.","'delUplFile' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAssignedJobSites', 'getData', 'getUnassignedJobSites', and 'id'. Either include them or remove the dependency array.",["2002"],"'FilterMenu' is assigned a value but never used.","'CCTVIcon' is defined but never used.","'MachineDetailIcon' is defined but never used.","'SolutionOutlined' is defined but never used.","'LoadingOutlined' is defined but never used.","'SmileOutlined' is defined but never used.","'Icon' is defined but never used.","'ReactApexChart' is defined but never used.","'options' is assigned a value but never used.","'dataSource1' is assigned a value but never used.","'machineId' is assigned a value but never used.","'serialNumber' is assigned a value but never used.","'machineModel' is assigned a value but never used.","'manufacturer' is assigned a value but never used.","'kwHp' is assigned a value but never used.","'frequency' is assigned a value but never used.","'rpm' is assigned a value but never used.","'AnalysisXData' is assigned a value but never used.","'AnalysisYData' is assigned a value but never used.","'AnalysisZData' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'fetchAlarmsData' is assigned a value but never used.","'fetchMachineHealthData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchData', 'fetchEventsData', and 'fetchReportsData'. Either include them or remove the dependency array.",["2003"],"'dataSource' is assigned a value but never used.","'handleFilterChange' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'location' is assigned a value but never used.","'csvData' is assigned a value but never used.",["2004"],"'onFinish' is assigned a value but never used.","'render' is defined but never used.","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["2005"],"'MachineIcon' is defined but never used.","'machineStatus' is assigned a value but never used.","'setMachineStatus' is assigned a value but never used.","'ConnectorResistIcon' is defined but never used.","'WhiteImageIcon' is defined but never used.","'AuxilleryChecksIcon' is defined but never used.","'data3' is assigned a value but never used.","'text' is assigned a value but never used.","'setModalName' is assigned a value but never used.","'selectedFiles1' is assigned a value but never used.","'setSelectedFiles1' is assigned a value but never used.","'setSelectedFiles' is assigned a value but never used.","'uploadButton' is assigned a value but never used.","'statorWindingGlobalRadioChange' is assigned a value but never used.","'auxilleryHeaterRadioChange' is assigned a value but never used.","'auxilleryThermistorRadioChange' is assigned a value but never used.","'auxilleryThermostateRadioChange' is assigned a value but never used.","'auxillerypt_100RadioChange' is assigned a value but never used.","'auxilleryBrakeRadioChange' is assigned a value but never used.","'auxilleryOtherRadioChange' is assigned a value but never used.","'statorInsulationRadioChange' is assigned a value but never used.","'rotarRasistRadioChange' is assigned a value but never used.","'rotarInsulationRadioChange' is assigned a value but never used.","'polarizationIndexRadioChange' is assigned a value but never used.","'surgeCompressionRadioChange' is assigned a value but never used.","'width' is assigned a value but never used.","'height' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'layer', 'layer'.","unsafeRefs",["2006"],"react/jsx-pascal-case","Imported JSX component EditPT_100 must be in PascalCase or SCREAMING_SNAKE_CASE","usePascalOrSnakeCase","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'handleDelete' is assigned a value but never used.","'TravelerRemarksReply' is defined but never used.","'TraverlerRemarksReplyContainer' is defined but never used.","'UploadOutlined' is defined but never used.","'Dragger' is defined but never used.","'BASE_URL' is assigned a value but never used.","'remarksArrayFinal' is assigned a value but never used.","'setRemarksArrayFinal' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handlePreview' is assigned a value but never used.","'Checkbox' is defined but never used.","'emptySlotsCount' is assigned a value but never used.","'MeterIcon' is defined but never used.","'Machine' is defined but never used.","'Collapse' is defined but never used.","'DatePicker' is defined but never used.","'useParams' is defined but never used.","'ReportSerchIcon' is defined but never used.","'UploadFileIcon' is defined but never used.","'UploadPhotos' is defined but never used.","Duplicate key 'U-V'.","Duplicate key 'V-W'.","Duplicate key 'U-W'.","'ViewDetailsIcon' is defined but never used.","'HistoryOutlined' is defined but never used.","'number' is assigned a value but never used.","'markersData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'end_date', 'handleClick', and 'start_date'. Either include them or remove the dependency array. If 'setChartData' needs the current value of 'start_date', you can also switch to useReducer instead of useState and read 'start_date' in the reducer.",["2007"],"'ProfileForCard' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'VibrationIcon' is defined but never used.","'QuotationIcon' is defined but never used.","'LocationForIcon' is defined but never used.","'retry' is defined but never used.","React Hook useEffect has missing dependencies: 'suffixData' and 'tempEditData'. Either include them or remove the dependency array.",["2008"],"React Hook useEffect has missing dependencies: 'getSuffixIndex', 'suffixData', and 'tempEditData'. Either include them or remove the dependency array.",["2009"],["2010"],["2011"],["2012"],["2013"],"'parts' is assigned a value but never used.","'useMemo' is defined but never used.","'spectrumChartRefY' is assigned a value but never used.","'spectrumChartRefZ' is assigned a value but never used.","'multiSpectrum3AxisRefY' is assigned a value but never used.","'multiSpectrum3AxisRefZ' is assigned a value but never used.","'lastZoomTime' is assigned a value but never used.","'setLastZoomTime' is assigned a value but never used.","'availableFiles' is assigned a value but never used.","'harmonicFrequencies' is assigned a value but never used.","'getCurrentMetricsValues' is assigned a value but never used.","The 'getTop4Peaks' function makes the dependencies of useCallback Hook (at line 659) change on every render. To fix this, wrap the definition of 'getTop4Peaks' in its own useCallback() Hook.","VariableDeclarator",["2014"],"The 'getTop4Peaks' function makes the dependencies of useCallback Hook (at line 788) change on every render. To fix this, wrap the definition of 'getTop4Peaks' in its own useCallback() Hook.",["2015"],"The 'getTop4Peaks' function makes the dependencies of useCallback Hook (at line 997) change on every render. To fix this, wrap the definition of 'getTop4Peaks' in its own useCallback() Hook.",["2016"],"'amp' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'rawData'. Either exclude it or remove the dependency array.",["2017"],"'plotLines' is assigned a value but never used.","'harmonicSeries' is assigned a value but never used.","'plotLines1Axis' is assigned a value but never used.","'harmonicSeries1Axis' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'endDate', 'fetchMachineData', 'fetchSensorData', 'fetchSensorsData', and 'startDate'. Either include them or remove the dependency array.",["2018"],"React Hook useEffect has missing dependencies: 'getCurrentChartData' and 'metricConfig'. Either include them or remove the dependency array.",["2019"],"no-global-assign","no-unsafe-negation",{"desc":"2020","fix":"2021"},{"desc":"2022","fix":"2023"},{"desc":"2024","fix":"2025"},{"desc":"2026","fix":"2027"},{"desc":"2028","fix":"2029"},{"desc":"2030","fix":"2031"},{"desc":"2032","fix":"2033"},{"desc":"2032","fix":"2034"},{"desc":"2035","fix":"2036"},{"desc":"2037","fix":"2038"},{"desc":"2039","fix":"2040"},{"desc":"2041","fix":"2042"},{"desc":"2043","fix":"2044"},{"desc":"2037","fix":"2045"},{"desc":"2046","fix":"2047"},{"desc":"2046","fix":"2048"},{"desc":"2049","fix":"2050"},{"desc":"2051","fix":"2052"},{"desc":"2053","fix":"2054"},{"desc":"2051","fix":"2055"},{"desc":"2051","fix":"2056"},{"desc":"2051","fix":"2057"},{"desc":"2051","fix":"2058"},{"desc":"2059","fix":"2060"},{"desc":"2059","fix":"2061"},{"desc":"2059","fix":"2062"},{"desc":"2063","fix":"2064"},{"desc":"2065","fix":"2066"},{"desc":"2067","fix":"2068"},"Update the dependencies array to be: [getSensor]",{"range":"2069","text":"2070"},"Update the dependencies array to be: [bin, fetchSensorData]",{"range":"2071","text":"2072"},"Update the dependencies array to be: [fetchMachineType]",{"range":"2073","text":"2074"},"Update the dependencies array to be: [form, machineName]",{"range":"2075","text":"2076"},"Update the dependencies array to be: [fetchReportData]",{"range":"2077","text":"2078"},"Update the dependencies array to be: [getOperationArea]",{"range":"2079","text":"2080"},"Update the dependencies array to be: [getData, id]",{"range":"2081","text":"2082"},{"range":"2083","text":"2082"},"Update the dependencies array to be: [getComments, getData]",{"range":"2084","text":"2085"},"Update the dependencies array to be: [getData]",{"range":"2086","text":"2087"},"Update the dependencies array to be: [fetchParentPermissions, getData, id]",{"range":"2088","text":"2089"},"Update the dependencies array to be: [getAssignedJobSites, getData, getUnassignedJobSites, id]",{"range":"2090","text":"2091"},"Update the dependencies array to be: [fetchData, fetchEventsData, fetchReportsData]",{"range":"2092","text":"2093"},{"range":"2094","text":"2087"},"Update the dependencies array to be: [fetchData]",{"range":"2095","text":"2096"},{"range":"2097","text":"2096"},"Update the dependencies array to be: [series, dateSelector, handleClick, start_date, end_date]",{"range":"2098","text":"2099"},"Update the dependencies array to be: [suffixData, tempEditData]",{"range":"2100","text":"2101"},"Update the dependencies array to be: [getSuffixIndex, suffixData, tempEditData]",{"range":"2102","text":"2103"},{"range":"2104","text":"2101"},{"range":"2105","text":"2101"},{"range":"2106","text":"2101"},{"range":"2107","text":"2101"},"Wrap the definition of 'getTop4Peaks' in its own useCallback() Hook.",{"range":"2108","text":"2109"},{"range":"2110","text":"2109"},{"range":"2111","text":"2109"},"Update the dependencies array to be: [convertToHighchartsData, fetchAllSpectrumData, getFileAvailabilityStatus, getFileAvailabilityColor]",{"range":"2112","text":"2113"},"Update the dependencies array to be: [endDate, fetchMachineData, fetchSensorData, fetchSensorsData, machineId, sensorId, startDate]",{"range":"2114","text":"2115"},"Update the dependencies array to be: [selectedMetricType, selectedAxis, rawData, createMainChart, getCurrentChartData, metricConfig]",{"range":"2116","text":"2117"},[6185,6187],"[getSensor]",[1250,1255],"[bin, fetchSensorData]",[6499,6501],"[fetchMachineType]",[3523,3525],"[form, machineName]",[2446,2448],"[fetchReportData]",[5866,5868],"[getOperationArea]",[2387,2389],"[getData, id]",[11270,11272],[3477,3479],"[getComments, getData]",[2325,2327],"[getData]",[22057,22059],"[fetchParentPermissions, getData, id]",[22076,22078],"[getAssignedJobSites, getData, getUnassignedJobSites, id]",[20931,20933],"[fetchData, fetchEventsData, fetchReportsData]",[2316,2318],[3855,3857],"[fetchData]",[117592,117594],[9555,9577],"[series, dateSelector, handleClick, start_date, end_date]",[1218,1220],"[suffixData, tempEditData]",[5803,5805],"[getSuffixIndex, suffixData, tempEditData]",[1109,1111],[1217,1219],[1241,1243],[1231,1233],[14997,16401],"useCallback((spectrumData, machineRpm) => {\r\n    if (!machineRpm) {\r\n      return [];\r\n    }\r\n    \r\n    const baseFreq = parseFloat(machineRpm) / 60; // 1X frequency (RPM/60)\r\n    const colors = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#ff8800\"];\r\n    \r\n    // Define harmonic multipliers we want to find\r\n    const harmonicMultipliers = [1, 2, 3.3, 4.2];\r\n    \r\n    const harmonics = harmonicMultipliers.map((multiplier, index) => {\r\n      const targetFreq = baseFreq * multiplier;\r\n      let amplitude = 0;\r\n      \r\n      // Find the amplitude at this harmonic frequency from spectrum data\r\n      if (spectrumData && spectrumData.length > 0) {\r\n        // Find the closest frequency point in the spectrum data\r\n        const closestPoint = spectrumData.reduce((closest, point) => {\r\n          const [freq, amp] = point;\r\n          const currentDistance = Math.abs(freq - targetFreq);\r\n          const closestDistance = Math.abs(closest[0] - targetFreq);\r\n          return currentDistance < closestDistance ? point : closest;\r\n        });\r\n        amplitude = closestPoint[1];\r\n      }\r\n      \r\n      return {\r\n        frequency: targetFreq,\r\n        amplitude: amplitude,\r\n        multiplier: multiplier === 1 ? \"1X\" : \r\n                   multiplier === 2 ? \"2X\" : \r\n                   multiplier === 3.3 ? \"3.3X\" : \"4.2X\",\r\n        color: colors[index] || \"#666666\"\r\n      };\r\n    });\r\n    \r\n    return harmonics;\r\n  })",[14997,16401],[14997,16401],[19706,19815],"[convertToHighchartsData, fetchAllSpectrumData, getFileAvailabilityStatus, getFileAvailabilityColor]",[33924,33945],"[endDate, fetchMachineData, fetchSensorData, fetchSensorsData, machineId, sensorId, startDate]",[44219,44279],"[selectedMetricType, selectedAxis, rawData, createMainChart, getCurrentChartData, metricConfig]"]